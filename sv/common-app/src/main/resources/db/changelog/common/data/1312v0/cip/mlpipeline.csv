"created_by","created_date","deleted","description","job_id","json_content","lastmodifiedby","alias","lastmodifieddate","name","organization","type","version"
"admin","2021-10-22 05:43:44.374000","false","NULL","NULL","{\"elements\":[{\"id\":\"UEeVc\",\"alias\":\"Dataset  Extractor\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"name\":\"11Y33XEBBN\",\"alias\":\"cleantext\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-09 15:55:40\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"e07111d6404e23b45cc04e28571f1522cbae5d4e1bdb186f5e27f51c1c6a2210\",\"activetime\":\"2021-11-09 15:55:40\",\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NUMBER, clean_text AS shortdescription , group_by_field FROM leo1311_tickets_enriched WHERE clean_text <> '' AND   clean_text IS NOT NULL\",\"Cacheable\":\"\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"datasetType\":\"MYSQL\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"40\",\"position_y\":\"30\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"ffQic\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]},{\"id\":\"HYOWn\",\"alias\":\"Dataset  Loader\",\"name\":\"Dataset  Loader\",\"classname\":\"DatasetLoaderConfig\",\"category\":\"LoaderConfig\",\"attributes\":{\"dataset\":{\"name\":\"CleanText\",\"alias\":\"Clean text\",\"description\":\"Clean Text\",\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select number, clean_text, group_by_field, last_updated from @projectname_tickets_enriched\",\"Cacheable\":\"\",\"isStreaming\":\"false\",\"writeMode\":\"update\",\"params\":\"{}\",\"tableName\":\"@projectname_tickets_enriched\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"datasetType\":\"MYSQL\",\"groups\":\"\",\"backingDataset\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-09 15:55:40\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"e07111d6404e23b45cc04e28571f1522cbae5d4e1bdb186f5e27f51c1c6a2210\",\"activetime\":\"2021-11-09 15:55:40\",\"category\":\"SQL\"}},\"applySchema\":false},\"position_x\":\"780\",\"position_y\":\"200\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"fPAbp\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"applySchema\":\"checkbox\"},\"context\":[{\"script\":[\"import logging\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"from nltk.stem import WordNetLemmatizer\\r\",\"from datetime import datetime\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"      \\r\",\"        def lemmatize(tokens):\\r\",\"            wordnet_lemmatizer = WordNetLemmatizer()\\r\",\"            lemmatizedTokens = []\\r\",\"            for word in tokens:\\r\",\"                lemmatizedTokens.append(wordnet_lemmatizer.lemmatize(word, pos='v'))\\r\",\"            return ' '.join(lemmatizedTokens)\\r\",\"        \\r\",\"        udfLemmetize = udf(lemmatize, StringType())\\r\",\"        dataset = dataset.withColumn('clean_text',udfLemmetize('clean_tokens'))\\r\",\"        dataset = dataset.select('number','clean_text', 'group_by_field')\\r\",\"        dataset = dataset.withColumn('last_updated',lit(datetime.now()))\\r\",\"        dataset=dataset.repartition(300)\\r\",\"\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"lemmatizedText\"},{\"inputCol\":\"tokens\",\"outputCol\":\"clean_tokens\",\"stopWords\":\"pt\"},{\"inputCol\":\"shortdescription\",\"outputCol\":\"tokens\"},{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import re\\r\",\"\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        \\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = ''\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += ' '\\r\",\"            alphanumeric = re.sub(' +', ' ', alphanumeric)\\r\",\"            finalTokens = [t for t in alphanumeric.split(' ') if not t.isnumeric()]\\r\",\"            return ' '.join(finalTokens)\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset = dataset.withColumn('cleanText',udfAlpaNum('shortdescription'))\\r\",\"        dataset = dataset.select('number','shortdescription','group_by_field', 'cleanText' )\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"number,shortdescription,cleanText,group_by_field\"},{\"dataset\":{\"name\":\"11Y33XEBBN\",\"alias\":\"cleantext\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-09 15:55:40\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"e07111d6404e23b45cc04e28571f1522cbae5d4e1bdb186f5e27f51c1c6a2210\",\"activetime\":\"2021-11-09 15:55:40\",\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NUMBER, clean_text AS shortdescription , group_by_field FROM leo1311_tickets_enriched WHERE clean_text <> '' AND   clean_text IS NOT NULL\",\"Cacheable\":\"\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"datasetType\":\"MYSQL\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"ffQic\",\"alias\":\"Clean Text\",\"name\":\"Pre  Processing  Script\",\"classname\":\"PreProcessingScriptConfig\",\"category\":\"BaseConfig\",\"attributes\":{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import re\\r\",\"\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        \\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = ''\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += ' '\\r\",\"            alphanumeric = re.sub(' +', ' ', alphanumeric)\\r\",\"            finalTokens = [t for t in alphanumeric.split(' ') if not t.isnumeric()]\\r\",\"            return ' '.join(finalTokens)\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset = dataset.withColumn('cleanText',udfAlpaNum('shortdescription'))\\r\",\"        dataset = dataset.select('number','shortdescription','group_by_field', 'cleanText' )\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"number,shortdescription,cleanText,group_by_field\"},\"position_x\":\"260\",\"position_y\":\"30\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"dataset1\",\"position\":\"LeftMiddle\",\"elementId\":\"UEeVc\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"cMPGE\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"dataset1\",\"dataset2\",\"dataset3\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"params\":\"textarea\",\"script\":\"textarea\",\"outputCols\":\"text\"},\"context\":[{\"dataset\":{\"name\":\"11Y33XEBBN\",\"alias\":\"cleantext\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-09 15:55:40\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"e07111d6404e23b45cc04e28571f1522cbae5d4e1bdb186f5e27f51c1c6a2210\",\"activetime\":\"2021-11-09 15:55:40\",\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NUMBER, clean_text AS shortdescription , group_by_field FROM leo1311_tickets_enriched WHERE clean_text <> '' AND   clean_text IS NOT NULL\",\"Cacheable\":\"\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"datasetType\":\"MYSQL\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"cMPGE\",\"alias\":\"Tokenizer\",\"name\":\"Tokenizer\",\"classname\":\"TokenizerTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"inputCol\":\"shortdescription\",\"outputCol\":\"tokens\"},\"position_x\":\"520\",\"position_y\":\"30\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"ffQic\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"IgGTx\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"inputCol\":\"text\",\"outputCol\":\"text\"},\"context\":[{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import re\\r\",\"\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        \\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = ''\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += ' '\\r\",\"            alphanumeric = re.sub(' +', ' ', alphanumeric)\\r\",\"            finalTokens = [t for t in alphanumeric.split(' ') if not t.isnumeric()]\\r\",\"            return ' '.join(finalTokens)\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset = dataset.withColumn('cleanText',udfAlpaNum('shortdescription'))\\r\",\"        dataset = dataset.select('number','shortdescription','group_by_field', 'cleanText' )\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"number,shortdescription,cleanText,group_by_field\"},{\"dataset\":{\"name\":\"11Y33XEBBN\",\"alias\":\"cleantext\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-09 15:55:40\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"e07111d6404e23b45cc04e28571f1522cbae5d4e1bdb186f5e27f51c1c6a2210\",\"activetime\":\"2021-11-09 15:55:40\",\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NUMBER, clean_text AS shortdescription , group_by_field FROM leo1311_tickets_enriched WHERE clean_text <> '' AND   clean_text IS NOT NULL\",\"Cacheable\":\"\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"datasetType\":\"MYSQL\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"IgGTx\",\"alias\":\"Stop  Words  Remover\",\"name\":\"Stop  Words  Remover\",\"classname\":\"StopWordsRemoverTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"inputCol\":\"tokens\",\"outputCol\":\"clean_tokens\",\"stopWords\":\"pt\"},\"position_x\":\"760\",\"position_y\":\"30\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"cMPGE\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"fPAbp\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"inputCol\":\"text\",\"outputCol\":\"text\",\"stopWords\":\"text\"},\"context\":[{\"inputCol\":\"shortdescription\",\"outputCol\":\"tokens\"},{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import re\\r\",\"\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        \\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = ''\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += ' '\\r\",\"            alphanumeric = re.sub(' +', ' ', alphanumeric)\\r\",\"            finalTokens = [t for t in alphanumeric.split(' ') if not t.isnumeric()]\\r\",\"            return ' '.join(finalTokens)\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset = dataset.withColumn('cleanText',udfAlpaNum('shortdescription'))\\r\",\"        dataset = dataset.select('number','shortdescription','group_by_field', 'cleanText' )\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"number,shortdescription,cleanText,group_by_field\"},{\"dataset\":{\"name\":\"11Y33XEBBN\",\"alias\":\"cleantext\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-09 15:55:40\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"e07111d6404e23b45cc04e28571f1522cbae5d4e1bdb186f5e27f51c1c6a2210\",\"activetime\":\"2021-11-09 15:55:40\",\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NUMBER, clean_text AS shortdescription , group_by_field FROM leo1311_tickets_enriched WHERE clean_text <> '' AND   clean_text IS NOT NULL\",\"Cacheable\":\"\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"datasetType\":\"MYSQL\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"fPAbp\",\"alias\":\"Lemmetizer\",\"name\":\"Python  Script  Transformer\",\"classname\":\"PythonScriptTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"script\":[\"import logging\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"from nltk.stem import WordNetLemmatizer\\r\",\"from datetime import datetime\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"      \\r\",\"        def lemmatize(tokens):\\r\",\"            wordnet_lemmatizer = WordNetLemmatizer()\\r\",\"            lemmatizedTokens = []\\r\",\"            for word in tokens:\\r\",\"                lemmatizedTokens.append(wordnet_lemmatizer.lemmatize(word, pos='v'))\\r\",\"            return ' '.join(lemmatizedTokens)\\r\",\"        \\r\",\"        udfLemmetize = udf(lemmatize, StringType())\\r\",\"        dataset = dataset.withColumn('clean_text',udfLemmetize('clean_tokens'))\\r\",\"        dataset = dataset.select('number','clean_text', 'group_by_field')\\r\",\"        dataset = dataset.withColumn('last_updated',lit(datetime.now()))\\r\",\"        dataset=dataset.repartition(300)\\r\",\"\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"lemmatizedText\"},\"position_x\":\"70\",\"position_y\":\"200\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"IgGTx\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"HYOWn\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"script\":\"textarea\",\"outputCols\":\"text\"},\"context\":[{\"inputCol\":\"tokens\",\"outputCol\":\"clean_tokens\",\"stopWords\":\"pt\"},{\"inputCol\":\"shortdescription\",\"outputCol\":\"tokens\"},{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import re\\r\",\"\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        \\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = ''\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += ' '\\r\",\"            alphanumeric = re.sub(' +', ' ', alphanumeric)\\r\",\"            finalTokens = [t for t in alphanumeric.split(' ') if not t.isnumeric()]\\r\",\"            return ' '.join(finalTokens)\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset = dataset.withColumn('cleanText',udfAlpaNum('shortdescription'))\\r\",\"        dataset = dataset.select('number','shortdescription','group_by_field', 'cleanText' )\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"number,shortdescription,cleanText,group_by_field\"},{\"dataset\":{\"name\":\"11Y33XEBBN\",\"alias\":\"cleantext\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-09 15:55:40\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"e07111d6404e23b45cc04e28571f1522cbae5d4e1bdb186f5e27f51c1c6a2210\",\"activetime\":\"2021-11-09 15:55:40\",\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NUMBER, clean_text AS shortdescription , group_by_field FROM leo1311_tickets_enriched WHERE clean_text <> '' AND   clean_text IS NOT NULL\",\"Cacheable\":\"\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"datasetType\":\"MYSQL\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]}]}","admin","Stop word remover","2021-10-25 10:34:06","LEOSWHYY53518","leo1311","DragAndDrop","NULL"
"admin","2021-10-13 14:44:14.729000","false","NULL","NULL","{\"elements\":[{\"id\":\"ZGDHt\",\"alias\":\"clean text\",\"name\":\"Pre  Processing  Script\",\"classname\":\"PreProcessingScriptConfig\",\"category\":\"BaseConfig\",\"attributes\":{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        \\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = ''\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += ' '\\r\",\"            return alphanumeric\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset = dataset.withColumn('cleanText',udfAlpaNum('shortdescription'))\\r\",\"        dataset = dataset.select('number','shortDescription', 'cleanText' )\\r\",\"        logger.info(dataset.show())\\r\",\"        return dataset  \\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"number,shortDescription,cleanText\"},\"position_x\":\"280\",\"position_y\":\"40\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"lNPKQ\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"target\",\"endpoint\":\"dataset1\",\"position\":\"LeftMiddle\",\"elementId\":\"cCkPo\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"dataset1\",\"dataset2\",\"dataset3\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"params\":\"textarea\",\"script\":\"textarea\",\"outputCols\":\"text\"},\"context\":[{\"dataset\":{\"alias\":\"cleantext\",\"name\":\"YS2GY6GCOS\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-09 15:55:40\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"e07111d6404e23b45cc04e28571f1522cbae5d4e1bdb186f5e27f51c1c6a2210\",\"activetime\":\"2021-11-09 15:55:40\",\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NUMBER, clean_text AS shortdescription , group_by_field FROM leo1311_tickets_enriched WHERE clean_text <> '' AND   clean_text IS NOT NULL \",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_tickets_enriched\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"puTtA\",\"alias\":\"Lemmetizer\",\"name\":\"Python  Script  Transformer\",\"classname\":\"PythonScriptTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"script\":[\"import logging\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"from nltk.stem import WordNetLemmatizer\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"      \\r\",\"        def lemmatize(tokens):\\r\",\"            wordnet_lemmatizer = WordNetLemmatizer()\\r\",\"            lemmatizedTokens = []\\r\",\"            for word in tokens:\\r\",\"                lemmatizedTokens.append(wordnet_lemmatizer.lemmatize(word, pos='v'))\\r\",\"            return lemmatizedTokens\\r\",\"        \\r\",\"        udfLemmetize = udf(lemmatize, ArrayType(StringType()))\\r\",\"        dataset = dataset.withColumn('lemmatizedTokens',udfLemmetize('clean_tokens'))\\r\",\"\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"lemmatizedTokens\"},\"position_x\":\"80\",\"position_y\":\"160\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"VHGys\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"RhTEg\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"script\":\"textarea\",\"outputCols\":\"text\"},\"context\":[{\"inputCol\":\"tokens\",\"outputCol\":\"clean_tokens\",\"stopWords\":\"test\"},{\"inputCol\":\"cleanText\",\"outputCol\":\"tokens\"},{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        \\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = ''\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += ' '\\r\",\"            return alphanumeric\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset = dataset.withColumn('cleanText',udfAlpaNum('shortdescription'))\\r\",\"        dataset = dataset.select('number','shortDescription', 'cleanText' )\\r\",\"        logger.info(dataset.show())\\r\",\"        return dataset  \\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"number,shortDescription,cleanText\"},{\"dataset\":{\"alias\":\"cleantext\",\"name\":\"YS2GY6GCOS\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-09 15:55:40\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"e07111d6404e23b45cc04e28571f1522cbae5d4e1bdb186f5e27f51c1c6a2210\",\"activetime\":\"2021-11-09 15:55:40\",\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NUMBER, clean_text AS shortdescription , group_by_field FROM leo1311_tickets_enriched WHERE clean_text <> '' AND   clean_text IS NOT NULL \",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_tickets_enriched\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"lNPKQ\",\"alias\":\"Tokenizer\",\"name\":\"Tokenizer\",\"classname\":\"TokenizerTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"inputCol\":\"cleanText\",\"outputCol\":\"tokens\"},\"position_x\":\"530\",\"position_y\":\"40\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"ZGDHt\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"RhTEg\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"inputCol\":\"text\",\"outputCol\":\"text\"},\"context\":[{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        \\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = ''\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += ' '\\r\",\"            return alphanumeric\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset = dataset.withColumn('cleanText',udfAlpaNum('shortdescription'))\\r\",\"        dataset = dataset.select('number','shortDescription', 'cleanText' )\\r\",\"        logger.info(dataset.show())\\r\",\"        return dataset  \\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"number,shortDescription,cleanText\"},{\"dataset\":{\"alias\":\"cleantext\",\"name\":\"YS2GY6GCOS\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-09 15:55:40\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"e07111d6404e23b45cc04e28571f1522cbae5d4e1bdb186f5e27f51c1c6a2210\",\"activetime\":\"2021-11-09 15:55:40\",\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NUMBER, clean_text AS shortdescription , group_by_field FROM leo1311_tickets_enriched WHERE clean_text <> '' AND   clean_text IS NOT NULL \",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_tickets_enriched\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"RhTEg\",\"alias\":\"Stop  Words  Remover\",\"name\":\"Stop  Words  Remover\",\"classname\":\"StopWordsRemoverTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"inputCol\":\"tokens\",\"outputCol\":\"clean_tokens\",\"stopWords\":\"test\"},\"position_x\":\"790\",\"position_y\":\"40\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"lNPKQ\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"puTtA\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"inputCol\":\"text\",\"outputCol\":\"text\",\"stopWords\":\"text\"},\"context\":[{\"inputCol\":\"cleanText\",\"outputCol\":\"tokens\"},{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        \\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = ''\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += ' '\\r\",\"            return alphanumeric\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset = dataset.withColumn('cleanText',udfAlpaNum('shortdescription'))\\r\",\"        dataset = dataset.select('number','shortDescription', 'cleanText' )\\r\",\"        logger.info(dataset.show())\\r\",\"        return dataset  \\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"number,shortDescription,cleanText\"},{\"dataset\":{\"alias\":\"cleantext\",\"name\":\"YS2GY6GCOS\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-09 15:55:40\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"e07111d6404e23b45cc04e28571f1522cbae5d4e1bdb186f5e27f51c1c6a2210\",\"activetime\":\"2021-11-09 15:55:40\",\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NUMBER, clean_text AS shortdescription , group_by_field FROM leo1311_tickets_enriched WHERE clean_text <> '' AND   clean_text IS NOT NULL \",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_tickets_enriched\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"KWSQJ\",\"alias\":\"Post  Processing  Script\",\"name\":\"Post  Processing  Script\",\"classname\":\"PostProcessingScriptConfig\",\"category\":\"BaseConfig\",\"attributes\":{\"params\":\"\",\"script\":[\"import logging\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self,model, dataset):\\r\",\"        dataset = dataset.select('filteredTokens','number')\\r\",\"        dataset = dataset.withColumn('word', explode('filteredTokens'))\\r\",\"        dataset = dataset.distinct()\\r\",\"        dataset = dataset.groupby('word').agg(collect_list('number').alias('numberList'))\\r\",\"        dataset = dataset.withColumn('frequency',  size('numberList'))\\r\",\"        dataset = dataset.withColumn('numberList',  concat_ws(',',col('numberList')))\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},\"position_x\":\"570\",\"position_y\":\"160\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"nQStO\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"VHGys\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\",\"out2\"],\"requiredJars\":[],\"formats\":{\"params\":\"textarea\",\"script\":\"textarea\"},\"context\":[{\"script\":[\"import logging\\r\",\"from pyspark.sql.types import *\\r\",\"from pyspark.sql.functions import *\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        #remove numbers\\r\",\"        logging.info('lemmatizedTokens')\\r\",\"        def removeNumbers(tokens):\\r\",\"            filteredTokens = []\\r\",\"            for t in tokens:\\r\",\"               if not t.isdigit() and len(t)>2:\\r\",\"                   filteredTokens.append(t)\\r\",\"            return filteredTokens\\r\",\"            \\r\",\"        udfremoveNumber = udf(removeNumbers,ArrayType(StringType()))\\r\",\"        dataset = dataset.withColumn('filteredTokens', udfremoveNumber('lemmatizedTokens'))\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"filteredTokens\"},{\"script\":[\"import logging\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"from nltk.stem import WordNetLemmatizer\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"      \\r\",\"        def lemmatize(tokens):\\r\",\"            wordnet_lemmatizer = WordNetLemmatizer()\\r\",\"            lemmatizedTokens = []\\r\",\"            for word in tokens:\\r\",\"                lemmatizedTokens.append(wordnet_lemmatizer.lemmatize(word, pos='v'))\\r\",\"            return lemmatizedTokens\\r\",\"        \\r\",\"        udfLemmetize = udf(lemmatize, ArrayType(StringType()))\\r\",\"        dataset = dataset.withColumn('lemmatizedTokens',udfLemmetize('clean_tokens'))\\r\",\"\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"lemmatizedTokens\"},{\"inputCol\":\"tokens\",\"outputCol\":\"clean_tokens\",\"stopWords\":\"test\"},{\"inputCol\":\"cleanText\",\"outputCol\":\"tokens\"},{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        \\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = ''\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += ' '\\r\",\"            return alphanumeric\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset = dataset.withColumn('cleanText',udfAlpaNum('shortdescription'))\\r\",\"        dataset = dataset.select('number','shortDescription', 'cleanText' )\\r\",\"        logger.info(dataset.show())\\r\",\"        return dataset  \\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"number,shortDescription,cleanText\"},{\"dataset\":{\"alias\":\"cleantext\",\"name\":\"YS2GY6GCOS\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-09 15:55:40\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"e07111d6404e23b45cc04e28571f1522cbae5d4e1bdb186f5e27f51c1c6a2210\",\"activetime\":\"2021-11-09 15:55:40\",\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NUMBER, clean_text AS shortdescription , group_by_field FROM leo1311_tickets_enriched WHERE clean_text <> '' AND   clean_text IS NOT NULL \",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_tickets_enriched\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"VHGys\",\"alias\":\"Filter tokens\",\"name\":\"Python  Script  Transformer\",\"classname\":\"PythonScriptTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"script\":[\"import logging\\r\",\"from pyspark.sql.types import *\\r\",\"from pyspark.sql.functions import *\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        #remove numbers\\r\",\"        logging.info('lemmatizedTokens')\\r\",\"        def removeNumbers(tokens):\\r\",\"            filteredTokens = []\\r\",\"            for t in tokens:\\r\",\"               if not t.isdigit() and len(t)>2:\\r\",\"                   filteredTokens.append(t)\\r\",\"            return filteredTokens\\r\",\"            \\r\",\"        udfremoveNumber = udf(removeNumbers,ArrayType(StringType()))\\r\",\"        dataset = dataset.withColumn('filteredTokens', udfremoveNumber('lemmatizedTokens'))\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"filteredTokens\"},\"position_x\":\"320\",\"position_y\":\"170\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"puTtA\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"KWSQJ\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"script\":\"textarea\",\"outputCols\":\"text\"},\"context\":[{\"script\":[\"import logging\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"from nltk.stem import WordNetLemmatizer\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"      \\r\",\"        def lemmatize(tokens):\\r\",\"            wordnet_lemmatizer = WordNetLemmatizer()\\r\",\"            lemmatizedTokens = []\\r\",\"            for word in tokens:\\r\",\"                lemmatizedTokens.append(wordnet_lemmatizer.lemmatize(word, pos='v'))\\r\",\"            return lemmatizedTokens\\r\",\"        \\r\",\"        udfLemmetize = udf(lemmatize, ArrayType(StringType()))\\r\",\"        dataset = dataset.withColumn('lemmatizedTokens',udfLemmetize('clean_tokens'))\\r\",\"\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"lemmatizedTokens\"},{\"inputCol\":\"tokens\",\"outputCol\":\"clean_tokens\",\"stopWords\":\"test\"},{\"inputCol\":\"cleanText\",\"outputCol\":\"tokens\"},{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        \\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = ''\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += ' '\\r\",\"            return alphanumeric\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset = dataset.withColumn('cleanText',udfAlpaNum('shortdescription'))\\r\",\"        dataset = dataset.select('number','shortDescription', 'cleanText' )\\r\",\"        logger.info(dataset.show())\\r\",\"        return dataset  \\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"number,shortDescription,cleanText\"},{\"dataset\":{\"alias\":\"cleantext\",\"name\":\"YS2GY6GCOS\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-09 15:55:40\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"e07111d6404e23b45cc04e28571f1522cbae5d4e1bdb186f5e27f51c1c6a2210\",\"activetime\":\"2021-11-09 15:55:40\",\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NUMBER, clean_text AS shortdescription , group_by_field FROM leo1311_tickets_enriched WHERE clean_text <> '' AND   clean_text IS NOT NULL \",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_tickets_enriched\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"cCkPo\",\"alias\":\"Dataset  Extractor\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"alias\":\"cleantext\",\"name\":\"YS2GY6GCOS\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-09 15:55:40\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"e07111d6404e23b45cc04e28571f1522cbae5d4e1bdb186f5e27f51c1c6a2210\",\"activetime\":\"2021-11-09 15:55:40\",\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NUMBER, clean_text AS shortdescription , group_by_field FROM leo1311_tickets_enriched WHERE clean_text <> '' AND   clean_text IS NOT NULL \",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_tickets_enriched\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"50\",\"position_y\":\"30\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"ZGDHt\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]},{\"id\":\"nQStO\",\"alias\":\"Dataset  Loader\",\"name\":\"Dataset  Loader\",\"classname\":\"DatasetLoaderConfig\",\"category\":\"LoaderConfig\",\"attributes\":{\"dataset\":{\"alias\":\"InvertedIndex\",\"name\":\"HL1LW5FMSK\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-09 15:55:40\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"e07111d6404e23b45cc04e28571f1522cbae5d4e1bdb186f5e27f51c1c6a2210\",\"activetime\":\"2021-11-09 15:55:40\",\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from @projectname_invertedindex\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_invertedindex\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"applySchema\":false},\"position_x\":\"790\",\"position_y\":\"160\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"KWSQJ\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"applySchema\":\"checkbox\"},\"context\":[{\"params\":\"\",\"script\":[\"import logging\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self,model, dataset):\\r\",\"        dataset = dataset.select('filteredTokens','number')\\r\",\"        dataset = dataset.withColumn('word', explode('filteredTokens'))\\r\",\"        dataset = dataset.distinct()\\r\",\"        dataset = dataset.groupby('word').agg(collect_list('number').alias('numberList'))\\r\",\"        dataset = dataset.withColumn('frequency',  size('numberList'))\\r\",\"        dataset = dataset.withColumn('numberList',  concat_ws(',',col('numberList')))\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"script\":[\"import logging\\r\",\"from pyspark.sql.types import *\\r\",\"from pyspark.sql.functions import *\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        #remove numbers\\r\",\"        logging.info('lemmatizedTokens')\\r\",\"        def removeNumbers(tokens):\\r\",\"            filteredTokens = []\\r\",\"            for t in tokens:\\r\",\"               if not t.isdigit() and len(t)>2:\\r\",\"                   filteredTokens.append(t)\\r\",\"            return filteredTokens\\r\",\"            \\r\",\"        udfremoveNumber = udf(removeNumbers,ArrayType(StringType()))\\r\",\"        dataset = dataset.withColumn('filteredTokens', udfremoveNumber('lemmatizedTokens'))\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"filteredTokens\"},{\"script\":[\"import logging\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"from nltk.stem import WordNetLemmatizer\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"      \\r\",\"        def lemmatize(tokens):\\r\",\"            wordnet_lemmatizer = WordNetLemmatizer()\\r\",\"            lemmatizedTokens = []\\r\",\"            for word in tokens:\\r\",\"                lemmatizedTokens.append(wordnet_lemmatizer.lemmatize(word, pos='v'))\\r\",\"            return lemmatizedTokens\\r\",\"        \\r\",\"        udfLemmetize = udf(lemmatize, ArrayType(StringType()))\\r\",\"        dataset = dataset.withColumn('lemmatizedTokens',udfLemmetize('clean_tokens'))\\r\",\"\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"lemmatizedTokens\"},{\"inputCol\":\"tokens\",\"outputCol\":\"clean_tokens\",\"stopWords\":\"test\"},{\"inputCol\":\"cleanText\",\"outputCol\":\"tokens\"},{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        \\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = ''\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += ' '\\r\",\"            return alphanumeric\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset = dataset.withColumn('cleanText',udfAlpaNum('shortdescription'))\\r\",\"        dataset = dataset.select('number','shortDescription', 'cleanText' )\\r\",\"        logger.info(dataset.show())\\r\",\"        return dataset  \\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"number,shortDescription,cleanText\"},{\"dataset\":{\"alias\":\"cleantext\",\"name\":\"YS2GY6GCOS\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-09 15:55:40\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"e07111d6404e23b45cc04e28571f1522cbae5d4e1bdb186f5e27f51c1c6a2210\",\"activetime\":\"2021-11-09 15:55:40\",\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NUMBER, clean_text AS shortdescription , group_by_field FROM leo1311_tickets_enriched WHERE clean_text <> '' AND   clean_text IS NOT NULL \",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_tickets_enriched\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]}]}","admin","Extract Words","2021-10-25 10:34:21","LEOINVRT15668","leo1311","DragAndDrop","NULL"
"admin","2021-10-22 06:23:34.046000","false","NULL","NULL","{\"elements\":[{\"id\":\"DIbry\",\"alias\":\"Pre  Processing  Script\",\"name\":\"Pre  Processing  Script\",\"classname\":\"PreProcessingScriptConfig\",\"category\":\"BaseConfig\",\"attributes\":{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import re\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset1, dataset2):\\r\",\"        #df = dataset1.filter(col('subject').contains('linux')).show()\\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = ''\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += ' '\\r\",\"            alphanumeric = re.sub(' +', ' ', alphanumeric)\\r\",\"            finalTokens = [t for t in alphanumeric.split(' ') if not t.isnumeric()]\\r\",\"            return ' '.join(finalTokens)\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset1 = dataset1.withColumn('cleanText',trim(udfAlpaNum('Subject')))\\r\",\"        dataset2 = dataset2.withColumn('regex_exp',concat(lit('^(.*?(?i:'),lower(trim(udfAlpaNum('Keyword'))),lit(')[^$]*)$')))\\r\",\"        dataset2.show()\\r\",\"        df = dataset1.withColumn('Category1', when(lower(col('cleanText')).contains('linux'), 'Linux')\\r\",\"                                .when(lower(col('cleanText')).contains('esb'), 'ESB')\\r\",\"                                .when(lower(col('cleanText')).contains('etl'), 'ETL')\\r\",\"                                .when(lower(col('cleanText')).contains('mft'), 'MFT')\\r\",\"                                .when(lower(col('cleanText')).contains('windows'), 'DBA')\\r\",\"                                .when(col('cleanText').contains(' PO ') | col('cleanText').contains('PO ') | col('cleanText').contains(' PO'), 'ESB')\\r\",\"                                .when(col('cleanText').contains(' GR ') | col('cleanText').contains('GR ') | col('cleanText').contains(' GR'), 'ESB')\\r\",\"                                .when(col('cleanText').contains(' CD ') | col('cleanText').contains('CD ') | col('cleanText').contains(' CD'), 'MFT'))\\r\",\"        df.show()                        \\r\",\"        #print('DF after tech mapping------------------------------------------------')                        \\r\",\"        newdf = df.where(col('Category1').isNull()).select('Number',col('Subject').alias('shortdescription'))\\r\",\"        #print('NEWDF after tech mapping------------------------------------------------')\\r\",\"        #print(newdf.count())\\r\",\"        #newdf.show()\\r\",\"        \\r\",\"        label_list = dataset2.rdd.map(lambda x:{'category':x.Category,'regex':x.regex_exp}).collect()\\r\",\"        \\r\",\"        def getsop(label,text):\\r\",\"            for item in label:\\r\",\"                #print('text is:',text.lower())\\r\",\"                #print('keyword is',item['regex'])\\r\",\"                ismatch = re.match(item['regex'],text.lower())\\r\",\"                if ismatch != None:\\r\",\"                    #print('inside if:category is: ', item['category'])\\r\",\"                    return item['category']\\r\",\"            return\\r\",\"        \\r\",\"        def udf_sop(label_list):\\r\",\"            return udf(lambda l: getsop(label_list, l))\\r\",\"            \\r\",\"        newdf = newdf.withColumn('Category2', udf_sop(label_list)(col('shortdescription')))\\r\",\"        #newdf = df.where(col('Category').isNull()).withColumn('Category', udf_sop(label_list)(col('cleanText')))\\r\",\"        #print('NEWDF after tech mapping with regex------------------------------------------------')\\r\",\"        newdf.show()\\r\",\"        \\r\",\"        #finaldf = newdf.where(col('Category').isNull())\\r\",\"        #print(finaldf.count())\\r\",\"        \\r\",\"        finaldf = df.join(newdf, ('Number'), how='left')\\r\",\"        finaldf = finaldf.withColumn('Category', when(col('Category1').isNotNull(), col('Category1'))\\r\",\"                                    .otherwise(col('Category2')))\\r\",\"        #finaldf1 = finaldf.where(col('Category').isNotNull())\\r\",\"        #finaldf2 = finaldf.where(col('Category').isNull())\\r\",\"        #print(finaldf1.count())\\r\",\"        #print(finaldf2.count())\\r\",\"        finaldf = finaldf.select('Number','Category','Priority','State','Subject','cleanText')\\r\",\"        finaldf.show()\\r\",\"        return finaldf\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},\"position_x\":\"330\",\"position_y\":\"140\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"Soxxz\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"target\",\"endpoint\":\"dataset1\",\"position\":\"LeftMiddle\",\"elementId\":\"aKsMJ\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"target\",\"endpoint\":\"dataset2\",\"position\":\"TopCenter\",\"elementId\":\"usBsx\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"dataset1\",\"dataset2\",\"dataset3\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"params\":\"textarea\",\"script\":\"textarea\"},\"context\":[{\"dataset\":{\"alias\":\"Ticket Dump\",\"name\":\"BUVK8AL2D1\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"51b7c477588442713763d470c7f29561e7cd76dc5693a40535e4a3259c06f9e4\",\"activetime\":\"2021-11-11 09:45:23\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:45:23\",\"alias\":\"leo1311\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from newdump\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Keywords\",\"name\":\"HSFJEKGCTY\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"51b7c477588442713763d470c7f29561e7cd76dc5693a40535e4a3259c06f9e4\",\"activetime\":\"2021-11-11 09:45:23\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:45:23\",\"alias\":\"leo1311\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from keywords\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"Soxxz\",\"alias\":\"Python  Script  Transformer\",\"name\":\"Python  Script  Transformer\",\"classname\":\"PythonScriptTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"script\":[\"import logging\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        print('dataset loading to DB------------------------------------------------')\\r\",\"        dataset.show()    \\r\",\"        return dataset\\r\"]},\"position_x\":\"550\",\"position_y\":\"140\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"DIbry\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"TShvs\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"script\":\"textarea\"},\"context\":[{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import re\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset1, dataset2):\\r\",\"        #df = dataset1.filter(col('subject').contains('linux')).show()\\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = ''\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += ' '\\r\",\"            alphanumeric = re.sub(' +', ' ', alphanumeric)\\r\",\"            finalTokens = [t for t in alphanumeric.split(' ') if not t.isnumeric()]\\r\",\"            return ' '.join(finalTokens)\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset1 = dataset1.withColumn('cleanText',trim(udfAlpaNum('Subject')))\\r\",\"        dataset2 = dataset2.withColumn('regex_exp',concat(lit('^(.*?(?i:'),lower(trim(udfAlpaNum('Keyword'))),lit(')[^$]*)$')))\\r\",\"        dataset2.show()\\r\",\"        df = dataset1.withColumn('Category1', when(lower(col('cleanText')).contains('linux'), 'Linux')\\r\",\"                                .when(lower(col('cleanText')).contains('esb'), 'ESB')\\r\",\"                                .when(lower(col('cleanText')).contains('etl'), 'ETL')\\r\",\"                                .when(lower(col('cleanText')).contains('mft'), 'MFT')\\r\",\"                                .when(lower(col('cleanText')).contains('windows'), 'DBA')\\r\",\"                                .when(col('cleanText').contains(' PO ') | col('cleanText').contains('PO ') | col('cleanText').contains(' PO'), 'ESB')\\r\",\"                                .when(col('cleanText').contains(' GR ') | col('cleanText').contains('GR ') | col('cleanText').contains(' GR'), 'ESB')\\r\",\"                                .when(col('cleanText').contains(' CD ') | col('cleanText').contains('CD ') | col('cleanText').contains(' CD'), 'MFT'))\\r\",\"        df.show()                        \\r\",\"        #print('DF after tech mapping------------------------------------------------')                        \\r\",\"        newdf = df.where(col('Category1').isNull()).select('Number',col('Subject').alias('shortdescription'))\\r\",\"        #print('NEWDF after tech mapping------------------------------------------------')\\r\",\"        #print(newdf.count())\\r\",\"        #newdf.show()\\r\",\"        \\r\",\"        label_list = dataset2.rdd.map(lambda x:{'category':x.Category,'regex':x.regex_exp}).collect()\\r\",\"        \\r\",\"        def getsop(label,text):\\r\",\"            for item in label:\\r\",\"                #print('text is:',text.lower())\\r\",\"                #print('keyword is',item['regex'])\\r\",\"                ismatch = re.match(item['regex'],text.lower())\\r\",\"                if ismatch != None:\\r\",\"                    #print('inside if:category is: ', item['category'])\\r\",\"                    return item['category']\\r\",\"            return\\r\",\"        \\r\",\"        def udf_sop(label_list):\\r\",\"            return udf(lambda l: getsop(label_list, l))\\r\",\"            \\r\",\"        newdf = newdf.withColumn('Category2', udf_sop(label_list)(col('shortdescription')))\\r\",\"        #newdf = df.where(col('Category').isNull()).withColumn('Category', udf_sop(label_list)(col('cleanText')))\\r\",\"        #print('NEWDF after tech mapping with regex------------------------------------------------')\\r\",\"        newdf.show()\\r\",\"        \\r\",\"        #finaldf = newdf.where(col('Category').isNull())\\r\",\"        #print(finaldf.count())\\r\",\"        \\r\",\"        finaldf = df.join(newdf, ('Number'), how='left')\\r\",\"        finaldf = finaldf.withColumn('Category', when(col('Category1').isNotNull(), col('Category1'))\\r\",\"                                    .otherwise(col('Category2')))\\r\",\"        #finaldf1 = finaldf.where(col('Category').isNotNull())\\r\",\"        #finaldf2 = finaldf.where(col('Category').isNull())\\r\",\"        #print(finaldf1.count())\\r\",\"        #print(finaldf2.count())\\r\",\"        finaldf = finaldf.select('Number','Category','Priority','State','Subject','cleanText')\\r\",\"        finaldf.show()\\r\",\"        return finaldf\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"dataset\":{\"alias\":\"Ticket Dump\",\"name\":\"BUVK8AL2D1\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"51b7c477588442713763d470c7f29561e7cd76dc5693a40535e4a3259c06f9e4\",\"activetime\":\"2021-11-11 09:45:23\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:45:23\",\"alias\":\"leo1311\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from newdump\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Keywords\",\"name\":\"HSFJEKGCTY\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"51b7c477588442713763d470c7f29561e7cd76dc5693a40535e4a3259c06f9e4\",\"activetime\":\"2021-11-11 09:45:23\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:45:23\",\"alias\":\"leo1311\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from keywords\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"aKsMJ\",\"alias\":\"Dataset  Extractor\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"alias\":\"Ticket Dump\",\"name\":\"BUVK8AL2D1\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"51b7c477588442713763d470c7f29561e7cd76dc5693a40535e4a3259c06f9e4\",\"activetime\":\"2021-11-11 09:45:23\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:45:23\",\"alias\":\"leo1311\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from newdump\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"90\",\"position_y\":\"140\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"DIbry\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]},{\"id\":\"TShvs\",\"alias\":\"Classified Tickets Tech\",\"name\":\"Dataset  Loader\",\"classname\":\"DatasetLoaderConfig\",\"category\":\"LoaderConfig\",\"attributes\":{\"dataset\":{\"alias\":\"Classified tickets\",\"name\":\"3O21DLV82V\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"51b7c477588442713763d470c7f29561e7cd76dc5693a40535e4a3259c06f9e4\",\"activetime\":\"2021-11-11 09:45:23\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:45:23\",\"alias\":\"leo1311\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from newdump_cat\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"overwrite\",\"params\":\"{}\",\"tableName\":\"newdump_cat\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"applySchema\":false},\"position_x\":\"800\",\"position_y\":\"140\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"Soxxz\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"applySchema\":\"checkbox\"},\"context\":[{\"script\":[\"import logging\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        print('dataset loading to DB------------------------------------------------')\\r\",\"        dataset.show()    \\r\",\"        return dataset\\r\"]},{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import re\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset1, dataset2):\\r\",\"        #df = dataset1.filter(col('subject').contains('linux')).show()\\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = ''\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += ' '\\r\",\"            alphanumeric = re.sub(' +', ' ', alphanumeric)\\r\",\"            finalTokens = [t for t in alphanumeric.split(' ') if not t.isnumeric()]\\r\",\"            return ' '.join(finalTokens)\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset1 = dataset1.withColumn('cleanText',trim(udfAlpaNum('Subject')))\\r\",\"        dataset2 = dataset2.withColumn('regex_exp',concat(lit('^(.*?(?i:'),lower(trim(udfAlpaNum('Keyword'))),lit(')[^$]*)$')))\\r\",\"        dataset2.show()\\r\",\"        df = dataset1.withColumn('Category1', when(lower(col('cleanText')).contains('linux'), 'Linux')\\r\",\"                                .when(lower(col('cleanText')).contains('esb'), 'ESB')\\r\",\"                                .when(lower(col('cleanText')).contains('etl'), 'ETL')\\r\",\"                                .when(lower(col('cleanText')).contains('mft'), 'MFT')\\r\",\"                                .when(lower(col('cleanText')).contains('windows'), 'DBA')\\r\",\"                                .when(col('cleanText').contains(' PO ') | col('cleanText').contains('PO ') | col('cleanText').contains(' PO'), 'ESB')\\r\",\"                                .when(col('cleanText').contains(' GR ') | col('cleanText').contains('GR ') | col('cleanText').contains(' GR'), 'ESB')\\r\",\"                                .when(col('cleanText').contains(' CD ') | col('cleanText').contains('CD ') | col('cleanText').contains(' CD'), 'MFT'))\\r\",\"        df.show()                        \\r\",\"        #print('DF after tech mapping------------------------------------------------')                        \\r\",\"        newdf = df.where(col('Category1').isNull()).select('Number',col('Subject').alias('shortdescription'))\\r\",\"        #print('NEWDF after tech mapping------------------------------------------------')\\r\",\"        #print(newdf.count())\\r\",\"        #newdf.show()\\r\",\"        \\r\",\"        label_list = dataset2.rdd.map(lambda x:{'category':x.Category,'regex':x.regex_exp}).collect()\\r\",\"        \\r\",\"        def getsop(label,text):\\r\",\"            for item in label:\\r\",\"                #print('text is:',text.lower())\\r\",\"                #print('keyword is',item['regex'])\\r\",\"                ismatch = re.match(item['regex'],text.lower())\\r\",\"                if ismatch != None:\\r\",\"                    #print('inside if:category is: ', item['category'])\\r\",\"                    return item['category']\\r\",\"            return\\r\",\"        \\r\",\"        def udf_sop(label_list):\\r\",\"            return udf(lambda l: getsop(label_list, l))\\r\",\"            \\r\",\"        newdf = newdf.withColumn('Category2', udf_sop(label_list)(col('shortdescription')))\\r\",\"        #newdf = df.where(col('Category').isNull()).withColumn('Category', udf_sop(label_list)(col('cleanText')))\\r\",\"        #print('NEWDF after tech mapping with regex------------------------------------------------')\\r\",\"        newdf.show()\\r\",\"        \\r\",\"        #finaldf = newdf.where(col('Category').isNull())\\r\",\"        #print(finaldf.count())\\r\",\"        \\r\",\"        finaldf = df.join(newdf, ('Number'), how='left')\\r\",\"        finaldf = finaldf.withColumn('Category', when(col('Category1').isNotNull(), col('Category1'))\\r\",\"                                    .otherwise(col('Category2')))\\r\",\"        #finaldf1 = finaldf.where(col('Category').isNotNull())\\r\",\"        #finaldf2 = finaldf.where(col('Category').isNull())\\r\",\"        #print(finaldf1.count())\\r\",\"        #print(finaldf2.count())\\r\",\"        finaldf = finaldf.select('Number','Category','Priority','State','Subject','cleanText')\\r\",\"        finaldf.show()\\r\",\"        return finaldf\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"dataset\":{\"alias\":\"Ticket Dump\",\"name\":\"BUVK8AL2D1\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"51b7c477588442713763d470c7f29561e7cd76dc5693a40535e4a3259c06f9e4\",\"activetime\":\"2021-11-11 09:45:23\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:45:23\",\"alias\":\"leo1311\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from newdump\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Keywords\",\"name\":\"HSFJEKGCTY\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"51b7c477588442713763d470c7f29561e7cd76dc5693a40535e4a3259c06f9e4\",\"activetime\":\"2021-11-11 09:45:23\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:45:23\",\"alias\":\"leo1311\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from keywords\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"usBsx\",\"alias\":\"Keyword\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"alias\":\"Keywords\",\"name\":\"HSFJEKGCTY\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"51b7c477588442713763d470c7f29561e7cd76dc5693a40535e4a3259c06f9e4\",\"activetime\":\"2021-11-11 09:45:23\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:45:23\",\"alias\":\"leo1311\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from keywords\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"90\",\"position_y\":\"30\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"DIbry\",\"elementPosition\":\"TopCenter\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]}]}","admin","TechClassify","2021-11-11 09:46:23","LEOTCHCL17048","leo1311","DragAndDrop","NULL"
"admin","2021-10-22 06:23:52.681000","false","NULL","NULL","{\"elements\":[{\"id\":\"niQTO\",\"alias\":\"Python  Script  Transformer\",\"name\":\"Python  Script  Transformer\",\"classname\":\"PythonScriptTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"script\":[\"import logging\\r\",\"from pyspark.sql import SparkSession\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, df):\\r\",\"        spark = SparkSession.builder\\\\\\r\",\"                .master('local[*]')\\\\\\r\",\"                .appName('PySpark_Tutorial')\\\\\\r\",\"                .getOrCreate()\\r\",\"        #csv_file = 'roaster.csv'\\r\",\"        #df = spark.read.csv(csv_file,sep = ',',header=True)\\r\",\"        df.show()\\r\",\"        namesList = df.select('Name').collect()\\r\",\"        trackList = df.select('Track').collect()\\r\",\"        datesList = df.columns[2:]\\r\",\"        # print(datesList)\\r\",\"        # for i in range(0,len(namesList)):\\r\",\"        # print(namesList[i])\\r\",\"        final_list = []\\r\",\"        for i in range(0,len(datesList)):\\r\",\"          currShiftList = df.select(datesList[i]).collect()\\r\",\"          for j in range(0,len(currShiftList)):\\r\",\"            # print(type(currShiftList[j]))\\r\",\"            if(currShiftList[j][datesList[i]] != None):\\r\",\"              final_list.append((namesList[j],trackList[j],currShiftList[j][datesList[i]],datesList[i]))\\r\",\"        # for i in final_list:\\r\",\"        #   print(i)\\r\",\"\\r\",\"        # print(final_list)\\r\",\"\\r\",\"        finalListColumns = ['Name','Track','Shift','Date']\\r\",\"        finalDf = spark.createDataFrame(data=final_list,schema=finalListColumns)\\r\",\"        #finalDf = finalDf.withColumn('Name',f.concat_ws(',', col('Name')))\\r\",\"        name_udf = udf(lambda x: ','.join(x))\\r\",\"        track_udf = udf(lambda x: ','.join(x))\\r\",\"        finalDf = finalDf.withColumn('Name', name_udf(col('Name')))\\r\",\"        finalDf = finalDf.withColumn('Track', track_udf(col('Track')))\\r\",\"        finalDf.printSchema()\\r\",\"        finalDf.show()    \\r\",\"        return finalDf\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},\"position_x\":\"480\",\"position_y\":\"150\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"jFjPn\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"YeXsn\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"script\":\"textarea\"},\"context\":[{\"dataset\":{\"alias\":\"Roster Data\",\"name\":\"JIJQRMXGUW\",\"description\":\"\",\"datasource\":{\"id\":37,\"name\":\"LEOLRLFL33294\",\"description\":\"\",\"type\":\"FILE\",\"connectionDetails\":\"{}\",\"salt\":null,\"organization\":\"leo1311\",\"dshashcode\":null,\"activetime\":\"2021-11-11 09:52:57\",\"category\":\"FILE\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:52:57\",\"alias\":\"Roster File\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"csv_separator\":\",\",\"bucketName\":\"leo1311\",\"fileName\":\"roaster.csv\",\"file\":\"\",\"extraParams\":\"\",\"fileId\":\"filedatasetYY2021MM10DD22EE3c277e4f14d54d16a2693bf5da910943\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"YeXsn\",\"alias\":\"Roster Data\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"alias\":\"Roster Data\",\"name\":\"JIJQRMXGUW\",\"description\":\"\",\"datasource\":{\"id\":37,\"name\":\"LEOLRLFL33294\",\"description\":\"\",\"type\":\"FILE\",\"connectionDetails\":\"{}\",\"salt\":null,\"organization\":\"leo1311\",\"dshashcode\":null,\"activetime\":\"2021-11-11 09:52:57\",\"category\":\"FILE\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:52:57\",\"alias\":\"Roster File\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"csv_separator\":\",\",\"bucketName\":\"leo1311\",\"fileName\":\"roaster.csv\",\"file\":\"\",\"extraParams\":\"\",\"fileId\":\"filedatasetYY2021MM10DD22EE3c277e4f14d54d16a2693bf5da910943\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"250\",\"position_y\":\"150\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"niQTO\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]},{\"id\":\"jFjPn\",\"alias\":\"Transformed Roster\",\"name\":\"Dataset  Loader\",\"classname\":\"DatasetLoaderConfig\",\"category\":\"LoaderConfig\",\"attributes\":{\"dataset\":{\"alias\":\"Transformed Roster\",\"name\":\"PM16RBIBZ1\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"51b7c477588442713763d470c7f29561e7cd76dc5693a40535e4a3259c06f9e4\",\"activetime\":\"2021-11-11 09:45:23\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:45:23\",\"alias\":\"leo1311\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from finalrosterdata\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"finalrosterdata\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"applySchema\":false},\"position_x\":\"720\",\"position_y\":\"150\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"niQTO\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"applySchema\":\"checkbox\"},\"context\":[{\"script\":[\"import logging\\r\",\"from pyspark.sql import SparkSession\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, df):\\r\",\"        spark = SparkSession.builder\\\\\\r\",\"                .master('local[*]')\\\\\\r\",\"                .appName('PySpark_Tutorial')\\\\\\r\",\"                .getOrCreate()\\r\",\"        #csv_file = 'roaster.csv'\\r\",\"        #df = spark.read.csv(csv_file,sep = ',',header=True)\\r\",\"        df.show()\\r\",\"        namesList = df.select('Name').collect()\\r\",\"        trackList = df.select('Track').collect()\\r\",\"        datesList = df.columns[2:]\\r\",\"        # print(datesList)\\r\",\"        # for i in range(0,len(namesList)):\\r\",\"        # print(namesList[i])\\r\",\"        final_list = []\\r\",\"        for i in range(0,len(datesList)):\\r\",\"          currShiftList = df.select(datesList[i]).collect()\\r\",\"          for j in range(0,len(currShiftList)):\\r\",\"            # print(type(currShiftList[j]))\\r\",\"            if(currShiftList[j][datesList[i]] != None):\\r\",\"              final_list.append((namesList[j],trackList[j],currShiftList[j][datesList[i]],datesList[i]))\\r\",\"        # for i in final_list:\\r\",\"        #   print(i)\\r\",\"\\r\",\"        # print(final_list)\\r\",\"\\r\",\"        finalListColumns = ['Name','Track','Shift','Date']\\r\",\"        finalDf = spark.createDataFrame(data=final_list,schema=finalListColumns)\\r\",\"        #finalDf = finalDf.withColumn('Name',f.concat_ws(',', col('Name')))\\r\",\"        name_udf = udf(lambda x: ','.join(x))\\r\",\"        track_udf = udf(lambda x: ','.join(x))\\r\",\"        finalDf = finalDf.withColumn('Name', name_udf(col('Name')))\\r\",\"        finalDf = finalDf.withColumn('Track', track_udf(col('Track')))\\r\",\"        finalDf.printSchema()\\r\",\"        finalDf.show()    \\r\",\"        return finalDf\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"dataset\":{\"alias\":\"Roster Data\",\"name\":\"JIJQRMXGUW\",\"description\":\"\",\"datasource\":{\"id\":37,\"name\":\"LEOLRLFL33294\",\"description\":\"\",\"type\":\"FILE\",\"connectionDetails\":\"{}\",\"salt\":null,\"organization\":\"leo1311\",\"dshashcode\":null,\"activetime\":\"2021-11-11 09:52:57\",\"category\":\"FILE\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:52:57\",\"alias\":\"Roster File\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"csv_separator\":\",\",\"bucketName\":\"leo1311\",\"fileName\":\"roaster.csv\",\"file\":\"\",\"extraParams\":\"\",\"fileId\":\"filedatasetYY2021MM10DD22EE3c277e4f14d54d16a2693bf5da910943\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]}]}","admin","RosterTransform","2021-11-11 09:53:32","LEORSTRT74119","leo1311","DragAndDrop","NULL"
"admin","2021-10-22 06:24:31.573000","false","NULL","NULL","{\"elements\":[{\"id\":\"KBFha\",\"alias\":\"Pre  Processing  Script\",\"name\":\"Pre  Processing  Script\",\"classname\":\"PreProcessingScriptConfig\",\"category\":\"BaseConfig\",\"attributes\":{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from datetime import datetime\\r\",\"from pyspark.sql import SparkSession\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import datetime\\r\",\"import time\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, df1, df2, df3):\\r\",\"        spark = SparkSession.builder.master('local[*]').appName('PySpark_Tutorial').getOrCreate()\\r\",\"        def assignTicket(empWithNoOfTickets, priority, tech, ticketAssignedToNextShift,ticketWeight):\\r\",\"            ticketdf = df1.filter(\\r\",\"                (df1['Category'] == tech[0]) & (df1['Priority'] == priority[0]) & (df1['State'] == 'Open'))\\r\",\"            ticketdf = ticketdf.where(col('Assignee').isNull())\\r\",\"            #Change Assignee to Null instead of ,,\\r\",\"            currPointer=0\\r\",\"            ticketAssigned = {}\\r\",\"            if(ticketdf.count()>0):\\r\",\"                print('Assigning tickets to employees for ', priority[0], ' priority and ', tech[0], 'tech')\\r\",\"            else:\\r\",\"                print('No tickets to assign for ', priority[0], ' priority and ', tech[0], 'tech')\\r\",\"            for i in ticketdf.collect():\\r\",\"                empWithNoOfTickets.sort(key=lambda empWithNoOfTickets: empWithNoOfTickets[0])\\r\",\"                #use min instead of sort\\r\",\"                if empWithNoOfTickets[currPointer][1] in ticketAssigned.keys():\\r\",\"                    ticketAssigned[empWithNoOfTickets[currPointer][1]].append([i[0],i[1],i[2],i[3],i[4],i[5],empWithNoOfTickets[currPointer][1]])\\r\",\"                    ticketAssignedToNextShift.append([i[0], i[1], i[2], i[3], i[4], i[5], empWithNoOfTickets[currPointer][1]])\\r\",\"                    empWithNoOfTickets[currPointer][0]+=(ticketWeight[priority[0]]/len(empListInCurrentShift))\\r\",\"                \\r\",\"                else:\\r\",\"                    ticketAssigned[empWithNoOfTickets[currPointer][1]] = [[i[0],i[1],i[2],i[3],i[4],i[5],empWithNoOfTickets[currPointer][1]]]\\r\",\"                    ticketAssignedToNextShift.append([i[0], i[1], i[2], i[3], i[4], i[5], empWithNoOfTickets[currPointer][1]])\\r\",\"                    empWithNoOfTickets[currPointer][0]+=(ticketWeight[priority[0]]/len(empListInCurrentShift))\\r\",\"\\r\",\"                \\r\",\"                #print(empWithNoOfTickets,i[2])\\r\",\"            return ticketAssignedToNextShift\\r\",\"\\r\",\"        trackList = df2.select('track').distinct().collect()\\r\",\"        priorityList = df1.select('Priority').distinct().collect()\\r\",\"        priorityList.sort()\\r\",\"\\r\",\"        empListdf = df2.groupBy('track', 'shift').agg(array_distinct(collect_list('Name')).alias('EmpInTech'), first('shiftStart').alias('shiftStart'), first('shiftEnd').alias('shiftEnd'), first('reassignAt').alias('reassignAt'), first('reassignedShift').alias('reassignedShift'))\\r\",\"        \\r\",\"        empListdf = empListdf.withColumn('EmpInTechSize', size('EmpInTech'))\\r\",\"\\r\",\"        current_time = datetime.datetime.now().time().strftime('%H:%M:%S')\\r\",\"        # Logic for adding shift in db?\\r\",\"        shiftsdf = df2.select('shift', 'shiftStart', 'shiftEnd', 'reassignedShift').distinct()\\r\",\"\\r\",\"        cons_shift = shiftsdf.filter((shiftsdf['shiftStart'] <= current_time) & (shiftsdf['shiftEnd'] > current_time)).select(col('shift').alias('current_shift'), col('reassignedShift').alias('next_shift')).collect()\\r\",\"\\r\",\"        ticketAssignedToNextShift=[]\\r\",\"        ticketWeight = {}\\r\",\"        #for converting weight df to dict\\r\",\"        for priority in priorityList:\\r\",\"            weightageList = df3.filter((df3['Priority'] == priority[0])).select('Weight').collect()\\r\",\"            ticketWeight[priority[0]] = int(weightageList[0][0])\\r\",\"\\r\",\"        Assigneddata = []\\r\",\"\\r\",\"        for tech in trackList:\\r\",\"            print('Fetching employees in current shift for ', tech[0])\\r\",\"            empInCurrentShift = empListdf.filter((empListdf['Track'] == tech[0]) & (empListdf['shift'] == cons_shift[0]['current_shift']))\\r\",\"\\r\",\"            if empInCurrentShift.count() <= 0:\\r\",\"                print('No employees in current shift for tech ', tech[0])\\r\",\"            else:\\r\",\"\\r\",\"                empListInCurrentShift = empInCurrentShift.select(explode('EmpInTech').alias('EmpInTech')).collect()\\r\",\"\\r\",\"                empWithNoOfTickets = []\\r\",\"                for priority in priorityList:\\r\",\"                    for emp in empListInCurrentShift:\\r\",\"\\r\",\"                        empInList = any(emp[0] in sublist[1] for sublist in empWithNoOfTickets)\\r\",\"                        if(not empInList):\\r\",\"                            intitalWeight =0\\r\",\"                            for prio in priorityList:\\r\",\"                                pricount = df1.filter((df1['Category'] == tech[0]) & (df1['Assignee'] == emp[0]) & ((df1['state'] == 'In-progress') | (df1['state'] == 'Open')) & (df1['priority'] == prio[0]))\\r\",\"                                intitalWeight+=(ticketWeight[prio[0]] * pricount.count())/len(empListInCurrentShift)\\r\",\"                            empWithNoOfTickets.append([intitalWeight, emp[0]])\\r\",\"                    Assigneddata = assignTicket(empWithNoOfTickets, priority, tech, ticketAssignedToNextShift,ticketWeight)\\r\",\"\\r\",\"\\r\",\"        if(len(Assigneddata)>0):\\r\",\"            headers = ['Number', 'Category', 'Priority', 'State', 'Subject', 'cleanText', 'Assignee']\\r\",\"            updated = spark.createDataFrame(Assigneddata, headers)\\r\",\"            #print(Assigneddata)\\r\",\"            updated = updated.withColumn('Shift',lit(None).cast(StringType()))\\r\",\"            logger.info('Assignment completed')\\r\",\"            #updated.show()        \\r\",\"            return updated\\r\",\"        else:\\r\",\"            return df1\\r\"]},\"position_x\":\"360\",\"position_y\":\"150\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"vXYyO\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"target\",\"endpoint\":\"dataset2\",\"position\":\"TopCenter\",\"elementId\":\"BRFGq\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"target\",\"endpoint\":\"dataset1\",\"position\":\"LeftMiddle\",\"elementId\":\"yPwNy\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"target\",\"endpoint\":\"dataset3\",\"position\":\"BottomCenter\",\"elementId\":\"NsExs\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"dataset1\",\"dataset2\",\"dataset3\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"params\":\"textarea\",\"script\":\"textarea\"},\"context\":[{\"dataset\":{\"alias\":\"Roster data\",\"name\":\"D82XF8YXCU\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"51b7c477588442713763d470c7f29561e7cd76dc5693a40535e4a3259c06f9e4\",\"activetime\":\"2021-11-11 09:45:23\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:45:23\",\"alias\":\"leo1311\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NAME,track,shift,STR_TO_DATE(DATE, '%m/%d/%Y') AS DATE,userAvailable,shiftStart,shiftEnd,reassignAt,reassignedShift FROM finalrosterdata roster\\n JOIN rosterdef def ON def.shiftName=roster.shift WHERE STR_TO_DATE(DATE, '%m/%d/%Y')=CURRENT_DATE AND userAvailable=1\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Newdump categories\",\"name\":\"OPZ97TKB51\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"51b7c477588442713763d470c7f29561e7cd76dc5693a40535e4a3259c06f9e4\",\"activetime\":\"2021-11-11 09:45:23\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:45:23\",\"alias\":\"leo1311\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from newdump_cat_updated\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Ticket Weightage\",\"name\":\"SHZAXFRESH\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"51b7c477588442713763d470c7f29561e7cd76dc5693a40535e4a3259c06f9e4\",\"activetime\":\"2021-11-11 09:45:23\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:45:23\",\"alias\":\"leo1311\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from weightage\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"vXYyO\",\"alias\":\"Python  Script  Transformer\",\"name\":\"Python  Script  Transformer\",\"classname\":\"PythonScriptTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"script\":[\"import logging\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        return dataset\\r\"]},\"position_x\":\"620\",\"position_y\":\"150\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"KBFha\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"ugjxL\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"script\":\"textarea\"},\"context\":[{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from datetime import datetime\\r\",\"from pyspark.sql import SparkSession\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import datetime\\r\",\"import time\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, df1, df2, df3):\\r\",\"        spark = SparkSession.builder.master('local[*]').appName('PySpark_Tutorial').getOrCreate()\\r\",\"        def assignTicket(empWithNoOfTickets, priority, tech, ticketAssignedToNextShift,ticketWeight):\\r\",\"            ticketdf = df1.filter(\\r\",\"                (df1['Category'] == tech[0]) & (df1['Priority'] == priority[0]) & (df1['State'] == 'Open'))\\r\",\"            ticketdf = ticketdf.where(col('Assignee').isNull())\\r\",\"            #Change Assignee to Null instead of ,,\\r\",\"            currPointer=0\\r\",\"            ticketAssigned = {}\\r\",\"            if(ticketdf.count()>0):\\r\",\"                print('Assigning tickets to employees for ', priority[0], ' priority and ', tech[0], 'tech')\\r\",\"            else:\\r\",\"                print('No tickets to assign for ', priority[0], ' priority and ', tech[0], 'tech')\\r\",\"            for i in ticketdf.collect():\\r\",\"                empWithNoOfTickets.sort(key=lambda empWithNoOfTickets: empWithNoOfTickets[0])\\r\",\"                #use min instead of sort\\r\",\"                if empWithNoOfTickets[currPointer][1] in ticketAssigned.keys():\\r\",\"                    ticketAssigned[empWithNoOfTickets[currPointer][1]].append([i[0],i[1],i[2],i[3],i[4],i[5],empWithNoOfTickets[currPointer][1]])\\r\",\"                    ticketAssignedToNextShift.append([i[0], i[1], i[2], i[3], i[4], i[5], empWithNoOfTickets[currPointer][1]])\\r\",\"                    empWithNoOfTickets[currPointer][0]+=(ticketWeight[priority[0]]/len(empListInCurrentShift))\\r\",\"                \\r\",\"                else:\\r\",\"                    ticketAssigned[empWithNoOfTickets[currPointer][1]] = [[i[0],i[1],i[2],i[3],i[4],i[5],empWithNoOfTickets[currPointer][1]]]\\r\",\"                    ticketAssignedToNextShift.append([i[0], i[1], i[2], i[3], i[4], i[5], empWithNoOfTickets[currPointer][1]])\\r\",\"                    empWithNoOfTickets[currPointer][0]+=(ticketWeight[priority[0]]/len(empListInCurrentShift))\\r\",\"\\r\",\"                \\r\",\"                #print(empWithNoOfTickets,i[2])\\r\",\"            return ticketAssignedToNextShift\\r\",\"\\r\",\"        trackList = df2.select('track').distinct().collect()\\r\",\"        priorityList = df1.select('Priority').distinct().collect()\\r\",\"        priorityList.sort()\\r\",\"\\r\",\"        empListdf = df2.groupBy('track', 'shift').agg(array_distinct(collect_list('Name')).alias('EmpInTech'), first('shiftStart').alias('shiftStart'), first('shiftEnd').alias('shiftEnd'), first('reassignAt').alias('reassignAt'), first('reassignedShift').alias('reassignedShift'))\\r\",\"        \\r\",\"        empListdf = empListdf.withColumn('EmpInTechSize', size('EmpInTech'))\\r\",\"\\r\",\"        current_time = datetime.datetime.now().time().strftime('%H:%M:%S')\\r\",\"        # Logic for adding shift in db?\\r\",\"        shiftsdf = df2.select('shift', 'shiftStart', 'shiftEnd', 'reassignedShift').distinct()\\r\",\"\\r\",\"        cons_shift = shiftsdf.filter((shiftsdf['shiftStart'] <= current_time) & (shiftsdf['shiftEnd'] > current_time)).select(col('shift').alias('current_shift'), col('reassignedShift').alias('next_shift')).collect()\\r\",\"\\r\",\"        ticketAssignedToNextShift=[]\\r\",\"        ticketWeight = {}\\r\",\"        #for converting weight df to dict\\r\",\"        for priority in priorityList:\\r\",\"            weightageList = df3.filter((df3['Priority'] == priority[0])).select('Weight').collect()\\r\",\"            ticketWeight[priority[0]] = int(weightageList[0][0])\\r\",\"\\r\",\"        Assigneddata = []\\r\",\"\\r\",\"        for tech in trackList:\\r\",\"            print('Fetching employees in current shift for ', tech[0])\\r\",\"            empInCurrentShift = empListdf.filter((empListdf['Track'] == tech[0]) & (empListdf['shift'] == cons_shift[0]['current_shift']))\\r\",\"\\r\",\"            if empInCurrentShift.count() <= 0:\\r\",\"                print('No employees in current shift for tech ', tech[0])\\r\",\"            else:\\r\",\"\\r\",\"                empListInCurrentShift = empInCurrentShift.select(explode('EmpInTech').alias('EmpInTech')).collect()\\r\",\"\\r\",\"                empWithNoOfTickets = []\\r\",\"                for priority in priorityList:\\r\",\"                    for emp in empListInCurrentShift:\\r\",\"\\r\",\"                        empInList = any(emp[0] in sublist[1] for sublist in empWithNoOfTickets)\\r\",\"                        if(not empInList):\\r\",\"                            intitalWeight =0\\r\",\"                            for prio in priorityList:\\r\",\"                                pricount = df1.filter((df1['Category'] == tech[0]) & (df1['Assignee'] == emp[0]) & ((df1['state'] == 'In-progress') | (df1['state'] == 'Open')) & (df1['priority'] == prio[0]))\\r\",\"                                intitalWeight+=(ticketWeight[prio[0]] * pricount.count())/len(empListInCurrentShift)\\r\",\"                            empWithNoOfTickets.append([intitalWeight, emp[0]])\\r\",\"                    Assigneddata = assignTicket(empWithNoOfTickets, priority, tech, ticketAssignedToNextShift,ticketWeight)\\r\",\"\\r\",\"\\r\",\"        if(len(Assigneddata)>0):\\r\",\"            headers = ['Number', 'Category', 'Priority', 'State', 'Subject', 'cleanText', 'Assignee']\\r\",\"            updated = spark.createDataFrame(Assigneddata, headers)\\r\",\"            #print(Assigneddata)\\r\",\"            updated = updated.withColumn('Shift',lit(None).cast(StringType()))\\r\",\"            logger.info('Assignment completed')\\r\",\"            #updated.show()        \\r\",\"            return updated\\r\",\"        else:\\r\",\"            return df1\\r\"]},{\"dataset\":{\"alias\":\"Roster data\",\"name\":\"D82XF8YXCU\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"51b7c477588442713763d470c7f29561e7cd76dc5693a40535e4a3259c06f9e4\",\"activetime\":\"2021-11-11 09:45:23\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:45:23\",\"alias\":\"leo1311\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NAME,track,shift,STR_TO_DATE(DATE, '%m/%d/%Y') AS DATE,userAvailable,shiftStart,shiftEnd,reassignAt,reassignedShift FROM finalrosterdata roster\\n JOIN rosterdef def ON def.shiftName=roster.shift WHERE STR_TO_DATE(DATE, '%m/%d/%Y')=CURRENT_DATE AND userAvailable=1\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Newdump categories\",\"name\":\"OPZ97TKB51\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"51b7c477588442713763d470c7f29561e7cd76dc5693a40535e4a3259c06f9e4\",\"activetime\":\"2021-11-11 09:45:23\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:45:23\",\"alias\":\"leo1311\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from newdump_cat_updated\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Ticket Weightage\",\"name\":\"SHZAXFRESH\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"51b7c477588442713763d470c7f29561e7cd76dc5693a40535e4a3259c06f9e4\",\"activetime\":\"2021-11-11 09:45:23\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:45:23\",\"alias\":\"leo1311\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from weightage\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"BRFGq\",\"alias\":\"Roster Data\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"alias\":\"Roster data\",\"name\":\"D82XF8YXCU\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"51b7c477588442713763d470c7f29561e7cd76dc5693a40535e4a3259c06f9e4\",\"activetime\":\"2021-11-11 09:45:23\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:45:23\",\"alias\":\"leo1311\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NAME,track,shift,STR_TO_DATE(DATE, '%m/%d/%Y') AS DATE,userAvailable,shiftStart,shiftEnd,reassignAt,reassignedShift FROM finalrosterdata roster\\n JOIN rosterdef def ON def.shiftName=roster.shift WHERE STR_TO_DATE(DATE, '%m/%d/%Y')=CURRENT_DATE AND userAvailable=1\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"90\",\"position_y\":\"30\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"KBFha\",\"elementPosition\":\"TopCenter\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]},{\"id\":\"ugjxL\",\"alias\":\"Assigned Tickets\",\"name\":\"Dataset  Loader\",\"classname\":\"DatasetLoaderConfig\",\"category\":\"LoaderConfig\",\"attributes\":{\"dataset\":{\"alias\":\"Assigned Tickets\",\"name\":\"TTGMFN0J4X\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"51b7c477588442713763d470c7f29561e7cd76dc5693a40535e4a3259c06f9e4\",\"activetime\":\"2021-11-11 09:45:23\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:45:23\",\"alias\":\"leo1311\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from newdump_cat_updated\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"update\",\"params\":\"{}\",\"tableName\":\"newdump_cat_updated\",\"uniqueIdentifier\":\"\",\"csv_separator\":\",\",\"bucketName\":\"leo1311\",\"fileName\":\"output (1).csv\",\"file\":\"\",\"extraParams\":\"\",\"fileId\":\"filedatasetYY2021MM10DD22EE9742465a69854e348083cd67afda5c7f\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":\"\"},\"applySchema\":false},\"position_x\":\"880\",\"position_y\":\"150\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"vXYyO\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"applySchema\":\"checkbox\"},\"context\":[{\"script\":[\"import logging\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        return dataset\\r\"]},{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from datetime import datetime\\r\",\"from pyspark.sql import SparkSession\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import datetime\\r\",\"import time\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, df1, df2, df3):\\r\",\"        spark = SparkSession.builder.master('local[*]').appName('PySpark_Tutorial').getOrCreate()\\r\",\"        def assignTicket(empWithNoOfTickets, priority, tech, ticketAssignedToNextShift,ticketWeight):\\r\",\"            ticketdf = df1.filter(\\r\",\"                (df1['Category'] == tech[0]) & (df1['Priority'] == priority[0]) & (df1['State'] == 'Open'))\\r\",\"            ticketdf = ticketdf.where(col('Assignee').isNull())\\r\",\"            #Change Assignee to Null instead of ,,\\r\",\"            currPointer=0\\r\",\"            ticketAssigned = {}\\r\",\"            if(ticketdf.count()>0):\\r\",\"                print('Assigning tickets to employees for ', priority[0], ' priority and ', tech[0], 'tech')\\r\",\"            else:\\r\",\"                print('No tickets to assign for ', priority[0], ' priority and ', tech[0], 'tech')\\r\",\"            for i in ticketdf.collect():\\r\",\"                empWithNoOfTickets.sort(key=lambda empWithNoOfTickets: empWithNoOfTickets[0])\\r\",\"                #use min instead of sort\\r\",\"                if empWithNoOfTickets[currPointer][1] in ticketAssigned.keys():\\r\",\"                    ticketAssigned[empWithNoOfTickets[currPointer][1]].append([i[0],i[1],i[2],i[3],i[4],i[5],empWithNoOfTickets[currPointer][1]])\\r\",\"                    ticketAssignedToNextShift.append([i[0], i[1], i[2], i[3], i[4], i[5], empWithNoOfTickets[currPointer][1]])\\r\",\"                    empWithNoOfTickets[currPointer][0]+=(ticketWeight[priority[0]]/len(empListInCurrentShift))\\r\",\"                \\r\",\"                else:\\r\",\"                    ticketAssigned[empWithNoOfTickets[currPointer][1]] = [[i[0],i[1],i[2],i[3],i[4],i[5],empWithNoOfTickets[currPointer][1]]]\\r\",\"                    ticketAssignedToNextShift.append([i[0], i[1], i[2], i[3], i[4], i[5], empWithNoOfTickets[currPointer][1]])\\r\",\"                    empWithNoOfTickets[currPointer][0]+=(ticketWeight[priority[0]]/len(empListInCurrentShift))\\r\",\"\\r\",\"                \\r\",\"                #print(empWithNoOfTickets,i[2])\\r\",\"            return ticketAssignedToNextShift\\r\",\"\\r\",\"        trackList = df2.select('track').distinct().collect()\\r\",\"        priorityList = df1.select('Priority').distinct().collect()\\r\",\"        priorityList.sort()\\r\",\"\\r\",\"        empListdf = df2.groupBy('track', 'shift').agg(array_distinct(collect_list('Name')).alias('EmpInTech'), first('shiftStart').alias('shiftStart'), first('shiftEnd').alias('shiftEnd'), first('reassignAt').alias('reassignAt'), first('reassignedShift').alias('reassignedShift'))\\r\",\"        \\r\",\"        empListdf = empListdf.withColumn('EmpInTechSize', size('EmpInTech'))\\r\",\"\\r\",\"        current_time = datetime.datetime.now().time().strftime('%H:%M:%S')\\r\",\"        # Logic for adding shift in db?\\r\",\"        shiftsdf = df2.select('shift', 'shiftStart', 'shiftEnd', 'reassignedShift').distinct()\\r\",\"\\r\",\"        cons_shift = shiftsdf.filter((shiftsdf['shiftStart'] <= current_time) & (shiftsdf['shiftEnd'] > current_time)).select(col('shift').alias('current_shift'), col('reassignedShift').alias('next_shift')).collect()\\r\",\"\\r\",\"        ticketAssignedToNextShift=[]\\r\",\"        ticketWeight = {}\\r\",\"        #for converting weight df to dict\\r\",\"        for priority in priorityList:\\r\",\"            weightageList = df3.filter((df3['Priority'] == priority[0])).select('Weight').collect()\\r\",\"            ticketWeight[priority[0]] = int(weightageList[0][0])\\r\",\"\\r\",\"        Assigneddata = []\\r\",\"\\r\",\"        for tech in trackList:\\r\",\"            print('Fetching employees in current shift for ', tech[0])\\r\",\"            empInCurrentShift = empListdf.filter((empListdf['Track'] == tech[0]) & (empListdf['shift'] == cons_shift[0]['current_shift']))\\r\",\"\\r\",\"            if empInCurrentShift.count() <= 0:\\r\",\"                print('No employees in current shift for tech ', tech[0])\\r\",\"            else:\\r\",\"\\r\",\"                empListInCurrentShift = empInCurrentShift.select(explode('EmpInTech').alias('EmpInTech')).collect()\\r\",\"\\r\",\"                empWithNoOfTickets = []\\r\",\"                for priority in priorityList:\\r\",\"                    for emp in empListInCurrentShift:\\r\",\"\\r\",\"                        empInList = any(emp[0] in sublist[1] for sublist in empWithNoOfTickets)\\r\",\"                        if(not empInList):\\r\",\"                            intitalWeight =0\\r\",\"                            for prio in priorityList:\\r\",\"                                pricount = df1.filter((df1['Category'] == tech[0]) & (df1['Assignee'] == emp[0]) & ((df1['state'] == 'In-progress') | (df1['state'] == 'Open')) & (df1['priority'] == prio[0]))\\r\",\"                                intitalWeight+=(ticketWeight[prio[0]] * pricount.count())/len(empListInCurrentShift)\\r\",\"                            empWithNoOfTickets.append([intitalWeight, emp[0]])\\r\",\"                    Assigneddata = assignTicket(empWithNoOfTickets, priority, tech, ticketAssignedToNextShift,ticketWeight)\\r\",\"\\r\",\"\\r\",\"        if(len(Assigneddata)>0):\\r\",\"            headers = ['Number', 'Category', 'Priority', 'State', 'Subject', 'cleanText', 'Assignee']\\r\",\"            updated = spark.createDataFrame(Assigneddata, headers)\\r\",\"            #print(Assigneddata)\\r\",\"            updated = updated.withColumn('Shift',lit(None).cast(StringType()))\\r\",\"            logger.info('Assignment completed')\\r\",\"            #updated.show()        \\r\",\"            return updated\\r\",\"        else:\\r\",\"            return df1\\r\"]},{\"dataset\":{\"alias\":\"Roster data\",\"name\":\"D82XF8YXCU\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"51b7c477588442713763d470c7f29561e7cd76dc5693a40535e4a3259c06f9e4\",\"activetime\":\"2021-11-11 09:45:23\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:45:23\",\"alias\":\"leo1311\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NAME,track,shift,STR_TO_DATE(DATE, '%m/%d/%Y') AS DATE,userAvailable,shiftStart,shiftEnd,reassignAt,reassignedShift FROM finalrosterdata roster\\n JOIN rosterdef def ON def.shiftName=roster.shift WHERE STR_TO_DATE(DATE, '%m/%d/%Y')=CURRENT_DATE AND userAvailable=1\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Newdump categories\",\"name\":\"OPZ97TKB51\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"51b7c477588442713763d470c7f29561e7cd76dc5693a40535e4a3259c06f9e4\",\"activetime\":\"2021-11-11 09:45:23\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:45:23\",\"alias\":\"leo1311\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from newdump_cat_updated\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Ticket Weightage\",\"name\":\"SHZAXFRESH\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"51b7c477588442713763d470c7f29561e7cd76dc5693a40535e4a3259c06f9e4\",\"activetime\":\"2021-11-11 09:45:23\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:45:23\",\"alias\":\"leo1311\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from weightage\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"yPwNy\",\"alias\":\"Classified Tickets\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"alias\":\"Newdump categories\",\"name\":\"OPZ97TKB51\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"51b7c477588442713763d470c7f29561e7cd76dc5693a40535e4a3259c06f9e4\",\"activetime\":\"2021-11-11 09:45:23\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:45:23\",\"alias\":\"leo1311\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from newdump_cat_updated\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"90\",\"position_y\":\"150\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"KBFha\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]},{\"id\":\"NsExs\",\"alias\":\"Ticket Weightage\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"alias\":\"Ticket Weightage\",\"name\":\"SHZAXFRESH\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"51b7c477588442713763d470c7f29561e7cd76dc5693a40535e4a3259c06f9e4\",\"activetime\":\"2021-11-11 09:45:23\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:45:23\",\"alias\":\"leo1311\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from weightage\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"90\",\"position_y\":\"270\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"KBFha\",\"elementPosition\":\"BottomCenter\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]}]}","admin","CurrentShiftAssign","2021-11-11 09:49:00","LEOCRNTS29288","leo1311","DragAndDrop","NULL"
"admin","2021-10-25 14:18:27.194000","false","NULL","NULL","{\"elements\":[{\"id\":\"KBFha\",\"alias\":\"Pre  Processing  Script\",\"name\":\"Pre  Processing  Script\",\"classname\":\"PreProcessingScriptConfig\",\"category\":\"BaseConfig\",\"attributes\":{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from datetime import datetime\\r\",\"from pyspark.sql import SparkSession\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import datetime\\r\",\"import time\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, df1, df2, df3):\\r\",\"        spark = SparkSession.builder.master('local[*]').appName('PySpark_Tutorial').getOrCreate()\\r\",\"\\r\",\"        def assignTicket(empWithNoOfTickets, priority, tech, ticketAssignedToNextShift,ticketWeight):\\r\",\"            ticketdf = df1.filter(\\r\",\"                (df1['Category'] == tech[0]) & (df1['Priority'] == priority[0]) & (df1['State'] == 'Open'))\\r\",\"            ticketdf = ticketdf.where(col('Assignee').isNull())\\r\",\"            #Change Assignee to Null instead of ,,\\r\",\"            currPointer=0\\r\",\"            ticketAssigned = {}\\r\",\"            if(ticketdf.count()>0):\\r\",\"                print('Assigning tickets to employees for ', priority[0], ' priority and ', tech[0], 'tech')\\r\",\"            else:\\r\",\"                print('No tickets to assign for ', priority[0], ' priority and ', tech[0], 'tech')\\r\",\"            for i in ticketdf.collect():\\r\",\"                empWithNoOfTickets.sort(key=lambda empWithNoOfTickets: empWithNoOfTickets[0])\\r\",\"                #use min instead of sort\\r\",\"                if empWithNoOfTickets[currPointer][1] in ticketAssigned.keys():\\r\",\"                    ticketAssigned[empWithNoOfTickets[currPointer][1]].append([i[0],i[1],i[2],i[3],i[4],i[5],empWithNoOfTickets[currPointer][1]])\\r\",\"                else:\\r\",\"                    ticketAssigned[empWithNoOfTickets[currPointer][1]] = [[i[0],i[1],i[2],i[3],i[4],i[5],empWithNoOfTickets[currPointer][1]]]\\r\",\"\\r\",\"                ticketAssignedToNextShift.append([i[0], i[1], i[2], i[3], i[4], i[5], empWithNoOfTickets[currPointer][1]])\\r\",\"                empWithNoOfTickets[currPointer][0]+=(ticketWeight[priority[0]]/len(empListInNextShift))\\r\",\"                #print(empWithNoOfTickets,i[2])\\r\",\"            return ticketAssignedToNextShift\\r\",\"\\r\",\"\\r\",\"        trackList = df2.select('track').distinct().collect()\\r\",\"        priorityList = df1.select('Priority').distinct().collect()\\r\",\"        priorityList.sort()\\r\",\"\\r\",\"        empListdf = df2.groupBy('track', 'shift').agg(array_distinct(collect_list('Name')).alias('EmpInTech'),\\r\",\"                                                      first('shiftStart').alias('shiftStart'),\\r\",\"                                                      first('shiftEnd').alias('shiftEnd'),\\r\",\"                                                      first('reassignAt').alias('reassignAt'),\\r\",\"                                                      first('reassignedShift').alias('reassignedShift'))\\r\",\"        empListdf = empListdf.withColumn('EmpInTechSize', size('EmpInTech'))\\r\",\"\\r\",\"        current_time = datetime.datetime.now().time().strftime('%H:%M:%S')\\r\",\"        # Logic for adding shift in db?\\r\",\"        shiftsdf = df2.select('shift', 'shiftStart', 'shiftEnd', 'reassignedShift').distinct()\\r\",\"\\r\",\"        cons_shift = shiftsdf.filter((shiftsdf['shiftStart'] <= current_time) & (shiftsdf['shiftEnd'] > current_time)).select(col('shift').alias('current_shift'), col('reassignedShift').alias('next_shift')).collect()\\r\",\"\\r\",\"        ticketAssignedToNextShift=[]\\r\",\"        ticketWeight = {}\\r\",\"        #for converting weight df to dict\\r\",\"        for priority in priorityList:\\r\",\"            weightageList = df3.filter((df3['Priority'] == priority[0])).select('Weight').collect()\\r\",\"            ticketWeight[priority[0]] = int(weightageList[0][0])\\r\",\"\\r\",\"        Assigneddata = []\\r\",\"\\r\",\"        for tech in trackList:\\r\",\"            print('Fetching employees in next shift for ', tech[0])\\r\",\"            empInNextShift = empListdf.filter((empListdf['Track'] == tech[0]) & (empListdf['shift'] == cons_shift[0]['next_shift']))\\r\",\"\\r\",\"            if empInNextShift.count() <= 0:\\r\",\"                print('No employees in next shift for tech ', tech[0])\\r\",\"            else:\\r\",\"\\r\",\"                empListInNextShift = empInNextShift.select(explode('EmpInTech').alias('EmpInTech')).collect()\\r\",\"\\r\",\"                empWithNoOfTickets = []\\r\",\"                for priority in priorityList:\\r\",\"                    for emp in empListInNextShift:\\r\",\"\\r\",\"                        empInList = any(emp[0] in sublist[1] for sublist in empWithNoOfTickets)\\r\",\"                        if(not empInList):\\r\",\"                            intitalWeight =0\\r\",\"                            empWithNoOfTickets.append([intitalWeight, emp[0]])\\r\",\"                    Assigneddata = assignTicket(empWithNoOfTickets, priority, tech, ticketAssignedToNextShift,ticketWeight)\\r\",\"\\r\",\"\\r\",\"\\r\",\"        if(len(Assigneddata)>0):\\r\",\"            headers = ['Number', 'Category', 'Priority', 'State', 'Subject', 'cleanText', 'Assignee']\\r\",\"            updated = spark.createDataFrame(Assigneddata, headers)\\r\",\"            updated = updated.withColumn('Shift',lit(None).cast(StringType()))\\r\",\"            print('Assignment completed')\\r\",\"            updated.show()\\r\",\"            return updated\\r\",\"        else:\\r\",\"            return df1\\r\"]},\"position_x\":\"360\",\"position_y\":\"150\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"vXYyO\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"target\",\"endpoint\":\"dataset2\",\"position\":\"TopCenter\",\"elementId\":\"BRFGq\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"target\",\"endpoint\":\"dataset1\",\"position\":\"LeftMiddle\",\"elementId\":\"yPwNy\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"target\",\"endpoint\":\"dataset3\",\"position\":\"BottomCenter\",\"elementId\":\"NsExs\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"dataset1\",\"dataset2\",\"dataset3\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"params\":\"textarea\",\"script\":\"textarea\"},\"context\":[{\"dataset\":{\"alias\":\"Roster data\",\"name\":\"FNAALOFA6Z\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"04f7ec96de21303e9146b48ba05ae55b285509369b5156b0ef2a5a022145f5ea\",\"activetime\":\"2021-10-22 06:27:02\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-10-22 06:27:03\",\"alias\":\"leo1311\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NAME,track,shift,STR_TO_DATE(DATE, '%m/%d/%Y') AS DATE,userAvailable,shiftStart,shiftEnd,reassignAt,reassignedShift FROM finalrosterdata roster\\n JOIN rosterdef def ON def.shiftName=roster.shift WHERE STR_TO_DATE(DATE, '%m/%d/%Y')=CURRENT_DATE AND userAvailable=1\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Newdump categories\",\"name\":\"5NJNLIBT6X\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"04f7ec96de21303e9146b48ba05ae55b285509369b5156b0ef2a5a022145f5ea\",\"activetime\":\"2021-10-22 06:27:02\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-10-22 06:27:03\",\"alias\":\"leo1311\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from newdump_cat_nextshift\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Ticket Weightage\",\"name\":\"SHZAXFRESH\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"04f7ec96de21303e9146b48ba05ae55b285509369b5156b0ef2a5a022145f5ea\",\"activetime\":\"2021-10-22 06:27:02\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-10-22 06:27:03\",\"alias\":\"leo1311\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from weightage\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"vXYyO\",\"alias\":\"Python  Script  Transformer\",\"name\":\"Python  Script  Transformer\",\"classname\":\"PythonScriptTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"script\":[\"import logging\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        return dataset\\r\"]},\"position_x\":\"620\",\"position_y\":\"150\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"KBFha\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"ugjxL\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"script\":\"textarea\"},\"context\":[{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from datetime import datetime\\r\",\"from pyspark.sql import SparkSession\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import datetime\\r\",\"import time\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, df1, df2, df3):\\r\",\"        spark = SparkSession.builder.master('local[*]').appName('PySpark_Tutorial').getOrCreate()\\r\",\"\\r\",\"        def assignTicket(empWithNoOfTickets, priority, tech, ticketAssignedToNextShift,ticketWeight):\\r\",\"            ticketdf = df1.filter(\\r\",\"                (df1['Category'] == tech[0]) & (df1['Priority'] == priority[0]) & (df1['State'] == 'Open'))\\r\",\"            ticketdf = ticketdf.where(col('Assignee').isNull())\\r\",\"            #Change Assignee to Null instead of ,,\\r\",\"            currPointer=0\\r\",\"            ticketAssigned = {}\\r\",\"            if(ticketdf.count()>0):\\r\",\"                print('Assigning tickets to employees for ', priority[0], ' priority and ', tech[0], 'tech')\\r\",\"            else:\\r\",\"                print('No tickets to assign for ', priority[0], ' priority and ', tech[0], 'tech')\\r\",\"            for i in ticketdf.collect():\\r\",\"                empWithNoOfTickets.sort(key=lambda empWithNoOfTickets: empWithNoOfTickets[0])\\r\",\"                #use min instead of sort\\r\",\"                if empWithNoOfTickets[currPointer][1] in ticketAssigned.keys():\\r\",\"                    ticketAssigned[empWithNoOfTickets[currPointer][1]].append([i[0],i[1],i[2],i[3],i[4],i[5],empWithNoOfTickets[currPointer][1]])\\r\",\"                else:\\r\",\"                    ticketAssigned[empWithNoOfTickets[currPointer][1]] = [[i[0],i[1],i[2],i[3],i[4],i[5],empWithNoOfTickets[currPointer][1]]]\\r\",\"\\r\",\"                ticketAssignedToNextShift.append([i[0], i[1], i[2], i[3], i[4], i[5], empWithNoOfTickets[currPointer][1]])\\r\",\"                empWithNoOfTickets[currPointer][0]+=(ticketWeight[priority[0]]/len(empListInNextShift))\\r\",\"                #print(empWithNoOfTickets,i[2])\\r\",\"            return ticketAssignedToNextShift\\r\",\"\\r\",\"\\r\",\"        trackList = df2.select('track').distinct().collect()\\r\",\"        priorityList = df1.select('Priority').distinct().collect()\\r\",\"        priorityList.sort()\\r\",\"\\r\",\"        empListdf = df2.groupBy('track', 'shift').agg(array_distinct(collect_list('Name')).alias('EmpInTech'),\\r\",\"                                                      first('shiftStart').alias('shiftStart'),\\r\",\"                                                      first('shiftEnd').alias('shiftEnd'),\\r\",\"                                                      first('reassignAt').alias('reassignAt'),\\r\",\"                                                      first('reassignedShift').alias('reassignedShift'))\\r\",\"        empListdf = empListdf.withColumn('EmpInTechSize', size('EmpInTech'))\\r\",\"\\r\",\"        current_time = datetime.datetime.now().time().strftime('%H:%M:%S')\\r\",\"        # Logic for adding shift in db?\\r\",\"        shiftsdf = df2.select('shift', 'shiftStart', 'shiftEnd', 'reassignedShift').distinct()\\r\",\"\\r\",\"        cons_shift = shiftsdf.filter((shiftsdf['shiftStart'] <= current_time) & (shiftsdf['shiftEnd'] > current_time)).select(col('shift').alias('current_shift'), col('reassignedShift').alias('next_shift')).collect()\\r\",\"\\r\",\"        ticketAssignedToNextShift=[]\\r\",\"        ticketWeight = {}\\r\",\"        #for converting weight df to dict\\r\",\"        for priority in priorityList:\\r\",\"            weightageList = df3.filter((df3['Priority'] == priority[0])).select('Weight').collect()\\r\",\"            ticketWeight[priority[0]] = int(weightageList[0][0])\\r\",\"\\r\",\"        Assigneddata = []\\r\",\"\\r\",\"        for tech in trackList:\\r\",\"            print('Fetching employees in next shift for ', tech[0])\\r\",\"            empInNextShift = empListdf.filter((empListdf['Track'] == tech[0]) & (empListdf['shift'] == cons_shift[0]['next_shift']))\\r\",\"\\r\",\"            if empInNextShift.count() <= 0:\\r\",\"                print('No employees in next shift for tech ', tech[0])\\r\",\"            else:\\r\",\"\\r\",\"                empListInNextShift = empInNextShift.select(explode('EmpInTech').alias('EmpInTech')).collect()\\r\",\"\\r\",\"                empWithNoOfTickets = []\\r\",\"                for priority in priorityList:\\r\",\"                    for emp in empListInNextShift:\\r\",\"\\r\",\"                        empInList = any(emp[0] in sublist[1] for sublist in empWithNoOfTickets)\\r\",\"                        if(not empInList):\\r\",\"                            intitalWeight =0\\r\",\"                            empWithNoOfTickets.append([intitalWeight, emp[0]])\\r\",\"                    Assigneddata = assignTicket(empWithNoOfTickets, priority, tech, ticketAssignedToNextShift,ticketWeight)\\r\",\"\\r\",\"\\r\",\"\\r\",\"        if(len(Assigneddata)>0):\\r\",\"            headers = ['Number', 'Category', 'Priority', 'State', 'Subject', 'cleanText', 'Assignee']\\r\",\"            updated = spark.createDataFrame(Assigneddata, headers)\\r\",\"            updated = updated.withColumn('Shift',lit(None).cast(StringType()))\\r\",\"            print('Assignment completed')\\r\",\"            updated.show()\\r\",\"            return updated\\r\",\"        else:\\r\",\"            return df1\\r\"]},{\"dataset\":{\"alias\":\"Roster data\",\"name\":\"FNAALOFA6Z\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"04f7ec96de21303e9146b48ba05ae55b285509369b5156b0ef2a5a022145f5ea\",\"activetime\":\"2021-10-22 06:27:02\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-10-22 06:27:03\",\"alias\":\"leo1311\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NAME,track,shift,STR_TO_DATE(DATE, '%m/%d/%Y') AS DATE,userAvailable,shiftStart,shiftEnd,reassignAt,reassignedShift FROM finalrosterdata roster\\n JOIN rosterdef def ON def.shiftName=roster.shift WHERE STR_TO_DATE(DATE, '%m/%d/%Y')=CURRENT_DATE AND userAvailable=1\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Newdump categories\",\"name\":\"5NJNLIBT6X\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"04f7ec96de21303e9146b48ba05ae55b285509369b5156b0ef2a5a022145f5ea\",\"activetime\":\"2021-10-22 06:27:02\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-10-22 06:27:03\",\"alias\":\"leo1311\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from newdump_cat_nextshift\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Ticket Weightage\",\"name\":\"SHZAXFRESH\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"04f7ec96de21303e9146b48ba05ae55b285509369b5156b0ef2a5a022145f5ea\",\"activetime\":\"2021-10-22 06:27:02\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-10-22 06:27:03\",\"alias\":\"leo1311\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from weightage\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"BRFGq\",\"alias\":\"Roster Data\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"alias\":\"Roster data\",\"name\":\"FNAALOFA6Z\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"04f7ec96de21303e9146b48ba05ae55b285509369b5156b0ef2a5a022145f5ea\",\"activetime\":\"2021-10-22 06:27:02\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-10-22 06:27:03\",\"alias\":\"leo1311\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NAME,track,shift,STR_TO_DATE(DATE, '%m/%d/%Y') AS DATE,userAvailable,shiftStart,shiftEnd,reassignAt,reassignedShift FROM finalrosterdata roster\\n JOIN rosterdef def ON def.shiftName=roster.shift WHERE STR_TO_DATE(DATE, '%m/%d/%Y')=CURRENT_DATE AND userAvailable=1\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"90\",\"position_y\":\"30\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"KBFha\",\"elementPosition\":\"TopCenter\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]},{\"id\":\"ugjxL\",\"alias\":\"Assigned Tickets\",\"name\":\"Dataset  Loader\",\"classname\":\"DatasetLoaderConfig\",\"category\":\"LoaderConfig\",\"attributes\":{\"dataset\":{\"alias\":\"Assigned Tickets\",\"name\":\"FU1S8ET93N\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"04f7ec96de21303e9146b48ba05ae55b285509369b5156b0ef2a5a022145f5ea\",\"activetime\":\"2021-10-22 06:27:02\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-10-22 06:27:03\",\"alias\":\"leo1311\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from newdump_cat_nextshift\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"update\",\"params\":\"{}\",\"tableName\":\"newdump_cat_nextshift\",\"uniqueIdentifier\":\"\",\"csv_separator\":\",\",\"bucketName\":\"leo1311\",\"fileName\":\"output (1).csv\",\"file\":\"\",\"extraParams\":\"\",\"fileId\":\"filedatasetYY2021MM10DD22EE9742465a69854e348083cd67afda5c7f\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":\"\"},\"applySchema\":false},\"position_x\":\"880\",\"position_y\":\"150\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"vXYyO\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"applySchema\":\"checkbox\"},\"context\":[{\"script\":[\"import logging\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        return dataset\\r\"]},{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from datetime import datetime\\r\",\"from pyspark.sql import SparkSession\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import datetime\\r\",\"import time\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, df1, df2, df3):\\r\",\"        spark = SparkSession.builder.master('local[*]').appName('PySpark_Tutorial').getOrCreate()\\r\",\"\\r\",\"        def assignTicket(empWithNoOfTickets, priority, tech, ticketAssignedToNextShift,ticketWeight):\\r\",\"            ticketdf = df1.filter(\\r\",\"                (df1['Category'] == tech[0]) & (df1['Priority'] == priority[0]) & (df1['State'] == 'Open'))\\r\",\"            ticketdf = ticketdf.where(col('Assignee').isNull())\\r\",\"            #Change Assignee to Null instead of ,,\\r\",\"            currPointer=0\\r\",\"            ticketAssigned = {}\\r\",\"            if(ticketdf.count()>0):\\r\",\"                print('Assigning tickets to employees for ', priority[0], ' priority and ', tech[0], 'tech')\\r\",\"            else:\\r\",\"                print('No tickets to assign for ', priority[0], ' priority and ', tech[0], 'tech')\\r\",\"            for i in ticketdf.collect():\\r\",\"                empWithNoOfTickets.sort(key=lambda empWithNoOfTickets: empWithNoOfTickets[0])\\r\",\"                #use min instead of sort\\r\",\"                if empWithNoOfTickets[currPointer][1] in ticketAssigned.keys():\\r\",\"                    ticketAssigned[empWithNoOfTickets[currPointer][1]].append([i[0],i[1],i[2],i[3],i[4],i[5],empWithNoOfTickets[currPointer][1]])\\r\",\"                else:\\r\",\"                    ticketAssigned[empWithNoOfTickets[currPointer][1]] = [[i[0],i[1],i[2],i[3],i[4],i[5],empWithNoOfTickets[currPointer][1]]]\\r\",\"\\r\",\"                ticketAssignedToNextShift.append([i[0], i[1], i[2], i[3], i[4], i[5], empWithNoOfTickets[currPointer][1]])\\r\",\"                empWithNoOfTickets[currPointer][0]+=(ticketWeight[priority[0]]/len(empListInNextShift))\\r\",\"                #print(empWithNoOfTickets,i[2])\\r\",\"            return ticketAssignedToNextShift\\r\",\"\\r\",\"\\r\",\"        trackList = df2.select('track').distinct().collect()\\r\",\"        priorityList = df1.select('Priority').distinct().collect()\\r\",\"        priorityList.sort()\\r\",\"\\r\",\"        empListdf = df2.groupBy('track', 'shift').agg(array_distinct(collect_list('Name')).alias('EmpInTech'),\\r\",\"                                                      first('shiftStart').alias('shiftStart'),\\r\",\"                                                      first('shiftEnd').alias('shiftEnd'),\\r\",\"                                                      first('reassignAt').alias('reassignAt'),\\r\",\"                                                      first('reassignedShift').alias('reassignedShift'))\\r\",\"        empListdf = empListdf.withColumn('EmpInTechSize', size('EmpInTech'))\\r\",\"\\r\",\"        current_time = datetime.datetime.now().time().strftime('%H:%M:%S')\\r\",\"        # Logic for adding shift in db?\\r\",\"        shiftsdf = df2.select('shift', 'shiftStart', 'shiftEnd', 'reassignedShift').distinct()\\r\",\"\\r\",\"        cons_shift = shiftsdf.filter((shiftsdf['shiftStart'] <= current_time) & (shiftsdf['shiftEnd'] > current_time)).select(col('shift').alias('current_shift'), col('reassignedShift').alias('next_shift')).collect()\\r\",\"\\r\",\"        ticketAssignedToNextShift=[]\\r\",\"        ticketWeight = {}\\r\",\"        #for converting weight df to dict\\r\",\"        for priority in priorityList:\\r\",\"            weightageList = df3.filter((df3['Priority'] == priority[0])).select('Weight').collect()\\r\",\"            ticketWeight[priority[0]] = int(weightageList[0][0])\\r\",\"\\r\",\"        Assigneddata = []\\r\",\"\\r\",\"        for tech in trackList:\\r\",\"            print('Fetching employees in next shift for ', tech[0])\\r\",\"            empInNextShift = empListdf.filter((empListdf['Track'] == tech[0]) & (empListdf['shift'] == cons_shift[0]['next_shift']))\\r\",\"\\r\",\"            if empInNextShift.count() <= 0:\\r\",\"                print('No employees in next shift for tech ', tech[0])\\r\",\"            else:\\r\",\"\\r\",\"                empListInNextShift = empInNextShift.select(explode('EmpInTech').alias('EmpInTech')).collect()\\r\",\"\\r\",\"                empWithNoOfTickets = []\\r\",\"                for priority in priorityList:\\r\",\"                    for emp in empListInNextShift:\\r\",\"\\r\",\"                        empInList = any(emp[0] in sublist[1] for sublist in empWithNoOfTickets)\\r\",\"                        if(not empInList):\\r\",\"                            intitalWeight =0\\r\",\"                            empWithNoOfTickets.append([intitalWeight, emp[0]])\\r\",\"                    Assigneddata = assignTicket(empWithNoOfTickets, priority, tech, ticketAssignedToNextShift,ticketWeight)\\r\",\"\\r\",\"\\r\",\"\\r\",\"        if(len(Assigneddata)>0):\\r\",\"            headers = ['Number', 'Category', 'Priority', 'State', 'Subject', 'cleanText', 'Assignee']\\r\",\"            updated = spark.createDataFrame(Assigneddata, headers)\\r\",\"            updated = updated.withColumn('Shift',lit(None).cast(StringType()))\\r\",\"            print('Assignment completed')\\r\",\"            updated.show()\\r\",\"            return updated\\r\",\"        else:\\r\",\"            return df1\\r\"]},{\"dataset\":{\"alias\":\"Roster data\",\"name\":\"FNAALOFA6Z\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"04f7ec96de21303e9146b48ba05ae55b285509369b5156b0ef2a5a022145f5ea\",\"activetime\":\"2021-10-22 06:27:02\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-10-22 06:27:03\",\"alias\":\"leo1311\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NAME,track,shift,STR_TO_DATE(DATE, '%m/%d/%Y') AS DATE,userAvailable,shiftStart,shiftEnd,reassignAt,reassignedShift FROM finalrosterdata roster\\n JOIN rosterdef def ON def.shiftName=roster.shift WHERE STR_TO_DATE(DATE, '%m/%d/%Y')=CURRENT_DATE AND userAvailable=1\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Newdump categories\",\"name\":\"5NJNLIBT6X\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"04f7ec96de21303e9146b48ba05ae55b285509369b5156b0ef2a5a022145f5ea\",\"activetime\":\"2021-10-22 06:27:02\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-10-22 06:27:03\",\"alias\":\"leo1311\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from newdump_cat_nextshift\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Ticket Weightage\",\"name\":\"SHZAXFRESH\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"04f7ec96de21303e9146b48ba05ae55b285509369b5156b0ef2a5a022145f5ea\",\"activetime\":\"2021-10-22 06:27:02\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-10-22 06:27:03\",\"alias\":\"leo1311\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from weightage\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"yPwNy\",\"alias\":\"Classified Tickets\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"alias\":\"Newdump categories\",\"name\":\"5NJNLIBT6X\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"04f7ec96de21303e9146b48ba05ae55b285509369b5156b0ef2a5a022145f5ea\",\"activetime\":\"2021-10-22 06:27:02\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-10-22 06:27:03\",\"alias\":\"leo1311\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from newdump_cat_nextshift\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"90\",\"position_y\":\"150\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"KBFha\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]},{\"id\":\"NsExs\",\"alias\":\"Ticket Weightage\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"alias\":\"Ticket Weightage\",\"name\":\"SHZAXFRESH\",\"description\":\"\",\"datasource\":{\"id\":36,\"name\":\"leo1311\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encXBMQTzlGIi3Yb7hSxFGwnKrnSjUB4cAY00I=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.134:3306/loreal\\\"}\",\"salt\":\"tZpXQC8VPe7P+X8RKE8ISIbnRNH3mL+aeb1X8fAeZxzKzaYwQ3Bxm9Es0j3ghINzfbHuWYppDIaXpTdatQQ7cQ==\",\"organization\":\"leo1311\",\"dshashcode\":\"04f7ec96de21303e9146b48ba05ae55b285509369b5156b0ef2a5a022145f5ea\",\"activetime\":\"2021-10-22 06:27:02\",\"category\":\"SQL\",\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-10-22 06:27:03\",\"alias\":\"leo1311\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from weightage\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"90\",\"position_y\":\"270\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"KBFha\",\"elementPosition\":\"BottomCenter\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]}]}","admin","NextShiftAssign","2021-11-02 04:26:02","LEONXTSH71215","leo1311","DragAndDrop","NULL"
"admin","2021-11-18 08:02:50.343000","false","","NULL","{\"elements\":[{\"id\":\"mNtFe\",\"alias\":\"Python  Script  Transformer\",\"name\":\"Python  Script  Transformer\",\"classname\":\"PythonScriptTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"script\":[\"import logging\",\"from datetime import datetime\",\"from pyspark.sql.functions import *\",\"from pyspark.sql.types import *\",\"class CustomPythonClass():\",\"    def __main__(self, dataset):\",\"        def getCluster(mapped_phrase):\",\"            cluster = ''\",\"            if mapped_phrase is not None and mapped_phrase != '':\",\"                cluster = mapped_phrase\",\"            return cluster\",\"        udfGetCluster = udf(getCluster, StringType())\",\"        dataset.show()\",\"        dataset = dataset.withColumn('post_ranking_cluster', udfGetCluster('mapped_phrase'))\",\"        dataset = dataset.withColumn('last_updated', lit(datetime.now()))\",\"        dataset.show()\",\"        dataset = dataset.select('number','mapped_phrase','last_updated','post_ranking_cluster')\",\"        return dataset\"]},\"position_x\":\"470\",\"position_y\":\"160\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"rOEhB\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"zJRXl\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"script\":\"textarea\"},\"context\":[{\"dataset\":{\"alias\":\"Phrase Extraction\",\"name\":\"DYV83OFE7R\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT cast(t.number as char) as number, case when cast(cast(pe.mapped_phrase_confidennce as char) as float) > 0.4 THEN  pe.extracted_phrase ELSE '' END as  mapped_phrase FROM @projectname_tickets_enriched t left join @projectname_phrase_extraction pe on t.number = cast(pe.number as char)\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\",\"Cacheable\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"rOEhB\",\"alias\":\"Dataset  Loader\",\"name\":\"Dataset  Loader\",\"classname\":\"DatasetLoaderConfig\",\"category\":\"LoaderConfig\",\"attributes\":{\"dataset\":{\"alias\":\"Prioritized Cluster\",\"name\":\"34917ZFMK9\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"Select number ,mapped_phrase, last_updated, post_ranking_cluster from @projectname_tickets_enriched\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"update\",\"params\":\"{}\",\"tableName\":\"@projectname_tickets_enriched\",\"uniqueIdentifier\":\"\",\"Cacheable\":\"\"},\"expStatus\":0,\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":\"\"},\"applySchema\":false},\"position_x\":\"900\",\"position_y\":\"160\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"mNtFe\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"applySchema\":\"checkbox\"},\"context\":[{\"script\":[\"import logging\",\"from datetime import datetime\",\"from pyspark.sql.functions import *\",\"from pyspark.sql.types import *\",\"class CustomPythonClass():\",\"    def __main__(self, dataset):\",\"        def getCluster(mapped_phrase):\",\"            cluster = ''\",\"            if mapped_phrase is not None and mapped_phrase != '':\",\"                cluster = mapped_phrase\",\"            return cluster\",\"        udfGetCluster = udf(getCluster, StringType())\",\"        dataset.show()\",\"        dataset = dataset.withColumn('post_ranking_cluster', udfGetCluster('mapped_phrase'))\",\"        dataset = dataset.withColumn('last_updated', lit(datetime.now()))\",\"        dataset.show()\",\"        dataset = dataset.select('number','mapped_phrase','last_updated','post_ranking_cluster')\",\"        return dataset\"]},{\"dataset\":{\"alias\":\"Phrase Extraction\",\"name\":\"DYV83OFE7R\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT cast(t.number as char) as number, case when cast(cast(pe.mapped_phrase_confidennce as char) as float) > 0.4 THEN  pe.extracted_phrase ELSE '' END as  mapped_phrase FROM @projectname_tickets_enriched t left join @projectname_phrase_extraction pe on t.number = cast(pe.number as char)\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\",\"Cacheable\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"zJRXl\",\"alias\":\"Dataset  Extractor\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"alias\":\"Phrase Extraction\",\"name\":\"DYV83OFE7R\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT cast(t.number as char) as number, case when cast(cast(pe.mapped_phrase_confidennce as char) as float) > 0.4 THEN  pe.extracted_phrase ELSE '' END as  mapped_phrase FROM @projectname_tickets_enriched t left join @projectname_phrase_extraction pe on t.number = cast(pe.number as char)\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\",\"Cacheable\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"120\",\"position_y\":\"160\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"mNtFe\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]}]}","admin","PhraseToEnriched Workflow","2021-11-18 09:18:05","LEOPHRST70990","leo1311","DragAndDrop","NULL"
