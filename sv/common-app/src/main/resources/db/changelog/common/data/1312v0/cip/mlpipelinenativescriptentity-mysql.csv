cname,filename,filescript,organization
ACMKYPHR40814,ACMKYPHR40814_leo1311.py,aW1wb3J0IG15c3FsLmNvbm5lY3RvcgppbXBvcnQgbG9nZ2luZwppbXBvcnQgc3lzCmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCBxdW90ZV9wbHVzLCB1cmxwYXJzZQpmcm9tIGxlYXAudXRpbHMuVXRpbGl0aWVzIGltcG9ydCBVdGlsaXRpZXMKZnJvbSBza2xlYXJuLmZlYXR1cmVfZXh0cmFjdGlvbi50ZXh0IGltcG9ydCBUZmlkZlZlY3Rvcml6ZXIKaW1wb3J0IG51bXB5IGFzIG5wCmltcG9ydCB0aW1laXQKaW1wb3J0IGpzb24KCmxvZ2dpbmcuYmFzaWNDb25maWcobGV2ZWw9bG9nZ2luZy5JTkZPLCBmb3JtYXQ9JyUoYXNjdGltZSlzIElORk8gJShtZXNzYWdlKXMnLCBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycpCgphcmd1bWVudHMgPSBzeXMuYXJndgoKZGljdCA9IHt9CmZvciBhcmcgaW4gYXJndW1lbnRzOgogICAgdHJ5OgogICAgICAgIGRpY3RbYXJnLnNwbGl0KCc6JylbMF1dID0gKCc6Jykuam9pbihhcmcuc3BsaXQoJzonKVsxOl0pCiAgICBleGNlcHQ6CiAgICAgICAgYSA9ICdlcnJvcicKCgpkZWYgZ2V0U2ltaWxhcihzZW50ZW5jZXMsIGtleXdvcmRzKToKICAgIGNvcnB1cyA9IHNlbnRlbmNlcyArIGtleXdvcmRzCiAgICBrZXl3b3Jkc3RhcnRJbmRleCA9IGxlbihzZW50ZW5jZXMpCiAgICB0ZmlkZkNvcnB1cyA9IFRmaWRmVmVjdG9yaXplcihtaW5fZGY9MSwgc3RvcF93b3Jkcz0nZW5nbGlzaCcpLmZpdF90cmFuc2Zvcm0oY29ycHVzKQogICAgcGFpcndpc2Vfc2ltaWxhcml0eSA9IHRmaWRmQ29ycHVzICogdGZpZGZDb3JwdXMuVAogICAgYXJyID0gcGFpcndpc2Vfc2ltaWxhcml0eS50b2FycmF5KCkKICAgIG5wLmZpbGxfZGlhZ29uYWwoYXJyLCBucC5uYW4pCiAgICByZXN1bHRzID0ge30KICAgIGZvciBzIGluIHNlbnRlbmNlczoKICAgICAgICBpbnB1dF9pZHggPSBzZW50ZW5jZXMuaW5kZXgocykKICAgICAgICByZXN1bHRfaWR4ID0gbnAubmFuYXJnbWF4KGFycltpbnB1dF9pZHhdW2tleXdvcmRzdGFydEluZGV4Ol0pCiAgICAgICAgbWF0Y2ggPSBhcnJbaW5wdXRfaWR4XVtrZXl3b3Jkc3RhcnRJbmRleCArIHJlc3VsdF9pZHhdCiAgICAgICAgciA9IGtleXdvcmRzW3Jlc3VsdF9pZHhdCiAgICAgICAgaWYgbWF0Y2ggPiAwOgogICAgICAgICAgICByZXN1bHRzW3NdID0gciArICc6JyArIHN0cihtYXRjaCkKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXN1bHRzW3NdID0gJ05PIE1BVENIOjAnCiAgICByZXR1cm4gcmVzdWx0cwoKCmxlYXBkcyA9IGRpY3RbJ0xFQVBEUyddCmxlYXBEU2RpY3QgPSBqc29uLmxvYWRzKGxlYXBkcykKCnVzZXJuYW1lID0gbGVhcERTZGljdFsndXNlck5hbWUnXQpwYXNzd29yZCA9IFV0aWxpdGllcy5kZWNyeXB0KGxlYXBEU2RpY3RbJ3Bhc3N3b3JkJ10sIGxlYXBEU2RpY3RbJ3NhbHQnXSkKaG9zdCA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkuaG9zdG5hbWUKcG9ydCA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkucG9ydApkYXRhYmFzZSA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkucGF0aC5yc3BsaXQoJy8nLCAxKVsxXQpjbnggPSBteXNxbC5jb25uZWN0b3IuY29ubmVjdCh1c2VyPXVzZXJuYW1lLCBwYXNzd29yZD1wYXNzd29yZCwgaG9zdD1ob3N0LCBwb3J0PXBvcnQsIGRhdGFiYXNlPWRhdGFiYXNlKQpteWN1cnNvciA9IGNueC5jdXJzb3IoKQpUYWJsZU5hbWUgPSBkaWN0WydUYWJsZU5hbWUnXQplYXNlID0gZGljdFsnRUFTRU1hcHBpbmcnXQpzcWwgPSAnJydTRUxFQ1QgRElTVElOQ1QgVFJJTShleHRyYWN0ZWRfcGhyYXNlKSBmcm9tIHswfSB3aGVyZSBleHRyYWN0ZWRfcGhyYXNlIGlzIG5vdCBudWxsIGFuZCBleHRyYWN0ZWRfcGhyYXNlIDw+ICcnICAnJycuZm9ybWF0KFRhYmxlTmFtZSkKbXljdXJzb3IuZXhlY3V0ZShzcWwpCnJlc3VsdHMgPSBteWN1cnNvci5mZXRjaGFsbCgpCm15Y3Vyc29yLmNsb3NlKCkKcGhyYXNlcyA9IFtdCmZvciBpdGVtIGluIHJlc3VsdHM6CiAgICBwaHJhc2VzLmFwcGVuZChpdGVtWzBdKQoKbXljdXJzb3IyID0gY254LmN1cnNvcigpCnNxbCA9ICcnJ1NFTEVDVCBESVNUSU5DVCBLZXlfV29yZCBmcm9tIHswfScnJy5mb3JtYXQoZWFzZSkKbXljdXJzb3IyLmV4ZWN1dGUoc3FsKQpyZXN1bHRzID0gbXljdXJzb3IyLmZldGNoYWxsKCkKa2V5d29yZHMgPSBbXQpmb3IgaXRlbSBpbiByZXN1bHRzOgogICAga2V5d29yZHMuYXBwZW5kKGl0ZW1bMF0pCm15Y3Vyc29yMi5jbG9zZSgpCgpjbnguY2xvc2UoKQoKCmRlZiBnZXRFQVNFKHR1cCk6CiAgICB0cnk6CiAgICAgICAgcmVzdWx0cyA9IGdldFNpbWlsYXIodHVwWzBdLCB0dXBbMV0pCiAgICAgICAgVGFibGVOYW1lID0gZGljdFsnVGFibGVOYW1lJ10KICAgICAgICBxdWVyeSA9ICcnJ1VwZGF0ZSB7MH0gc2V0IG1hcHBlZF9waHJhc2UgPSAlcyAsIG1hcHBlZF9waHJhc2VfY29uZmlkZW5uY2UgPSVzICB3aGVyZSBUUklNKGV4dHJhY3RlZF9waHJhc2UpID0gJXMgJycnLmZvcm1hdChUYWJsZU5hbWUpCiAgICAgICAgaW5wdXRkYXRhID0gW10KICAgICAgICBmb3IgcGF0dGVybiBpbiByZXN1bHRzLmtleXMoKToKICAgICAgICAgICAga3cgPSByZXN1bHRzW3BhdHRlcm5dLnNwbGl0KCc6JylbMF0KICAgICAgICAgICAgc2NvcmUgPSByZXN1bHRzW3BhdHRlcm5dLnNwbGl0KCc6JylbLTFdCiAgICAgICAgICAgIGlmIGt3ICE9ICdOTyBNQVRDSCc6CiAgICAgICAgICAgICAgICBpbnB1dGRhdGEuYXBwZW5kKChrdywgc2NvcmUsIHBhdHRlcm4pKQogICAgICAgIGNueCA9IG15c3FsLmNvbm5lY3Rvci5jb25uZWN0KHVzZXI9dHVwWzJdLCBwYXNzd29yZD10dXBbM10sIGhvc3Q9dHVwWzRdLCBwb3J0PXR1cFs1XSwgZGF0YWJhc2U9dHVwWzZdKQogICAgICAgIG15Y3Vyc29yID0gY254LmN1cnNvcigpCiAgICAgICAgcmVzID0gbXljdXJzb3IuZXhlY3V0ZW1hbnkocXVlcnksIGlucHV0ZGF0YSkKICAgICAgICBjbnguY29tbWl0KCkKICAgICAgICBteWN1cnNvci5jbG9zZSgpCiAgICAgICAgY254LmNsb3NlKCkKICAgICAgICByZXR1cm4gVHJ1ZQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBleDoKICAgICAgICBsb2dnaW5nLndhcm5pbmcoZXgpCiAgICAgICAgcmV0dXJuIEZhbHNlCgoKZnJvbSBtdWx0aXByb2Nlc3NpbmcuZHVtbXkgaW1wb3J0IFBvb2wgYXMgVGhyZWFkUG9vbAoKYXV4X3ZhbCA9IFtdCnRvdGFsbGVuID0gbGVuKHBocmFzZXMpCmxvZ2dpbmcuaW5mbygnVG90YWwgUmVjb3JkczogezB9Jy5mb3JtYXQodG90YWxsZW4pKQpzdGFydCA9IDAKc3RlcCA9IDEwMDAKZm9yIGkgaW4gcmFuZ2Uoc3RhcnQsIHRvdGFsbGVuLCBzdGVwKToKICAgIHN0b3AgPSBpICsgc3RlcAogICAgaWYgKHN0b3AgPiB0b3RhbGxlbik6CiAgICAgICAgc3RvcCA9IHRvdGFsbGVuCiAgICB0cnk6CiAgICAgICAgYXV4X3ZhbC5hcHBlbmQoKHBocmFzZXNbaTpzdG9wXSwga2V5d29yZHMsIHVzZXJuYW1lLCBwYXNzd29yZCwgaG9zdCwgcG9ydCwgZGF0YWJhc2UpKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIGxvZ2dpbmcuaW5mbyhlKQoKcG9vbCA9IFRocmVhZFBvb2woNCkKbG9nZ2luZy5pbmZvKGxlbihhdXhfdmFsKSkKbG9nZ2luZy5pbmZvKCdTdGFydGluZyBQcm9jZXNzJykKCm1hcGRhdGEgPSBwb29sLm1hcChnZXRFQVNFLCBhdXhfdmFsKQoKbG9nZ2luZy5pbmZvKCdDb21wbGV0ZWQnKQoKCgoK,leo1311
SNOW_Get_API,SNOW_Get_API_leo1311.py,,leo1311
