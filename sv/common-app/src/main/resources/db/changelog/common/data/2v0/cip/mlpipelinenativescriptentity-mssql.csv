cname,filename,filescript,organization
"SNOW_Update_API","SNOW_Update_API_Acme.py","from pyspark.sql import SparkSession
import requests
import sys
import os
import pyodbc
from pyspark.sql.functions import *
from pyspark.sql.types import *
import json
import datetime
from urllib.parse import quote_plus, urlparse
from leap.utils.Utilities import Utilities
import logging as logger


logger.basicConfig(level=logger.INFO,format='%(asctime)s INFO %(message)s', datefmt='%y/%m/%d %H:%M:%S')

arguments =sys.argv
dict={}
for arg in arguments:
     try:
         dict[arg.split(':')[0]] = (':').join(arg.split(':')[1:])
     except:
         a='error'

#SNow Datasource
snowds = dict['SnowDataSource']
snowDSdict=json.loads(snowds)

# Set the request parameters
url = snowDSdict['Url']
user = snowDSdict['AuthDetails']['username']
pwd = Utilities.decrypt(snowDSdict['AuthDetails']['password'], snowDSdict['salt'])
api = dict['api']
params =dict['params']
tablename = dict['dataTable']

ticketType = dict['ticketType']

if(ticketType.lower() == 'incident'):
    snowtable = 'incident'
elif(ticketType.lower()=='changerequest-normal'):
    snowtable = 'change_request'
elif(ticketType.lower() == 'servicerequest'):
    snowtable = 'sc_request'
elif(ticketType.lower() == 'incidenttask'):
    snowtable = 'incident_task'
#LEAP Datasource
leapds = dict['LEAPDataSource']
leapDSdict =json.loads(leapds)

username = leapDSdict['userName']
password = Utilities.decrypt(leapDSdict['password'],leapDSdict['salt'])
server = urlparse(leapDSdict['url'][5:]).netloc.split(';', 1)[0]
database = urlparse(leapDSdict['url'][5:]).netloc.split(';', 1)[1].split('=',1)[1]


icmPayload = json.loads(dict['incidentPayload'])
print(icmPayload)
sysId = icmPayload.get('sysId','')
if sysId is None or sysId =='':
    number = icmPayload['number']
    query = '''SELECT sysId FROM {0} where number = '{1}' '''.format(tablename, number)
    connectionString = 'DRIVER={0};SERVER={1}; ' \
                           'DATABASE={2};UID={3};PWD={4}'.format(
            'ODBC Driver 17 for SQL SERVER', server, database, username, password)
    cnx = pyodbc.connect(connectionString)
    mycursor = cnx.cursor()
    mycursor.execute(query)
    myresult = mycursor.fetchone()
    if myresult is not None and len(myresult) ==1:
        sysId= myresult[0]

    mycursor.close()
    cnx.close()
icmPayloadMapping = {'number':'number','shortdescription':'short_description','priority.systemId':'priority','state.systemId':'state','description':'description',
                        'sysId':'sys_id','category.systemId':'category','impact.systemId':'impact','assignmentgroup.systemId':'assignment_group','assignedto.systemId':'assigned_to',
                        'configurationitem.systemId':'cmdb_ci','urgency.systemId':'urgency','sop':'sop','resolutionStepsClusterName':'resolutionStepsClusterName' }

snowPayload = {}
for key in icmPayloadMapping.keys():
    jv = icmPayload
    icmColumn = key.split('.')
    for item in icmColumn:
        try:
            jv = jv[item]
            snowPayload[icmPayloadMapping[key]] = jv
        except:
            a='No mapping'
snowPayload = json.dumps(snowPayload)

#setproxy
proxyDict ={}
if dict['setProxy'] == 'True':
    proxyDict = {
                  'http'  : os.environ['HTTP_PROXY'],
                  'https' : os.environ['HTTPS_PROXY']      
                  }
                  
#set headers
headers = {'Content-Type':'application/json','Accept':'application/json'}
url = url+api+snowtable+'/'+sysId+'?'+params
# Do the HTTP request
response = requests.patch(url, auth=(user, pwd), headers=headers ,data=snowPayload, proxies=proxyDict )
# Check for HTTP codes other than 200
if response.status_code != 200:
    logger.info('Status:', response.status_code, 'Headers:', response.headers, 'Error Response:',response.json())
    exit()

# Decode the JSON response into a dictionary and use the data
data = response.json()
jsonStringArray = []

row = data['result']
row['sop'] = icmPayload.get('sop','')
row['workflow'] = icmPayload.get('workflow','')
jsonstr =json.dumps(row)
jsonStringArray.append(jsonstr)

spark = SparkSession.builder.master('local').appName('snow').config('spark.ui.showConsoleProgress', 'false').getOrCreate()

#convert json to spark dataframe
df = spark.read.json(spark.sparkContext.parallelize(jsonStringArray))

snowToIcmColumnMapping = {'number':'number','short_description':'shortDescription','priority':'priority','state':'state','description':'description',
                        'sys_id':'sysId','opened_at':'openedDate','sys_created_on':'createdDate','sys_updated_on':'updatedDate',
                        'sla_due':'sladueDate','closed_at':'closedDate','due_date':'duedate','sys_created_by':'createdBy',
                        'reopened_time':'reopenedDate','resolved_at':'resolvedDate','category':'category',
                        'close_code':'closecode','close_code':'resolutionCategory','impact':'impact','requested_for.display_value':'requested_for',
                        'assignment_group.display_value':'assignmentGroup','caller_id.display_value':'caller','assigned_to.display_value':'assignedTo',
                        'resolved_by.display_value':'resolvedBy','closed_by.display_value':'closedBy','cmdb_ci.display_value':'configurationItem',
                        'close_notes':'closeNotes','close_notes':'resolution_steps','location.display_value':'location','request_state':'request_state','price':'price',
                        'special_instructions':'special_instructions','approval':'approval','business_service':'business_service',
                        'risk':'risk','type':'type','requested_by.display_value':'requested_by','incident.display_value':'parent_Incident',
                          'urgency':'severity','workflow':'workflow','sop':'sop' }
#mapColumns
foundColumns = []
for key in snowToIcmColumnMapping.keys():
    try:
        icmColumn =snowToIcmColumnMapping[key]
        snowColumn= key
        df= df.withColumn(icmColumn,when(col(snowColumn) == '', None).otherwise(col(snowColumn)))
        foundColumns.append(icmColumn)
    except:
        error = 'Column Not found'

df = df.select(foundColumns)

# Add static columns - ICM specific
df = df.withColumn('source',lit('SNOW'))

def recordType(i):
    switcher = {
        'incident': 'Incident',
        'change_request': 'ChangeRequest-Normal',
        'incident_task': 'Task',
        'sc_request': 'ServiceRequest'
    }
    return switcher.get(i, 'Incident')
df = df.withColumn('type',lit(recordType(snowtable.lower())))
df = df.withColumn('lastUpdated',lit(datetime.datetime.now()))

#save to db
columnList = df.columns
def process_partition(iterator):
  connectionString = 'DRIVER={0};SERVER={1}; ' \
                           'DATABASE={2};UID={3};PWD={4}'.format(
            'ODBC Driver 17 for SQL SERVER', server, database, username, password)
  cnx = pyodbc.connect(connectionString)
  mycursor = cnx.cursor()

  for row in iterator:
    try:
        paramsDict = {}
        values = []
        col_value = []
        for i in range(0, len(columnList)):
          val = row[columnList[i]]
          #print('column:{0},value:{1}'.format(columnList[i], val))
          if isinstance(row[columnList[i]],datetime.datetime):
            val = row[columnList[i]].strftime('%Y-%m-%d %H:%M:%S')
          elif 'date' in columnList[i].lower():
              try:
                  val= parser.parse(val)
                  val = val.strftime('%Y-%m-%d %H:%M:%S')
              except:
                  val=''
          elif isinstance(val, str):
              val = val.replace('\'','')

              
          paramsDict[columnList[i]] = val
          values.append(val)
          col_value.append('''[{0}]='{1}' '''.format(columnList[i], val))
          
        columns = ', '.join('[{0}]'.format(k) for k in paramsDict)
        col_values = ', '.join(col_value)
        
        joinon = ' t.[number] = s.[number] '
        updateValues = ', '.join('[{0}] = s.[{0}]'.format(col) for col in columnList)
        insertValues = ', '.join('s.[{0}]'.format(col) for col in columnList)
        #duplicates = ', '.join('{0}=VALUES({0})'.format(k) for k in paramsDict)
        #place_holders = ', '.join('?'.format(k) for k in paramsDict)
        #query = 'REPLACE INTO {0} ({1}) VALUES ({2})'.format(tablename, columns, place_holders)
        #query = '{0} ON DUPLICATE KEY UPDATE {1}'.format(query, duplicates)
        
        query = 'MERGE  INTO [{0}] AS t USING (SELECT {1}) AS s  ON {2} WHEN MATCHED THEN UPDATE SET {3} WHEN NOT MATCHED THEN INSERT({4}) VALUES({5});'.format(
            tablename, col_values, joinon, updateValues, columns, insertValues)
        
        mycursor.execute(query)
        
        cnx.commit()
    except Exception as ex:
        
        logger.error(ex)
        print(ex)

df.foreachPartition(process_partition)
logger.info('Completed')







","leo1311"