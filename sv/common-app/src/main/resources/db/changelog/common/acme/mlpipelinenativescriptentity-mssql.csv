"cname","filename","filescript","organization"
"AnomalyDetection","AnomalyDetection_Acme.py","JycnDQpUaGUgc2NyaXB0IHByaW50cyBvdXQgYWxsIHJlY29yZHMgdGhhdCBoYXZlIGFuIGFibm9ybWFsbHkgaGlnaCBhbm9tYWx5DQpzY29yZS4NCicnJw0KaW1wb3J0IG9zDQppbXBvcnQgc2h1dGlsDQppbXBvcnQgY3N2DQppbXBvcnQgZGF0ZXRpbWUNCmltcG9ydCBsb2dnaW5nDQpmcm9tIGNvbGxlY3Rpb25zIGltcG9ydCBPcmRlcmVkRGljdA0KaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyDQppbXBvcnQgcHN1dGlsDQppbXBvcnQgc3lzDQppbXBvcnQgdGltZQ0KZnJvbSBudXBpYy5mcmFtZXdvcmtzLm9wZi5tb2RlbF9mYWN0b3J5IGltcG9ydCBNb2RlbEZhY3RvcnkNCmltcG9ydCBteXNxbC5jb25uZWN0b3INCg0KbG9nZ2VyLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dlci5JTkZPLCBmb3JtYXQ9JyUoYXNjdGltZSlzIElORk8gJShtZXNzYWdlKXMnLCBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycpDQphcmd1bWVudHMgPSBzeXMuYXJndg0KDQpfQU5PTUFMWV9USFJFU0hPTEQgPSAwLjgNCiMgbWluaW11bSBtZXRyaWMgdmFsdWUgb2YgaW5wdXQNCl9JTlBVVF9NSU4gPSAwDQojIG1heGltdW0gbWV0cmljIHZhbHVlIG9mIGlucHV0DQpfSU5QVVRfTUFYID0gMTAwDQpNT0RFTF9QQVJBTVMgPSB7DQogICAgJ2luZmVyZW5jZUFyZ3MnOiB7DQogICAgICAgICdwcmVkaWN0aW9uU3RlcHMnOiBbMV0sDQogICAgICAgICdwcmVkaWN0ZWRGaWVsZCc6ICd2YWx1ZScsDQogICAgICAgICdpbnB1dFByZWRpY3RlZEZpZWxkJzogJ2F1dG8nDQogICAgfSwNCiAgICAnYWdncmVnYXRpb25JbmZvJzogew0KICAgICAgICAnc2Vjb25kcyc6IDAsDQogICAgICAgICdmaWVsZHMnOiBbXSwNCiAgICAgICAgJ21vbnRocyc6IDAsDQogICAgICAgICdkYXlzJzogMCwNCiAgICAgICAgJ3llYXJzJzogMCwNCiAgICAgICAgJ2hvdXJzJzogMCwNCiAgICAgICAgJ21pY3Jvc2Vjb25kcyc6IDAsDQogICAgICAgICd3ZWVrcyc6IDAsDQogICAgICAgICdtaW51dGVzJzogMCwNCiAgICAgICAgJ21pbGxpc2Vjb25kcyc6IDANCiAgICB9LA0KICAgICdtb2RlbCc6ICdIVE1QcmVkaWN0aW9uJywNCiAgICAndmVyc2lvbic6IDEsDQogICAgJ3ByZWRpY3RBaGVhZFRpbWUnOiBOb25lLA0KICAgICdtb2RlbFBhcmFtcyc6IHsNCiAgICAgICAgJ2luZmVyZW5jZVR5cGUnOiAnVGVtcG9yYWxBbm9tYWx5JywNCiAgICAgICAgJ3NlbnNvclBhcmFtcyc6IHsNCiAgICAgICAgICAgICdlbmNvZGVycyc6IHsNCiAgICAgICAgICAgICAgICAndGltZXN0YW1wX3RpbWVPZkRheSc6IHsNCiAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnRGF0ZUVuY29kZXInLA0KICAgICAgICAgICAgICAgICAgICAndGltZU9mRGF5JzogWw0KICAgICAgICAgICAgICAgICAgICAgICAgMjEsDQogICAgICAgICAgICAgICAgICAgICAgICA5LjQ5DQogICAgICAgICAgICAgICAgICAgIF0sDQogICAgICAgICAgICAgICAgICAgICdmaWVsZG5hbWUnOiAndGltZXN0YW1wJywNCiAgICAgICAgICAgICAgICAgICAgJ25hbWUnOiAndGltZXN0YW1wJw0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgJ3RpbWVzdGFtcF9kYXlPZldlZWsnOiBOb25lLA0KICAgICAgICAgICAgICAgICd0aW1lc3RhbXBfd2Vla2VuZCc6IE5vbmUsDQogICAgICAgICAgICAgICAgJ3ZhbHVlJzogew0KICAgICAgICAgICAgICAgICAgICAnbmFtZSc6ICd2YWx1ZScsDQogICAgICAgICAgICAgICAgICAgICdmaWVsZG5hbWUnOiAndmFsdWUnLA0KICAgICAgICAgICAgICAgICAgICAnc2VlZCc6IDQyLA0KICAgICAgICAgICAgICAgICAgICAnbnVtQnVja2V0cyc6IDEzMCwNCiAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnUmFuZG9tRGlzdHJpYnV0ZWRTY2FsYXJFbmNvZGVyJw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICAnc2Vuc29yQXV0b1Jlc2V0JzogTm9uZSwNCiAgICAgICAgICAgICd2ZXJib3NpdHknOiAwDQogICAgICAgIH0sDQogICAgICAgICdzcEVuYWJsZSc6IFRydWUsDQogICAgICAgICdzcFBhcmFtcyc6IHsNCiAgICAgICAgICAgICdzcGF0aWFsSW1wJzogJ2NwcCcsDQogICAgICAgICAgICAncG90ZW50aWFsUGN0JzogMC44LA0KICAgICAgICAgICAgJ2NvbHVtbkNvdW50JzogMjA0OCwNCiAgICAgICAgICAgICdnbG9iYWxJbmhpYml0aW9uJzogMSwNCiAgICAgICAgICAgICdpbnB1dFdpZHRoJzogMCwNCiAgICAgICAgICAgICdib29zdFN0cmVuZ3RoJzogMC4wLA0KICAgICAgICAgICAgJ251bUFjdGl2ZUNvbHVtbnNQZXJJbmhBcmVhJzogNDAsDQogICAgICAgICAgICAnc2VlZCc6IDE5NTYsDQogICAgICAgICAgICAnc3BWZXJib3NpdHknOiAwLA0KICAgICAgICAgICAgJ3NwYXRpYWxJbXAnOiAnY3BwJywNCiAgICAgICAgICAgICdzeW5QZXJtQWN0aXZlSW5jJzogMC4wMDMsDQogICAgICAgICAgICAnc3luUGVybUNvbm5lY3RlZCc6IDAuMiwNCiAgICAgICAgICAgICdzeW5QZXJtSW5hY3RpdmVEZWMnOiAwLjAwMDUNCiAgICAgICAgfSwNCiAgICAgICAgJ3RyYWluU1BOZXRPbmx5SWZSZXF1ZXN0ZWQnOiBGYWxzZSwNCiAgICAgICAgJ3RtRW5hYmxlJzogVHJ1ZSwNCiAgICAgICAgJ3RtUGFyYW1zJzogew0KICAgICAgICAgICAgJ2FjdGl2YXRpb25UaHJlc2hvbGQnOiAxMywNCiAgICAgICAgICAgICdjZWxsc1BlckNvbHVtbic6IDMyLA0KICAgICAgICAgICAgJ2NvbHVtbkNvdW50JzogMjA0OCwNCiAgICAgICAgICAgICdnbG9iYWxEZWNheSc6IDAuMCwNCiAgICAgICAgICAgICdpbml0aWFsUGVybSc6IDAuMjEsDQogICAgICAgICAgICAnaW5wdXRXaWR0aCc6IDIwNDgsDQogICAgICAgICAgICAnbWF4QWdlJzogMCwNCiAgICAgICAgICAgICdtYXhTZWdtZW50c1BlckNlbGwnOiAxMjgsDQogICAgICAgICAgICAnbWF4U3luYXBzZXNQZXJTZWdtZW50JzogMzIsDQogICAgICAgICAgICAnbWluVGhyZXNob2xkJzogMTAsDQogICAgICAgICAgICAnbmV3U3luYXBzZUNvdW50JzogMjAsDQogICAgICAgICAgICAnb3V0cHV0VHlwZSc6ICdub3JtYWwnLA0KICAgICAgICAgICAgJ3BhbUxlbmd0aCc6IDMsDQogICAgICAgICAgICAncGVybWFuZW5jZURlYyc6IDAuMSwNCiAgICAgICAgICAgICdwZXJtYW5lbmNlSW5jJzogMC4xLA0KICAgICAgICAgICAgJ3NlZWQnOiAxOTYwLA0KICAgICAgICAgICAgJ3RlbXBvcmFsSW1wJzogJ2NwcCcsDQogICAgICAgICAgICAndmVyYm9zaXR5JzogMA0KICAgICAgICB9LA0KICAgICAgICAnY2xFbmFibGUnOiBGYWxzZSwNCiAgICAgICAgJ2NsUGFyYW1zJzogew0KICAgICAgICAgICAgJ2FscGhhJzogMC4wMzU4Mjg5MzM2MTIxNTc5OTgsDQogICAgICAgICAgICAncmVnaW9uTmFtZSc6ICdTRFJDbGFzc2lmaWVyUmVnaW9uJywNCiAgICAgICAgICAgICdzdGVwcyc6ICcxJywNCiAgICAgICAgICAgICd2ZXJib3NpdHknOiAwDQogICAgICAgIH0sDQogICAgICAgICdhbm9tYWx5UGFyYW1zJzogew0KICAgICAgICAgICAgJ2Fub21hbHlDYWNoZVJlY29yZHMnOiBOb25lLA0KICAgICAgICAgICAgJ2F1dG9EZXRlY3RUaHJlc2hvbGQnOiBOb25lLA0KICAgICAgICAgICAgJ2F1dG9EZXRlY3RXYWl0UmVjb3Jkcyc6IDUwMzANCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KDQpkZWYgX3NldFJhbmRvbUVuY29kZXJSZXNvbHV0aW9uKG1pblJlc29sdXRpb249MC4wMDEpOg0KICAgICcnJw0KICAgIEdpdmVuIG1vZGVsIHBhcmFtcywgZmlndXJlIG91dCB0aGUgY29ycmVjdCByZXNvbHV0aW9uIGZvciB0aGUNCiAgICBSYW5kb21EaXN0cmlidXRlZCBlbmNvZGVyLiBNb2RpZmllcyBwYXJhbXMgaW4gcGxhY2UuDQogICAgJycnDQogICAgZW5jb2RlciA9ICgNCiAgICAgICAgTU9ERUxfUEFSQU1TWydtb2RlbFBhcmFtcyddWydzZW5zb3JQYXJhbXMnXVsnZW5jb2RlcnMnXVsndmFsdWUnXQ0KICAgICkNCg0KICAgIGlmIGVuY29kZXJbJ3R5cGUnXSA9PSAnUmFuZG9tRGlzdHJpYnV0ZWRTY2FsYXJFbmNvZGVyJzoNCiAgICAgICAgcmFuZ2VQYWRkaW5nID0gYWJzKF9JTlBVVF9NQVggLSBfSU5QVVRfTUlOKSAqIDAuMg0KICAgICAgICBtaW5WYWx1ZSA9IF9JTlBVVF9NSU4gLSByYW5nZVBhZGRpbmcNCiAgICAgICAgbWF4VmFsdWUgPSBfSU5QVVRfTUFYICsgcmFuZ2VQYWRkaW5nDQogICAgICAgIHJlc29sdXRpb24gPSBtYXgobWluUmVzb2x1dGlvbiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAobWF4VmFsdWUgLSBtaW5WYWx1ZSkgLyBlbmNvZGVyLnBvcCgnbnVtQnVja2V0cycpDQogICAgICAgICAgICAgICAgICAgICAgICAgKQ0KICAgICAgICBlbmNvZGVyWydyZXNvbHV0aW9uJ10gPSByZXNvbHV0aW9uDQoNCg0KZGVmIGNyZWF0ZU1vZGVsKCk6DQogICAgX3NldFJhbmRvbUVuY29kZXJSZXNvbHV0aW9uKCkNCiAgICAjIHJldHVybiBNb2RlbEZhY3RvcnkuY3JlYXRlKG1vZGVsX3BhcmFtcy5NT0RFTF9QQVJBTVMpDQoNCg0KZGVmIHJ1bkFub21hbHlEZXRlY3Rpb24oKToNCg0KICAgIGdsb2JhbCBtYXRyaWNlc3R5cGUNCg0KICAgIHByaW50KCdTdGFydGluZyBQaXBlbGluZScpDQoNCiAgICBtb2RlbCA9IGNyZWF0ZU1vZGVsKCkNCiAgICBsb2dnZXIuaW5mbygnTWV0cmljOjogVGltZXN0YW1wIDo6IFZhbHVlIDo6IEFub21hbHlTY29yeSA6OiBJc0Fub21hbHknKQ0KICAgIHRyeToNCiAgICAgIGxvZ2dlci5pbmZvKCdDcmVhdGluZyBNb2RlbCcpDQogICAgICBtb2RlbCA9IE1vZGVsRmFjdG9yeS5jcmVhdGUoTU9ERUxfUEFSQU1TKQ0KICAgICAgd2hpbGUoVHJ1ZSk6DQogICAgICAgICAgDQogICAgICAgIGxzdCA9IFtdDQogICAgICAgIG1vZGVsLmVuYWJsZUluZmVyZW5jZSh7J3ByZWRpY3RlZEZpZWxkJzogJ3ZhbHVlJ30pDQogICAgICAgIG1vZGVsSW5wdXQgPSBPcmRlcmVkRGljdCgpDQogICAgICAgIG1vZGVsSW5wdXRbJ3RpbWVzdGFtcCddID0gZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkNCiAgICAgICAgbW9kZWxJbnB1dFsndmFsdWUnXSA9IHBzdXRpbC5jcHVfcGVyY2VudChpbnRlcnZhbD1Ob25lKQ0KICAgICAgICANCiAgICAgICAgcmVzdWx0ID0gbW9kZWwucnVuKG1vZGVsSW5wdXQpDQogICAgICAgIGFub21hbHlTY29yZSA9IHJlc3VsdC5pbmZlcmVuY2VzWydhbm9tYWx5U2NvcmUnXQ0KICAgICAgIA0KICAgICAgICBsc3QuYXBwZW5kKChtb2RlbElucHV0Wyd0aW1lc3RhbXAnXSwgbW9kZWxJbnB1dFsndmFsdWUnXSwgZmxvYXQoYW5vbWFseVNjb3JlKSkpDQogICAgICAgIGlzQW5vbWFseSA9MA0KICAgICAgICBpZiBhbm9tYWx5U2NvcmUgPiBfQU5PTUFMWV9USFJFU0hPTEQ6DQogICAgICAgICAgICBpc0Fub21hbHkgPTENCiAgICAgICAgICAgIA0KICAgICAgICBsb2dnZXIuaW5mbygnY3B1X3BlcmNlbnQ6OiB7MH0gOjogezF9JSA6OiB7Mn0gOjogezN9Jy5mb3JtYXQobW9kZWxJbnB1dFsndGltZXN0YW1wJ10sbW9kZWxJbnB1dFsndmFsdWUnXSxmbG9hdChhbm9tYWx5U2NvcmUpLGlzQW5vbWFseSkpDQogICAgICAgIHRpbWUuc2xlZXAoMjApDQogICAgZXhjZXB0Og0KICAgICAgICBsb2dnZXIuZXJyb3IoJ0Vycm9yJykNCiAgICAgICAgDQoNCg0KaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoNCiAgICBsb2dnaW5nLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dpbmcuSU5GTykNCiAgICBydW5Bbm9tYWx5RGV0ZWN0aW9uKCkNCiAgICBpZiBjbnguaXNfY29ubmVjdGVkKCk6DQogICAgICAgIGNueC5jbG9zZSgpDQoNCg0KDQoNCg0KDQoNCg0KDQo=","leo1311"
"SNOW_Get_Metadata_API","SNOW_Get_Metadata_API_leo1311.py","","leo1311"
"SNOW_Get_API","SNOW_Get_API_leo1311.py","","leo1311"
"SNOW_Create_API","SNOW_Create_API_leo1311.py","","leo1311"
"SNOW_Update_API","SNOW_Update_API_leo1311.py","","leo1311"
"ACMKYPHR40814","ACMKYPHR40814_leo1311.py","aW1wb3J0IHB5b2RiYwppbXBvcnQgbG9nZ2luZwppbXBvcnQgc3lzCmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCBxdW90ZV9wbHVzLCB1cmxwYXJzZQpmcm9tIGxlYXAudXRpbHMuVXRpbGl0aWVzIGltcG9ydCBVdGlsaXRpZXMKZnJvbSBza2xlYXJuLmZlYXR1cmVfZXh0cmFjdGlvbi50ZXh0IGltcG9ydCBUZmlkZlZlY3Rvcml6ZXIKaW1wb3J0IG51bXB5IGFzIG5wCmltcG9ydCB0aW1laXQKaW1wb3J0IGpzb24KCmxvZ2dpbmcuYmFzaWNDb25maWcobGV2ZWw9bG9nZ2luZy5JTkZPLCBmb3JtYXQ9JyUoYXNjdGltZSlzIElORk8gJShtZXNzYWdlKXMnLCBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycpCgphcmd1bWVudHMgPSBzeXMuYXJndgoKZGljdCA9IHt9CmZvciBhcmcgaW4gYXJndW1lbnRzOgogICAgdHJ5OgogICAgICAgIGRpY3RbYXJnLnNwbGl0KCc6JylbMF1dID0gKCc6Jykuam9pbihhcmcuc3BsaXQoJzonKVsxOl0pCiAgICBleGNlcHQ6CiAgICAgICAgYSA9ICdlcnJvcicKCgpkZWYgZ2V0U2ltaWxhcihzZW50ZW5jZXMsIGtleXdvcmRzKToKICAgIGNvcnB1cyA9IHNlbnRlbmNlcyArIGtleXdvcmRzCiAgICBrZXl3b3Jkc3RhcnRJbmRleCA9IGxlbihzZW50ZW5jZXMpCiAgICB0ZmlkZkNvcnB1cyA9IFRmaWRmVmVjdG9yaXplcihtaW5fZGY9MSwgc3RvcF93b3Jkcz0nZW5nbGlzaCcpLmZpdF90cmFuc2Zvcm0oY29ycHVzKQogICAgcGFpcndpc2Vfc2ltaWxhcml0eSA9IHRmaWRmQ29ycHVzICogdGZpZGZDb3JwdXMuVAogICAgYXJyID0gcGFpcndpc2Vfc2ltaWxhcml0eS50b2FycmF5KCkKICAgIG5wLmZpbGxfZGlhZ29uYWwoYXJyLCBucC5uYW4pCiAgICByZXN1bHRzID0ge30KICAgIGZvciBzIGluIHNlbnRlbmNlczoKICAgICAgICBpbnB1dF9pZHggPSBzZW50ZW5jZXMuaW5kZXgocykKICAgICAgICByZXN1bHRfaWR4ID0gbnAubmFuYXJnbWF4KGFycltpbnB1dF9pZHhdW2tleXdvcmRzdGFydEluZGV4Ol0pCiAgICAgICAgbWF0Y2ggPSBhcnJbaW5wdXRfaWR4XVtrZXl3b3Jkc3RhcnRJbmRleCArIHJlc3VsdF9pZHhdCiAgICAgICAgciA9IGtleXdvcmRzW3Jlc3VsdF9pZHhdCiAgICAgICAgaWYgbWF0Y2ggPiAwOgogICAgICAgICAgICByZXN1bHRzW3NdID0gciArICc6JyArIHN0cihtYXRjaCkKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXN1bHRzW3NdID0gJ05PIE1BVENIOjAnCiAgICByZXR1cm4gcmVzdWx0cwoKCmxlYXBkcyA9IGRpY3RbJ0xFQVBEUyddCmxlYXBEU2RpY3QgPSBqc29uLmxvYWRzKGxlYXBkcykKCnVzZXJuYW1lID0gbGVhcERTZGljdFsndXNlck5hbWUnXQpwYXNzd29yZCA9IFV0aWxpdGllcy5kZWNyeXB0KGxlYXBEU2RpY3RbJ3Bhc3N3b3JkJ10sbGVhcERTZGljdFsnc2FsdCddKQpzZXJ2ZXIgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLm5ldGxvYy5zcGxpdCgnOycsIDEpWzBdCmRhdGFiYXNlID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5uZXRsb2Muc3BsaXQoJzsnLCAxKVsxXS5zcGxpdCgnPScsMSlbMV0KY29ubmVjdGlvblN0cmluZyA9ICdEUklWRVI9ezB9O1NFUlZFUj17MX07ICcgXAogICAgICAgICAgICAgICAgICAgICAgICAgICAnREFUQUJBU0U9ezJ9O1VJRD17M307UFdEPXs0fScuZm9ybWF0KAogICAgICAgICAgICAnT0RCQyBEcml2ZXIgMTcgZm9yIFNRTCBTRVJWRVInLCBzZXJ2ZXIsIGRhdGFiYXNlLCB1c2VybmFtZSwgcGFzc3dvcmQpCmNueCA9IHB5b2RiYy5jb25uZWN0KGNvbm5lY3Rpb25TdHJpbmcpCm15Y3Vyc29yID0gY254LmN1cnNvcigpClRhYmxlTmFtZSA9IGRpY3RbJ1RhYmxlTmFtZSddCnNxbCA9ICcnJ1NFTEVDVCBESVNUSU5DVCBUUklNKGV4dHJhY3RlZF9waHJhc2UpIGZyb20gezB9IHdoZXJlIGV4dHJhY3RlZF9waHJhc2UgaXMgbm90IG51bGwgYW5kIGV4dHJhY3RlZF9waHJhc2UgPD4gJycgICcnJy5mb3JtYXQoVGFibGVOYW1lKQpteWN1cnNvci5leGVjdXRlKHNxbCkKcmVzdWx0cyA9IG15Y3Vyc29yLmZldGNoYWxsKCkKbXljdXJzb3IuY2xvc2UoKQpwaHJhc2VzID0gW10KZm9yIGl0ZW0gaW4gcmVzdWx0czoKICAgIHBocmFzZXMuYXBwZW5kKGl0ZW1bMF0pCgpteWN1cnNvcjIgPSBjbnguY3Vyc29yKCkKc3FsID0gJ1NFTEVDVCBESVNUSU5DVCBLZXlfV29yZCBmcm9tIEVBU0VNYXBwaW5nJwpteWN1cnNvcjIuZXhlY3V0ZShzcWwpCnJlc3VsdHMgPSBteWN1cnNvcjIuZmV0Y2hhbGwoKQprZXl3b3JkcyA9IFtdCmZvciBpdGVtIGluIHJlc3VsdHM6CiAgICBrZXl3b3Jkcy5hcHBlbmQoaXRlbVswXSkKbXljdXJzb3IyLmNsb3NlKCkKCmNueC5jbG9zZSgpCgoKZGVmIGdldEVBU0UodHVwKToKICAgIHRyeToKICAgICAgICByZXN1bHRzID0gZ2V0U2ltaWxhcih0dXBbMF0sIHR1cFsxXSkKICAgICAgICBUYWJsZU5hbWUgPSBkaWN0WydUYWJsZU5hbWUnXQogICAgICAgIHF1ZXJ5ID0gJycnVXBkYXRlIHswfSBzZXQgbWFwcGVkX3BocmFzZSA9ID8gLCBtYXBwZWRfcGhyYXNlX2NvbmZpZGVubmNlID0gPyAgd2hlcmUgVFJJTShleHRyYWN0ZWRfcGhyYXNlKSA9ID8gJycnLmZvcm1hdChUYWJsZU5hbWUpCiAgICAgICAgaW5wdXRkYXRhID0gW10KICAgICAgICBmb3IgcGF0dGVybiBpbiByZXN1bHRzLmtleXMoKToKICAgICAgICAgICAga3cgPSByZXN1bHRzW3BhdHRlcm5dLnNwbGl0KCc6JylbMF0KICAgICAgICAgICAgc2NvcmUgPSByZXN1bHRzW3BhdHRlcm5dLnNwbGl0KCc6JylbLTFdCiAgICAgICAgICAgIGlmIGt3ICE9ICdOTyBNQVRDSCc6CiAgICAgICAgICAgICAgICBpbnB1dGRhdGEuYXBwZW5kKChrdywgc2NvcmUsIHBhdHRlcm4pKQogICAgICAgIAogICAgICAgIGNvbm5lY3Rpb25TdHJpbmcgPSAnRFJJVkVSPXswfTtTRVJWRVI9ezF9OyAnIFwKICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0RBVEFCQVNFPXsyfTtVSUQ9ezN9O1BXRD17NH0nLmZvcm1hdCgKICAgICAgICAgICAgJ09EQkMgRHJpdmVyIDE3IGZvciBTUUwgU0VSVkVSJywgdHVwWzRdLCB0dXBbNV0sIHR1cFsyXSwgdHVwWzNdKQogICAgICAgIGNueCA9IHB5b2RiYy5jb25uZWN0KGNvbm5lY3Rpb25TdHJpbmcpCiAgICAgICAgbXljdXJzb3IgPSBjbnguY3Vyc29yKCkKICAgICAgICByZXMgPSBteWN1cnNvci5leGVjdXRlbWFueShxdWVyeSwgaW5wdXRkYXRhKQogICAgICAgIGNueC5jb21taXQoKQogICAgICAgIG15Y3Vyc29yLmNsb3NlKCkKICAgICAgICBjbnguY2xvc2UoKQogICAgICAgIHJldHVybiBUcnVlCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGV4OgogICAgICAgIGxvZ2dpbmcud2FybmluZyhleCkKICAgICAgICByZXR1cm4gRmFsc2UKCgpmcm9tIG11bHRpcHJvY2Vzc2luZy5kdW1teSBpbXBvcnQgUG9vbCBhcyBUaHJlYWRQb29sCgphdXhfdmFsID0gW10KdG90YWxsZW4gPSBsZW4ocGhyYXNlcykKbG9nZ2luZy5pbmZvKCdUb3RhbCBSZWNvcmRzOiB7MH0nLmZvcm1hdCh0b3RhbGxlbikpCnN0YXJ0ID0gMApzdGVwID0gMTAwMApmb3IgaSBpbiByYW5nZShzdGFydCwgdG90YWxsZW4sIHN0ZXApOgogICAgc3RvcCA9IGkgKyBzdGVwCiAgICBpZiAoc3RvcCA+IHRvdGFsbGVuKToKICAgICAgICBzdG9wID0gdG90YWxsZW4KICAgIHRyeToKICAgICAgICBhdXhfdmFsLmFwcGVuZCgocGhyYXNlc1tpOnN0b3BdLCBrZXl3b3JkcywgdXNlcm5hbWUsIHBhc3N3b3JkLCBzZXJ2ZXIsIGRhdGFiYXNlKSkKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBsb2dnaW5nLmluZm8oZSkKCnBvb2wgPSBUaHJlYWRQb29sKDQpCmxvZ2dpbmcuaW5mbyhsZW4oYXV4X3ZhbCkpCmxvZ2dpbmcuaW5mbygnU3RhcnRpbmcgUHJvY2VzcycpCgptYXBkYXRhID0gcG9vbC5tYXAoZ2V0RUFTRSwgYXV4X3ZhbCkKCmxvZ2dpbmcuaW5mbygnQ29tcGxldGVkJykKCgoKCgo=","leo1311"
"ACMGNRCN39596","ACMGNRCN39596_Acme.py","","leo1311"
"ACMLP_CR65949","ACMLP_CR65949_leo1311.py","aW1wb3J0IHN5cwppbXBvcnQgb3MKaW1wb3J0IHB5b2RiYwppbXBvcnQganNvbgpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQpmcm9tIGxlYXAudXRpbHMuVXRpbGl0aWVzIGltcG9ydCBVdGlsaXRpZXMKaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyCmZyb20gZGF0ZXRpbWUgaW1wb3J0IHRpbWV6b25lCgoKbG9nZ2VyLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dlci5JTkZPLGZvcm1hdD0nJShhc2N0aW1lKXMgSU5GTyAlKG1lc3NhZ2UpcycsIGRhdGVmbXQ9JyV5LyVtLyVkICVIOiVNOiVTJykKCmFyZ3VtZW50cyA9c3lzLmFyZ3YKZGljdD17fQpmb3IgYXJnIGluIGFyZ3VtZW50czoKICAgIHRyeToKICAgICAgICBkaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICgnOicpLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQogICAgZXhjZXB0OgogICAgICAgIGE9J2Vycm9yJwoKCmljbVBheWxvYWQgPSBqc29uLmxvYWRzKGRpY3RbJ2luY2lkZW50UGF5bG9hZCddKQoKaWNtUGF5bG9hZE1hcHBpbmcgPSB7J251bWJlcic6J251bWJlcicsJ3Nob3J0ZGVzY3JpcHRpb24nOidzaG9ydGRlc2NyaXB0aW9uJywncHJpb3JpdHkuZGlzcGxheVZhbHVlJzoncHJpb3JpdHknLCdzdGF0ZS5kaXNwbGF5VmFsdWUnOidzdGF0ZScsCiAgICAgICAgICAgICAgICAgICAgICAgICdkZXNjcmlwdGlvbic6J2Rlc2NyaXB0aW9uJywnY2F0ZWdvcnkuZGlzcGxheVZhbHVlJzonY2F0ZWdvcnknLCdpbXBhY3QuZGlzcGxheVZhbHVlJzonaW1wYWN0JywKICAgICAgICAgICAgICAgICAgICAgICAgJ2Fzc2lnbm1lbnRncm91cC5kaXNwbGF5VmFsdWUnOidhc3NpZ25tZW50Z3JvdXAnLCdjb25maWd1cmF0aW9uaXRlbS5kaXNwbGF5VmFsdWUnOidjb25maWd1cmF0aW9uSXRlbScsJ2Fzc2lnbmVkdG8uZGlzcGxheVZhbHVlJzonYXNzaWduZWR0bycsCiAgICAgICAgICAgICAgICAgICAgICAgICdzb3AnOidzb3AnLCdyZXNvbHV0aW9uU3RlcHNDbHVzdGVyTmFtZSc6J3dvcmtmbG93JywgJ2NhbGxlci5kaXNwbGF5VmFsdWUnOidjYWxsZXInfQojbWFwQ29sdW1ucwpmb3VuZENvbHVtbnMgPSBbXQpyb3cgPSB7fQpmb3Iga2V5IGluIGljbVBheWxvYWRNYXBwaW5nLmtleXMoKToKICAgIGp2ID0gaWNtUGF5bG9hZAogICAgaWNtQ29sdW1uID0ga2V5LnNwbGl0KCcuJykKICAgIGZvciBpdGVtIGluIGljbUNvbHVtbjoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGp2ID0ganZbaXRlbV0KICAgICAgICAgICAgcm93W2ljbVBheWxvYWRNYXBwaW5nW2tleV1dID0ganYKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIGE9J05vIG1hcHBpbmcnCgpyb3dbJ251bWJlciddID0gJ0lOQ3swfScuZm9ybWF0KGludChkYXRldGltZS5ub3coKS5yZXBsYWNlKHR6aW5mbz10aW1lem9uZS51dGMpLnRpbWVzdGFtcCgpKSkKcm93Wydzb3VyY2UnXSA9ICdMRUFQJwpyb3dbJ3R5cGUnXSA9IGRpY3RbJ3RpY2tldFR5cGUnXQpyb3dbJ2xhc3RVcGRhdGVkJ109ZGF0ZXRpbWUubm93KCkKcm93WydvcGVuZWREYXRlJ109ZGF0ZXRpbWUubm93KCkKcm93Wyd1cGRhdGVkRGF0ZSddPWRhdGV0aW1lLm5vdygpCnJvd1snY3JlYXRlZERhdGUnXT1kYXRldGltZS5ub3coKQpyb3dbJ2NyZWF0ZWRieSddID0gJ2FkbWluJwoKI0xFQVAgRGF0YXNvdXJjZQpsZWFwRFNkaWN0ID0ganNvbi5sb2FkcyhkaWN0WydMRUFQRGF0YVNvdXJjZSddKQoKIyAjc2F2ZSB0byBkYgpjb2x1bW5MaXN0ID0gcm93LmtleXMoKQpwYXNzd29yZCA9IFV0aWxpdGllcy5kZWNyeXB0KGxlYXBEU2RpY3RbJ3Bhc3N3b3JkJ10sbGVhcERTZGljdFsnc2FsdCddKQp0ZW1wMSA9IGxlYXBEU2RpY3RbJ3VybCddLnNwbGl0KCcvLycpCnRlbXAyID0gdGVtcDFbMV0uc3BsaXQoJzsnKQpzZXJ2ZXIgPSB0ZW1wMlswXQpkYXRhYmFzZSA9ICh0ZW1wMlsxXS5zcGxpdCgnPScpKVsxXQppc1RydXN0ZWQgPSAnbm8nCmlmIGxlYXBEU2RpY3RbJ3VzZXJOYW1lJ10gPT0gJyc6CiAgICBpc1RydXN0ZWQgPSAneWVzJwoKY29ubmVjdGlvblN0cmluZyA9ICdEUklWRVI9ezB9O1NFUlZFUj17MX07ICcgXAogICAgICAgICAgICAgICAgICAgJ0RBVEFCQVNFPXsyfTtVSUQ9ezN9O1BXRD17NH07IHRydXN0ZWRfY29ubmVjdGlvbj17NX0nLmZvcm1hdCgKICAgICdPREJDIERyaXZlciAxNyBmb3IgU1FMIFNFUlZFUicsIHNlcnZlciwgZGF0YWJhc2UsIGxlYXBEU2RpY3RbJ3VzZXJOYW1lJ10sIHBhc3N3b3JkLCBpc1RydXN0ZWQpCmNueCA9IHB5b2RiYy5jb25uZWN0KGNvbm5lY3Rpb25TdHJpbmcpCm15Y3Vyc29yID0gY254LmN1cnNvcigpCnRhYmxlbmFtZT0gZGljdFsnZGF0YVRhYmxlJ10gCgpwYXJhbXNEaWN0ID0ge30KdmFsdWVzID0gW10KZm9yIGtleSBpbiBjb2x1bW5MaXN0OgogICAgdmFsdWVzLmFwcGVuZChyb3dba2V5XSkKCmNvbHVtbnMgPSAnLCAnLmpvaW4oJ1t7MH1dJy5mb3JtYXQoaykgZm9yIGsgaW4gY29sdW1uTGlzdCkKcGxhY2VfaG9sZGVycyA9ICcsICcuam9pbignPycuZm9ybWF0KGspIGZvciBrIGluIHJvdykKCnRyeToKICAgIHF1ZXJ5ID0gJ0lOU0VSVCBJTlRPIHswfSAoezF9KSBWQUxVRVMgKHsyfSknLmZvcm1hdCh0YWJsZW5hbWUsIGNvbHVtbnMsIHBsYWNlX2hvbGRlcnMpCiAgICAKICAgIG15Y3Vyc29yLmV4ZWN1dGUocXVlcnksIHZhbHVlcykKICAgIGNueC5jb21taXQoKQogICAgcHJpbnQoJ0luY2lkZW50IENyZWF0ZWQgOnswfScuZm9ybWF0KHJvd1snbnVtYmVyJ10pKQpleGNlcHQgRXhjZXB0aW9uIGFzIGV4OgogICAgcHJpbnQoZXgpCgpteWN1cnNvci5jbG9zZSgpCmNueC5jbG9zZSgpCgpsb2dnZXIuaW5mbygnQ29tcGxldGVkJykKCgoKCgoKCgoKCg==","leo1311"
"ACMLP_PD72695","ACMLP_PD72695_leo1311.py","aW1wb3J0IHN5cwppbXBvcnQgb3MKaW1wb3J0IHB5b2RiYwppbXBvcnQganNvbgpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQpmcm9tIGxlYXAudXRpbHMuVXRpbGl0aWVzIGltcG9ydCBVdGlsaXRpZXMKaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyCmZyb20gZGF0ZXRpbWUgaW1wb3J0IHRpbWV6b25lCgoKbG9nZ2VyLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dlci5JTkZPLGZvcm1hdD0nJShhc2N0aW1lKXMgSU5GTyAlKG1lc3NhZ2UpcycsIGRhdGVmbXQ9JyV5LyVtLyVkICVIOiVNOiVTJykKCmFyZ3VtZW50cyA9c3lzLmFyZ3YKZGljdD17fQpmb3IgYXJnIGluIGFyZ3VtZW50czoKICAgIHRyeToKICAgICAgICBkaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICgnOicpLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQogICAgZXhjZXB0OgogICAgICAgIGE9J2Vycm9yJwoKCmljbVBheWxvYWQgPSBqc29uLmxvYWRzKGRpY3RbJ2luY2lkZW50UGF5bG9hZCddKQoKaWNtUGF5bG9hZE1hcHBpbmcgPSB7J251bWJlcic6J251bWJlcicsJ3Nob3J0ZGVzY3JpcHRpb24nOidzaG9ydGRlc2NyaXB0aW9uJywncHJpb3JpdHkuZGlzcGxheVZhbHVlJzoncHJpb3JpdHknLCdzdGF0ZS5kaXNwbGF5VmFsdWUnOidzdGF0ZScsCiAgICAgICAgICAgICAgICAgICAgICAgICdkZXNjcmlwdGlvbic6J2Rlc2NyaXB0aW9uJywnY2F0ZWdvcnkuZGlzcGxheVZhbHVlJzonY2F0ZWdvcnknLCdpbXBhY3QuZGlzcGxheVZhbHVlJzonaW1wYWN0JywKICAgICAgICAgICAgICAgICAgICAgICAgJ2Fzc2lnbm1lbnRncm91cC5kaXNwbGF5VmFsdWUnOidhc3NpZ25tZW50Z3JvdXAnLCdjb25maWd1cmF0aW9uaXRlbS5kaXNwbGF5VmFsdWUnOidjb25maWd1cmF0aW9uSXRlbScsJ2Fzc2lnbmVkdG8uZGlzcGxheVZhbHVlJzonYXNzaWduZWR0bycsCiAgICAgICAgICAgICAgICAgICAgICAgICdzb3AnOidzb3AnLCdyZXNvbHV0aW9uU3RlcHNDbHVzdGVyTmFtZSc6J3dvcmtmbG93JywgJ2NhbGxlci5kaXNwbGF5VmFsdWUnOidjYWxsZXInfQojbWFwQ29sdW1ucwpmb3VuZENvbHVtbnMgPSBbXQpyb3cgPSB7fQpmb3Iga2V5IGluIGljbVBheWxvYWRNYXBwaW5nLmtleXMoKToKICAgIGp2ID0gaWNtUGF5bG9hZAogICAgaWNtQ29sdW1uID0ga2V5LnNwbGl0KCcuJykKICAgIGZvciBpdGVtIGluIGljbUNvbHVtbjoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGp2ID0ganZbaXRlbV0KICAgICAgICAgICAgcm93W2ljbVBheWxvYWRNYXBwaW5nW2tleV1dID0ganYKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIGE9J05vIG1hcHBpbmcnCgoKCnJvd1snc291cmNlJ10gPSAnTEVBUCcKcm93Wyd0eXBlJ10gPSBkaWN0Wyd0aWNrZXRUeXBlJ10Kcm93WydsYXN0VXBkYXRlZCddPWRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCclWS0lbS0lZCAlSDolTTolUycpCnJvd1snb3BlbmVkRGF0ZSddPWRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCclWS0lbS0lZCAlSDolTTolUycpCnJvd1sndXBkYXRlZERhdGUnXT1kYXRldGltZS5ub3coKS5zdHJmdGltZSgnJVktJW0tJWQgJUg6JU06JVMnKQpyb3dbJ2NyZWF0ZWREYXRlJ109ZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoJyVZLSVtLSVkICVIOiVNOiVTJykKcm93WydjcmVhdGVkYnknXSA9ICdhZG1pbicKCiNMRUFQIERhdGFzb3VyY2UKbGVhcERTZGljdCA9IGpzb24ubG9hZHMoZGljdFsnTEVBUERhdGFTb3VyY2UnXSkKCiMgI3NhdmUgdG8gZGIKY29sdW1uTGlzdCA9IHJvdy5rZXlzKCkKcGFzc3dvcmQgPSBVdGlsaXRpZXMuZGVjcnlwdChsZWFwRFNkaWN0WydwYXNzd29yZCddLGxlYXBEU2RpY3RbJ3NhbHQnXSkKdGVtcDEgPSBsZWFwRFNkaWN0Wyd1cmwnXS5zcGxpdCgnLy8nKQp0ZW1wMiA9IHRlbXAxWzFdLnNwbGl0KCc7JykKc2VydmVyID0gdGVtcDJbMF0KZGF0YWJhc2UgPSAodGVtcDJbMV0uc3BsaXQoJz0nKSlbMV0KaXNUcnVzdGVkID0gJ25vJwppZiBsZWFwRFNkaWN0Wyd1c2VyTmFtZSddID09ICcnOgogICAgaXNUcnVzdGVkID0gJ3llcycKCmNvbm5lY3Rpb25TdHJpbmcgPSAnRFJJVkVSPXswfTtTRVJWRVI9ezF9OyAnIFwKICAgICAgICAgICAgICAgICAgICdEQVRBQkFTRT17Mn07VUlEPXszfTtQV0Q9ezR9OyB0cnVzdGVkX2Nvbm5lY3Rpb249ezV9Jy5mb3JtYXQoCiAgICAnT0RCQyBEcml2ZXIgMTcgZm9yIFNRTCBTRVJWRVInLCBzZXJ2ZXIsIGRhdGFiYXNlLCBsZWFwRFNkaWN0Wyd1c2VyTmFtZSddLCBwYXNzd29yZCwgaXNUcnVzdGVkKQpjbnggPSBweW9kYmMuY29ubmVjdChjb25uZWN0aW9uU3RyaW5nKQpteWN1cnNvciA9IGNueC5jdXJzb3IoKQoKdGFibGVuYW1lPSBkaWN0WydkYXRhVGFibGUnXSAKIyBnZXQgUHJpbWFyeSBrZXkgY29sdW1ucyBvZiB0YWJsZQpwcmltYXJ5a2V5Q29sdW1ucyA9IFtdCnEgPSAnJydTRUxFQ1QgQ29sLkNvbHVtbl9OYW1lIGZyb20gSU5GT1JNQVRJT05fU0NIRU1BLlRBQkxFX0NPTlNUUkFJTlRTIFRhYixcCiAgICAgICAgSU5GT1JNQVRJT05fU0NIRU1BLkNPTlNUUkFJTlRfQ09MVU1OX1VTQUdFIENvbCBcCiAgICAgICAgV0hFUkUgQ29sLkNvbnN0cmFpbnRfTmFtZSA9IFRhYi5Db25zdHJhaW50X05hbWUgQU5EIENvbC5UYWJsZV9OYW1lID0gVGFiLlRhYmxlX05hbWUgXAogICAgICAgIEFORCBDb25zdHJhaW50X1R5cGUgPSAnUFJJTUFSWSBLRVknIEFORCBDb2wuVGFibGVfTmFtZSA9ICd7MH0nICcnJy5mb3JtYXQodGFibGVuYW1lKQpteWN1cnNvci5leGVjdXRlKHEpCmZvciByZXMgaW4gbXljdXJzb3IuZmV0Y2hhbGwoKToKICAgIHByaW1hcnlrZXlDb2x1bW5zLmFwcGVuZChyZXNbMF0pCgpjb2xfdmFsdWUgPSBbXQp2YWx1ZXMgPSBbXQpwYXJhbXNEaWN0ID0ge30KZm9yIGtleSBpbiByb3cua2V5cygpOgogICAgcGFyYW1zRGljdFtrZXldID0gcm93W2tleV0KICAgIHZhbHVlcy5hcHBlbmQocm93W2tleV0pCiAgICBjb2xfdmFsdWUuYXBwZW5kKCcnJ1t7MH1dPSd7MX0nICcnJy5mb3JtYXQoa2V5LCByb3dba2V5XSkpCgpjb2x1bW5zID0gJywgJy5qb2luKGNvbHVtbkxpc3QpCmNvbF92YWx1ZXMgPSAnLCAnLmpvaW4oY29sX3ZhbHVlKQppZiBsZW4ocHJpbWFyeWtleUNvbHVtbnMpID4gMDoKICAgIGpvaW5vbiA9ICcgQU5EICcuam9pbigndC5bezB9XSA9IHMuW3swfV0nLmZvcm1hdChjb2wpIGZvciBjb2wgaW4gcHJpbWFyeWtleUNvbHVtbnMpCmVsc2U6CiAgICBqb2lub24gPSAnIEFORCAnLmpvaW4oJ3QuW3swfV0gPSBzLlt7MH1dJy5mb3JtYXQoY29sKSBmb3IgY29sIGluIGNvbHVtbkxpc3QpCnVwZGF0ZVZhbHVlcyA9ICcsICcuam9pbignW3swfV0gPSBzLlt7MH1dJy5mb3JtYXQoY29sKSBmb3IgY29sIGluIGNvbHVtbkxpc3QpCmluc2VydFZhbHVlcyA9ICcsICcuam9pbigncy5bezB9XScuZm9ybWF0KGNvbCkgZm9yIGNvbCBpbiBjb2x1bW5MaXN0KQpxdWVyeSA9ICdNRVJHRSAgSU5UTyBbezB9XSBBUyB0IFVTSU5HIChTRUxFQ1QgezF9KSBBUyBzICBPTiB7Mn0gV0hFTiBNQVRDSEVEIFRIRU4gVVBEQVRFIFNFVCB7M30gV0hFTiBOT1QgTUFUQ0hFRCBUSEVOIElOU0VSVCh7NH0pIFZBTFVFUyh7NX0pOycuZm9ybWF0KAogICAgdGFibGVuYW1lLCBjb2xfdmFsdWVzLCBqb2lub24sIHVwZGF0ZVZhbHVlcywgY29sdW1ucywgaW5zZXJ0VmFsdWVzKQoKbXljdXJzb3IuZXhlY3V0ZShxdWVyeSkKCmNueC5jb21taXQoKQpteWN1cnNvci5jbG9zZSgpCmNueC5jbG9zZSgpCmxvZ2dlci5pbmZvKCdDb21wbGV0ZWQnKQoKCgoKCgoKCgoKCg==","leo1311"
