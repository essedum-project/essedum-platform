"cname","filename","filescript","organization"
"DEMCDGNR69853","DEMCDGNR69853_leo1311.py","import sys
import os.path
import json
import re
from leaputils import DAG

from datetime import datetime

arguments = sys.argv
dict = {}
for arg in arguments:
    try:
        dict[arg.split(':')[0]] = (':').join(arg.split(':')[1:])
    except:
        a = 'error'


# base script for Spark
def baseScript():
    return '''from pyspark.ml import Pipeline
from pyspark.sql import SparkSession
import logging
from pyspark.ml.feature import *
{imports}

def initiateSpark():
    spark = SparkSession.builder.appName('{pipelineName}').getOrCreate()
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s', datefmt='%y/%m/%d %H:%M:%S')
    logging.info('Initiated Spark')
    return spark

def getData(spark):
    logging.info('Fetching Datasets')
{extractors}
    return {in_datasets}
{preprocessingScript}
def pipeline(spark, dataset):
    logging.info('Executing Pipeline')
    splits = dataset.randomSplit([0.7, 0.3])
    trainds = splits[0]
    testds = splits[1]
    pipelineStages = []
{modelSource}
{transformers}
{domainSolution}
    pipeline = Pipeline(stages=pipelineStages+[{pipelinestages}])
    model = pipeline.fit(trainds)
    {modelSink}
    result = model.transform(testds)
    return model, result
{postprocessingScript}
{loaders}

def executePipeline():
    spark = initiateSpark()
    {in_datasets}= getData(spark)
    {main_preprocessing}
    model, result = pipeline(spark, dataset)
    {main_postprocessing}
    {main_loaders}
    logging.info('Completed')


if __name__ == '__main__':
    executePipeline()

'''


# fill all job params in pipelineJson
def fillJobParams(pipelineJson):
    organization = pipelineJson.get('org', 'INFOSYS')

    # Set all Job Params
    jobParams = {}
    jobParams['NextExecutionTime'] = pipelineJson.get('Next_Execution_Time', '')
    jobParams['CurrentExecutionTime'] = pipelineJson.get('Current_Execution_Time', '')
    jobParams['LastSuccessfulExecutionTime'] = pipelineJson.get('Last_Successful_Execution_Time', '')
    jobParams['LastExecutionTime'] = pipelineJson.get('Last_Execution_Time', '')

    regEx = '<jobParams:([\w\.-]+);(.*?)>'
    pipelineJsonList = []

    for item in pipelineJson['elements']:
        itemText = json.dumps(item)
        # replace Org
        itemText = itemText.replace('<jobParams:orgName>', organization)
        # replace timestamps
        params = re.findall(regEx, itemText)
        for p in params:
            textToreplace = '<jobParams:{0};{1}>'.format(p[0], p[1])
            if jobParams[p[0]] != '' and jobParams[p[0]] != -1:
                try:
                    dt = datetime.strptime(jobParams[p[0]], '%a, %d %b %Y %H:%M:%S')
                    replaceWith = datetime.strftime(dt, p[1])
                    itemText = itemText.replace(textToreplace, replaceWith)
                except:
                    a = 1
        pipelineJsonList.append(json.loads(itemText))
    return pipelineJsonList


# Build DAG of all the nodes
# Returns the list of elements in order
def buildDAG(pipelineJsonList):
    orderedElementList = DAG.build(pipelineJsonList);
    orderedElementList = list(filter(None, orderedElementList))
    return orderedElementList


# fill node attributes with Actual Data
def fillData(node, script):
    attributes = re.findall('\<(.*?)\>', script)
    for item in attributes:
        input_split = item.split('.')
        keys = ''.join([f'''['{k}']''' for k in input_split])
        try:
            value = eval(f'''node.attributes''' + f'''{keys}''')
            script = script.replace('<' + item + '>', value)
        except:
            a = 1
    return script


def generateScript():
    with open(os.path.join(dict['scriptPath'],'pipeline.json')) as f:
        pipelineJson = f.read()

    pipelineJson = json.loads(pipelineJson)

    pipelineElements = fillJobParams(pipelineJson)
    orderedElementList = buildDAG(pipelineElements)

    import_lines = []
    extractors = []
    in_datasets = []
    preProcessingScript = ''
    transformers = []
    modelSource = ''
    pipelineStages = []
    modelSink = ''
    postProcessingScript = ''
    loaders = []
    domainSolution = ''
    out_datasets = []
    main_loaders = []
    main_preprocessing = ''
    main_postprocessing = ''

    for node in orderedElementList:
        # Extractors
        element = next(e for e in pipelineJson['elements'] if e['id'] == node.id)
        if node.className == 'DatasetExtractorConfig':
            extractorScript = \
                element['codeGeneration'][node.attributes['dataset']['datasource']['type']]['script']
            extractorScript = extractorScript.replace('<id>', node.id)
            node.attributes['dataset']['datasource']['connectionDetails'] = json.loads(
                node.attributes['dataset']['datasource']['connectionDetails'])
            extractorScript = fillData(node, extractorScript)
            extractors.append(extractorScript)
            in_datasets.append('dataset_{}'.format(node.id))
            import_lines = import_lines + \
                           element['codeGeneration'][node.attributes['dataset']['datasource']['type']]['imports']
        # Transformers
        if node.category == 'TransformerConfig':
            transformerScript = element['codeGeneration']['script']
            transformerScript = transformerScript.replace('<id>', node.id)
            transformerScript = fillData(node, transformerScript)
            transformers.append(transformerScript)
            import_lines = import_lines + element['codeGeneration']['imports']

        # ModelSink
        if node.className == 'ModelSinkConfig':
            modelSink = element['codeGeneration']['script']
            modelSink = modelSink.replace('<id>', node.id)
            modelSink = fillData(node, modelSink)
            import_lines = import_lines + element['codeGeneration']['imports']

        # Analyzer
        if node.category == 'AnalyzerConfig':
            analyzerScript = element['codeGeneration']['script']
            analyzerScript = analyzerScript.replace('<id>', node.id)
            analyzerScript = fillData(node, analyzerScript)
            transformers.append(analyzerScript)
            import_lines = import_lines + element['codeGeneration']['imports']
            pipelineStages.append('analyzer_{0}'.format(node.id))

        # Pre-processing Script
        if node.className == 'PreProcessingScriptConfig':
            preProcessingScript = ''
            preProcessingscriptlines = list(node.attributes['script'])

            preProcessingScript = preProcessingScript + ''''''.join(node.attributes['script'])

            imports = preProcessingScript[0:preProcessingScript.index('class CustomPythonClass(')].split('\r')
            preProcessingBaseScript = '''\r\ndef preprocessing(spark, {in_datasets}):
    logging.info('Pre Processing')\r'''
            preProcessingScript = preProcessingBaseScript + preProcessingScript[
                                                            preProcessingScript.index('class CustomPythonClass('):]
            preProcessingScript = ['    ' + l for l in preProcessingScript.split('\r') if l.strip() != '']
            preProcessingScript = '\r'.join(preProcessingScript)
            preProcessingScript = preProcessingScript + '''\r    dataset = CustomPythonClass.__main__('',{in_datasets})\r''' + '''    return dataset\r'''
            import_lines = import_lines + imports
            main_preprocessing = '''dataset = preprocessing(spark, {in_datasets})'''

        # Post-processing Script
        if node.className == 'PostProcessingScriptConfig':
            postProcessingScript = ''''''
            postProcessingscriptlines = list(node.attributes['script'])
            postProcessingScript = postProcessingScript + ''''''.join(postProcessingscriptlines)
            imports = postProcessingScript[0:postProcessingScript.index('class CustomPythonClass(')].split('\r')
            postProcessingBaseScript = '''\r\n
def postProcessing(spark, model, dataset):
    logging.info('Post Processing')\r'''
            postProcessingScript = postProcessingBaseScript + postProcessingScript[
                                                              postProcessingScript.index('class CustomPythonClass('):]
            postProcessingScript = ['    ' + l for l in postProcessingScript.split('\r') if l.strip() != '']
            postProcessingScript = '\r'.join(postProcessingScript)
            postProcessingScript = postProcessingScript + '''\r    {out_datasets} = CustomPythonClass.__main__('',model,dataset)\r''' + '''    return {out_datasets}\r'''
            import_lines = import_lines + imports
            main_postprocessing = '''{out_datasets} = postProcessing(spark,model,result)'''

        # Loaders
        if node.className == 'DatasetLoaderConfig':
            loaderbasescript = '''def loadData_<id>(spark,dataset_<id>):\r    logging.info('Saving Dataset <id>')\r'''
            loaderscript = element['codeGeneration'][node.attributes['dataset']['datasource']['type']]['script']
            loaderscript = loaderbasescript + loaderscript
            out_datasets.append('dataset_{}'.format(node.id))
            loaderscript = loaderscript.replace('<id>', node.id)
            node.attributes['dataset']['datasource']['connectionDetails'] = json.loads(
                node.attributes['dataset']['datasource']['connectionDetails'])
            loaderscript = fillData(node, loaderscript)
            loaders.append(loaderscript)
            import_lines = import_lines + \
                           element['codeGeneration'][node.attributes['dataset']['datasource']['type']][
                               'imports']
            main_loaders.append('''loadData_<id>(spark,dataset_<id>)'''.replace('<id>', node.id))

    import_lines = [l for l in set(import_lines) if l != '']
    pipelineCode = baseScript()
    pipelineCode = pipelineCode.replace('{imports}', ('\r').join(import_lines))
    pipelineCode = pipelineCode.replace('{pipelineName}', dict['pipelineName'])
    pipelineCode = pipelineCode.replace('{extractors}', ('\r').join(extractors))
    pipelineCode = pipelineCode.replace('{preprocessingScript}', preProcessingScript)
    pipelineCode = pipelineCode.replace('{transformers}', ('\r').join(transformers))
    pipelineCode = pipelineCode.replace('{pipelinestages}', (',').join(pipelineStages))
    pipelineCode = pipelineCode.replace('{postprocessingScript}', postProcessingScript)
    pipelineCode = pipelineCode.replace('{loaders}', ('\r\n').join(loaders))
    pipelineCode = pipelineCode.replace('{modelSink}', modelSink)
    pipelineCode = pipelineCode.replace('{modelSource}', modelSource)
    pipelineCode = pipelineCode.replace('{domainSolution}', domainSolution)
    pipelineCode = pipelineCode.replace('{main_preprocessing}', main_preprocessing)
    pipelineCode = pipelineCode.replace('{main_postprocessing}', main_postprocessing)
    pipelineCode = pipelineCode.replace('{main_loaders}', ('\r    ').join(main_loaders))
    pipelineCode = pipelineCode.replace('{in_datasets}', (', ').join(in_datasets))
    pipelineCode = pipelineCode.replace('{out_datasets}', (', ').join(out_datasets))
    pipelineCode = pipelineCode.replace('\r', '\n')
    with open(os.path.join(dict['scriptPath'], dict['pipelineName'] + '_generatedCode.py'), 'w') as f:
        f.writelines(pipelineCode)


if __name__ == '__main__':
    generateScript()

print('Completed')










","leo1311"
"DEMCDGNR37257","DEMCDGNR37257_leo1311.py","import sys, os
from urllib.parse import urlparse
import sys
import os.path
import json
import re
from leaputils import DAG
from datetime import datetime


arguments = sys.argv
argsDict = {}
for arg in arguments:
    try:
        argsDict[arg.split(':')[0]] = (':').join(arg.split(':')[1:])
    except:
        a = 'error'

json_file = os.path.join(argsDict['scriptPath'], 'pipeline.json')
with open(json_file) as f:
    import json

    pipeline_json = json.load(f)

# base script 
def baseScript():
    return '''
import sys
import subprocess

requirements = [{requirements}]
for module in requirements:
    subprocess.check_call([sys.executable, '-m', 'pip', 'install', module])
import logging
import os
{imports}

{functions}

def executePipeline():
{executionOrder}
logging.info('Completed')


if __name__ == '__main__':
    executePipeline()
    print('Completed')
'''


# fill all job params in pipelineJson
def fillJobParams(pipelineJson):

    organization = pipelineJson.get('org', 'INFOSYS')

    # Set all Job Params
    jobParams = {}
    jobParams['NextExecutionTime'] = pipelineJson.get('Next_Execution_Time', '')
    jobParams['CurrentExecutionTime'] = pipelineJson.get('Current_Execution_Time', '')
    jobParams['LastSuccessfulExecutionTime'] = pipelineJson.get('Last_Successful_Execution_Time', '')
    jobParams['LastExecutionTime'] = pipelineJson.get('Last_Execution_Time', '')

    regEx = '<jobParams:([\w\.-]+);(.*?)>'
    pipelineJsonList = []

    for item in pipelineJson['elements']:
        itemText = json.dumps(item)
        # replace Org
        itemText = itemText.replace('<jobParams:orgName>', organization)
        # replace timestamps
        params = re.findall(regEx, itemText)
        for p in params:
            textToreplace = '<jobParams:{0};{1}>'.format(p[0], p[1])
            if jobParams[p[0]] != '' and jobParams[p[0]] != -1:
                try:
                    dt = datetime.strptime(jobParams[p[0]], '%a, %d %b %Y %H:%M:%S')
                    replaceWith = datetime.strftime(dt, p[1])
                    itemText = itemText.replace(textToreplace, replaceWith)
                except:
                    a = 1
        pipelineJsonList.append(json.loads(itemText))
    return pipelineJsonList


# Build DAG of all the nodes
# Returns the list of elements in order
def buildDAG(pipelineJsonList):
    orderedElementList = DAG.build(pipelineJsonList);
    orderedElementList = list(filter(None, orderedElementList))
    return orderedElementList


# fill node attributes with Actual Data
def fillData(node, script):
    attributes = re.findall('\<(.*?)\>', script)
    print(node.attributes)
    for item in attributes:

        input_split = item.split('.')
        keys = ''.join([f'''['{k}']''' for k in input_split])
        
        try:
            
            value = eval(f'''node.attributes''' + f'''{keys}''')
            
            script = script.replace('<' + item + '>', str(value))
            
            
        except:
            print('in Except')
            print(item)
            script = script.replace('<' + item + '>', '')

    return script



def generateScript(pipelineJson):

    pipelineElements = fillJobParams(pipelineJson)
    orderedElementList = buildDAG(pipelineElements)
    requirements = []
    import_lines = []
    functions = []


    for node in orderedElementList:
        # Extractors
        element = next(e for e in pipelineJson['elements'] if e['id'] == node.id)

        if node.className == 'DatasetExtractorConfig':
            extractorScript = \
                element['codeGeneration'][node.attributes['dataset']['datasource']['type']]['script']
            extractorScript = extractorScript.replace('<id>', node.id)

            if isinstance(node.attributes['dataset']['attributes'], str):
                node.attributes['dataset']['attributes'] = json.loads(node.attributes['dataset']['attributes'])
            node.attributes['dataset']['datasource']['connectionDetails'] = json.loads(
                node.attributes['dataset']['datasource']['connectionDetails'])
            extractorScript = fillData(node, extractorScript)
            functions.append(extractorScript)
            import_lines = import_lines + \
                           element['codeGeneration'][node.attributes['dataset']['datasource']['type']]['imports']
            requirements = requirements + \
                           element['codeGeneration'][node.attributes['dataset']['datasource']['type']].get('requirements',[])

            
        # Pre-processing Script
        elif node.className == 'ScriptTransformerConfig' or node.className == 'PreProcessingScriptConfig' or node.className == 'PostProcessingScriptConfig':
            processingScript = ''
            processingScript = ('').join(node.attributes['script'])
           
            processingScript = processingScript.replace('\r', '\n')
            processingScript = processingScript.replace('<id>', node.id)
            functions.append(processingScript)
            requirements = requirements + node.attributes['requirements'].split(',')
        

        # Loaders
        elif node.className == 'DatasetLoaderConfig':

            try:
                loaderscript = element['codeGeneration'][node.attributes['dataset']['datasource']['type']]['script']
                requirements = requirements + \
                               element['codeGeneration'][node.attributes['dataset']['datasource']['type']].get('requirements',[])

            except:
                loaderscript = element['codeGeneration']['script']
                requirements = requirements + element['codeGeneration'].get('requirements','')
            loaderscript = loaderscript.replace('<id>', node.id)
            if node.attributes.get('dataset', '') != '' and isinstance(node.attributes['dataset']['attributes'],
                                                                       str):
                node.attributes['dataset']['attributes'] = json.loads(node.attributes['dataset']['attributes'])
            if node.attributes.get('dataset', '') != '' and isinstance(node.attributes['dataset']['datasource']['connectionDetails'] ,
                                                                       str):
                node.attributes['dataset']['datasource']['connectionDetails'] = json.loads(
                    node.attributes['dataset']['datasource']['connectionDetails'])
            print(node.attributes['dataset']['datasource']['connectionDetails'])
            loaderscript = fillData(node, loaderscript)
            functions.append(loaderscript)

            try:
                import_lines = import_lines + \
                               element['codeGeneration'][node.attributes['dataset']['datasource']['type']][
                                   'imports']

            except:
                import_lines = import_lines + \
                               element['codeGeneration']['imports']
        
        # Transformers
        else:
            
            transformerScript = element['codeGeneration']['script']
            nodename = ''.join(node.name.split(' '))

            transformerScript = transformerScript.replace('<id>', node.id)
            transformerScript = fillData(node, transformerScript)
            functions.append(transformerScript)
            import_lines = import_lines + element['codeGeneration']['imports']
            if element['codeGeneration'].get('requirements', '') != '':
                requirements = requirements + element['codeGeneration'].get('requirements', [])
            


    import_lines = [l for l in set(import_lines) if l != '']
    requirements = [l for l in set(requirements) if l != '']
    pipelineCode = baseScript()
    pipelineCode = pipelineCode.replace('{imports}', ('\n').join(import_lines))
    if len(requirements)>0:
        pipelineCode = pipelineCode.replace('{requirements}', '\''+ ('\',\'').join(requirements)+'\'')
    else:
         pipelineCode = pipelineCode.replace('{requirements}', '')
        
    pipelineCode = pipelineCode.replace('{pipelineName}', argsDict['pipelineName'])
    pipelineCode = pipelineCode.replace('{functions}', ('\r').join(functions))
    executionOrder = '\n'

    for node in orderedElementList:
        inputs = []
        outputs = []
        nodename = ''.join(node.name.split(' '))
        nodeid = node.id

        for connector in node.connectors:

            if (connector['type'] == 'target'):
                inputs.append('ds_' + connector['position'] + '_' + nodeid)
            if (connector['type'] == 'source'):
                outputs.append('ds_' + connector['elementPosition'] + '_' + connector['elementId'])
        if len(outputs) > 0:
            call = '    ' + ','.join(outputs) + ' = ' + nodename + '_' + nodeid + '(' + ','.join(inputs) + ')\n'
        else:
            call = '    ' + nodename + '_' + nodeid + '(' + ','.join(inputs) + ')\n'
        executionOrder = executionOrder + call
    pipelineCode = pipelineCode.replace('{executionOrder}', executionOrder)
    pipelineCode = pipelineCode.replace('\r', '\n')
    with open(os.path.join(argsDict['scriptPath'], argsDict['pipelineName'] + '_generatedCode.py'), 'w') as f:
        f.writelines(pipelineCode)


generateScript(pipeline_json)

print('Completed')









","leo1311"
