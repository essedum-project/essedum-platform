"cname","filename","filescript","organization"
"ACMKYPHR40814","ACMKYPHR40814_leo1311.py","aW1wb3J0IHB5b2RiYwppbXBvcnQgbG9nZ2luZwppbXBvcnQgc3lzCmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCBxdW90ZV9wbHVzLCB1cmxwYXJzZQpmcm9tIGxlYXAudXRpbHMuVXRpbGl0aWVzIGltcG9ydCBVdGlsaXRpZXMKZnJvbSBza2xlYXJuLmZlYXR1cmVfZXh0cmFjdGlvbi50ZXh0IGltcG9ydCBUZmlkZlZlY3Rvcml6ZXIKaW1wb3J0IG51bXB5IGFzIG5wCmltcG9ydCB0aW1laXQKaW1wb3J0IGpzb24KaW1wb3J0IHJlCgpsb2dnaW5nLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dpbmcuSU5GTywgZm9ybWF0PSclKGFzY3RpbWUpcyBJTkZPICUobWVzc2FnZSlzJywgZGF0ZWZtdD0nJXkvJW0vJWQgJUg6JU06JVMnKQoKYXJndW1lbnRzID0gc3lzLmFyZ3YKCmRpY3QgPSB7fQpmb3IgYXJnIGluIGFyZ3VtZW50czoKICAgIHRyeToKICAgICAgICBkaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICgnOicpLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQogICAgZXhjZXB0OgogICAgICAgIGEgPSAnZXJyb3InCgoKZGVmIGdldFNpbWlsYXIoc2VudGVuY2VzLCBrZXl3b3Jkcyk6CiAgICBjb3JwdXMgPSBzZW50ZW5jZXMgKyBrZXl3b3JkcwogICAga2V5d29yZHN0YXJ0SW5kZXggPSBsZW4oc2VudGVuY2VzKQogICAgdGZpZGZDb3JwdXMgPSBUZmlkZlZlY3Rvcml6ZXIobWluX2RmPTEsIHN0b3Bfd29yZHM9J2VuZ2xpc2gnKS5maXRfdHJhbnNmb3JtKGNvcnB1cykKICAgIHBhaXJ3aXNlX3NpbWlsYXJpdHkgPSB0ZmlkZkNvcnB1cyAqIHRmaWRmQ29ycHVzLlQKICAgIGFyciA9IHBhaXJ3aXNlX3NpbWlsYXJpdHkudG9hcnJheSgpCiAgICBucC5maWxsX2RpYWdvbmFsKGFyciwgbnAubmFuKQogICAgcmVzdWx0cyA9IHt9CiAgICBmb3IgcyBpbiBzZW50ZW5jZXM6CiAgICAgICAgaW5wdXRfaWR4ID0gc2VudGVuY2VzLmluZGV4KHMpCiAgICAgICAgcmVzdWx0X2lkeCA9IG5wLm5hbmFyZ21heChhcnJbaW5wdXRfaWR4XVtrZXl3b3Jkc3RhcnRJbmRleDpdKQogICAgICAgIG1hdGNoID0gYXJyW2lucHV0X2lkeF1ba2V5d29yZHN0YXJ0SW5kZXggKyByZXN1bHRfaWR4XQogICAgICAgIHIgPSBrZXl3b3Jkc1tyZXN1bHRfaWR4XQogICAgICAgIGlmIG1hdGNoID4gMDoKICAgICAgICAgICAgcmVzdWx0c1tzXSA9IHIgKyAnOicgKyBzdHIobWF0Y2gpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmVzdWx0c1tzXSA9ICdOTyBNQVRDSDowJwogICAgcmV0dXJuIHJlc3VsdHMKCgpsZWFwZHMgPSBkaWN0WydMRUFQRFMnXQpsZWFwRFNkaWN0ID0ganNvbi5sb2FkcyhsZWFwZHMpCgp1c2VybmFtZSA9IGxlYXBEU2RpY3RbJ3VzZXJOYW1lJ10KcGFzc3dvcmQgPSBVdGlsaXRpZXMuZGVjcnlwdChsZWFwRFNkaWN0WydwYXNzd29yZCddLGxlYXBEU2RpY3RbJ3NhbHQnXSkKc2VydmVyID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5uZXRsb2Muc3BsaXQoJzsnLCAxKVswXQpyZWdleCA9ICdeKCgyNVswLTVdfDJbMC00XVswLTldfDFbMC05XVswLTldfFsxLTldP1swLTldKVwuKXszfSgyNVswLTVdfDJbMC00XVswLTldfDFbMC05XVswLTldfFsxLTldP1swLTldKSQnCgppZihyZS5zZWFyY2gocmVnZXgsIHNlcnZlci5zcGxpdCgnOicpWzBdKSk6CiAgICBzZXJ2ZXI9c2VydmVyLnJlcGxhY2UoJzonLCcsJykKCmRhdGFiYXNlID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5uZXRsb2Muc3BsaXQoJzsnLCAxKVsxXS5zcGxpdCgnPScsMSlbMV0KY29ubmVjdGlvblN0cmluZyA9ICdEUklWRVI9ezB9O1NFUlZFUj17MX07ICcgXAogICAgICAgICAgICAgICAgICAgICAgICAgICAnREFUQUJBU0U9ezJ9O1VJRD17M307UFdEPXs0fScuZm9ybWF0KAogICAgICAgICAgICAnT0RCQyBEcml2ZXIgMTcgZm9yIFNRTCBTRVJWRVInLCBzZXJ2ZXIsIGRhdGFiYXNlLCB1c2VybmFtZSwgcGFzc3dvcmQpCmNueCA9IHB5b2RiYy5jb25uZWN0KGNvbm5lY3Rpb25TdHJpbmcpCm15Y3Vyc29yID0gY254LmN1cnNvcigpClRhYmxlTmFtZSA9IGRpY3RbJ1RhYmxlTmFtZSddCkVBU0VNYXBwaW5nID0gZGljdFsnRWFzZU1hcHBpbmcnXQpzcWwgPSAnJydTRUxFQ1QgRElTVElOQ1QgVFJJTShDQVNUKGV4dHJhY3RlZF9waHJhc2UgQVMgQ0hBUikpIEFTIGV4dHJhY3RlZF9waHJhc2UgZnJvbSB7MH0gd2hlcmUgZXh0cmFjdGVkX3BocmFzZSBpcyBub3QgbnVsbCBhbmQgQ0FTVChleHRyYWN0ZWRfcGhyYXNlIGFzIGNoYXIpIDw+ICcnICAnJycuZm9ybWF0KFRhYmxlTmFtZSkKbXljdXJzb3IuZXhlY3V0ZShzcWwpCnJlc3VsdHMgPSBteWN1cnNvci5mZXRjaGFsbCgpCm15Y3Vyc29yLmNsb3NlKCkKcGhyYXNlcyA9IFtdCmZvciBpdGVtIGluIHJlc3VsdHM6CiAgICBwaHJhc2VzLmFwcGVuZChpdGVtWzBdKQoKbXljdXJzb3IyID0gY254LmN1cnNvcigpCnNxbCA9ICcnJ1NFTEVDVCBESVNUSU5DVCBLZXlfV29yZCBmcm9tIHswfScnJy5mb3JtYXQoRUFTRU1hcHBpbmcpCm15Y3Vyc29yMi5leGVjdXRlKHNxbCkKcmVzdWx0cyA9IG15Y3Vyc29yMi5mZXRjaGFsbCgpCmtleXdvcmRzID0gW10KZm9yIGl0ZW0gaW4gcmVzdWx0czoKICAgIGtleXdvcmRzLmFwcGVuZChpdGVtWzBdKQpteWN1cnNvcjIuY2xvc2UoKQoKY254LmNsb3NlKCkKCgpkZWYgZ2V0RUFTRSh0dXApOgogICAgdHJ5OgogICAgICAgIHJlc3VsdHMgPSBnZXRTaW1pbGFyKHR1cFswXSwgdHVwWzFdKQogICAgICAgIFRhYmxlTmFtZSA9IGRpY3RbJ1RhYmxlTmFtZSddCiAgICAgICAgcXVlcnkgPSAnJydVcGRhdGUgezB9IHNldCBtYXBwZWRfcGhyYXNlID0gPyAsIG1hcHBlZF9waHJhc2VfY29uZmlkZW5uY2UgPSA/ICB3aGVyZSBUUklNKENBU1QoZXh0cmFjdGVkX3BocmFzZSBBUyBDSEFSKSkgPSA/ICcnJy5mb3JtYXQoVGFibGVOYW1lKQogICAgICAgIGlucHV0ZGF0YSA9IFtdCiAgICAgICAgZm9yIHBhdHRlcm4gaW4gcmVzdWx0cy5rZXlzKCk6CiAgICAgICAgICAgIGt3ID0gcmVzdWx0c1twYXR0ZXJuXS5zcGxpdCgnOicpWzBdCiAgICAgICAgICAgIHNjb3JlID0gcmVzdWx0c1twYXR0ZXJuXS5zcGxpdCgnOicpWy0xXQogICAgICAgICAgICBpZiBrdyAhPSAnTk8gTUFUQ0gnOgogICAgICAgICAgICAgICAgaW5wdXRkYXRhLmFwcGVuZCgoa3csIHNjb3JlLCBwYXR0ZXJuKSkKICAgICAgICAKICAgICAgICBjb25uZWN0aW9uU3RyaW5nID0gJ0RSSVZFUj17MH07U0VSVkVSPXsxfTsgJyBcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICdEQVRBQkFTRT17Mn07VUlEPXszfTtQV0Q9ezR9Jy5mb3JtYXQoCiAgICAgICAgICAgICdPREJDIERyaXZlciAxNyBmb3IgU1FMIFNFUlZFUicsIHR1cFs0XSwgdHVwWzVdLCB0dXBbMl0sIHR1cFszXSkKICAgICAgICBjbnggPSBweW9kYmMuY29ubmVjdChjb25uZWN0aW9uU3RyaW5nLCBhdXRvY29tbWl0PVRydWUpCiAgICAgICAgbXljdXJzb3IgPSBjbnguY3Vyc29yKCkKICAgICAgICByZXMgPSBteWN1cnNvci5leGVjdXRlbWFueShxdWVyeSwgaW5wdXRkYXRhKQogICAgICAgIGNueC5jb21taXQoKQogICAgICAgIG15Y3Vyc29yLmNsb3NlKCkKICAgICAgICBjbnguY2xvc2UoKQogICAgICAgIHJldHVybiBUcnVlCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGV4OgogICAgICAgIGxvZ2dpbmcud2FybmluZyhleCkKICAgICAgICByZXR1cm4gRmFsc2UKCgpmcm9tIG11bHRpcHJvY2Vzc2luZy5kdW1teSBpbXBvcnQgUG9vbCBhcyBUaHJlYWRQb29sCgphdXhfdmFsID0gW10KdG90YWxsZW4gPSBsZW4ocGhyYXNlcykKbG9nZ2luZy5pbmZvKCdUb3RhbCBSZWNvcmRzOiB7MH0nLmZvcm1hdCh0b3RhbGxlbikpCnN0YXJ0ID0gMApzdGVwID0gMTAwMApmb3IgaSBpbiByYW5nZShzdGFydCwgdG90YWxsZW4sIHN0ZXApOgogICAgc3RvcCA9IGkgKyBzdGVwCiAgICBpZiAoc3RvcCA+IHRvdGFsbGVuKToKICAgICAgICBzdG9wID0gdG90YWxsZW4KICAgIHRyeToKICAgICAgICBhdXhfdmFsLmFwcGVuZCgocGhyYXNlc1tpOnN0b3BdLCBrZXl3b3JkcywgdXNlcm5hbWUsIHBhc3N3b3JkLCBzZXJ2ZXIsIGRhdGFiYXNlKSkKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBsb2dnaW5nLmluZm8oZSkKCnBvb2wgPSBUaHJlYWRQb29sKDQpCmxvZ2dpbmcuaW5mbyhsZW4oYXV4X3ZhbCkpCmxvZ2dpbmcuaW5mbygnU3RhcnRpbmcgUHJvY2VzcycpCgptYXBkYXRhID0gcG9vbC5tYXAoZ2V0RUFTRSwgYXV4X3ZhbCkKCmxvZ2dpbmcuaW5mbygnQ29tcGxldGVkJykKCgoKCgoKCgo=","leo1311"
"DEMCDGNR69853","DEMCDGNR69853_leo1311.py","","leo1311"
"LEASNW_C26690","LEASNW_C26690_Leap.py","","leo1311"
"LEASNWCN40863","LEASNWCN40863_Leap.py","aW1wb3J0IG9zCmltcG9ydCBzeXMKaW1wb3J0IG9zLnBhdGgKaW1wb3J0IHJlCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lCmZyb20gY29sbGVjdGlvbnMgaW1wb3J0IGRlZmF1bHRkaWN0Cgphcmd1bWVudHMgPSBzeXMuYXJndgphcmdzRGljdCA9IHt9CmZvciBhcmcgaW4gYXJndW1lbnRzOgogICAgdHJ5OgogICAgICAgIGFyZ3NEaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICgnOicpLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQogICAgZXhjZXB0OgogICAgICAgIGEgPSAnZXJyb3InCgpqc29uX2ZpbGUgPSBvcy5wYXRoLmpvaW4oYXJnc0RpY3RbJ3NjcmlwdFBhdGgnXSwgJ3BpcGVsaW5lLmpzb24nKQoKd2l0aCBvcGVuKGpzb25fZmlsZSkgYXMgZjoKICAgIGltcG9ydCBqc29uCgogICAgcGlwZWxpbmVfanNvbiA9IGpzb24ubG9hZChmKQoKCiMgYmFzZSBzY3JpcHQKZGVmIGJhc2VTY3JpcHQoKToKICAgIHJldHVybiAnJycKaW1wb3J0IHN5cwppbXBvcnQgc3VicHJvY2VzcwpyZXF1aXJlbWVudHMgPSBbe3JlcXVpcmVtZW50c31dCmZvciBtb2R1bGUgaW4gcmVxdWlyZW1lbnRzOgogICAgc3VicHJvY2Vzcy5ydW4oc3lzLmV4ZWN1dGFibGUgKyAnIC1tIHBpcCBpbnN0YWxsICcrIG1vZHVsZSArICcgLS1pbmRleC11cmwgaHR0cHM6Ly9zaHJleWFfYmFuc2FsQGFkLmluZm9zeXMuY29tOmNtVm1kR3R1T2pBeE9qRTNNakk1TXprMU1qQTZiMjVZYzNaVlJVWXhWMnRZUjFWRFMxcDNlbE5GTWt4UU9IcE1AaW5meWFydGlmYWN0b3J5Lmpmcm9nLmlvL2FydGlmYWN0b3J5L2FwaS9weXBpL3B5cGktcmVtb3RlL3NpbXBsZSAtLXRydXN0ZWQtaG9zdCBpbmZ5YXJ0aWZhY3RvcnkuamZyb2cuaW8nLHNoZWxsPVRydWUpCmltcG9ydCBvcwppbXBvcnQgbG9nZ2luZyBhcyBsb2dnZXIKaW1wb3J0IGpzb24KaW1wb3J0IGltcAoKe2ltcG9ydHN9Cgp7ZnVuY3Rpb25zfQoKZGVmIGV4ZWN1dGVQaXBlbGluZSgpOgp7ZXhlY3V0aW9uT3JkZXJ9CgppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgZXhlY3V0ZVBpcGVsaW5lKCkKICAgIHByaW50KCdDb21wbGV0ZWQnKQonJycKCgojIE5vZGUKY2xhc3MgR3JhcGg6CiAgICBkZWYgX19pbml0X18oc2VsZiwgdmVydGljZXMpOgogICAgICAgIHNlbGYuZ3JhcGggPSBkZWZhdWx0ZGljdChsaXN0KQogICAgICAgIHNlbGYuViA9IHZlcnRpY2VzCgogICAgZGVmIGFkZEVkZ2Uoc2VsZiwgdSwgdik6CiAgICAgICAgc2VsZi5ncmFwaFt1XS5hcHBlbmQodikKCiAgICBkZWYgdG9wb2xvZ2ljYWxTb3J0VXRpbChzZWxmLCB2LCB2aXNpdGVkLCBzdGFjayk6CiAgICAgICAgdmlzaXRlZFt2XSA9IFRydWUKICAgICAgICBmb3IgaSBpbiBzZWxmLmdyYXBoW3ZdOgogICAgICAgICAgICBpZiB2aXNpdGVkW2ldID09IEZhbHNlOgogICAgICAgICAgICAgICAgc2VsZi50b3BvbG9naWNhbFNvcnRVdGlsKGksIHZpc2l0ZWQsIHN0YWNrKQogICAgICAgIHN0YWNrLmFwcGVuZCh2KQoKICAgIGRlZiB0b3BvbG9naWNhbFNvcnQoc2VsZik6CiAgICAgICAgdmlzaXRlZCA9IFtGYWxzZV0gKiBzZWxmLlYKICAgICAgICBzdGFjayA9IFtdCgogICAgICAgIGZvciBpIGluIHJhbmdlKHNlbGYuVik6CiAgICAgICAgICAgIGlmIHZpc2l0ZWRbaV0gPT0gRmFsc2U6CiAgICAgICAgICAgICAgICBzZWxmLnRvcG9sb2dpY2FsU29ydFV0aWwoaSwgdmlzaXRlZCwgc3RhY2spCgogICAgICAgIHJldHVybiBzdGFja1s6Oi0xXQoKCmNsYXNzIE5vZGU6CiAgICBkZWYgX19pbml0X18oc2VsZiwganNvbk9iamVjdCk6CiAgICAgICAgc2VsZi5sZXZlbCA9IDA7CiAgICAgICAgc2VsZi5pZCA9IGpzb25PYmplY3QuZ2V0KCdpZCcsICcnKTsKICAgICAgICBzZWxmLm5hbWUgPSBqc29uT2JqZWN0LmdldCgnbmFtZScsICcnKTsKICAgICAgICBzZWxmLmNsYXNzTmFtZSA9IGpzb25PYmplY3QuZ2V0KCdjbGFzc25hbWUnLCBzZWxmLm5hbWUgKyAnQ29uZmlnJyk7CiAgICAgICAgc2VsZi5jYXRlZ29yeSA9IGpzb25PYmplY3QuZ2V0KCdjYXRlZ29yeScsICcnKTsKICAgICAgICBzZWxmLmF0dHJpYnV0ZXMgPSBqc29uT2JqZWN0LmdldCgnYXR0cmlidXRlcycsICcnKTsKICAgICAgICBzZWxmLmNvbm5lY3RvcnMgPSBqc29uT2JqZWN0LmdldCgnY29ubmVjdG9ycycsICcnKTsKICAgICAgICBzZWxmLnBhcmVudCA9IE5vbmUKICAgICAgICBzZWxmLmZvcm1hdHMgPSBqc29uT2JqZWN0LmdldCgnZm9ybWF0cycsICcnKTsKCiAgICAjIEJ1aWxkaW5nIERBRyBvcmRlcgoKCmRlZiBidWlsZERBR09yZGVyKGVsZW1lbnRzKToKICAgICMgZ2V0IGFsbCBlbGVtZW50cyBmcm9tIGpzb24KICAgIGVsZW1lbnRsaXN0ID0gW10KICAgIG5vZGVsaXN0ID0gW10KICAgIGZvciBlIGluIGVsZW1lbnRzOgogICAgICAgIG5vZGUgPSBOb2RlKGUpCiAgICAgICAgbm9kZWxpc3QuYXBwZW5kKG5vZGUpCgogICAgaWRfdG9fbnVtID0ge30KICAgIG51bV90b19pZCA9IHt9CiAgICBpZF90b19ub2RlID0ge30KICAgIGZvciBpLCBlbGUgaW4gZW51bWVyYXRlKG5vZGVsaXN0KToKICAgICAgICBpZF90b19udW1bZWxlLmlkXSA9IGkKICAgICAgICBudW1fdG9faWRbaV0gPSBlbGUuaWQKICAgICAgICBpZF90b19ub2RlW2VsZS5pZF0gPSBlbGUKCiAgICB2ZXJ0ZXggPSBsZW4obm9kZWxpc3QpCiAgICBnID0gR3JhcGgodmVydGV4KQoKICAgIGZvciBpdGVtIGluIG5vZGVsaXN0OgogICAgICAgIHBhcmVudGlkID0gJycKICAgICAgICBjaGlsZGlkID0gJycKICAgICAgICBmb3IgY29ubmVjdG9yIGluIGl0ZW0uY29ubmVjdG9yczoKICAgICAgICAgICAgaWYgKGNvbm5lY3RvclsndHlwZSddID09ICd0YXJnZXQnKToKICAgICAgICAgICAgICAgIHBhcmVudGlkID0gY29ubmVjdG9yWydlbGVtZW50SWQnXQogICAgICAgICAgICAgICAgZy5hZGRFZGdlKGlkX3RvX251bVtwYXJlbnRpZF0sIGlkX3RvX251bVtpdGVtLmlkXSkKCiAgICAgICAgICAgIGlmIChjb25uZWN0b3JbJ3R5cGUnXSA9PSAnc291cmNlJyk6CiAgICAgICAgICAgICAgICBjaGlsZGlkID0gY29ubmVjdG9yWydlbGVtZW50SWQnXQogICAgICAgICAgICAgICAgZy5hZGRFZGdlKGlkX3RvX251bVtpdGVtLmlkXSwgaWRfdG9fbnVtW2NoaWxkaWRdKQoKICAgIHN0YWNrID0gZy50b3BvbG9naWNhbFNvcnQoKQogICAgc3RhY2sgPSBbbnVtX3RvX2lkW251bV0gZm9yIG51bSBpbiBzdGFja10KCiAgICBmb3IgaWQgaW4gc3RhY2s6CiAgICAgICAgZWxlbWVudGxpc3QuYXBwZW5kKGlkX3RvX25vZGVbaWRdKQogICAgcmV0dXJuIGVsZW1lbnRsaXN0CgoKIyBmaWxsIGFsbCBqb2IgcGFyYW1zIGluIHBpcGVsaW5lSnNvbgpkZWYgZmlsbEpvYlBhcmFtcyhwaXBlbGluZUpzb24pOgogICAgb3JnYW5pemF0aW9uID0gcGlwZWxpbmVKc29uLmdldCgnb3JnJywgJ0lORk9TWVMnKQoKICAgICMgU2V0IGFsbCBKb2IgUGFyYW1zCiAgICBqb2JQYXJhbXMgPSB7fQogICAgam9iUGFyYW1zWydOZXh0RXhlY3V0aW9uVGltZSddID0gcGlwZWxpbmVKc29uLmdldCgnTmV4dF9FeGVjdXRpb25fVGltZScsICcnKQogICAgam9iUGFyYW1zWydDdXJyZW50RXhlY3V0aW9uVGltZSddID0gcGlwZWxpbmVKc29uLmdldCgnQ3VycmVudF9FeGVjdXRpb25fVGltZScsICcnKQogICAgam9iUGFyYW1zWydMYXN0U3VjY2Vzc2Z1bEV4ZWN1dGlvblRpbWUnXSA9IHBpcGVsaW5lSnNvbi5nZXQoJ0xhc3RfU3VjY2Vzc2Z1bF9FeGVjdXRpb25fVGltZScsICcnKQogICAgam9iUGFyYW1zWydMYXN0RXhlY3V0aW9uVGltZSddID0gcGlwZWxpbmVKc29uLmdldCgnTGFzdF9FeGVjdXRpb25fVGltZScsICcnKQoKICAgIHJlZ0V4ID0gJzxqb2JQYXJhbXM6KFtcd1wuLV0rKTsoLio/KT4nCiAgICBwaXBlbGluZUpzb25MaXN0ID0gW10KCiAgICBmb3IgaXRlbSBpbiBwaXBlbGluZUpzb25bJ2VsZW1lbnRzJ106CiAgICAgICAgaXRlbVRleHQgPSBqc29uLmR1bXBzKGl0ZW0pCiAgICAgICAgIyByZXBsYWNlIE9yZwogICAgICAgIGl0ZW1UZXh0ID0gaXRlbVRleHQucmVwbGFjZSgnPGpvYlBhcmFtczpvcmdOYW1lPicsIG9yZ2FuaXphdGlvbikKICAgICAgICAjIHJlcGxhY2UgdGltZXN0YW1wcwogICAgICAgIHBhcmFtcyA9IHJlLmZpbmRhbGwocmVnRXgsIGl0ZW1UZXh0KQogICAgICAgIGZvciBwIGluIHBhcmFtczoKICAgICAgICAgICAgdGV4dFRvcmVwbGFjZSA9ICc8am9iUGFyYW1zOnswfTt7MX0+Jy5mb3JtYXQocFswXSwgcFsxXSkKICAgICAgICAgICAgaWYgam9iUGFyYW1zW3BbMF1dICE9ICcnIGFuZCBqb2JQYXJhbXNbcFswXV0gIT0gLTE6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgZHQgPSBkYXRldGltZS5zdHJwdGltZShqb2JQYXJhbXNbcFswXV0sICclYSwgJWQgJWIgJVkgJUg6JU06JVMnKQogICAgICAgICAgICAgICAgICAgIHJlcGxhY2VXaXRoID0gZGF0ZXRpbWUuc3RyZnRpbWUoZHQsIHBbMV0pCiAgICAgICAgICAgICAgICAgICAgaXRlbVRleHQgPSBpdGVtVGV4dC5yZXBsYWNlKHRleHRUb3JlcGxhY2UsIHJlcGxhY2VXaXRoKQogICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgIGEgPSAxCiAgICAgICAgcGlwZWxpbmVKc29uTGlzdC5hcHBlbmQoanNvbi5sb2FkcyhpdGVtVGV4dCkpCiAgICByZXR1cm4gcGlwZWxpbmVKc29uTGlzdAoKCiMgQnVpbGQgREFHIG9mIGFsbCB0aGUgbm9kZXMKIyBSZXR1cm5zIHRoZSBsaXN0IG9mIGVsZW1lbnRzIGluIG9yZGVyCmRlZiBidWlsZERBRyhwaXBlbGluZUpzb25MaXN0KToKICAgIG9yZGVyZWRFbGVtZW50TGlzdCA9IGJ1aWxkREFHT3JkZXIocGlwZWxpbmVKc29uTGlzdCkgICMgREFHLmJ1aWxkKHBpcGVsaW5lSnNvbkxpc3QpOwogICAgb3JkZXJlZEVsZW1lbnRMaXN0ID0gbGlzdChmaWx0ZXIoTm9uZSwgb3JkZXJlZEVsZW1lbnRMaXN0KSkKICAgIHJldHVybiBvcmRlcmVkRWxlbWVudExpc3QKCgojIGZpbGwgbm9kZSBhdHRyaWJ1dGVzIHdpdGggQWN0dWFsIERhdGEKZGVmIGZpbGxEYXRhbm9kZShub2RlLCBzY3JpcHQpOgogICAgYXR0cmlidXRlcyA9IHJlLmZpbmRhbGwoJ1w8KC4qPylcPicsIHNjcmlwdCkKCiAgICBmb3IgaXRlbSBpbiBhdHRyaWJ1dGVzOgoKICAgICAgICBpbnB1dF9zcGxpdCA9IGl0ZW0uc3BsaXQoJy4nKQogICAgICAgIGtleXMgPSAnJy5qb2luKFsnJydbJ3swfSddJycnLmZvcm1hdChrKSBmb3IgayBpbiBpbnB1dF9zcGxpdF0pCgogICAgICAgIHRyeToKCiAgICAgICAgICAgIHZhbHVlID0gZXZhbCgnJydub2RlLmF0dHJpYnV0ZXMnJycgKyAnJyd7MH0nJycuZm9ybWF0KGtleXMpKQogICAgICAgICAgICBpZiBub2RlLmNsYXNzTmFtZSAhPSAnRGF0YXNldEV4dHJhY3RvckNvbmZpZycgYW5kIG5vZGUuY2xhc3NOYW1lICE9ICdEYXRhc2V0TG9hZGVyQ29uZmlnJzoKICAgICAgICAgICAgICAgIGZvcm0gPSBldmFsKCcnJ25vZGUuZm9ybWF0cycnJyArICcnJ3swfScnJy5mb3JtYXQoa2V5cykpCgogICAgICAgICAgICAgICAgaWYgZm9ybSA9PSAnYm9vbCc6CiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAnVHJ1ZScgaWYgdmFsdWUgPT0gJ3RydWUnIGVsc2UgJ0ZhbHNlJwoKICAgICAgICAgICAgc2NyaXB0ID0gc2NyaXB0LnJlcGxhY2UoJzwnICsgaXRlbSArICc+Jywgc3RyKHZhbHVlKSkKCgogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcHJpbnQoJ2luIEV4Y2VwdCcpCiAgICAgICAgICAgIHNjcmlwdCA9IHNjcmlwdC5yZXBsYWNlKCc8JyArIGl0ZW0gKyAnPicsICcnKQoKICAgIHJldHVybiBzY3JpcHQKCgoKZGVmIGdlbmVyYXRlU2NyaXB0KHBpcGVsaW5lSnNvbik6CiAgICAjIGZvcm1hdCB0eXBlIGZvciBwcmUtcHJvY2Vzc2luZyBub2RlL3B5dGhvbi1zY3JpcHQgbm9kZQogICAgZGVmIGNvbihzLCB0KToKICAgICAgICBpZiBzID09ICdpbnQnOgogICAgICAgICAgICByZXR1cm4gJ2ludGVnZXInCiAgICAgICAgZWxpZiBzID09ICdzdHInOgogICAgICAgICAgICByZXR1cm4gJ3RleHQnCiAgICAgICAgZWxpZiBzID09ICdsaXN0JzoKICAgICAgICAgICAgcmV0dXJuICdsaXN0JwogICAgICAgIGVsaWYgcyA9PSAnYm9vbCc6CiAgICAgICAgICAgIHJldHVybiAnYm9vbCcKICAgICAgICBlbGlmIGlzaW5zdGFuY2UodCwgc3RyKToKICAgICAgICAgICAgcmV0dXJuICd0ZXh0JwogICAgICAgIGVsaWYgaXNpbnN0YW5jZSh0LCBpbnQpOgogICAgICAgICAgICByZXR1cm4gJ2ludGVnZXInCiAgICAgICAgcmV0dXJuICdib29sJwoKICAgIHBpcGVsaW5lRWxlbWVudHMgPSBmaWxsSm9iUGFyYW1zKHBpcGVsaW5lSnNvbikKICAgIG9yZGVyZWRFbGVtZW50TGlzdCA9IGJ1aWxkREFHKHBpcGVsaW5lRWxlbWVudHMpCiAgICByZXF1aXJlbWVudHMgPSBbXQogICAgaW1wb3J0X2xpbmVzID0gW10KICAgIGZ1bmN0aW9ucyA9IFtdCiAgICBkYXRhc2V0X2V4dHJhY3Rvcl9wYXJhbSA9IHt9CiAgICBkYXRhc2V0X2xvYWRlcl9wYXJhbXMgPSBbXQogICAgZXh0cmFjdHNjcmlwdHN1ZmZpeCA9ICcnCiAgICBmdW5jdGlvbl9mbGFnID0ge30KCiAgICAjIFNjcmlwdCBnZW5lcmF0aW9uCiAgICBmb3Igbm9kZSBpbiBvcmRlcmVkRWxlbWVudExpc3Q6CgogICAgICAgICMgRXh0cmFjdG9ycwogICAgICAgIGVsZW1lbnQgPSBuZXh0KGUgZm9yIGUgaW4gcGlwZWxpbmVKc29uWydlbGVtZW50cyddIGlmIGVbJ2lkJ10gPT0gbm9kZS5pZCkKCiAgICAgICAgaWYgbm9kZS5jbGFzc05hbWUgPT0gJ0FkYXB0ZXJNZXRob2RDb25maWcnOgogICAgICAgICAgICBwcmludCgnbm9kZSBuYW1lIGlzOiAnLCBub2RlLm5hbWUpCiAgICAgICAgICAgIHRyYW5zZm9ybWVyU2NyaXB0ID0gZWxlbWVudFsnY29kZUdlbmVyYXRpb24nXVsnc2NyaXB0J10KCiAgICAgICAgICAgIG5vZGVuYW1lID0gJycuam9pbihub2RlLm5hbWUuc3BsaXQoJyAnKSkKCiAgICAgICAgICAgIHRyYW5zZm9ybWVyU2NyaXB0ID0gdHJhbnNmb3JtZXJTY3JpcHQucmVwbGFjZSgnXzxpZD4nLCAnJykKICAgICAgICAgICAgdHJhbnNmb3JtZXJTY3JpcHQgPSB0cmFuc2Zvcm1lclNjcmlwdC5yZXBsYWNlKCc8aWQ+Jywgbm9kZS5pZCkKCiAgICAgICAgICAgICMgQ2hlY2tpbmcgaWYgdGhlIGZ1bmN0aW9uIGRlZmluaXRpb24gaXMgYWxyZWFkeSBleGlzdHMgaW4gc2NyaXB0CiAgICAgICAgICAgIGlmIG5vZGUuY2xhc3NOYW1lIGluIGZ1bmN0aW9uX2ZsYWc6CiAgICAgICAgICAgICAgICBwcmludCgnZXhpdHMnLCBub2RlLmNsYXNzTmFtZSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGZ1bmN0aW9uX2ZsYWdbbm9kZS5jbGFzc05hbWVdID0gMQogICAgICAgICAgICAgICAgZnVuY3Rpb25zLmFwcGVuZCh0cmFuc2Zvcm1lclNjcmlwdCkKCiAgICAgICAgICAgIGltcG9ydF9saW5lcyA9IGltcG9ydF9saW5lcyArIGVsZW1lbnRbJ2NvZGVHZW5lcmF0aW9uJ11bJ2ltcG9ydHMnXQogICAgICAgICAgICBpZiBlbGVtZW50Wydjb2RlR2VuZXJhdGlvbiddLmdldCgncmVxdWlyZW1lbnRzJywgJycpICE9ICcnOgogICAgICAgICAgICAgICAgcmVxdWlyZW1lbnRzID0gcmVxdWlyZW1lbnRzICsgZWxlbWVudFsnY29kZUdlbmVyYXRpb24nXS5nZXQoJ3JlcXVpcmVtZW50cycsIFtdKQogICAgICAgICAgICAgICAgcHJpbnQocmVxdWlyZW1lbnRzKQogICAgICAgICMgIFNjcmlwdAogICAgICAgIGVsaWYgbm9kZS5jbGFzc05hbWUgPT0gJ1NjcmlwdFRyYW5zZm9ybWVyQ29uZmlnJyBvciBub2RlLmNsYXNzTmFtZSA9PSAnUHJlUHJvY2Vzc2luZ1NjcmlwdENvbmZpZycgb3Igbm9kZS5jbGFzc05hbWUgPT0gJ1Bvc3RQcm9jZXNzaW5nU2NyaXB0Q29uZmlnJyBvciBub2RlLmNsYXNzTmFtZSA9PSAnTW9kZWxQcmVkaWN0U2NyaXB0Q29uZmlnJyBvciBub2RlLmNsYXNzTmFtZSA9PSAnUHl0aG9uU2NyaXB0Q29uZmlnJyBvciBub2RlLmNsYXNzTmFtZSA9PSAnUG9zdFB5dGhvblNjcmlwdENvbmZpZyc6CiAgICAgICAgICAgIHByb2Nlc3NpbmdTY3JpcHQgPSAnJwogICAgICAgICAgICBwcm9jZXNzaW5nU2NyaXB0ID0gKCcnKS5qb2luKG5vZGUuYXR0cmlidXRlc1snc2NyaXB0J10pCgogICAgICAgICAgICBwcm9jZXNzaW5nU2NyaXB0ID0gcHJvY2Vzc2luZ1NjcmlwdC5yZXBsYWNlKCdcclxcbicsICdccicpCiAgICAgICAgICAgIHByb2Nlc3NpbmdTY3JpcHQgPSBwcm9jZXNzaW5nU2NyaXB0LnJlcGxhY2UoJ1xuJywgJ1xcbicpCiAgICAgICAgICAgIHByb2Nlc3NpbmdTY3JpcHQgPSBwcm9jZXNzaW5nU2NyaXB0LnJlcGxhY2UoJ1xyJywgJ1xuJykKICAgICAgICAgICAgcHJvY2Vzc2luZ1NjcmlwdCA9IHByb2Nlc3NpbmdTY3JpcHQucmVwbGFjZSgnXzxpZD4nLCAnJykKICAgICAgICAgICAgcHJvY2Vzc2luZ1NjcmlwdCA9IHByb2Nlc3NpbmdTY3JpcHQucmVwbGFjZSgnPGlkPicsIG5vZGUuaWQpCiAgICAgICAgICAgIG5vZGVuYW1lID0gbm9kZS5hdHRyaWJ1dGVzLmdldCgnRnVuY3Rpb25OYW1lJywgJycpCgogICAgICAgICAgICAjIENoZWNraW5nIGlmIHRoZSBmdW5jdGlvbiBkZWZpbml0aW9uIGlzIGFscmVhZHkgZXhpc3RzIGluIHNjcmlwdAogICAgICAgICAgICBpZiBub2RlbmFtZSBpbiBmdW5jdGlvbl9mbGFnOgogICAgICAgICAgICAgICAgcHJpbnQoJ2V4aXRzJywgbm9kZW5hbWUpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBmdW5jdGlvbl9mbGFnW25vZGVuYW1lXSA9IDEKICAgICAgICAgICAgICAgIGZ1bmN0aW9ucy5hcHBlbmQocHJvY2Vzc2luZ1NjcmlwdCkKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShub2RlLmF0dHJpYnV0ZXNbJ3JlcXVpcmVtZW50cyddLCBzdHIpOgogICAgICAgICAgICAgICAgcmVxdWlyZW1lbnRzID0gcmVxdWlyZW1lbnRzICsgbm9kZS5hdHRyaWJ1dGVzWydyZXF1aXJlbWVudHMnXS5zcGxpdCgnLCcpCgogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KCdub2RlIG5hbWUgaXM6ICcsIG5vZGUubmFtZSkKICAgICAgICAgICAgdHJhbnNmb3JtZXJTY3JpcHQgPSBlbGVtZW50Wydjb2RlR2VuZXJhdGlvbiddWydzY3JpcHQnXQoKICAgICAgICAgICAgbm9kZW5hbWUgPSAnJy5qb2luKG5vZGUubmFtZS5zcGxpdCgnICcpKQoKICAgICAgICAgICAgdHJhbnNmb3JtZXJTY3JpcHQgPSB0cmFuc2Zvcm1lclNjcmlwdC5yZXBsYWNlKCdfPGlkPicsICcnKQogICAgICAgICAgICB0cmFuc2Zvcm1lclNjcmlwdCA9IHRyYW5zZm9ybWVyU2NyaXB0LnJlcGxhY2UoJzxpZD4nLCBub2RlLmlkKQoKICAgICAgICAgICAgIyBDaGVja2luZyBpZiB0aGUgZnVuY3Rpb24gZGVmaW5pdGlvbiBpcyBhbHJlYWR5IGV4aXN0cyBpbiBzY3JpcHQKICAgICAgICAgICAgaWYgbm9kZS5jbGFzc05hbWUgaW4gZnVuY3Rpb25fZmxhZzoKICAgICAgICAgICAgICAgIHByaW50KCdleGl0cycsIG5vZGUuY2xhc3NOYW1lKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgZnVuY3Rpb25fZmxhZ1tub2RlLmNsYXNzTmFtZV0gPSAxCiAgICAgICAgICAgICAgICBmdW5jdGlvbnMuYXBwZW5kKHRyYW5zZm9ybWVyU2NyaXB0KQoKICAgICAgICAgICAgaW1wb3J0X2xpbmVzID0gaW1wb3J0X2xpbmVzICsgZWxlbWVudFsnY29kZUdlbmVyYXRpb24nXVsnaW1wb3J0cyddCiAgICAgICAgICAgIGlmIGVsZW1lbnRbJ2NvZGVHZW5lcmF0aW9uJ10uZ2V0KCdyZXF1aXJlbWVudHMnLCAnJykgIT0gJyc6CiAgICAgICAgICAgICAgICByZXF1aXJlbWVudHMgPSByZXF1aXJlbWVudHMgKyBlbGVtZW50Wydjb2RlR2VuZXJhdGlvbiddLmdldCgncmVxdWlyZW1lbnRzJywgW10pCiAgICAgICAgICAgICAgICBwcmludChyZXF1aXJlbWVudHMpCgogICAgaW1wb3J0X2xpbmVzID0gW2wgZm9yIGwgaW4gc2V0KGltcG9ydF9saW5lcykgaWYgbCAhPSAnJ10KICAgIHJlcXVpcmVtZW50cyA9IFtsIGZvciBsIGluIHNldChyZXF1aXJlbWVudHMpIGlmIGwgIT0gJyddCiAgICBwaXBlbGluZUNvZGUgPSBiYXNlU2NyaXB0KCkKICAgIHBpcGVsaW5lQ29kZSA9IHBpcGVsaW5lQ29kZS5yZXBsYWNlKCd7aW1wb3J0c30nLCAoJ1xuJykuam9pbihpbXBvcnRfbGluZXMpKQogICAgaWYgbGVuKHJlcXVpcmVtZW50cykgPiAwOgogICAgICAgIHBpcGVsaW5lQ29kZSA9IHBpcGVsaW5lQ29kZS5yZXBsYWNlKCd7cmVxdWlyZW1lbnRzfScsICdcJycgKyAoJ1wnLFwnJykuam9pbihyZXF1aXJlbWVudHMpICsgJ1wnJykKICAgIGVsc2U6CiAgICAgICAgcGlwZWxpbmVDb2RlID0gcGlwZWxpbmVDb2RlLnJlcGxhY2UoJ3tyZXF1aXJlbWVudHN9JywgJycpCgogICAgcGlwZWxpbmVDb2RlID0gcGlwZWxpbmVDb2RlLnJlcGxhY2UoJ3twaXBlbGluZU5hbWV9JywgYXJnc0RpY3RbJ3BpcGVsaW5lTmFtZSddKQogICAgcGlwZWxpbmVDb2RlID0gcGlwZWxpbmVDb2RlLnJlcGxhY2UoJ3tmdW5jdGlvbnN9JywgKCdccicpLmpvaW4oZnVuY3Rpb25zKSkKICAgIGV4ZWN1dGlvbk9yZGVyID0gJ1xuJwoKICAgIGZvciBub2RlIGluIG9yZGVyZWRFbGVtZW50TGlzdDoKICAgICAgICBpbnB1dHMgPSBbXQoKICAgICAgICAjIEluaXRpYWxpemluZyBwb3NpdGlvbmluZyBvcmRlciBmb3IgaW5wdXQgZW50cmllcyBvZiBhIG5vZGUKICAgICAgICBwb3NpdGlvbl9vcmRlcmluZyA9IHsnTGVmdE1pZGRsZSc6IDAsICdUb3BDZW50ZXInOiAxLCAnUmlnaHRNaWRkbGUnOiAyLCAnQm90dG9tQ2VudGVyJzogM30KICAgICAgICBpbmRleF9vcmRlcmluZyA9IHswOiAnTGVmdE1pZGRsZScsIDE6ICdUb3BDZW50ZXInLCAyOiAnUmlnaHRNaWRkbGUnLCAzOiAnQm90dG9tQ2VudGVyJ30KICAgICAgICBvdXRwdXRzID0gW10KICAgICAgICBub2RlbmFtZSA9ICcnLmpvaW4obm9kZS5uYW1lLnNwbGl0KCcgJykpCiAgICAgICAgIyBub2RlbmFtZSA9ICdfJy5qb2luKG5vZGUubmFtZS5zdHJpcCgpLnNwbGl0KCcgJykpLmxvd2VyKCkKICAgICAgICBub2RlaWQgPSBub2RlLmlkCgogICAgICAgICMgaWYgbm9kZW5hbWUgPT0gJ0RhdGFzZXRFeHRyYWN0b3InOgogICAgICAgICMgICAgIG5vZGVuYW1lID0gbm9kZW5hbWUgKyBub2RlLmF0dHJpYnV0ZXNbJ2RhdGFzZXQnXVsnZGF0YXNvdXJjZSddWyd0eXBlJ10KCiAgICAgICAgIyBpZiBub2RlbmFtZSA9PSAnUHl0aG9uU2NyaXB0JyBvciBub2RlbmFtZSA9PSAnUG9zdFB5dGhvblNjcmlwdCcgb3Igbm9kZW5hbWUgPT0gJ1Bvc3RQcm9jZXNzaW5nU2NyaXB0JyBvciBub2RlbmFtZSA9PSAnUHJlUHJvY2Vzc2luZ1NjcmlwdCc6CiAgICAgICAgaWYgbm9kZS5jbGFzc05hbWUgPT0gJ1NjcmlwdFRyYW5zZm9ybWVyQ29uZmlnJyBvciBub2RlLmNsYXNzTmFtZSA9PSAnUHJlUHJvY2Vzc2luZ1NjcmlwdENvbmZpZycgb3Igbm9kZS5jbGFzc05hbWUgPT0gJ1Bvc3RQcm9jZXNzaW5nU2NyaXB0Q29uZmlnJyBvciBub2RlLmNsYXNzTmFtZSA9PSAnTW9kZWxQcmVkaWN0U2NyaXB0Q29uZmlnJyBvciBub2RlLmNsYXNzTmFtZSA9PSAnUHl0aG9uU2NyaXB0Q29uZmlnJyBvciBub2RlLmNsYXNzTmFtZSA9PSAnUG9zdFB5dGhvblNjcmlwdENvbmZpZyc6CiAgICAgICAgICAgIG5vZGVuYW1lID0gbm9kZS5hdHRyaWJ1dGVzLmdldCgnRnVuY3Rpb25OYW1lJywgJycpCiAgICAgICAgICAgIG5vZGUuZm9ybWF0cyA9IHtwYXJhWyduYW1lJ10uc3BsaXQoJzonKVswXTogY29uKHBhcmFbJ25hbWUnXS5zcGxpdCgnOicpWy0xXSwgcGFyYVsndmFsdWUnXSkgZm9yIHBhcmEgaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuYXR0cmlidXRlcy5nZXQoJ3BhcmFtcycsICcnKSBpZiBsZW4ocGFyYSkgPiAwfQogICAgICAgICAgICBub2RlLmF0dHJpYnV0ZXMgPSB7cGFyYVsnbmFtZSddLnNwbGl0KCc6JylbMF06IHBhcmFbJ3ZhbHVlJ10gZm9yIHBhcmEgaW4gbm9kZS5hdHRyaWJ1dGVzLmdldCgncGFyYW1zJywgJycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBsZW4ocGFyYSkgPiAwfQoKICAgICAgICBmb3IgY29ubmVjdG9yIGluIG5vZGUuY29ubmVjdG9yczoKCiAgICAgICAgICAgIGlmIChjb25uZWN0b3JbJ3R5cGUnXSA9PSAndGFyZ2V0Jyk6CiAgICAgICAgICAgICAgICBpbnB1dHMuYXBwZW5kKHBvc2l0aW9uX29yZGVyaW5nW2Nvbm5lY3RvclsncG9zaXRpb24nXV0pCgogICAgICAgICAgICBpZiAoY29ubmVjdG9yWyd0eXBlJ10gPT0gJ3NvdXJjZScpOgogICAgICAgICAgICAgICAgb3V0cHV0cy5hcHBlbmQoJ2RzXycgKyBjb25uZWN0b3JbJ2VsZW1lbnRQb3NpdGlvbiddICsgJ18nICsgY29ubmVjdG9yWydlbGVtZW50SWQnXSkKCiAgICAgICAgIyBQb3NpdGlvbmluZyBpbnB1dCBlbnRyaWVzIGZvciBhIG5vZGUKICAgICAgICBpbnB1dHMuc29ydCgpCgogICAgICAgIGlucHV0cyA9IFsnZHNfJyArIGluZGV4X29yZGVyaW5nW3Bvc10gKyAnXycgKyBub2RlaWQgZm9yIHBvcyBpbiBpbnB1dHNdCgogICAgICAgICMgQWRkaW5nIHBhcmFtZXRlcnMgZm9yIHJlc3BlY3RpdmUgZnVuY3Rpb24gY2FsbAogICAgICAgIGRlZmF1bHRfcGFyYW1zID0gW10KICAgICAgIAoKICAgICAgICBpZiBub2RlLmNsYXNzTmFtZSA9PSAnQWRhcHRlck1ldGhvZENvbmZpZyc6CiAgICAgICAgICAgIGFjdHVhbF9wYXJhbXMgPSBub2RlLmF0dHJpYnV0ZXMKICAgICAgICAgICAgYWN0dWFsX3BhcmFtID0gbGlzdChhY3R1YWxfcGFyYW1zLmtleXMoKSkKICAgICAgICAgICAgc2NyaXB0X2JvZHkgPSB7cGFyYW06ICdfJy5qb2luKHJlLnNwbGl0KCdcc1xzKicsIHBhcmFtLnN0cmlwKCkpKSBmb3IgcGFyYW0gaW4gYWN0dWFsX3BhcmFtfQogICAgICAgICAgICBkZWZhdWx0X3BhcmFtcyA9IFtdCiAgICAgICAgICAgIGFjdHVhbF9mb3JtYXRzID0gbm9kZS5mb3JtYXRzCiAgICAgICAgICAgIE5vbmVUeXBlID0gdHlwZShOb25lKQoKICAgICAgICAgICAgIyBWYWx1ZSB0eXBlIGFzIFN0cmluZyBvciBOb24tc3RyaW5nIGRlcGVuZGluZyBvbiBmb3JtYXQgdHlwZQogICAgICAgICAgICBmb3Iga2V5LCB2YWwgaW4gc2NyaXB0X2JvZHkuaXRlbXMoKToKICAgICAgICAgICAgICAgIGRlZmF1bHRfcGFyYW1zLmFwcGVuZCh2YWwgKyAnPTwnICsga2V5ICsgJz4nKQoKCgogICAgICAgICMgZWxpZiBub2RlLmNsYXNzTmFtZSA9PSAnUHl0aG9uU2NyaXB0Q29uZmlnJyBvciBub2RlLmNsYXNzTmFtZSA9PSAnUG9zdFB5dGhvblNjcmlwdENvbmZpZycgb3Igbm9kZS5jbGFzc05hbWUgPT0gJ1ByZVByb2Nlc3NpbmdTY3JpcHRDb25maWcnIG9yIG5vZGUuY2xhc3NOYW1lID09ICdQb3N0UHJvY2Vzc2luZ1NjcmlwdENvbmZpZyc6CiAgICAgICAgZWxpZiBub2RlLmNsYXNzTmFtZSA9PSAnU2NyaXB0VHJhbnNmb3JtZXJDb25maWcnIG9yIG5vZGUuY2xhc3NOYW1lID09ICdQcmVQcm9jZXNzaW5nU2NyaXB0Q29uZmlnJyBvciBub2RlLmNsYXNzTmFtZSA9PSAnUG9zdFByb2Nlc3NpbmdTY3JpcHRDb25maWcnIG9yIG5vZGUuY2xhc3NOYW1lID09ICdNb2RlbFByZWRpY3RTY3JpcHRDb25maWcnIG9yIG5vZGUuY2xhc3NOYW1lID09ICdQeXRob25TY3JpcHRDb25maWcnIG9yIG5vZGUuY2xhc3NOYW1lID09ICdQb3N0UHl0aG9uU2NyaXB0Q29uZmlnJzoKICAgICAgICAgICAgYWN0dWFsX3BhcmFtcyA9IG5vZGUuYXR0cmlidXRlcwogICAgICAgICAgICBhY3R1YWxfcGFyYW0gPSBsaXN0KGFjdHVhbF9wYXJhbXMua2V5cygpKQogICAgICAgICAgICBzY3JpcHRfYm9keSA9IHtwYXJhbTogJ18nLmpvaW4ocmUuc3BsaXQoJ1xzXHMqJywgcGFyYW0ubG93ZXIoKS5zdHJpcCgpKSkgKyAnX3BhcmFtJyBmb3IgcGFyYW0gaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0dWFsX3BhcmFtfQogICAgICAgICAgICBkZWZhdWx0X3BhcmFtcyA9IFtdCiAgICAgICAgICAgIGFjdHVhbF9mb3JtYXRzID0gbm9kZS5mb3JtYXRzCiAgICAgICAgICAgIE5vbmVUeXBlID0gdHlwZShOb25lKQogICAgICAgICAgICBwcmludChhY3R1YWxfZm9ybWF0cykKICAgICAgICAgICAgZm9yIGtleSwgdmFsIGluIHNjcmlwdF9ib2R5Lml0ZW1zKCk6CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICBpZiBrZXkgPT0gJ3NjcmlwdCc6CiAgICAgICAgICAgICAgICAgICAgcGFzcwoKICAgICAgICAgICAgICAgICMgVmFsdWUgdHlwZSBhcyBTdHJpbmcgb3IgTm9uLXN0cmluZyBkZXBlbmRpbmcgb24gZm9ybWF0IHR5cGUKICAgICAgICAgICAgICAgIGVsaWYgYWN0dWFsX2Zvcm1hdHNba2V5XSA9PSAndGV4dCc6CiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdF9wYXJhbXMuYXBwZW5kKHZhbCArICc9XCc8JyArIGtleSArICc+XCcnKQogICAgICAgICAgICAgICAgZWxpZiBhY3R1YWxfZm9ybWF0c1trZXldID09ICd0ZXh0YXJlYSc6CiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdF9wYXJhbXMuYXBwZW5kKHZhbCArICc9XCdcJ1wnPCcgKyBrZXkgKyAnPlwnXCdcJycpCiAgICAgICAgICAgICAgICBlbGlmIGFjdHVhbF9mb3JtYXRzW2tleV0gPT0gJ2ludGVnZXInOgogICAgICAgICAgICAgICAgICAgIGRlZmF1bHRfcGFyYW1zLmFwcGVuZCh2YWwgKyAnPTwnICsga2V5ICsgJz4nKQogICAgICAgICAgICAgICAgZWxpZiBhY3R1YWxfZm9ybWF0c1trZXldID09ICdib29sJzoKICAgICAgICAgICAgICAgICAgICBkZWZhdWx0X3BhcmFtcy5hcHBlbmQodmFsICsgJz08JyArIGtleSArICc+JykKICAgICAgICAgICAgICAgIGVsaWYgJ2Ryb3AnIGluIGFjdHVhbF9mb3JtYXRzW2tleV0ubG93ZXIoKTogICMgZm9yIGRyb3AgZG93biB2YWx1ZXMKICAgICAgICAgICAgICAgICAgICBpZiBhY3R1YWxfZm9ybWF0c1thY3R1YWxfZm9ybWF0c1trZXldXVswXS5pc2FscGhhKCk6CiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRfcGFyYW1zLmFwcGVuZCh2YWwgKyAnPVwnPCcgKyBrZXkgKyAnPlwnJykKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0X3BhcmFtcy5hcHBlbmQodmFsICsgJz08JyArIGtleSArICc+JykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdF9wYXJhbXMuYXBwZW5kKHZhbCArICc9PCcgKyBrZXkgKyAnPicpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgYWN0dWFsX3BhcmFtcyA9IG5vZGUuYXR0cmlidXRlcwogICAgICAgICAgICBhY3R1YWxfcGFyYW0gPSBsaXN0KGFjdHVhbF9wYXJhbXMua2V5cygpKQogICAgICAgICAgICBzY3JpcHRfYm9keSA9IHtwYXJhbTogJ18nLmpvaW4ocmUuc3BsaXQoJ1xzXHMqJywgcGFyYW0ubG93ZXIoKS5zdHJpcCgpKSkgKyAnX3BhcmFtJyBmb3IgcGFyYW0gaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0dWFsX3BhcmFtfQogICAgICAgICAgICBkZWZhdWx0X3BhcmFtcyA9IFtdCiAgICAgICAgICAgIGFjdHVhbF9mb3JtYXRzID0gbm9kZS5mb3JtYXRzCiAgICAgICAgICAgIE5vbmVUeXBlID0gdHlwZShOb25lKQogICAgICAgICAgICBwcmludChhY3R1YWxfZm9ybWF0cykKICAgICAgICAgICAgIyBWYWx1ZSB0eXBlIGFzIFN0cmluZyBvciBOb24tc3RyaW5nIGRlcGVuZGluZyBvbiBmb3JtYXQgdHlwZQogICAgICAgICAgICBmb3Iga2V5LCB2YWwgaW4gc2NyaXB0X2JvZHkuaXRlbXMoKToKICAgICAgICAgICAgICAgIGlmIGFjdHVhbF9mb3JtYXRzW2tleV0gPT0gJ3RleHQnOgogICAgICAgICAgICAgICAgICAgIGRlZmF1bHRfcGFyYW1zLmFwcGVuZCh2YWwgKyAnPVwnPCcgKyBrZXkgKyAnPlwnJykKICAgICAgICAgICAgICAgIGVsaWYgYWN0dWFsX2Zvcm1hdHNba2V5XSA9PSAndGV4dGFyZWEnOgogICAgICAgICAgICAgICAgICAgIGRlZmF1bHRfcGFyYW1zLmFwcGVuZCh2YWwgKyAnPVwnXCdcJzwnICsga2V5ICsgJz5cJ1wnXCcnKQogICAgICAgICAgICAgICAgZWxpZiBhY3R1YWxfZm9ybWF0c1trZXldID09ICdpbnRlZ2VyJyBvciBhY3R1YWxfZm9ybWF0c1trZXldID09ICdpbnQnOgogICAgICAgICAgICAgICAgICAgIGRlZmF1bHRfcGFyYW1zLmFwcGVuZCh2YWwgKyAnPTwnICsga2V5ICsgJz4nKQogICAgICAgICAgICAgICAgZWxpZiBhY3R1YWxfZm9ybWF0c1trZXldID09ICdib29sJzoKICAgICAgICAgICAgICAgICAgICAjIGtleSA9ICdUcnVlJyBpZiBrZXkgPT0gJ3RydWUnIGVsc2UgJ0ZhbHNlJwogICAgICAgICAgICAgICAgICAgIHByaW50KCdrZXknLCBrZXkpCiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdF9wYXJhbXMuYXBwZW5kKHZhbCArICc9PCcgKyBrZXkgKyAnPicpCiAgICAgICAgICAgICAgICAjIGVsaWYgJ2Ryb3AnIGluIGFjdHVhbF9mb3JtYXRzW2tleV0ubG93ZXIoKTogICMgZm9yIGRyb3AgZG93biB2YWx1ZXMKICAgICAgICAgICAgICAgICMgICAgIGlmIGFjdHVhbF9mb3JtYXRzW2FjdHVhbF9mb3JtYXRzW2tleV1dWzBdLmlzYWxwaGEoKToKICAgICAgICAgICAgICAgICMgICAgICAgICBkZWZhdWx0X3BhcmFtcy5hcHBlbmQodmFsICsgJz1cJzwnICsga2V5ICsgJz5cJycpCiAgICAgICAgICAgICAgICAjICAgICBlbHNlOgogICAgICAgICAgICAgICAgIyAgICAgICAgIGRlZmF1bHRfcGFyYW1zLmFwcGVuZCh2YWwgKyAnPTwnICsga2V5ICsgJz4nKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBkZWZhdWx0X3BhcmFtcy5hcHBlbmQodmFsICsgJz08JyArIGtleSArICc+JykKCiAgICAgICAgIyBHZW5lcmF0aW5nIGZ1bmN0aW9uIGNhbGwKICAgICAgICBpZiBsZW4ob3V0cHV0cykgPiAwOgogICAgICAgICAgICBjYWxsID0gJyAgICAnICsgJywnLmpvaW4ob3V0cHV0cykgKyAnID0gJyArIG5vZGVuYW1lICsgJygnICsgJywnLmpvaW4oaW5wdXRzKQogICAgICAgICAgICBpZiBsZW4oZGVmYXVsdF9wYXJhbXMpID4gMDoKICAgICAgICAgICAgICAgIGNhbGwgKz0gJywgJyBpZiBsZW4oaW5wdXRzKSA+IDAgZWxzZSAnJwogICAgICAgICAgICAgICAgY2FsbCArPSAnLCcuam9pbihkZWZhdWx0X3BhcmFtcykKICAgICAgICAgICAgY2FsbCArPSAnKVxuJwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGNhbGwgPSAnICAgICcgKyBub2RlbmFtZSArICcoJyArICcsJy5qb2luKGlucHV0cykKICAgICAgICAgICAgaWYgbGVuKGRlZmF1bHRfcGFyYW1zKSA+IDA6CiAgICAgICAgICAgICAgICBjYWxsICs9ICcsICcgaWYgbGVuKGlucHV0cykgPiAwIGVsc2UgJycKICAgICAgICAgICAgICAgIGNhbGwgKz0gJywnLmpvaW4oZGVmYXVsdF9wYXJhbXMpCiAgICAgICAgICAgIGNhbGwgKz0gJylcbicKCiAgICAgICAgICAgICMgRmlsbGluZyB0aGUgdXNlciBpbnB1dHRlZCB2YWx1ZXMgaW4gZnVuY3Rpb24gY2FsbAogICAgICAgIGNhbGwgPSBmaWxsRGF0YW5vZGUobm9kZSwgY2FsbCkKCiAgICAgICAgZXhlY3V0aW9uT3JkZXIgPSBleGVjdXRpb25PcmRlciArIGNhbGwKCiAgICBwcmludCgnZXhlY3V0aW9uT3JkZXInLCBleGVjdXRpb25PcmRlcikKICAgIHBpcGVsaW5lQ29kZSA9IHBpcGVsaW5lQ29kZS5yZXBsYWNlKCd7ZXhlY3V0aW9uT3JkZXJ9JywgZXhlY3V0aW9uT3JkZXIpCiAgICBwaXBlbGluZUNvZGUgPSBwaXBlbGluZUNvZGUucmVwbGFjZSgnXHInLCAnXG4nKQoKICAgIHdpdGggb3Blbihvcy5wYXRoLmpvaW4oYXJnc0RpY3RbJ3NjcmlwdFBhdGgnXSwgYXJnc0RpY3RbJ3BpcGVsaW5lTmFtZSddICsgJ19nZW5lcmF0ZWRDb2RlLnB5JyksICd3JykgYXMgZjoKICAgICAgICBmLndyaXRlbGluZXMocGlwZWxpbmVDb2RlKQoKCmdlbmVyYXRlU2NyaXB0KHBpcGVsaW5lX2pzb24pCgpwcmludCgnQ29tcGxldGVkJykKCgoKCgoKCgoKCgoKCgoKCgoK","leo1311"
"LEACDGNR30505","LEACDGNR30505_leo1311.py","","leo1311"
"LEOCDGNR10099","LEOCDGNR10099_leo1311.py","","leo1311"
"LEOPRMTH45227","LEOPRMTH45227_leo1311.py","aW1wb3J0IHJlcXVlc3RzDQppbXBvcnQganNvbg0KaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyDQppbXBvcnQgb3MNCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lICwgdGltZXpvbmUgLCB0aW1lZGVsdGENCmltcG9ydCBteXNxbC5jb25uZWN0b3IgYXMgY29ubmVjdG9yDQoNCg0KDQoNCg0KbG9nZ2VyLmJhc2ljQ29uZmlnKA0KICAgIGxldmVsPWxvZ2dlci5JTkZPLA0KICAgIGZvcm1hdD0nJShhc2N0aW1lKXMgSU5GTyAlKG1lc3NhZ2UpcycsDQogICAgZGF0ZWZtdD0nJXkvJW0vJWQgJUg6JU06JVMnLA0KKQ0KDQojU2V0dGluZyBOb3Byb3h5DQpvcy5lbnZpcm9uWydIVFRQX1BST1hZJ109JycNCm9zLmVudmlyb25bJ0hUVFBTX1BST1hZJ109JycNCm9zLmVudmlyb25bJ2h0dHBfcHJveHknXT0nJw0Kb3MuZW52aXJvblsnaHR0cHNfcHJveHknXT0nJw0KDQoNCmN1cnJlbnRfdGltZSA9IGRhdGV0aW1lLm5vdyh0aW1lem9uZS51dGMpDQplbmRfZGF0ZXRpbWUgPSBjdXJyZW50X3RpbWUuc3RyZnRpbWUoIiVZLSVtLSVkVCVIOiVNOiVTWiIpDQpzdGFydD1jdXJyZW50X3RpbWUtIHRpbWVkZWx0YShtaW51dGVzPTUpDQpzdGFydF9kYXRldGltZT1zdGFydC5zdHJmdGltZSgiJVktJW0tJWRUJUg6JU06JVNaIikNCmxvZ2dlci5pbmZvKGVuZF9kYXRldGltZSkNCmxvZ2dlci5pbmZvKHN0YXJ0X2RhdGV0aW1lKQ0KDQoNCiNEQiBkZXRhaWxzDQp1c2VybmFtZT0ic3JlaW50Ig0KcGFzc3dvcmQ9IjVkXkZac3ZtIg0KaG9zdD0iMTAuODIuMTIyLjk0Ig0KcG9ydCA9IDMzMDYNCmRhdGFiYXNlID0gJ3NyZWludCcNCg0KDQp0cnk6DQogICAgY29ubmVjdGlvbiA9IGNvbm5lY3Rvci5jb25uZWN0KA0KICAgICAgICB1c2VyPXVzZXJuYW1lLCBwYXNzd29yZD1wYXNzd29yZCwgaG9zdD1ob3N0LCBwb3J0PXBvcnQsIGRhdGFiYXNlPWRhdGFiYXNlDQogICAgKQ0KICAgIGN1cnNvciA9IGNvbm5lY3Rpb24uY3Vyc29yKCkNCiAgICBxdWVyeT1mJ1NFTEVDVCAqIEZST00gYGluc3RhbmNlX2NpX3RocmVzaG9sZGA7Jw0KICAgIHF1ZXJ5Mj1mJ1NFTEVDVCAqIEZST00gYENNREJfTWV0cmljYDsnDQogICAgcXVlcnkzPWYnU0VMRUNUICogRlJPTSBgQ01EQl9DSWA7Jw0KICAgIGxvZ2dlci5pbmZvKCdxdWVyeScpDQogICAgbG9nZ2VyLmluZm8ocXVlcnkpDQogICAgY3Vyc29yLmV4ZWN1dGUocXVlcnkpDQogICAgbWFwcGluZ190YWJsZT1jdXJzb3IuZmV0Y2hhbGwoKTsNCiAgICBsb2dnZXIuaW5mbygncmVzdWx0IG9mIHN1YnF1ZXJ5JykNCiAgICAjbG9nZ2VyLmluZm8obWFwcGluZ190YWJsZSkNCiAgICBtYXBwaW5nID0ge30NCiAgICBmb3IgaSBpbiBtYXBwaW5nX3RhYmxlOg0KICAgICAgICBtYXBwaW5nW2lbMF0rJyAnK2lbMl1dPWlbMV0NCiAgICBsb2dnZXIuaW5mbyhtYXBwaW5nKQ0KICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5MikNCiAgICBDTURCX01ldHJpY190YWJsZT1jdXJzb3IuZmV0Y2hhbGwoKTsNCiAgICBsb2dnZXIuaW5mbygncmVzdWx0IG9mIHN1YnF1ZXJ5JykNCiAgICAjbG9nZ2VyLmluZm8oQ01EQl9NZXRyaWNfdGFibGUpDQogICAgQ01EQl9NZXRyaWMgPSB7fQ0KICAgIGZvciBpIGluIENNREJfTWV0cmljX3RhYmxlOg0KICAgICAgICBDTURCX01ldHJpY1tpWzFdXT1pWzBdDQogICAgbG9nZ2VyLmluZm8oQ01EQl9NZXRyaWMpDQogICAgDQogICAgY3Vyc29yLmV4ZWN1dGUocXVlcnkzKQ0KICAgIENNREJfQ0lfdGFibGU9Y3Vyc29yLmZldGNoYWxsKCk7DQogICAgbG9nZ2VyLmluZm8oJ3Jlc3VsdCBvZiBzdWJxdWVyeScpDQogICAgbG9nZ2VyLmluZm8oQ01EQl9DSV90YWJsZSkNCiAgICBDTURCX0NJID0ge30NCiAgICBmb3IgaSBpbiBDTURCX0NJX3RhYmxlOg0KICAgICAgICBDTURCX0NJW2lbMV1dPWlbMF0NCiAgICBsb2dnZXIuaW5mbyhDTURCX0NJKQ0KICANCmV4Y2VwdCBjb25uZWN0b3IuZXJyb3JzLk9wZXJhdGlvbmFsRXJyb3IgYXMgZToNCiAgICAjIEhhbmRsaW5nIHRoZSB0aW1lb3V0IGV4Y2VwdGlvbg0KICAgIGxvZ2dlci5pbmZvKCdNeVNRTCBjb25uZWN0aW9uIHRpbWVvdXQ6IHt9Jy5mb3JtYXQoZSkpDQoNCmZpbmFsbHk6DQogICAgIyBDbG9zZSB0aGUgZGF0YWJhc2UgY29ubmVjdGlvbg0KICAgIGN1cnNvci5jbG9zZSgpDQogICAgY29ubmVjdGlvbi5jbG9zZSgpDQoNCg0KZGVmIGluc2VydF9yZWNvcmRzKGRhdGEpOg0KICAgIHRyeToNCiAgICAgICAgY29ubmVjdGlvbiA9IGNvbm5lY3Rvci5jb25uZWN0KA0KICAgICAgICAgICAgdXNlcj11c2VybmFtZSwgcGFzc3dvcmQ9cGFzc3dvcmQsIGhvc3Q9aG9zdCwgcG9ydD1wb3J0LCBkYXRhYmFzZT1kYXRhYmFzZQ0KICAgICAgICApDQogICAgICAgIGN1cnNvciA9IGNvbm5lY3Rpb24uY3Vyc29yKCkNCiAgICAgICAgIiIiIEluc2VydHMgYSBzZXQgb2YgcmVjb3JkcyBpbnRvIHRoZSB0YWJsZSAiIiINCiAgICAgICAgY3Vyc29yLmV4ZWN1dGVtYW55KGYnSU5TRVJUIElOVE8gQ01EQl9DSV9NZXRyaWMgKGNpX2lkLCBtZXRyaWNfaWQsIHRpbWVzdGFtcCxtZXRyaWNfdmFsdWUpIFZBTFVFUyAoJXMsICVzLCAlcywgJXMpJywgZGF0YSkNCiAgICAgICAgY29ubmVjdGlvbi5jb21taXQoKQ0KICAgIGV4Y2VwdCBjb25uZWN0b3IuZXJyb3JzLk9wZXJhdGlvbmFsRXJyb3IgYXMgZToNCiAgICAgICAgIyBIYW5kbGluZyB0aGUgdGltZW91dCBleGNlcHRpb24NCiAgICAgICAgbG9nZ2VyLmluZm8oJ015U1FMIGNvbm5lY3Rpb24gdGltZW91dDoge30nLmZvcm1hdChlKSkNCiAgICANCiAgICBmaW5hbGx5Og0KICAgICAgICAjIENsb3NlIHRoZSBkYXRhYmFzZSBjb25uZWN0aW9uDQogICAgICAgIGN1cnNvci5jbG9zZSgpDQogICAgICAgIGNvbm5lY3Rpb24uY2xvc2UoKQ0KICANCiAgDQoNCg0KDQpwcm9tZXRoZXVzX3VybCA9ICJodHRwOi8vY3ZyaWN0bHB0bTIxOjkwOTAiDQoNCmNvbnZlcnRlZF9kYXRhID0gW10NCm1ldHJpY3M9Wydwcm9jZXNzX2NwdV91c2FnZScsICdqdm1faGVhcF9tZW1vcnlfdXNlZF9wZXJjZW50JywnaHR0cF9yZXF1ZXN0c19zdWNjZXNzZnVsX2F2ZycsJ2h0dHBfcmVxdWVzdHNfdW5zdWNjZXNzZnVsX2F2ZyddDQpmb3IgaSBpbiByYW5nZShsZW4obWV0cmljcykpOg0KICAgIHF1ZXJ5PWYicXVlcnlfcmFuZ2U/cXVlcnk9e21ldHJpY3NbaV19JnN0YXJ0PXtzdGFydF9kYXRldGltZX0mZW5kPXtlbmRfZGF0ZXRpbWV9JnN0ZXA9MTBzIg0KDQoNCiAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldChmIntwcm9tZXRoZXVzX3VybH0vYXBpL3YxL3txdWVyeX0iKQ0KDQogICAgI0NoZWNrIGZvciBzdWNjZXNzZnVsIHJlc3BvbnNlDQogICAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwOg0KICAgICAgICBkYXRhID0ganNvbi5sb2FkcyhyZXNwb25zZS50ZXh0KVsiZGF0YSJdWyJyZXN1bHQiXQ0KICAgICAgICAjanNvbi5mb3JtYXQoZGF0YSkNCiAgICAgICAgZm9yIGVudHJ5IGluIGRhdGE6DQogICAgICAgICAgICBtZXRyaWNfbmFtZSA9IGVudHJ5WydtZXRyaWMnXVsnX19uYW1lX18nXQ0KICAgICAgICAgICAgI2luc3RhbmNlX25hbWUgPSBlbnRyeVsnbWV0cmljJ11bJ2pvYiddWzM6XQ0KICAgICAgICAgICAgaW5zdGFuY2VfbmFtZSA9IGVudHJ5WydtZXRyaWMnXVsnaW5zdGFuY2UnXQ0KICAgICAgICAgICAgdmFsdWVzID0gZW50cnlbJ3ZhbHVlcyddDQogICAgICAgICAgICBtZXRyaWNfaWQ9Q01EQl9NZXRyaWNbbWV0cmljX25hbWVdDQogICAgICAgICAgICAjIENvbnZlcnQgdGltZXN0YW1wIGFuZCBtZXRyaWMgdmFsdWUNCiAgICAgICAgICAgIGNpX25hbWU9bWFwcGluZ1tpbnN0YW5jZV9uYW1lKycgJyttZXRyaWNfbmFtZV0NCiAgICAgICAgICAgIGNpX2lkPUNNREJfQ0lbY2lfbmFtZV0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZm9yIHRpbWVzdGFtcCwgbWV0cmljX3ZhbHVlIGluIHZhbHVlczoNCiAgICAgICAgICAgICAgICBkYXRlX3RpbWUgPSBkYXRldGltZS5mcm9tdGltZXN0YW1wKHRpbWVzdGFtcCkNCiAgICAgICAgICAgICAgICBmb3JtYXR0ZWRfZGF0ZV90aW1lID0gZGF0ZV90aW1lLnN0cmZ0aW1lKCIlWS0lbS0lZCAlSDolTTolUyIpDQogICAgICAgICAgICAgICAgY29udmVydGVkX2RhdGEuYXBwZW5kKHR1cGxlKChjaV9pZCwgbWV0cmljX2lkLCBmb3JtYXR0ZWRfZGF0ZV90aW1lLCBtZXRyaWNfdmFsdWUpKSkNCiAgICAgICAgDQogICAgICAgICNkYXRhPSBjb252ZXJ0ZWRfZGF0YQ0KICAgICAgICANCiAgICAgICAgI2xvZ2dlci5pbmZvKGRhdGEpDQogICAgZWxzZToNCiAgICAgICAgbG9nZ2VyLmluZm8oZiJFcnJvciBxdWVyeWluZyBQcm9tZXRoZXVzOiB7cmVzcG9uc2Uuc3RhdHVzX2NvZGV9IikNCiAgICANCiANCmluc2VydF9yZWNvcmRzKGNvbnZlcnRlZF9kYXRhKQ0KbG9nZ2VyLmluZm8oY29udmVydGVkX2RhdGEpICAgDQogICAgDQpsb2dnZXIuaW5mbygnY29tcGxldGVkJykNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQo=","leo1311"
"LEOPRCSM42051","LEOPRCSM42051_leo1311.py","","leo1311"
"LEOGT_C_35001","LEOGT_C_35001_leo1311.py","aW1wb3J0IHBhbmRhcyBhcyBwZA0KaW1wb3J0IG15c3FsLmNvbm5lY3Rvcg0KaW1wb3J0IGpzb24NCmltcG9ydCBzeXMNCmZyb20gbGVhcC51dGlscy5VdGlsaXRpZXMgaW1wb3J0IFV0aWxpdGllcw0KZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHF1b3RlX3BsdXMsIHVybHBhcnNlDQppbXBvcnQgbG9nZ2luZw0KaW1wb3J0IHJlcXVlc3RzDQppbXBvcnQgcHl0eg0KZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUsIHRpbWV6b25lLCBkYXRlLCB0aW1lZGVsdGENCiMgTXlTUUwgRGF0YWJhc2UgY29ubmVjdGlvbiBkZXRhaWxzDQpsb2dnaW5nLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dpbmcuSU5GTykNCmFyZ3VtZW50cyA9IHN5cy5hcmd2DQpkaWN0ID0ge30NCmZvciBhcmcgaW4gYXJndW1lbnRzOg0KICAgIHRyeToNCiAgICAgICAgZGljdFthcmcuc3BsaXQoJzonKVswXV0gPSAoJzonKS5qb2luKGFyZy5zcGxpdCgnOicpWzE6XSkNCiAgICBleGNlcHQ6DQogICAgICAgIGEgPSAnZXJyb3InDQpsYXN0RXhlY3V0aW9uVGltZSA9IGRpY3RbJ0xhc3RfU3VjY2Vzc2Z1bF9FeGVjdXRpb25fVGltZSddDQoNCmxlYXBkcyA9IGRpY3RbJ2xlYXBkcyddDQpsZWFwRFNkaWN0ID0ganNvbi5sb2FkcyhsZWFwZHMpDQp1c2VybmFtZSA9IGxlYXBEU2RpY3RbJ3VzZXJOYW1lJ10NCnBhc3N3b3JkID0gVXRpbGl0aWVzLmRlY3J5cHQobGVhcERTZGljdFsncGFzc3dvcmQnXSwgbGVhcERTZGljdFsnc2FsdCddKQ0KaG9zdCA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkuaG9zdG5hbWUNCnBvcnQgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLnBvcnQNCmRhdGFiYXNlID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5wYXRoLnJzcGxpdCgnLycsIDEpWzFdDQpjb25uZWN0aW9uID0gbXlzcWwuY29ubmVjdG9yLmNvbm5lY3QodXNlcj11c2VybmFtZSwgcGFzc3dvcmQ9cGFzc3dvcmQsIGhvc3Q9aG9zdCwgcG9ydD1wb3J0LCBkYXRhYmFzZT1kYXRhYmFzZSkNCm15Y3Vyc29yID0gY29ubmVjdGlvbi5jdXJzb3IoKQ0KDQoNCmN0eXBlcXVlcnkgPSAnJycgU0VMRUNUIGN0eXBlIGZyb20gY2ZtX2NvbmZpZ3VyYXRpb25faXRlbV90eXBlIFdIRVJFIHByb2plY3RfaWQ9JzInIEFORCBzeXNfaWQgSVMgTk9UIE5VTEwgJycnDQpteWN1cnNvci5leGVjdXRlKGN0eXBlcXVlcnkpDQpjdHlwZWRhdGEgPSBteWN1cnNvci5mZXRjaGFsbCgpDQpjdHlwZUxpc3QgPSBbXQ0KZm9yIGl0ZW0gaW4gY3R5cGVkYXRhOg0KICAgIGN0eXBlTGlzdC5hcHBlbmQoaXRlbVswXSkNCnByaW50KGN0eXBlTGlzdCkNCg0KaWYobGFzdEV4ZWN1dGlvblRpbWUgPT0gLTEgb3IgY3R5cGVkYXRhID09IFtdKToNCiAgICB1cmwgPSAnaHR0cHM6Ly9pbmZvc3lzcTNkZXYxLnNlcnZpY2Utbm93LmNvbS9hcGkvbm93L3RhYmxlL2NtZGJfY2k/c3lzcGFybV9maWVsZHM9c3lzX2lkLHN5c19jbGFzc19uYW1lJnN5c3Bhcm1fZGlzcGxheV92YWx1ZT1hbGwnDQplbHNlOg0KICAgIFVwZGF0ZVRpbWUgPSAoZGF0ZXRpbWUuc3RycHRpbWUobGFzdEV4ZWN1dGlvblRpbWUsICclYSwgJWQgJWIgJVkgJUg6JU06JVMnKS5hc3RpbWV6b25lKHB5dHoudGltZXpvbmUoJ0FzaWEvQ2FsY3V0dGEnKSkgLSB0aW1lZGVsdGEobWludXRlcz01KSkuc3RyZnRpbWUoJ1wnJVktJW0tJWRcJyxcJyVIOiVNOiVTXCcnKQ0KICAgIHVybCA9ICdodHRwczovL2luZm9zeXNxM2RldjEuc2VydmljZS1ub3cuY29tL2FwaS9ub3cvdGFibGUvY21kYl9jaT9zeXNwYXJtX3F1ZXJ5PXN5c191cGRhdGVkX29uPj1qYXZhc2NyaXB0OmdzLmRhdGVHZW5lcmF0ZSgnK1VwZGF0ZVRpbWUrJyleJw0KdXNlcm5hbWVTTiA9ICdhZG1pbicNCnBhc3N3b3JkU04gPSAnUm9vdHVzZXIxMDAjJw0KDQpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwsIGF1dGggPSAodXNlcm5hbWVTTiwgcGFzc3dvcmRTTikpDQppZiByZXNwb25zZS5zdGF0dXNfY29kZT09MjAwOg0KICAgIHRyeToNCiAgICAgICAgZGF0YSA9IGpzb24ubG9hZHMocmVzcG9uc2UudGV4dCkNCiAgICAgICAgcHJpbnQoJ1N1Y2Nlc3MgdG8gZmV0Y2ggYXBpIHJlc3BvbnNlJywgcmVzcG9uc2Uuc3RhdHVzX2NvZGUpDQogICAgZXhjZXB0IGpzb24uSlNPTkRlY29kZUVycm9yOg0KICAgICAgICBwcmludCgnRmFpbGVkIHRvIHBhcnNlIGRhdGEgZnJvbSB0aGUgQVBJJykNCiAgICAgICAgZGF0YSA9IFtdDQplbHNlOg0KICAgIHByaW50KCdGYWlsZWQgdG8gcmV0cml2ZSBkYXRhIGZyb20gdGhlIEFQSS4nKQ0KICAgIGRhdGEgPSBbXQ0KDQppZiAoZGF0YSAhPSBbXSBhbmQgZGF0YVsncmVzdWx0J10gIT0gW10pOg0KICAgIENJVHlwZSA9IFtdDQogICAgZm9yIGl0ZW0gaW4gZGF0YVsncmVzdWx0J106DQogICAgICAgIHN5c19pZCA9IGl0ZW0uZ2V0KCdzeXNfaWQnLHt9KS5nZXQoJ3ZhbHVlJykNCiAgICAgICAgY3R5cGUgPSBpdGVtLmdldCgnc3lzX2NsYXNzX25hbWUnLHt9KS5nZXQoJ3ZhbHVlJykNCiAgICAgICAgZGVzY3JpcHRpb24gPSBpdGVtLmdldCgnc3lzX2NsYXNzX25hbWUnLHt9KS5nZXQoJ2Rpc3BsYXlfdmFsdWUnKQ0KICAgICAgICBzeXNfY2xhc3NfbmFtZSA9IGl0ZW0uZ2V0KCdzeXNfY2xhc3NfbmFtZScse30pLmdldCgndmFsdWUnKQ0KICAgICAgICBwcm9qZWN0X2lkID0gMg0KICAgICAgICBvcmRlcl92YWx1ZSA9IDANCiAgICAgICAgaWYgY3R5cGUgbm90IGluIENJVHlwZToNCiAgICAgICAgICAgIENJVHlwZS5hcHBlbmQoY3R5cGUpDQogICAgICAgICAgICBpZihjdHlwZSBpbiBjdHlwZUxpc3QpOg0KICAgICAgICAgICAgICAgIHVwZGF0ZV9xdWVyeSA9ICcnJ1VQREFURSBjZm1fY29uZmlndXJhdGlvbl9pdGVtX3R5cGUxIFNFVCBkZXNjcmlwdGlvbiA9ICVzIFdIRVJFIGN0eXBlID0gJXMnJycNCiAgICAgICAgICAgICAgICBkYXRhID0gKGRlc2NyaXB0aW9uLGN0eXBlKQ0KICAgICAgICAgICAgICAgIG15Y3Vyc29yLmV4ZWN1dGUodXBkYXRlX3F1ZXJ5LGRhdGEpDQogICAgICAgICAgICAgICAgY29ubmVjdGlvbi5jb21taXQoKQ0KICAgICAgICAgICAgICAgICMgcHJpbnQoJ2RhdGEgdXBkYXRlZCcpDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIGluc2VydF9xdWVyeSA9ICcnJ0lOU0VSVCBJTlRPIGNmbV9jb25maWd1cmF0aW9uX2l0ZW1fdHlwZTEgKGN0eXBlLGRlc2NyaXB0aW9uLHByb2plY3RfaWQsc3lzX2NsYXNzX25hbWUsb3JkZXJfdmFsdWUsc3lzX2lkKSBWQUxVRVMgKCVzLCVzLCVzLCVzLCVzLCVzKScnJw0KICAgICAgICAgICAgICAgIGRhdGEgPSAoY3R5cGUsZGVzY3JpcHRpb24scHJvamVjdF9pZCxzeXNfY2xhc3NfbmFtZSxvcmRlcl92YWx1ZSxzeXNfaWQpDQogICAgICAgICAgICAgICAgbXljdXJzb3IuZXhlY3V0ZShpbnNlcnRfcXVlcnksZGF0YSkNCiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmNvbW1pdCgpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBjb250aW51ZQ0KICAgIHByaW50KCdEYXRhIGluc2VydGVkL3VwZGF0ZWQnKQ0KZWxzZToNCiAgICBwcmludCgnTm8gZGF0YSBpbnNlcnRlZCcpDQpteWN1cnNvci5jbG9zZSgpDQpjb25uZWN0aW9uLmNvbW1pdCgpDQpjb25uZWN0aW9uLmNsb3NlKCkgICAgICAgIA0KcHJpbnQoJ2NvbXBsZXRlZCcp","leo1311"
"LEOGT_CS41653","LEOGT_CS41653_leo1311.py","aW1wb3J0IHBhbmRhcyBhcyBwZA0KaW1wb3J0IG15c3FsLmNvbm5lY3Rvcg0KaW1wb3J0IGpzb24NCmltcG9ydCBzeXMNCmZyb20gbGVhcC51dGlscy5VdGlsaXRpZXMgaW1wb3J0IFV0aWxpdGllcw0KZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHF1b3RlX3BsdXMsIHVybHBhcnNlDQppbXBvcnQgbG9nZ2luZw0KaW1wb3J0IHJlcXVlc3RzDQppbXBvcnQgcHl0eg0KZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUsIHRpbWV6b25lLCBkYXRlLCB0aW1lZGVsdGENCiMgTXlTUUwgRGF0YWJhc2UgY29ubmVjdGlvbiBkZXRhaWxzDQpsb2dnaW5nLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dpbmcuSU5GTykNCmFyZ3VtZW50cyA9IHN5cy5hcmd2DQpkaWN0ID0ge30NCmZvciBhcmcgaW4gYXJndW1lbnRzOg0KICAgIHRyeToNCiAgICAgICAgZGljdFthcmcuc3BsaXQoJzonKVswXV0gPSAoJzonKS5qb2luKGFyZy5zcGxpdCgnOicpWzE6XSkNCiAgICBleGNlcHQ6DQogICAgICAgIGEgPSAnZXJyb3InDQpsYXN0RXhlY3V0aW9uVGltZSA9IGRpY3RbJ0xhc3RfU3VjY2Vzc2Z1bF9FeGVjdXRpb25fVGltZSddDQoNCmxlYXBkcyA9IGRpY3RbJ2xlYXBkcyddDQpsZWFwRFNkaWN0ID0ganNvbi5sb2FkcyhsZWFwZHMpDQp1c2VybmFtZSA9IGxlYXBEU2RpY3RbJ3VzZXJOYW1lJ10NCnBhc3N3b3JkID0gVXRpbGl0aWVzLmRlY3J5cHQobGVhcERTZGljdFsncGFzc3dvcmQnXSwgbGVhcERTZGljdFsnc2FsdCddKQ0KaG9zdCA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkuaG9zdG5hbWUNCnBvcnQgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLnBvcnQNCmRhdGFiYXNlID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5wYXRoLnJzcGxpdCgnLycsIDEpWzFdDQpjb25uZWN0aW9uID0gbXlzcWwuY29ubmVjdG9yLmNvbm5lY3QodXNlcj11c2VybmFtZSwgcGFzc3dvcmQ9cGFzc3dvcmQsIGhvc3Q9aG9zdCwgcG9ydD1wb3J0LCBkYXRhYmFzZT1kYXRhYmFzZSkNCm15Y3Vyc29yID0gY29ubmVjdGlvbi5jdXJzb3IoKQ0KDQpxdWVyeSA9ICcnJyBTRUxFQ1QgY21kYl9jaV9zeXNfaWQgZnJvbSBjZm1fY29uZmlndXJhdGlvbl9pdGVtIFdIRVJFIHByb2plY3RfaWQ9JzInIEFORCBzeXNfY2xhc3NfbmFtZSBJUyBOT1QgTlVMTCAnJycNCm15Y3Vyc29yLmV4ZWN1dGUocXVlcnkpDQpleGlzdGluZ2RhdGEgPSBteWN1cnNvci5mZXRjaGFsbCgpDQpDSURhdGEgPSBbXQ0KZm9yIGl0ZW0gaW4gZXhpc3RpbmdkYXRhOg0KICAgIENJRGF0YS5hcHBlbmQoaXRlbVswXSkNCg0KY3R5cGVxdWVyeSA9ICcnJyBTRUxFQ1Qgc3lzX2NsYXNzX25hbWUsIGN0eXBlLCBpZCBmcm9tIGNmbV9jb25maWd1cmF0aW9uX2l0ZW1fdHlwZSBXSEVSRSBwcm9qZWN0X2lkPScyJyBBTkQgc3lzX2lkIElTIE5PVCBOVUxMICcnJw0KbXljdXJzb3IuZXhlY3V0ZShjdHlwZXF1ZXJ5KQ0KY3R5cGVkYXRhID0gbXljdXJzb3IuZmV0Y2hhbGwoKQ0KDQpjaVR5cGVMaXN0ID1bXQ0KZm9yIGN0eXBlIGluIGN0eXBlZGF0YToNCiAgICBjaVR5cGVMaXN0LmFwcGVuZChjdHlwZVsxXSkNCg0KaWREaWN0ID17fQ0KZm9yIGN0eXBlIGluIGN0eXBlZGF0YToNCiAgICBpZERpY3RbY3R5cGVbMV1dID0gY3R5cGVbMl0NCg0KZm9yIGNpdHlwZSBpbiBjdHlwZWRhdGE6DQogICAgaWYobGFzdEV4ZWN1dGlvblRpbWUgPT0gJy0xJyBvciBleGlzdGluZ2RhdGEgPT0gW10pOg0KICAgICAgICB1cmwgPSAnaHR0cHM6Ly9pbmZvc3lzcTNkZXYxLnNlcnZpY2Utbm93LmNvbS9hcGkvbm93L3RhYmxlLycrY2l0eXBlWzBdKyc/c3lzcGFybV9kaXNwbGF5X3ZhbHVlPXRydWUmc3lzcGFybV9uYW1lIT1OVUxMJnN5c3Bhcm1fY2F0ZWdvcnkhPU5VTEwmc3lzcGFybV9pbnN0YWxsX3N0YXR1cz0xMDEmc3lzcGFybV9vcGVyYXRpb25hbF9zdGF0dXM9MSZzeXNwYXJtX2xvY2F0aW9uIT1OVUxMJw0KICAgIGVsc2U6DQogICAgICAgIFVwZGF0ZVRpbWUgPSAoZGF0ZXRpbWUuc3RycHRpbWUobGFzdEV4ZWN1dGlvblRpbWUsICclYSwgJWQgJWIgJVkgJUg6JU06JVMnKS5hc3RpbWV6b25lKHB5dHoudGltZXpvbmUoJ0FzaWEvQ2FsY3V0dGEnKSkgLSB0aW1lZGVsdGEobWludXRlcz01KSkuc3RyZnRpbWUoJ1wnJVktJW0tJWRcJyxcJyVIOiVNOiVTXCcnKQ0KICAgICAgICB1cmwgPSAnaHR0cHM6Ly9pbmZvc3lzcTNkZXYxLnNlcnZpY2Utbm93LmNvbS9hcGkvbm93L3RhYmxlLycrY2l0eXBlWzBdKyc/c3lzcGFybV9xdWVyeT1zeXNfdXBkYXRlZF9vbj49amF2YXNjcmlwdDpncy5kYXRlR2VuZXJhdGUoJytVcGRhdGVUaW1lKycpJnN5c3Bhcm1fZGlzcGxheV92YWx1ZT10cnVlJnN5c3Bhcm1fbmFtZSE9TlVMTCZzeXNwYXJtX2NhdGVnb3J5IT1OVUxMJnN5c3Bhcm1faW5zdGFsbF9zdGF0dXM9MTAxJnN5c3Bhcm1fb3BlcmF0aW9uYWxfc3RhdHVzPTEmc3lzcGFybV9sb2NhdGlvbiE9TlVMTCcNCiAgICB1c2VybmFtZVNOID0gJ2FkbWluJw0KICAgIHBhc3N3b3JkU04gPSAnUm9vdHVzZXIxMDAjJw0KDQogICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQodXJsLCBhdXRoID0gKHVzZXJuYW1lU04sIHBhc3N3b3JkU04pKQ0KICAgIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlPT0yMDA6DQogICAgICAgIHRyeToNCiAgICAgICAgICAgIGRhdGEgPSBqc29uLmxvYWRzKHJlc3BvbnNlLnRleHQpDQogICAgICAgICAgICBwcmludCgnU3VjY2VzcyB0byBmZXRjaCBhcGkgcmVzcG9uc2UnLCByZXNwb25zZS5zdGF0dXNfY29kZSkNCiAgICAgICAgZXhjZXB0IGpzb24uSlNPTkRlY29kZUVycm9yOg0KICAgICAgICAgICAgcHJpbnQoJ0ZhaWxlZCB0byBwYXJzZSBkYXRhIGZyb20gdGhlIEFQSScpDQogICAgICAgICAgICBkYXRhID0gW10NCiAgICBlbHNlOg0KICAgICAgICBwcmludCgnRmFpbGVkIHRvIHJldHJpdmUgZGF0YSBmcm9tIHRoZSBBUEkuJykNCiAgICAgICAgZGF0YSA9IFtdDQogICAgICAgIA0KICAgIGlmIChkYXRhICE9IFtdIGFuZCBkYXRhWydyZXN1bHQnXSAhPSBbXSk6DQogICAgICAgIGZvciBpdGVtIGluIGRhdGFbJ3Jlc3VsdCddOg0KICAgICAgICAgICAgY21kYl9jaV9zeXNfaWQgPSBpdGVtLmdldCgnc3lzX2lkJykNCiAgICAgICAgICAgIGNpX25hbWUgPSBpdGVtLmdldCgnbmFtZScpDQogICAgICAgICAgICBkZXNjcmlwdGlvbiA9IGl0ZW0uZ2V0KCdzaG9ydF9kZXNjcmlwdGlvbicpDQogICAgICAgICAgICBjYXRlZ29yeSA9IGl0ZW0uZ2V0KCdjYXRlZ29yeScpDQogICAgICAgICAgICBzdGF0dXMgPSBpdGVtLmdldCgnb3BlcmF0aW9uYWxfc3RhdHVzJykNCiAgICAgICAgICAgIGFzc2V0X2RhdGEgPSBpdGVtLmdldCgnYXNzZXQnLCB7fSkNCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoYXNzZXRfZGF0YSwgdHlwZShkaWN0KSk6DQogICAgICAgICAgICAgICAgYXNzZXQgPSBhc3NldF9kYXRhLmdldCgnZGlzcGxheV92YWx1ZScsICcnKQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBhc3NldCA9ICcnDQogICAgICAgICAgICBzdWJfY2F0ZWdvcnkgPSBpdGVtLmdldCgnc3ViY2F0ZWdvcnknKQ0KICAgICAgICAgICAgc3lzX2NsYXNzX25hbWUgPSBpdGVtLmdldCgnc3lzX2NsYXNzX25hbWUnKQ0KICAgICAgICAgICAgbWFuYWdlZF9ieV9kYXRhID0gaXRlbS5nZXQoJ21hbmFnZWRfYnknKQ0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZSAobWFuYWdlZF9ieV9kYXRhLCB0eXBlKGRpY3QpKToNCiAgICAgICAgICAgICAgICBtYW5hZ2VkX2J5ID0gbWFuYWdlZF9ieV9kYXRhLmdldCgndmFsdWUnLCcnKQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBtYW5hZ2VkX2J5ID0gJycNCiAgICAgICAgICAgIG93bmVkX2J5X2RhdGEgPSBpdGVtLmdldCgnb3duZWRfYnknKQ0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZSAob3duZWRfYnlfZGF0YSwgdHlwZShkaWN0KSk6DQogICAgICAgICAgICAgICAgb3duZWRfYnkgPSBvd25lZF9ieV9kYXRhLmdldCgndmFsdWUnLCcnKQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBvd25lZF9ieSA9ICcnDQogICAgICAgICAgICBzeXNfdXBkYXRlZF9vbiA9IGl0ZW0uZ2V0KCdzeXNfdXBkYXRlZF9vbicpDQogICAgICAgICAgICBwcm9qZWN0X2lkID0gMg0KICAgICAgICAgICAgaWYgc3lzX2NsYXNzX25hbWUgaW4gY2lUeXBlTGlzdDoNCiAgICAgICAgICAgICAgICBjdHlwZSA9IGlkRGljdFtpdGVtLmdldCgnc3lzX2NsYXNzX25hbWUnKV0NCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgY3R5cGUgPSBjaXR5cGVbMl0NCiAgICAgICAgICAgIGxvY2F0aW9uRGljdCA9IGl0ZW0uZ2V0KCdsb2NhdGlvbicpDQogICAgICAgICAgICBpZiBpc2luc3RhbmNlIChsb2NhdGlvbkRpY3QsIHR5cGUoZGljdCkpOg0KICAgICAgICAgICAgICAgIGxvY2F0aW9uID0gbG9jYXRpb25EaWN0LmdldCgnZGlzcGxheV92YWx1ZScsJycpDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIGxvY2F0aW9uID0gJycNCiAgICAgICAgICAgIGlmKGNtZGJfY2lfc3lzX2lkIGluIENJRGF0YSk6DQogICAgICAgICAgICAgICAgdXBkYXRlX3F1ZXJ5ID0gJycnVVBEQVRFIGNmbV9jb25maWd1cmF0aW9uX2l0ZW0gU0VUIGNtZGJfY2lfc3lzX2lkID0gY21kYl9jaV9zeXNfaWQsICBjYXRlZ29yeSA9IGNhdGVnb3J5LCBhc3NldCA9IGFzc2V0LCBjaV9uYW1lID0gY2lfbmFtZSwgbG9jYXRpb24gPSBsb2NhdGlvbiwgY3R5cGUgPSBjdHlwZSwgZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbiwgc3RhdHVzID0gc3RhdHVzLCBzdWJfY2F0ZWdvcnkgPSBzdWJfY2F0ZWdvcnksIHByb2plY3RfaWQgPSBwcm9qZWN0X2lkLCBzeXNfY2xhc3NfbmFtZSA9IHN5c19jbGFzc19uYW1lLCBtYW5hZ2VkX2J5ID0gbWFuYWdlZF9ieSwgb3duZWRfYnkgPSBvd25lZF9ieSwgc3lzX3VwZGF0ZWRfb24gPSBzeXNfdXBkYXRlZF9vbiBXSEVSRSBjbWRiX2NpX3N5c19pZCA9IGNtZGJfY2lfc3lzX2lkJycnDQogICAgICAgICAgICAgICAgbXljdXJzb3IuZXhlY3V0ZSh1cGRhdGVfcXVlcnkpDQogICAgICAgICAgICAgICAgY29ubmVjdGlvbi5jb21taXQoKQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBpbnNlcnRfcXVlcnkgPSAnJydJTlNFUlQgSU5UTyBjZm1fY29uZmlndXJhdGlvbl9pdGVtIChjbWRiX2NpX3N5c19pZCxjYXRlZ29yeSxhc3NldCxjaV9uYW1lLGxvY2F0aW9uLGN0eXBlLGRlc2NyaXB0aW9uLHN1Yl9jYXRlZ29yeSxwcm9qZWN0X2lkLHN5c19jbGFzc19uYW1lLG1hbmFnZWRfYnksb3duZWRfYnksc3lzX3VwZGF0ZWRfb24sc3RhdHVzKSBWQUxVRVMgKCVzLCVzLCVzLCVzLCVzLCVzLCVzLCVzLCVzLCVzLCVzLCVzLCVzLCVzKScnJw0KICAgICAgICAgICAgICAgIGRhdGEgPSAoY21kYl9jaV9zeXNfaWQsY2F0ZWdvcnksYXNzZXQsY2lfbmFtZSxsb2NhdGlvbixjdHlwZSxkZXNjcmlwdGlvbixzdWJfY2F0ZWdvcnkscHJvamVjdF9pZCxzeXNfY2xhc3NfbmFtZSxtYW5hZ2VkX2J5LG93bmVkX2J5LHN5c191cGRhdGVkX29uLHN0YXR1cykNCiAgICAgICAgICAgICAgICBteWN1cnNvci5leGVjdXRlKGluc2VydF9xdWVyeSxkYXRhKQ0KICAgICAgICAgICAgICAgIENJRGF0YS5hcHBlbmQoY21kYl9jaV9zeXNfaWQpDQogICAgICAgICAgICAgICAgY29ubmVjdGlvbi5jb21taXQoKQ0KICAgICAgICBwcmludCgnRGF0YSBpbnNlcnRlZC91cGRhdGVkJykNCiAgICBlbHNlOg0KICAgICAgICBwcmludCgnTm8gZGF0YSBpbnNlcnRlZCcpDQpteWN1cnNvci5jbG9zZSgpDQpjb25uZWN0aW9uLmNvbW1pdCgpDQpjb25uZWN0aW9uLmNsb3NlKCkgICAgICAgIA0KcHJpbnQoJ2NvbXBsZXRlZCcp","leo1311"
"LEOGT_CS21690","LEOGT_CS21690_leo1311.py","aW1wb3J0IHBhbmRhcyBhcyBwZA0KaW1wb3J0IG15c3FsLmNvbm5lY3Rvcg0KaW1wb3J0IGpzb24NCmltcG9ydCBzeXMNCmZyb20gbGVhcC51dGlscy5VdGlsaXRpZXMgaW1wb3J0IFV0aWxpdGllcw0KZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHF1b3RlX3BsdXMsIHVybHBhcnNlDQppbXBvcnQgbG9nZ2luZw0KaW1wb3J0IHJlcXVlc3RzIA0KIyBFc3RhYmxpc2ggdGhlIGRhdGFiYXNlIA0KbG9nZ2luZy5iYXNpY0NvbmZpZyhsZXZlbD1sb2dnaW5nLklORk8pDQphcmd1bWVudHMgPSBzeXMuYXJndg0KZGljdCA9IHt9DQpmb3IgYXJnIGluIGFyZ3VtZW50czoNCiAgICB0cnk6DQogICAgICAgIGRpY3RbYXJnLnNwbGl0KCc6JylbMF1dID0gKCc6Jykuam9pbihhcmcuc3BsaXQoJzonKVsxOl0pDQogICAgZXhjZXB0Og0KICAgICAgICBhID0gJ2Vycm9yJw0KbGFzdEV4ZWN1dGlvblRpbWUgPSBkaWN0WydMYXN0X1N1Y2Nlc3NmdWxfRXhlY3V0aW9uX1RpbWUnXQ0KDQpsZWFwZHMgPSBkaWN0WydsZWFwZHMnXQ0KbGVhcERTZGljdCA9IGpzb24ubG9hZHMobGVhcGRzKQ0KdXNlcm5hbWUgPSBsZWFwRFNkaWN0Wyd1c2VyTmFtZSddDQpwYXNzd29yZCA9IFV0aWxpdGllcy5kZWNyeXB0KGxlYXBEU2RpY3RbJ3Bhc3N3b3JkJ10sIGxlYXBEU2RpY3RbJ3NhbHQnXSkNCmhvc3QgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLmhvc3RuYW1lDQpwb3J0ID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5wb3J0DQpkYXRhYmFzZSA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkucGF0aC5yc3BsaXQoJy8nLCAxKVsxXQ0KcHJvamVjdF9pZD0yIA0KDQpleGlzdGluZ3F1ZXJ5ID0gJycnIFNFTEVDVCBwYXJlbnRfc3lzX2lkLCBjaGlsZF9zeXNfaWQgZnJvbSBjZm1feHdfY2lfbWFwcGluZyBXSEVSRSBwcm9qZWN0X2lkPScyJyBBTkQgcGFyZW50X3N5c19pZCBJUyBOT1QgTlVMTCAnJycNCm15Y3Vyc29yLmV4ZWN1dGUoZXhpc3RpbmdxdWVyeSkNCmV4aXN0aW5nZGF0YSA9IG15Y3Vyc29yLmZldGNoYWxsKCkNClBhcmVudERhdGEgPSBbXQ0KQ2hpbGREYXRhID0gW10NCmZvciBpdGVtIGluIGV4aXN0aW5nZGF0YToNCiAgICBQYXJlbnREYXRhLmFwcGVuZChpdGVtWzBdKQ0KICAgIENoaWxkRGF0YS5hcHBlbmQoaXRlbVsxXSkNCg0KcXVlcnkgPSBmJ1NFTEVDVCBjbWRiX2NpX3N5c19pZCxpZCxkZXNjcmlwdGlvbiBGUk9NIGNmbV9jb25maWd1cmF0aW9uX2l0ZW0gd2hlcmUgcHJvamVjdF9pZCA9IHtwcm9qZWN0X2lkfSBhbmQgY21kYl9jaV9zeXNfaWQgSVMgTk9UIE5VTEwnDQpteWN1cnNvci5leGVjdXRlKHF1ZXJ5KQ0KcmVzdWx0ID0gbXljdXJzb3IuZmV0Y2hhbGwoKSAgDQoNCnN5c0lkTGlzdCA9IFtdDQpmb3Igc3lzSWQgaW4gcmVzdWx0Og0KICAgIHN5c0lkTGlzdC5hcHBlbmQoc3lzSWRbMF0pDQoNCmlkRGljdCA9e30NCmZvciBjaWlkIGluIHJlc3VsdDoNCiAgICBpZERpY3RbY2lpZFswXV0gPSBjaWlkWzFdDQoNCmZvciBzeXNfaWQgaW4gc3lzSWRMaXN0OiANCiAgICB1cmwgPSAnaHR0cHM6Ly9pbmZvc3lzcTNkZXYxLnNlcnZpY2Utbm93LmNvbS9hcGkvbm93L3RhYmxlL2NtZGJfcmVsX2NpJw0KICAgIGhlYWRlcnMgPSB7IA0KICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLCAgICAgDQogICAgfSANCiAgICBpZihsYXN0RXhlY3V0aW9uVGltZSA9PSAnLTEnIG9yIGV4aXN0aW5nZGF0YSA9PSBbXSk6DQogICAgICAgIHBhcmFtcyA9IHsgICAgICAgICANCiAgICAgICAgICAgICdzeXNwYXJtX3F1ZXJ5JzogZidwYXJlbnQ9e3N5c19pZH1eT1JjaGlsZD17c3lzX2lkfScsDQogICAgICAgICAgICAnc3lzcGFybV9kaXNwbGF5X3ZhbHVlJzpUcnVlDQogICAgICAgIH0gIA0KICAgIGVsc2U6DQogICAgICAgIFVwZGF0ZVRpbWUgPSAoZGF0ZXRpbWUuc3RycHRpbWUobGFzdEV4ZWN1dGlvblRpbWUsICclYSwgJWQgJWIgJVkgJUg6JU06JVMnKS5hc3RpbWV6b25lKHB5dHoudGltZXpvbmUoJ0FzaWEvQ2FsY3V0dGEnKSkgLSB0aW1lZGVsdGEobWludXRlcz01KSkuc3RyZnRpbWUoJ1wnJVktJW0tJWRcJyxcJyVIOiVNOiVTXCcnKQ0KICAgICAgICBwYXJhbXMgPSB7ICAgICAgICAgDQogICAgICAgICAgICAnc3lzcGFybV9xdWVyeSc6IGYncGFyZW50PXtzeXNfaWR9Xk9SY2hpbGQ9e3N5c19pZH0mc3lzX3VwZGF0ZWRfb24+PWphdmFzY3JpcHQ6Z3MuZGF0ZUdlbmVyYXRlKCcrVXBkYXRlVGltZSsnKV5PUkRFUkJZREVTQ3N5c19jcmVhdGVkX29uJywNCiAgICAgICAgICAgICdzeXNwYXJtX2Rpc3BsYXlfdmFsdWUnOlRydWUNCiAgICAgICAgfSAgDQogICAgYXBpX3VzZXJuYW1lID0gJ2FkbWluJyANCiAgICBhcGlfcGFzc3dvcmQgPSAnUm9vdHVzZXIxMDAjJyAgDQogICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQodXJsLCBhdXRoPShhcGlfdXNlcm5hbWUsIGFwaV9wYXNzd29yZCksIGhlYWRlcnM9aGVhZGVycywgcGFyYW1zPXBhcmFtcykgICAgICANCiAgICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6ICAgICAgICAgDQogICAgICAgIHRyeTogICAgICAgICAgICAgDQogICAgICAgICAgICBhcGlfZGF0YSA9IGpzb24ubG9hZHMocmVzcG9uc2UudGV4dCkgIA0KICAgICAgICBleGNlcHQganNvbi5KU09ORGVjb2RlRXJyb3I6ICAgICAgICAgICAgIA0KICAgICAgICAgICAgcHJpbnQoJ0ZhaWxlZCB0byBwYXJzZSBkYXRhIGZyb20gdGhlIEFQSS4nKSAgICAgICAgICAgICANCiAgICAgICAgICAgIGFwaV9kYXRhID0gW10gICAgIA0KICAgIGVsc2U6ICAgICAgICAgDQogICAgICAgIHByaW50KGYnRmFpbGVkIHRvIHJldHJpZXZlIGRhdGEgZnJvbSB0aGUgQVBJLiBTdGF0dXMgQ29kZToge3Jlc3BvbnNlLnN0YXR1c19jb2RlfScpICAgICAgICAgDQogICAgICAgIGFwaV9kYXRhID0gW10gDQoNCiAgICBpZiAoYXBpX2RhdGEgIT0gW10gYW5kIGFwaV9kYXRhWydyZXN1bHQnXSAhPSBbXSk6DQogICAgICAgIGZvciBpdGVtIGluIGFwaV9kYXRhWydyZXN1bHQnXTogDQogICAgICAgICAgICBwYXJlbnQgPSBpdGVtLmdldCgncGFyZW50Jywge30pDQogICAgICAgICAgICBpZiBpc2luc3RhbmNlIChwYXJlbnQsIHR5cGUoZGljdCkpOg0KICAgICAgICAgICAgICAgIHBhcmVudF9saW5rID0gcGFyZW50LmdldCgnbGluaycsJycpDQogICAgICAgICAgICAgICAgcGFyZW50X3N5c19pZCA9IHN0cihwYXJlbnRfbGluay5zcGxpdCgnLycpWy0xXSkNCiAgICAgICAgICAgICAgICBjaV9pdGVtMV9uYW1lID0gcGFyZW50LmdldCgnZGlzcGxheV92YWx1ZScsJycpDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIHBhcmVudF9zeXNfaWQgPSAnJw0KICAgICAgICAgICAgICAgIGNpX2l0ZW0xX25hbWUgPSAnJw0KICAgICAgICAgICAgY2hpbGQgPSBpdGVtLmdldCgnY2hpbGQnLCB7fSkNCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UgKGNoaWxkLCB0eXBlKGRpY3QpKToNCiAgICAgICAgICAgICAgICBjaGlsZF9saW5rID0gY2hpbGQuZ2V0KCdsaW5rJywnJykNCiAgICAgICAgICAgICAgICBjaGlsZF9zeXNfaWQgPSBzdHIoY2hpbGRfbGluay5zcGxpdCgnLycpWy0xXSkNCiAgICAgICAgICAgICAgICBjaV9pdGVtMl9uYW1lID0gY2hpbGQuZ2V0KCdkaXNwbGF5X3ZhbHVlJywnJykNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgY2hpbGRfc3lzX2lkID0gJycNCiAgICAgICAgICAgICAgICBjaV9pdGVtMl9uYW1lID0gJycgICAgICAgICAgDQogICAgICAgICAgICByZWxhdGlvbiA9IGl0ZW0uZ2V0KCd0eXBlJyx7fSkNCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UgKHJlbGF0aW9uLCB0eXBlKGRpY3QpKToNCiAgICAgICAgICAgICAgICByZWxhdGlvbl90eXBlID0gcmVsYXRpb24uZ2V0KCdkaXNwbGF5X3ZhbHVlJywnJykNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgcmVsYXRpb25fdHlwZSA9ICcnDQogICAgICAgICAgICBpZiBwYXJlbnRfc3lzX2lkIGluIHN5c0lkTGlzdDoNCiAgICAgICAgICAgICAgICBjaV9pdGVtMSA9IGlkRGljdC5nZXQocGFyZW50X3N5c19pZCkNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgY2lfaXRlbTEgPSBOb25lDQogICAgICAgICAgICBpZiBjaGlsZF9zeXNfaWQgaW4gc3lzSWRMaXN0Og0KICAgICAgICAgICAgICAgIGNpX2l0ZW0yID0gaWREaWN0LmdldChjaGlsZF9zeXNfaWQpDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIGNpX2l0ZW0yID0gTm9uZQ0KICAgICAgICAgICAgc3lzX2NyZWF0ZWRfb24gPSBpdGVtLmdldCgnc3lzX2NyZWF0ZWRfb24nKQ0KICAgICAgICAgICAgc3lzX3VwZGF0ZWRfb24gPSBpdGVtLmdldCgnc3lzX3VwZGF0ZWRfb24nKQ0KICAgICAgICAgICAgcHJpbnQocGFyZW50X3N5c19pZCkNCiAgICAgICAgICAgIHByaW50KGNoaWxkX3N5c19pZCkNCiAgICAgICAgICAgIGlmIFBhcmVudERhdGEgIT0gW106DQogICAgICAgICAgICAgICAgdXBkYXRlY291bnQgPSAwDQogICAgICAgICAgICAgICAgZm9yIGogaW4gcmFuZ2UobGVuKFBhcmVudERhdGEpKToNCiAgICAgICAgICAgICAgICAgICAgaWYgUGFyZW50RGF0YVtqXSA9PSBwYXJlbnRfc3lzX2lkIGFuZCBDaGlsZERhdGFbal0gPT0gY2hpbGRfc3lzX2lkOg0KICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlX3F1ZXJ5ID0gZicnJyBVUERBVEUgY2ZtX3h3X2NpX21hcHBpbmcgU0VUIHBhcmVudF9zeXNfaWQgPSBwYXJlbnRfc3lzX2lkLCBjaGlsZF9zeXNfaWQgPSBjaGlsZF9zeXNfaWQsIHN5c19jcmVhdGVkX29uID0gc3lzX2NyZWF0ZWRfb24sIHN5c191cGRhdGVkX29uID0gc3lzX3VwZGF0ZWRfb24sIHByb2plY3RfaWQgPSBwcm9qZWN0X2lkLCByZWxhdGlvbl90eXBlID0gcmVsYXRpb25fdHlwZSwgY2lfaXRlbTEgPSBjaV9pdGVtMSwgY2lfaXRlbTFfbmFtZSA9IGNpX2l0ZW0xX25hbWUsIGNpX2l0ZW0yID0gY2lfaXRlbTIsIGNpX2l0ZW0yX25hbWUgPSBjaV9pdGVtMl9uYW1lJycnDQogICAgICAgICAgICAgICAgICAgICAgICBteWN1cnNvci5leGVjdXRlKHVwZGF0ZV9xdWVyeSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KHBhcmVudF9zeXNfaWQrJyBhbmQgJytjaGlsZF9zeXNfaWQrJyB1cGRhdGVkJykNCiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWNvdW50ID0gMQ0KICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5jb21taXQoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICBpZiB1cGRhdGVjb3VudCA9PSAwOg0KICAgICAgICAgICAgICAgICAgICBpbnNlcnRfcXVlcnkgPSBmJycnIElOU0VSVCBJTlRPIGNmbV94d19jaV9tYXBwaW5nIChwYXJlbnRfc3lzX2lkLGNoaWxkX3N5c19pZCxzeXNfY3JlYXRlZF9vbixzeXNfdXBkYXRlZF9vbixwcm9qZWN0X2lkLHJlbGF0aW9uX3R5cGUsY2lfaXRlbTEsY2lfaXRlbTFfbmFtZSxjaV9pdGVtMixjaV9pdGVtMl9uYW1lKSBWQUxVRVMgKCVzLCVzLCVzLCVzLCVzLCVzLCVzLCVzLCVzLCVzKScnJyANCiAgICAgICAgICAgICAgICAgICAgZGF0YSA9KHBhcmVudF9zeXNfaWQsY2hpbGRfc3lzX2lkLHN5c19jcmVhdGVkX29uLHN5c191cGRhdGVkX29uLHByb2plY3RfaWQscmVsYXRpb25fdHlwZSxjaV9pdGVtMSxjaV9pdGVtMV9uYW1lLGNpX2l0ZW0yLGNpX2l0ZW0yX25hbWUpDQogICAgICAgICAgICAgICAgICAgIG15Y3Vyc29yLmV4ZWN1dGUoaW5zZXJ0X3F1ZXJ5LGRhdGEpICANCiAgICAgICAgICAgICAgICAgICAgcHJpbnQocGFyZW50X3N5c19pZCsnIGFuZCAnK2NoaWxkX3N5c19pZCsnIGluc2VydGVkJykNCiAgICAgICAgICAgICAgICAgICAgUGFyZW50RGF0YS5hcHBlbmQocGFyZW50X3N5c19pZCkNCiAgICAgICAgICAgICAgICAgICAgQ2hpbGREYXRhLmFwcGVuZChjaGlsZF9zeXNfaWQpDQogICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uY29tbWl0KCkNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgaW5zZXJ0X3F1ZXJ5ID0gZicnJyBJTlNFUlQgSU5UTyBjZm1feHdfY2lfbWFwcGluZyAocGFyZW50X3N5c19pZCxjaGlsZF9zeXNfaWQsc3lzX2NyZWF0ZWRfb24sc3lzX3VwZGF0ZWRfb24scHJvamVjdF9pZCxyZWxhdGlvbl90eXBlLGNpX2l0ZW0xLGNpX2l0ZW0xX25hbWUsY2lfaXRlbTIsY2lfaXRlbTJfbmFtZSkgVkFMVUVTICglcywlcywlcywlcywlcywlcywlcywlcywlcywlcyknJycgDQogICAgICAgICAgICAgICAgZGF0YSA9KHBhcmVudF9zeXNfaWQsY2hpbGRfc3lzX2lkLHN5c19jcmVhdGVkX29uLHN5c191cGRhdGVkX29uLHByb2plY3RfaWQscmVsYXRpb25fdHlwZSxjaV9pdGVtMSxjaV9pdGVtMV9uYW1lLGNpX2l0ZW0yLGNpX2l0ZW0yX25hbWUpDQogICAgICAgICAgICAgICAgbXljdXJzb3IuZXhlY3V0ZShpbnNlcnRfcXVlcnksZGF0YSkgIA0KICAgICAgICAgICAgICAgIHByaW50KHBhcmVudF9zeXNfaWQrJyBhbmQgJytjaGlsZF9zeXNfaWQrJyBpbnNlcnRlZCcpDQogICAgICAgICAgICAgICAgUGFyZW50RGF0YS5hcHBlbmQocGFyZW50X3N5c19pZCkNCiAgICAgICAgICAgICAgICBDaGlsZERhdGEuYXBwZW5kKGNoaWxkX3N5c19pZCkNCiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmNvbW1pdCgpDQogICAgICAgIHByaW50KCdEYXRhIGluc2VydGVkL3VwZGF0ZWQnKQ0KICAgIGVsc2U6DQogICAgICAgIHByaW50KCdObyBkYXRhIGluc2VydGVkJykgDQpteWN1cnNvci5jbG9zZSgpDQpjb25uZWN0aW9uLmNvbW1pdCgpDQpjb25uZWN0aW9uLmNsb3NlKCkgICAgIA0KcHJpbnQoJ2NvbXBsZXRlZCcp","leo1311"
"LEORSLTN43548","LEORSLTN43548_leo1311.py","aW1wb3J0IHJlcXVlc3RzCgppbXBvcnQganNvbgoKaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyCmltcG9ydCBvcwppbXBvcnQgZGF0ZXRpbWUKaW1wb3J0IHN5cwppbXBvcnQgcmFuZG9tCmltcG9ydCByZQppbXBvcnQgdGltZQppbXBvcnQgbXlzcWwuY29ubmVjdG9yIGFzIGNvbm5lY3RvcgojIGZyb20gdXJsbGliLnBhcnNlIGltcG9ydCBxdW90ZV9wbHVzLCB1cmxwYXJzZQojIGZyb20gbGVhcC51dGlscy5VdGlsaXRpZXMgaW1wb3J0IFV0aWxpdGllcwojIGZyb20gcHlzcGFyay5zcWwgaW1wb3J0IFNwYXJrU2Vzc2lvbgoKb3MuZW52aXJvblsnSFRUUF9QUk9YWSddPScnCiAKb3MuZW52aXJvblsnSFRUUFNfUFJPWFknXT0nJwoKdXNlcm5hbWU9InNyZWludCIKcGFzc3dvcmQ9IjVkXkZac3ZtIgpob3N0PSIxMC44Mi4xMjIuOTQiCnBvcnQgPSAzMzA2CmRhdGFiYXNlID0gJ3NyZWludCcgIApjb25uZWN0aW9uID0gY29ubmVjdG9yLmNvbm5lY3QoCiAgICB1c2VyPXVzZXJuYW1lLCBwYXNzd29yZD1wYXNzd29yZCwgaG9zdD1ob3N0LCBwb3J0PXBvcnQsIGRhdGFiYXNlPWRhdGFiYXNlCikKY3Vyc29yID0gY29ubmVjdGlvbi5jdXJzb3IoKQoKI2luc3RhbmNlX2RhdGV0aW1lPSd3aW5kb3dzX21lbW9yeV91c2FnZTEgbnVsbCAyMC4wJwoKbG9nZ2VyLmJhc2ljQ29uZmlnKAogICAgbGV2ZWw9bG9nZ2VyLklORk8sCiAgICBmb3JtYXQ9JyUoYXNjdGltZSlzIElORk8gJShtZXNzYWdlKXMnLAogICAgZGF0ZWZtdD0nJXkvJW0vJWQgJUg6JU06JVMnLAopCgphcmd1bWVudHMgPSBzeXMuYXJndgpteV9kaWN0ID0ge30KZm9yIGFyZyBpbiBhcmd1bWVudHM6CiAgICB0cnk6CiAgICAgICAgbXlfZGljdFthcmcuc3BsaXQoJzonKVswXV0gPSAnOicuam9pbihhcmcuc3BsaXQoJzonKVsxOl0pCiAgICBleGNlcHQ6CiAgICAgICAgYSA9ICdlcnJvcicKCgppdHNtX251bWJlcj1teV9kaWN0WydpdHNtX251bWJlciddCgpzdGF0ZXMgPSBbIkNsb3NlZCIsICJJbiBQcm9ncmVzcyJdCnBheWxvYWRzPVsiVGhlIHJlc29sdXRpb24gd29ya2Zsb3cgaXMgdHJpZ2dlcmVkIGFuZCB0aGUgaXNzdWUgaXMgcmVzb2x2ZWQiLCAiVGhlIHJlc29sdXRpb24gd29ya2Zsb3cgaXMgdHJpZ2dlcmVkIGJ1dCB0aGUgaXNzdWUgaXMgbm90IHJlc29sdmVkIl0KIyBpbmRleCA9IHJhbmRvbS5yYW5kaW50KDAsbGVuKHBheWxvYWRzKS0xKQppbmRleD0wCgpzdGF0ZSA9c3RhdGVzW2luZGV4XQpwYXlsb2FkID0gcGF5bG9hZHNbaW5kZXhdCgoKdXJsID0gJ2h0dHBzOi8vaW5mb3N5c3EzZGV2MS5zZXJ2aWNlLW5vdy5jb20vYXBpL25vdy90YWJsZS9pbmNpZGVudD9udW1iZXI9JytpdHNtX251bWJlcgpsb2dnZXIuaW5mbyh1cmwpCgojIGxvZ2dlci5pbmZvKCd1cmwnK3VybCkKCmhlYWRlcnMgPSB7J0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJywgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ30KcmVzID0gcmVxdWVzdHMuZ2V0KAogICAgICAgIHVybCwKICAgICAgICBhdXRoPSgnSUNTUF9pY2FwX3VzZXInLCAncXdlcjEyMzQnKSwKICAgICAgICBoZWFkZXJzPWhlYWRlcnMKICAgICkKCnJlc3BvbnNlPXJlcy5qc29uKCkKcmVzdWx0ID0gcmVzcG9uc2VbJ3Jlc3VsdCddCnN5c19pZD1yZXN1bHRbMF1bJ3N5c19pZCddCiMgaXRzbV9udW1iZXI9cmVzdWx0WzBdWydudW1iZXInXQp1cmwgPSAnaHR0cHM6Ly9pbmZvc3lzcTNkZXYxLnNlcnZpY2Utbm93LmNvbS9hcGkvbm93L3RhYmxlL2luY2lkZW50Lycrc3lzX2lkCgpoZWFkZXJzID0geydBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbid9CgpwYXlsb2FkID0geydzdGF0ZSc6IHN0YXRlLAogICAgICAgICAgICAnd29ya19ub3Rlcyc6ICBwYXlsb2FkCiAgICAgICAgICAgIH0KCnJlcyA9IHJlcXVlc3RzLnB1dCgKICAgICAgICB1cmwsCiAgICAgICAgYXV0aD0oJ0lDU1BfaWNhcF91c2VyJywgJ3F3ZXIxMjM0JyksCiAgICAgICAgaGVhZGVycz1oZWFkZXJzLAogICAgICAgIGRhdGE9anNvbi5kdW1wcyhwYXlsb2FkKSwKICAgICkgICAgCgogICAKCnRyeToKICAgICBpZihzdGF0ZSA9PSAiQ2xvc2VkIik6CiAgICAgICAgcXVlcnk9ZidVUERBVEUgYGVtZl9ldmVudGAgZSBTRVQgZS5yZXNvbHV0aW9uX3RyaWdnZXJlZCA9IFwiWWVzXCIgLCBlLml0c21fc3RhdHVzPVwiQ2xvc2VkXCIgV0hFUkUgZS5pdHNtX251bWJlciA9XCd7aXRzbV9udW1iZXJ9XCcgQU5EIGUuaXRzbV9zdGF0dXM9XCJJbiBQcm9ncmVzc1wiJyAKICAgICBlbHNlOgogICAgICAgIHF1ZXJ5PWYnVVBEQVRFIGBlbWZfZXZlbnRgIGUgU0VUIGUucmVzb2x1dGlvbl90cmlnZ2VyZWQgPSBcIlllc1wiICBXSEVSRSBlLml0c21fbnVtYmVyID1cIntpdHNtX251bWJlcn1cIiBBTkQgZS5pdHNtX3N0YXR1cz1cIkluIFByb2dyZXNzXCInICAgCiAgICAgY3Vyc29yLmV4ZWN1dGUocXVlcnkpCiAgICAgY29ubmVjdGlvbi5jb21taXQoKQogICAgIyAgbG9nZ2VyLmluZm8oJ3Jlc3BvbnNlMScpCiAgICAjICBsb2dnZXIuaW5mbyhyZXNwb25zZSkKICAgICBsb2dnZXIuaW5mbyhxdWVyeSkKICAgICBsb2dnZXIuaW5mbygndXBkYXRlIHF1ZXJ5IGV4ZWN1dGVkJykKICAgICMgbG9nZ2VyLmluZm8ocmVzcG9uc2UpCiAgICAgCiAgICAKZXhjZXB0IGNvbm5lY3Rvci5lcnJvcnMuT3BlcmF0aW9uYWxFcnJvciBhcyBlOgogICAgIyBIYW5kbGUgdGhlIHRpbWVvdXQgZXhjZXB0aW9uCiAgICAgIGxvZ2dlci5pbmZvKCdNeVNRTCBjb25uZWN0aW9uIHRpbWVvdXQ6IHt9Jy5mb3JtYXQoZSkpCiAKZmluYWxseToKICAgICMgQ2xvc2UgdGhlIGRhdGFiYXNlIGNvbm5lY3Rpb24KICAgICAgY29ubmVjdGlvbi5jbG9zZSgpCiAgICAKbG9nZ2VyLmluZm8oaXRzbV9udW1iZXIpIAogCiAKbG9nZ2VyLmluZm8oIkNvbXBsZXRlZCIpCgoKCgoKCgoKCgo=","leo1311"
"LEOPRMTH73251","LEOPRMTH73251_leo1311.py","aW1wb3J0IHJlcXVlc3RzDQppbXBvcnQganNvbg0KaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyDQppbXBvcnQgb3MNCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lICwgdGltZXpvbmUgLCB0aW1lZGVsdGENCg0KDQoNCg0KDQpsb2dnZXIuYmFzaWNDb25maWcoDQogICAgbGV2ZWw9bG9nZ2VyLklORk8sDQogICAgZm9ybWF0PSclKGFzY3RpbWUpcyBJTkZPICUobWVzc2FnZSlzJywNCiAgICBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycsDQopDQoNCiNTZXR0aW5nIE5vcHJveHkNCm9zLmVudmlyb25bJ0hUVFBfUFJPWFknXT0nJw0Kb3MuZW52aXJvblsnSFRUUFNfUFJPWFknXT0nJw0Kb3MuZW52aXJvblsnaHR0cF9wcm94eSddPScnDQpvcy5lbnZpcm9uWydodHRwc19wcm94eSddPScnDQoNCg0KY3VycmVudF90aW1lID0gZGF0ZXRpbWUubm93KHRpbWV6b25lLnV0YykNCmVuZF9kYXRldGltZSA9IGN1cnJlbnRfdGltZS5zdHJmdGltZSgiJVktJW0tJWRUJUg6JU06JVNaIikNCnN0YXJ0PWN1cnJlbnRfdGltZS0gdGltZWRlbHRhKG1pbnV0ZXM9NSkNCnN0YXJ0X2RhdGV0aW1lPXN0YXJ0LnN0cmZ0aW1lKCIlWS0lbS0lZFQlSDolTTolU1oiKQ0KbG9nZ2VyLmluZm8oZW5kX2RhdGV0aW1lKQ0KbG9nZ2VyLmluZm8oc3RhcnRfZGF0ZXRpbWUpDQoNCg0KDQpwcm9tZXRoZXVzX3VybCA9ICJodHRwOi8vY3ZyaWN0bHB0bTIxOjkwOTAiDQoNCm1ldHJpY3M9Wydwcm9jZXNzX2NwdV91c2FnZScsICdqdm1fZ2NfbWVtb3J5X2FsbG9jYXRlZF9ieXRlc190b3RhbCcsJ2h0dHBfc2VydmVyX3JlcXVlc3RzX3NlY29uZHNfY291bnQnLCdodHRwX3JlcXVlc3RzX3N1Y2Nlc3NmdWxfYXZnJywnanZtX2hlYXBfbWVtb3J5X3VzZWRfcGVyY2VudCcsJ2h0dHBfcmVxdWVzdHNfdW5zdWNjZXNzZnVsX2F2ZyddDQpmb3IgaSBpbiByYW5nZShsZW4obWV0cmljcykpOg0KICAgIHF1ZXJ5PWYicXVlcnlfcmFuZ2U/cXVlcnk9e21ldHJpY3NbaV19JnN0YXJ0PXtzdGFydF9kYXRldGltZX0mZW5kPXtlbmRfZGF0ZXRpbWV9JnN0ZXA9MTBzIg0KDQoNCiAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldChmIntwcm9tZXRoZXVzX3VybH0vYXBpL3YxL3txdWVyeX0iKQ0KDQogICAgI0NoZWNrIGZvciBzdWNjZXNzZnVsIHJlc3BvbnNlDQogICAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwOg0KICAgICAgICBkYXRhID0ganNvbi5sb2FkcyhyZXNwb25zZS50ZXh0KVsiZGF0YSJdWyJyZXN1bHQiXQ0KICAgICAgICBsb2dnZXIuaW5mbyhkYXRhKQ0KICAgIGVsc2U6DQogICAgICAgIGxvZ2dlci5pbmZvKGYiRXJyb3IgcXVlcnlpbmcgUHJvbWV0aGV1czoge3Jlc3BvbnNlLnN0YXR1c19jb2RlfSIpDQogICAgDQogICAgDQogICAgDQpsb2dnZXIuaW5mbygnY29tcGxldGVkJykNCg0KDQoNCg0K","leo1311"
"LEOEVNTC87096","LEOEVNTC87096_leo1311.py","","leo1311"
"LEOTST_P11350","LEOTST_P11350_leo1311.py","aW1wb3J0IHJlcXVlc3RzDQppbXBvcnQganNvbg0KaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyDQppbXBvcnQgb3MNCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lICwgdGltZXpvbmUgLCB0aW1lZGVsdGENCmltcG9ydCBteXNxbC5jb25uZWN0b3IgYXMgY29ubmVjdG9yDQoNCg0KDQoNCg0KbG9nZ2VyLmJhc2ljQ29uZmlnKA0KICAgIGxldmVsPWxvZ2dlci5JTkZPLA0KICAgIGZvcm1hdD0nJShhc2N0aW1lKXMgSU5GTyAlKG1lc3NhZ2UpcycsDQogICAgZGF0ZWZtdD0nJXkvJW0vJWQgJUg6JU06JVMnLA0KKQ0KDQojU2V0dGluZyBOb3Byb3h5DQpvcy5lbnZpcm9uWydIVFRQX1BST1hZJ109JycNCm9zLmVudmlyb25bJ0hUVFBTX1BST1hZJ109JycNCm9zLmVudmlyb25bJ2h0dHBfcHJveHknXT0nJw0Kb3MuZW52aXJvblsnaHR0cHNfcHJveHknXT0nJw0KDQoNCmN1cnJlbnRfdGltZSA9IGRhdGV0aW1lLm5vdyh0aW1lem9uZS51dGMpDQplbmRfZGF0ZXRpbWUgPSBjdXJyZW50X3RpbWUuc3RyZnRpbWUoIiVZLSVtLSVkVCVIOiVNOiVTWiIpDQpzdGFydD1jdXJyZW50X3RpbWUtIHRpbWVkZWx0YShtaW51dGVzPTUpDQpzdGFydF9kYXRldGltZT1zdGFydC5zdHJmdGltZSgiJVktJW0tJWRUJUg6JU06JVNaIikNCmxvZ2dlci5pbmZvKGVuZF9kYXRldGltZSkNCmxvZ2dlci5pbmZvKHN0YXJ0X2RhdGV0aW1lKQ0KDQoNCiNEQiBkZXRhaWxzDQp1c2VybmFtZT0ic3JlaW50Ig0KcGFzc3dvcmQ9IjVkXkZac3ZtIg0KaG9zdD0iMTAuODIuMTIyLjk0Ig0KcG9ydCA9IDMzMDYNCmRhdGFiYXNlID0gJ3NyZWludCcNCg0KDQp0cnk6DQogICAgY29ubmVjdGlvbiA9IGNvbm5lY3Rvci5jb25uZWN0KA0KICAgICAgICB1c2VyPXVzZXJuYW1lLCBwYXNzd29yZD1wYXNzd29yZCwgaG9zdD1ob3N0LCBwb3J0PXBvcnQsIGRhdGFiYXNlPWRhdGFiYXNlDQogICAgKQ0KICAgIGN1cnNvciA9IGNvbm5lY3Rpb24uY3Vyc29yKCkNCiAgICBxdWVyeT1mJ1NFTEVDVCAqIEZST00gYGluc3RhbmNlX2NpX3RocmVzaG9sZGA7Jw0KICAgIHF1ZXJ5Mj1mJ1NFTEVDVCAqIEZST00gYENNREJfTWV0cmljYDsnDQogICAgcXVlcnkzPWYnU0VMRUNUICogRlJPTSBgQ01EQl9DSWA7Jw0KICAgIGxvZ2dlci5pbmZvKCdxdWVyeScpDQogICAgbG9nZ2VyLmluZm8ocXVlcnkpDQogICAgY3Vyc29yLmV4ZWN1dGUocXVlcnkpDQogICAgbWFwcGluZ190YWJsZT1jdXJzb3IuZmV0Y2hhbGwoKTsNCiAgICBsb2dnZXIuaW5mbygncmVzdWx0IG9mIHN1YnF1ZXJ5JykNCiAgICAjbG9nZ2VyLmluZm8obWFwcGluZ190YWJsZSkNCiAgICBtYXBwaW5nID0ge30NCiAgICBmb3IgaSBpbiBtYXBwaW5nX3RhYmxlOg0KICAgICAgICBtYXBwaW5nW2lbMF0rJyAnK2lbMl1dPWlbMV0NCiAgICBsb2dnZXIuaW5mbyhtYXBwaW5nKQ0KICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5MikNCiAgICBDTURCX01ldHJpY190YWJsZT1jdXJzb3IuZmV0Y2hhbGwoKTsNCiAgICBsb2dnZXIuaW5mbygncmVzdWx0IG9mIHN1YnF1ZXJ5JykNCiAgICAjbG9nZ2VyLmluZm8oQ01EQl9NZXRyaWNfdGFibGUpDQogICAgQ01EQl9NZXRyaWMgPSB7fQ0KICAgIGZvciBpIGluIENNREJfTWV0cmljX3RhYmxlOg0KICAgICAgICBDTURCX01ldHJpY1tpWzFdXT1pWzBdDQogICAgbG9nZ2VyLmluZm8oQ01EQl9NZXRyaWMpDQogICAgDQogICAgY3Vyc29yLmV4ZWN1dGUocXVlcnkzKQ0KICAgIENNREJfQ0lfdGFibGU9Y3Vyc29yLmZldGNoYWxsKCk7DQogICAgbG9nZ2VyLmluZm8oJ3Jlc3VsdCBvZiBzdWJxdWVyeScpDQogICAgbG9nZ2VyLmluZm8oQ01EQl9DSV90YWJsZSkNCiAgICBDTURCX0NJID0ge30NCiAgICBmb3IgaSBpbiBDTURCX0NJX3RhYmxlOg0KICAgICAgICBDTURCX0NJW2lbMV1dPWlbMF0NCiAgICBsb2dnZXIuaW5mbyhDTURCX0NJKQ0KICANCmV4Y2VwdCBjb25uZWN0b3IuZXJyb3JzLk9wZXJhdGlvbmFsRXJyb3IgYXMgZToNCiAgICAjIEhhbmRsaW5nIHRoZSB0aW1lb3V0IGV4Y2VwdGlvbg0KICAgIGxvZ2dlci5pbmZvKCdNeVNRTCBjb25uZWN0aW9uIHRpbWVvdXQ6IHt9Jy5mb3JtYXQoZSkpDQoNCmZpbmFsbHk6DQogICAgIyBDbG9zZSB0aGUgZGF0YWJhc2UgY29ubmVjdGlvbg0KICAgIGN1cnNvci5jbG9zZSgpDQogICAgY29ubmVjdGlvbi5jbG9zZSgpDQoNCg0KZGVmIGluc2VydF9yZWNvcmRzKGRhdGEpOg0KICAgIHRyeToNCiAgICAgICAgY29ubmVjdGlvbiA9IGNvbm5lY3Rvci5jb25uZWN0KA0KICAgICAgICAgICAgdXNlcj11c2VybmFtZSwgcGFzc3dvcmQ9cGFzc3dvcmQsIGhvc3Q9aG9zdCwgcG9ydD1wb3J0LCBkYXRhYmFzZT1kYXRhYmFzZQ0KICAgICAgICApDQogICAgICAgIGN1cnNvciA9IGNvbm5lY3Rpb24uY3Vyc29yKCkNCiAgICAgICAgIiIiIEluc2VydHMgYSBzZXQgb2YgcmVjb3JkcyBpbnRvIHRoZSB0YWJsZSAiIiINCiAgICAgICAgY3Vyc29yLmV4ZWN1dGVtYW55KGYnSU5TRVJUIElOVE8gQ01EQl9DSV9NZXRyaWMgKGNpX2lkLCBtZXRyaWNfaWQsIHRpbWVzdGFtcCxtZXRyaWNfdmFsdWUpIFZBTFVFUyAoJXMsICVzLCAlcywgJXMpJywgZGF0YSkNCiAgICAgICAgY29ubmVjdGlvbi5jb21taXQoKQ0KICAgIGV4Y2VwdCBjb25uZWN0b3IuZXJyb3JzLk9wZXJhdGlvbmFsRXJyb3IgYXMgZToNCiAgICAgICAgIyBIYW5kbGluZyB0aGUgdGltZW91dCBleGNlcHRpb24NCiAgICAgICAgbG9nZ2VyLmluZm8oJ015U1FMIGNvbm5lY3Rpb24gdGltZW91dDoge30nLmZvcm1hdChlKSkNCiAgICANCiAgICBmaW5hbGx5Og0KICAgICAgICAjIENsb3NlIHRoZSBkYXRhYmFzZSBjb25uZWN0aW9uDQogICAgICAgIGN1cnNvci5jbG9zZSgpDQogICAgICAgIGNvbm5lY3Rpb24uY2xvc2UoKQ0KICANCiAgDQoNCg0KDQpwcm9tZXRoZXVzX3VybCA9ICJodHRwOi8vY3ZyaWN0bHB0bTIxOjkwOTAiDQoNCmNvbnZlcnRlZF9kYXRhID0gW10NCm1ldHJpY3M9Wydwcm9jZXNzX2NwdV91c2FnZScsICdqdm1faGVhcF9tZW1vcnlfdXNlZF9wZXJjZW50JywnaHR0cF9yZXF1ZXN0c19zdWNjZXNzZnVsX2F2ZycsJ2h0dHBfcmVxdWVzdHNfdW5zdWNjZXNzZnVsX2F2ZyddDQpmb3IgaSBpbiByYW5nZShsZW4obWV0cmljcykpOg0KICAgIHF1ZXJ5PWYicXVlcnlfcmFuZ2U/cXVlcnk9e21ldHJpY3NbaV19JnN0YXJ0PXtzdGFydF9kYXRldGltZX0mZW5kPXtlbmRfZGF0ZXRpbWV9JnN0ZXA9MTBzIg0KDQoNCiAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldChmIntwcm9tZXRoZXVzX3VybH0vYXBpL3YxL3txdWVyeX0iKQ0KDQogICAgI0NoZWNrIGZvciBzdWNjZXNzZnVsIHJlc3BvbnNlDQogICAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwOg0KICAgICAgICBkYXRhID0ganNvbi5sb2FkcyhyZXNwb25zZS50ZXh0KVsiZGF0YSJdWyJyZXN1bHQiXQ0KICAgICAgICAjanNvbi5mb3JtYXQoZGF0YSkNCiAgICAgICAgZm9yIGVudHJ5IGluIGRhdGE6DQogICAgICAgICAgICBtZXRyaWNfbmFtZSA9IGVudHJ5WydtZXRyaWMnXVsnX19uYW1lX18nXQ0KICAgICAgICAgICAgI2luc3RhbmNlX25hbWUgPSBlbnRyeVsnbWV0cmljJ11bJ2pvYiddWzM6XQ0KICAgICAgICAgICAgaW5zdGFuY2VfbmFtZSA9IGVudHJ5WydtZXRyaWMnXVsnaW5zdGFuY2UnXQ0KICAgICAgICAgICAgdmFsdWVzID0gZW50cnlbJ3ZhbHVlcyddDQogICAgICAgICAgICBtZXRyaWNfaWQ9Q01EQl9NZXRyaWNbbWV0cmljX25hbWVdDQogICAgICAgICAgICAjIENvbnZlcnQgdGltZXN0YW1wIGFuZCBtZXRyaWMgdmFsdWUNCiAgICAgICAgICAgIGNpX25hbWU9bWFwcGluZ1tpbnN0YW5jZV9uYW1lKycgJyttZXRyaWNfbmFtZV0NCiAgICAgICAgICAgIGNpX2lkPUNNREJfQ0lbY2lfbmFtZV0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZm9yIHRpbWVzdGFtcCwgbWV0cmljX3ZhbHVlIGluIHZhbHVlczoNCiAgICAgICAgICAgICAgICBkYXRlX3RpbWUgPSBkYXRldGltZS5mcm9tdGltZXN0YW1wKHRpbWVzdGFtcCkNCiAgICAgICAgICAgICAgICBmb3JtYXR0ZWRfZGF0ZV90aW1lID0gZGF0ZV90aW1lLnN0cmZ0aW1lKCIlWS0lbS0lZCAlSDolTTolUyIpDQogICAgICAgICAgICAgICAgY29udmVydGVkX2RhdGEuYXBwZW5kKHR1cGxlKChjaV9pZCwgbWV0cmljX2lkLCBmb3JtYXR0ZWRfZGF0ZV90aW1lLCBtZXRyaWNfdmFsdWUpKSkNCiAgICAgICAgDQogICAgICAgICNkYXRhPSBjb252ZXJ0ZWRfZGF0YQ0KICAgICAgICANCiAgICAgICAgI2xvZ2dlci5pbmZvKGRhdGEpDQogICAgZWxzZToNCiAgICAgICAgbG9nZ2VyLmluZm8oZiJFcnJvciBxdWVyeWluZyBQcm9tZXRoZXVzOiB7cmVzcG9uc2Uuc3RhdHVzX2NvZGV9IikNCiAgICANCiANCmluc2VydF9yZWNvcmRzKGNvbnZlcnRlZF9kYXRhKQ0KbG9nZ2VyLmluZm8oY29udmVydGVkX2RhdGEpICAgDQogICAgDQpsb2dnZXIuaW5mbygnY29tcGxldGVkJykNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0K","leo1311"
"LEOLDTDT91086","LEOLDTDT91086_leo1311.py","DQppbXBvcnQgc3lzDQppbXBvcnQganNvbg0KI2Zyb20gbGVhcC5jb25maWcuRXh0cmFjdG9yQ29uZmlncy5EYXRhc2V0RXh0cmFjdG9yQ29uZmlnIGltcG9ydCBEYXRhc2V0RXh0cmFjdG9yQ29uZmlnDQppbXBvcnQgbG9nZ2luZyBhcyBsb2dnZXINCmltcG9ydCBteXNxbC5jb25uZWN0b3IgYXMgY29ubmVjdG9yDQppbXBvcnQgb3MNCg0KDQoNCg0KDQpsb2dnZXIuYmFzaWNDb25maWcoDQogICAgbGV2ZWw9bG9nZ2VyLklORk8sDQogICAgZm9ybWF0PSclKGFzY3RpbWUpcyBJTkZPICUobWVzc2FnZSlzJywNCiAgICBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycsDQopDQoNCm9zLmVudmlyb25bJ0hUVFBfUFJPWFknXT0nYmxycHJveHkuYWQuaW5mb3N5cy5jb206NDQzJw0Kb3MuZW52aXJvblsnSFRUUFNfUFJPWFknXT0nYmxycHJveHkuYWQuaW5mb3N5cy5jb206NDQzJw0KDQoNCmFyZ3VtZW50cyA9IHN5cy5hcmd2DQpkaWN0ID0ge30NCmZvciBhcmcgaW4gYXJndW1lbnRzOg0KICAgIHRyeToNCiAgICAgICAgZGljdFthcmcuc3BsaXQoJzonKVswXV0gPSAoJzonKS5qb2luKGFyZy5zcGxpdCgnOicpWzE6XSkNCiAgICBleGNlcHQ6DQogICAgICAgIGEgPSAnZXJyb3InDQoNCm15RGF0YXNldENvbmZpZyA9IGpzb24ubG9hZHMoZGljdFsnQ01EQl9DSV9tZXRyaWMnXSkNCm15RGF0YXNldENvbmZpZyA9IHsnZGF0YXNldCc6IG15RGF0YXNldENvbmZpZ30NCmxvZ2dlci5pbmZvKG15RGF0YXNldENvbmZpZykNCiNkYXRhID0gRGF0YXNldEV4dHJhY3RvckNvbmZpZygiMSIsJycsbXlEYXRhc2V0Q29uZmlnLCcnKS5nZXRFeHRyYWN0b3IoKS5nZXREYXRhKCkNCiNwcmludChkYXRhKQ0KDQojREIgZGV0YWlscw0KdXNlcm5hbWU9InNyZWludCINCnBhc3N3b3JkPSI1ZF5GWnN2bSINCmhvc3Q9IjEwLjgyLjEyMi45NCINCnBvcnQgPSAzMzA2DQpkYXRhYmFzZSA9ICdzcmVpbnQnDQoNCg0KdHJ5Og0KICAgIGNvbm5lY3Rpb24gPSBjb25uZWN0b3IuY29ubmVjdCgNCiAgICAgICAgdXNlcj11c2VybmFtZSwgcGFzc3dvcmQ9cGFzc3dvcmQsIGhvc3Q9aG9zdCwgcG9ydD1wb3J0LCBkYXRhYmFzZT1kYXRhYmFzZQ0KICAgICkNCiAgICBjdXJzb3IgPSBjb25uZWN0aW9uLmN1cnNvcigpDQogICAgcXVlcnk9ZidTRUxFQ1QgKiBGUk9NIGBlbWZfd29ya2Zsb3dfdHlwZWAgZTsnDQogICAgDQogICAgbG9nZ2VyLmluZm8oJ3F1ZXJ5JykNCiAgICBsb2dnZXIuaW5mbyhxdWVyeSkNCiAgICBjdXJzb3IuZXhlY3V0ZShxdWVyeSkNCiAgICBkZWR1cGxpY2F0ZT1jdXJzb3IuZmV0Y2hhbGwoKTsNCiAgICBsb2dnZXIuaW5mbygncmVzdWx0IG9mIHN1YnF1ZXJ5JykNCiAgICBsb2dnZXIuaW5mbyhkZWR1cGxpY2F0ZSkNCiAgICAjIGxvZ2dlci5pbmZvKHR5cGUoZGVkdXBsaWNhdGUpKQ0KICAgICMgbG9nZ2VyLmluZm8obGVuKGRlZHVwbGljYXRlKSkNCiAgDQpleGNlcHQgY29ubmVjdG9yLmVycm9ycy5PcGVyYXRpb25hbEVycm9yIGFzIGU6DQogICAgIyBIYW5kbGluZyB0aGUgdGltZW91dCBleGNlcHRpb24NCiAgICBsb2dnZXIuaW5mbygnTXlTUUwgY29ubmVjdGlvbiB0aW1lb3V0OiB7fScuZm9ybWF0KGUpKQ0KDQpmaW5hbGx5Og0KICAgICMgQ2xvc2UgdGhlIGRhdGFiYXNlIGNvbm5lY3Rpb24NCiAgICBjdXJzb3IuY2xvc2UoKQ0KICAgIGNvbm5lY3Rpb24uY2xvc2UoKQ0KDQoiIiINCmZyb20gbGVhcC5jb25maWcuRXh0cmFjdG9yQ29uZmlncy5EYXRhc2V0RXh0cmFjdG9yQ29uZmlnIGltcG9ydCBEYXRhc2V0RXh0cmFjdG9yQ29uZmlnDQppbXBvcnQgbG9nZ2luZw0KaW1wb3J0IHN1YnByb2Nlc3MNCmltcG9ydCBzeXMNCmltcG9ydCBvcw0KDQpsb2dnaW5nLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dpbmcuSU5GTykNCg0KDQpvcy5lbnZpcm9uWydIVFRQX1BST1hZJ109J2JscnByb3h5LmFkLmluZm9zeXMuY29tOjQ0MycNCm9zLmVudmlyb25bJ0hUVFBTX1BST1hZJ109J2JscnByb3h5LmFkLmluZm9zeXMuY29tOjQ0MycNCiIiIg0KDQoiIiINCm9zLmVudmlyb25bJ0hUVFBfUFJPWFknXT0nJw0Kb3MuZW52aXJvblsnSFRUUFNfUFJPWFknXT0nJw0KIiIiDQoiIiINCnJlcXVpcmVtZW50cyA9IFsnbGVhcCddDQpmb3IgbW9kdWxlIGluIHJlcXVpcmVtZW50czoNCiAgICBzdWJwcm9jZXNzLnJ1bihzeXMuZXhlY3V0YWJsZSArICcgLW0gcGlwIGluc3RhbGwgJysgbW9kdWxlICsgJyAtaSBodHRwczovL2luZnlhcnRpZmFjdG9yeS5hZC5pbmZvc3lzLmNvbS9hcnRpZmFjdG9yeS9hcGkvcHlwaS9weXBpLXJlbW90ZS9zaW1wbGUgLS10cnVzdGVkLWhvc3QgaW5meWFydGlmYWN0b3J5LmFkLmluZm9zeXMuY29tJyxzaGVsbD1UcnVlKQ0KDQpzdWJwcm9jZXNzLnJ1bigicHl0aG9uIC1tIHBpcCBpbnN0YWxsIGxlYXAgIC0tcHJveHk9JGh0dHBfcHJveHkgLWkgaHR0cHM6Ly9pbmZ5YXJ0aWZhY3RvcnkuYWQuaW5mb3N5cy5jb20vYXJ0aWZhY3RvcnkvYXBpL3B5cGkvcHlwaS1yZW1vdGUgLS10cnVzdGVkLWhvc3QgaW5meWFydGlmYWN0b3J5LmFkLmluZm9zeXMuY29tIixzaGVsbD1UcnVlKQ0KIiIiDQpsb2dnZXIuaW5mbygnQ29tcGxldGVkJykNCg0KDQoNCg0KDQoNCg0KDQo=","leo1311"
"LEOLDTDT22603","LEOLDTDT22603_leo1311.py","DQppbXBvcnQgc3lzDQppbXBvcnQganNvbg0KZnJvbSBsZWFwLmNvbmZpZy5FeHRyYWN0b3JDb25maWdzLkRhdGFzZXRFeHRyYWN0b3JDb25maWcgaW1wb3J0IERhdGFzZXRFeHRyYWN0b3JDb25maWcNCiNmcm9tIGluaWNvbmZpZy5FeHRyYWN0b3JDb25maWdzLkRhdGFzZXRFeHRyYWN0b3JDb25maWcgaW1wb3J0IERhdGFzZXRFeHRyYWN0b3JDb25maWcNCmluaWNvbmZpZw0KaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyDQppbXBvcnQgb3MNCg0KDQpsb2dnZXIuYmFzaWNDb25maWcoDQogICAgbGV2ZWw9bG9nZ2VyLklORk8sDQogICAgZm9ybWF0PSclKGFzY3RpbWUpcyBJTkZPICUobWVzc2FnZSlzJywNCiAgICBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycsDQopDQoNCmFyZ3VtZW50cyA9IHN5cy5hcmd2DQpkaWN0ID0ge30NCmZvciBhcmcgaW4gYXJndW1lbnRzOg0KICAgIHRyeToNCiAgICAgICAgZGljdFthcmcuc3BsaXQoJzonKVswXV0gPSAoJzonKS5qb2luKGFyZy5zcGxpdCgnOicpWzE6XSkNCiAgICBleGNlcHQ6DQogICAgICAgIGEgPSAnZXJyb3InDQoNCm15RGF0YXNldENvbmZpZyA9IGpzb24ubG9hZHMoZGljdFsnQ01EQl9DSV9tZXRyaWMnXSkNCm15RGF0YXNldENvbmZpZyA9IHsnZGF0YXNldCc6IG15RGF0YXNldENvbmZpZ30NCmxvZ2dlci5pbmZvKG15RGF0YXNldENvbmZpZykNCmRhdGEgPSBEYXRhc2V0RXh0cmFjdG9yQ29uZmlnKCIxIiwnJyxteURhdGFzZXRDb25maWcsJycpLmdldEV4dHJhY3RvcigpLmdldERhdGEoKQ0KcHJpbnQoZGF0YSkNCmxvZ2dlci5pbmZvKCdDb21wbGV0ZWQnKQ0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0K","leo1311"
"LEOCRTNG85366","LEOCRTNG85366_leo1311.py","aW1wb3J0IGJhc2U2NAoKaW1wb3J0IG15c3FsLmNvbm5lY3RvciBhcyBjb25uZWN0b3IKCmltcG9ydCByZXF1ZXN0cwoKaW1wb3J0IGpzb24KaW1wb3J0IHRpbWUKCmltcG9ydCBsb2dnaW5nIGFzIGxvZ2dlcgoKaW1wb3J0IHJlCgppbXBvcnQgc3lzCgppbXBvcnQgb3MKaW1wb3J0IGRhdGV0aW1lCmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCBxdW90ZV9wbHVzLCB1cmxwYXJzZQoKb3MuZW52aXJvblsnSFRUUF9QUk9YWSddPSdibHJwcm94eS5hZC5pbmZvc3lzLmNvbTo0NDMnCiAKb3MuZW52aXJvblsnSFRUUFNfUFJPWFknXT0nYmxycHJveHkuYWQuaW5mb3N5cy5jb206NDQzJwpvcy5lbnZpcm9uWydodHRwX3Byb3h5J109J2JscnByb3h5LmFkLmluZm9zeXMuY29tOjQ0MycKb3MuZW52aXJvblsnaHR0cHNfcHJveHknXT0nYmxycHJveHkuYWQuaW5mb3N5cy5jb206NDQzJwoKCiB1cmwgPSBzbm93X3VybCsnL2FwaS9ub3cvdGFibGUvaW5jaWRlbnQ/c3lzcGFybV9kaXNwbGF5X3ZhbHVlPXRydWUnCgogICAgaGVhZGVycyA9IHsnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLCAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nfQoKICAgIGRlc2NyaXB0aW9uPWluc3RhbmNlX2RhdGV0aW1lX2VuKycgJytzdHIobWV0cmljX3ZhbHVlKQoKICAgIHBheWxvYWQgPSB7J3Nob3J0X2Rlc2NyaXB0aW9uJzogZGVzY3JpcHRpb24KICAgICAgICAgICAgICAgfQoKICAgICMgbG9nZ2VyLmluZm8ocGF5bG9hZCkKICAgIGxvZ2dlci5pbmZvKCdzbm93X2NhbGwnKQogICAgcmVzID0gcmVxdWVzdHMucG9zdCgKICAgICAgICB1cmwsCiAgICAgICAgYXV0aD0oc25vd191c2VyLCBzbm93X3B3ZCksCiAgICAgICAgaGVhZGVycz1oZWFkZXJzLAogICAgICAgIGRhdGE9anNvbi5kdW1wcyhwYXlsb2FkKSwKICAgICkKICAgIGxvZ2dlci5pbmZvKCdzbm93IGNhbGwgbWFkZScp","leo1311"
"LEOLGSFR35596","LEOLGSFR35596_leo1311.py","ZnJvbSBlbGFzdGljc2VhcmNoIGltcG9ydCBFbGFzdGljc2VhcmNoCmZyb20gZWxhc3RpY3NlYXJjaC5oZWxwZXJzIGltcG9ydCBzY2FuCmltcG9ydCBsb2dnaW5nIGFzIGxvZ2dlcgppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IHBhbmRhcyBhcyBwZAppbXBvcnQgb3MKZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUsIHRpbWVkZWx0YQoKCmVzID0gRWxhc3RpY3NlYXJjaCgnaHR0cDovLzEwLjgxLjY0LjIyMzo5MjAwJykKbG9nZ2VyLmJhc2ljQ29uZmlnKAogICAgbGV2ZWw9bG9nZ2VyLklORk8sCiAgICBmb3JtYXQ9JyUoYXNjdGltZSlzIElORk8gJShtZXNzYWdlKXMnLAogICAgZGF0ZWZtdD0nJXkvJW0vJWQgJUg6JU06JVMnLAopCgpkZWYgZ2V0X2RhdGFfZnJvbV9lbGFzdGljKCk6CiAKICAgIGluZGV4X3BhdHRlcm4gPSAnbGVhcDMtaW5zdGFuY2UyLXN2LW5ldzExJwogICAgIAogI3F1ZXJ5IHRvIGdldCB0aHJlYWRzIGZyb20gdGhlIGxvZ3MKICAgIHF1ZXJ5ID0gewogICAgICAgICdzb3J0JzogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAnbG9ndGltZSc6IHsKICAgICAgICAgICAgICAgICdvcmRlcic6ICdkZXNjJwogICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICdxdWVyeSc6ewogICAgICAgICAgICAnbWF0Y2gnOiB7CiAgICAgICAgICAgICAgICAnbGV2ZWwnOiAnRXJyb3InCiAgICAgICAgICAgIH0KICAgICAgICAKICAgICAgICB9CiAgICB9CiAgIAoKICAgIHJlc3VsdHMgPSBlcy5zZWFyY2goaW5kZXg9aW5kZXhfcGF0dGVybiwgYm9keT1xdWVyeSkKICAgICMgbG9nZ2VyLmluZm8oJ2xvZ2dpbmcgZXMgcmVzJykKICAgICMgbG9nZ2VyLmluZm8oZXNfcmVzdWx0cykKICAgIGxvZ2dlci5pbmZvKCdkb25lLS0nKQogICAgZG9jdW1lbnRzID0gcmVzdWx0c1snaGl0cyddWydoaXRzJ10KICAgICMgbG9nZ2VyLmluZm8oZG9jdW1lbnRzWzBdKQogICAgdGhyZWFkcz1saXN0KCkKICAgIGZvciBkb2N1bWVudCBpbiBkb2N1bWVudHM6CiAgICAgICAgIyBmZXRjaGluZyB0aHJlYWQgYW5kIGxvZyB0aW1lCiAgICAgICAgdmFsdWU9W2RvY3VtZW50Wydfc291cmNlJ11bJ3RocmVhZCddLGRvY3VtZW50Wydfc291cmNlJ11bJ2xvZ3RpbWUnXV0KICAgICAgICB0aHJlYWRzLmFwcGVuZCh2YWx1ZSkKICAgICMgbG9nZ2VyLmluZm8odGhyZWFkc1swXVswXSkKICAgIAogICAgZm9yIHRocmVhZCBpbiB0aHJlYWRzOgogICAgICAgIAogICAgICAgICNUbyBmaW5kIHRoZSBlcnJvciBtZXNzYWdlIGluIGJldHdlZW4gdGhlIHRpbWUgcmFuZ2Ugb2YgbG9ndGltZQogICAgICAgIHRpbWVfb2JqID0gZGF0ZXRpbWUuc3RycHRpbWUodGhyZWFkWzFdLCAnJUg6JU06JVMuJWYnKQogICAgICAgIAogICAgICAgICNsb2cgdGltZSBwbHVzIG9uZSBzZWNvbmQKICAgICAgICBpbmNyZWFzZWRfdGltZSA9IHRpbWVfb2JqICsgdGltZWRlbHRhKHNlY29uZHM9MSkKICAgICAgICAjbG9nIHRpbWUgbWludXMgb25lIHNlY29uZAogICAgICAgIGRlY3JlYXNlZF90aW1lID0gdGltZV9vYmogLSB0aW1lZGVsdGEoc2Vjb25kcz0xKQoKICAgICAgICBtYXhUaW1lID0gaW5jcmVhc2VkX3RpbWUuc3RyZnRpbWUoJyVIOiVNOiVTLiVmJykKICAgICAgICBtaW5UaW1lPSAgZGVjcmVhc2VkX3RpbWUuc3RyZnRpbWUoJyVIOiVNOiVTLiVmJykKICAgICAgICAKICAgICAgICAjcXVlcnkgdG8gZ2V0IGVycm9yIG1zZyB1c2luZyB0aHJlYWRzCiAgICAgICAgCiAgICAgICAgcXVlcnlfdGhyZWFkPXsKICAgICAgICAgICAgICAgICdzaXplJzogMTAwLAogICAgICAgICAgICAgICAgJ3NvcnQnOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgJ2xvZ3RpbWUnOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICdvcmRlcic6ICdkZXNjJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAnbG9nZGF0ZSc6IHsKICAgICAgICAgICAgICAgICAgICAnb3JkZXInOiAnZGVzYycKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgJ3F1ZXJ5JzogewogICAgICAgICAgICAgICAgICAgICdib29sJzogewogICAgICAgICAgICAgICAgICAgICAgICAnbXVzdCc6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWF0Y2hfcGhyYXNlJzogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0aHJlYWQnOiAnW2h0dHAtbmlvLTgwODAtZXhlYy04XScKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmFuZ2UnOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbG9ndGltZSc6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdndGUnOiAnMDk6NDA6MzUuMjI1JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsdGUnOiAnMDk6NDA6MzUuMjI5JwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICByZXM9IGVzLnNlYXJjaChpbmRleD1pbmRleF9wYXR0ZXJuLCBib2R5PXF1ZXJ5X3RocmVhZCkKICAgICAgICAjIGxvZ2dlci5pbmZvKHJlc1snaGl0cyddWydoaXRzJ10pCiAgICAgICAgZG9jcyA9IHJlc1snaGl0cyddWydoaXRzJ10KICAgICAgICBmb3IgZG9jIGluIGRvY3M6CiAgICAgICAgICAgICNwcmludGluZyBlcnJvciBtZXNzYWdlIGFuZCB0aHJlYWQgCiAgICAgICAgICAgIAogICAgICAgICAgICBsb2dnZXIuaW5mbygnbWVzc2FnZSAnK2RvY1snX3NvdXJjZSddWydsb2dNZXNzYWdlJ10rJyAnKyd0aHJlYWQgJyt0aHJlYWRbMF0pCiAgICAjIGxvZ2dlci5pbmZvKCdsb2dnaW5nIGVzIHJlcycpCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgIyByZXNwb25zZSA9IGVzLmluZGljZXMuZ2V0X3NldHRpbmdzKGluZGV4PWluZGV4X3BhdHRlcm4pCiAgICAjIHNldHRpbmdzID0gcmVzcG9uc2VbaW5kZXhfcGF0dGVybl1bJ3NldHRpbmdzJ11bJ2luZGV4J10KICAgICMgc2hhcmRzID0gc2V0dGluZ3NbJ2NyZWF0aW9uX2RhdGUnXQogICAgIyBsb2dnZXIuaW5mbyhzaGFyZHMpCiAgICAjICMgcmVzdWx0c0pzb24gPSBlc19yZXN1bHRzLmpzb24oKQogICAgIyAjIGxvZ2dlci5pbmZvKHJlc3VsdHNKc29uKQogICAgIyBvcy5lbnZpcm9uWydIVFRQX1BST1hZJ109J2JscnByb3h5LmFkLmluZm9zeXMuY29tOjQ0MycKIAogICAgIyBvcy5lbnZpcm9uWydIVFRQU19QUk9YWSddPSdibHJwcm94eS5hZC5pbmZvc3lzLmNvbTo0NDMnCiAgICAKICAgIAogICAgCgogICAgIyB1cmw9J2h0dHA6Ly8xMC44MS42NC4yMjM6OTIwMC9mbHVlbnRkLmxlYXAzc3YtbGVhcC1zdi8nCiAgICAjIGhlYWRlcnMgPSB7J0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJywgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ30KICAgICMgcmVzID0gcmVxdWVzdHMuZ2V0KAogICAgIyAgICAgdXJsLAogICAgIyAgICAgaGVhZGVycwogICAgIyApCiAgICAjIGxvZ2dlci5pbmZvKHJlcykKICAgICMgZmx1ZW50ZF9yZXM9cmVzLmpzb24oKQogICAgIyBsb2dnZXIuaW5mbyhmbHVlbnRkX3JlcykKICAgICMgU2NhbiBmdWN0aW9uIHRvIGdldCBhbGwgdGhlIGRhdGEuIAogICAgCiAgICAjIGluZGV4X3BhdHRlcm4gPSAnZmx1ZW50ZC0qJwogICAgIyBxdWVyeSA9IHsKICAgICMgJ3F1ZXJ5JzogewogICAgIyAgICAgJ21hdGNoJzogewogICAgIyAgICAgICAgICdfaW5kZXgnOiBpbmRleF9wYXR0ZXJuCiAgICAjICAgICB9CiAgICAjIH0KICAgICMgfQogICAgCiAgICAjIHRyeToKICAgICMgIHJlc3BvbnNlID0gZXMuc2VhcmNoKGluZGV4PWluZGV4X3BhdHRlcm4sIHF1ZXJ5PXF1ZXJ5KQogICAgIyAgaGl0cyA9IHJlc3BvbnNlWydoaXRzJ11bJ2hpdHMnXQoKICAgICMgIyBQcm9jZXNzIHRoZSByZXN1bHRzCiAgICAjICBmb3IgaGl0IGluIGhpdHM6CiAgICAjICAgICBzb3VyY2UgPSBoaXRbJ19zb3VyY2UnXQogICAgIyAgICAgbG9nZ2VyLmluZm8oc291cmNlKSAKICAgICMgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgIyAgbG9nZ2VyLmluZm8oJ0Vycm9yIGZldGNoaW5nIGRhdGE6JywgZSkgICAgCiAgICAgICAgCiAgICAjIHJlbCA9IHNjYW4oY2xpZW50PWVzLCAgICAgICAgICAgICAKICAgICMgICAgICAgICAgIHF1ZXJ5PXF1ZXJ5LCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICMgICAgICAgICAgIHNjcm9sbD0nMW0nLAogICAgIyAgICAgICAgICAgaW5kZXg9J2ZsdWVudGQubGVhcDNzdi1sZWFwLXN2JywKICAgICMgICAgICAgICAgIHJhaXNlX29uX2Vycm9yPVRydWUsCiAgICAjICAgICAgICAgICBwcmVzZXJ2ZV9vcmRlcj1GYWxzZSwKICAgICMgICAgICAgICAgIGNsZWFyX3Njcm9sbD1UcnVlKQogICAgCiAgICAjIHJlc3VsdCA9IGxpc3QocmVsKQogICAgIyBsb2dnZXIuaW5mbyhyZXN1bHQpCiAgICAjIHRlbXAgPSBbXQoKCiAgICAjIGZvciBoaXQgaW4gcmVzdWx0OgogICAgIyAgICAgdGVtcC5hcHBlbmQoaGl0Wydfc291cmNlJ10pCiAgICAjICMgQ3JlYXRlIGEgZGF0YWZyYW1lLgogICAgIyBkZiA9IHBkLkRhdGFGcmFtZSh0ZW1wKQogICAgCmRmID0gZ2V0X2RhdGFfZnJvbV9lbGFzdGljKCkKbG9nZ2VyLmluZm8oJ0NvbXBsZXRlZCcpCgoKCgoKCgoK","leo1311"
"LEOCDGNR33831","LEOCDGNR33831_leo1311.py","","leo1311"
"CHACDGNR87605","CHACDGNR87605_leo1311.py","","leo1311"
"LEOCDGNR66088","LEOCDGNR66088_leo1311.py","","leo1311"