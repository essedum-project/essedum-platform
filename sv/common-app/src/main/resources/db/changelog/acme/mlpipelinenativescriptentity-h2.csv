"cname","filename","filescript","organization"
"AnomalyDetection","AnomalyDetection_Acme.py","JycnDQpUaGUgc2NyaXB0IHByaW50cyBvdXQgYWxsIHJlY29yZHMgdGhhdCBoYXZlIGFuIGFibm9ybWFsbHkgaGlnaCBhbm9tYWx5DQpzY29yZS4NCicnJw0KaW1wb3J0IG9zDQppbXBvcnQgc2h1dGlsDQppbXBvcnQgY3N2DQppbXBvcnQgZGF0ZXRpbWUNCmltcG9ydCBsb2dnaW5nDQpmcm9tIGNvbGxlY3Rpb25zIGltcG9ydCBPcmRlcmVkRGljdA0KaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyDQppbXBvcnQgcHN1dGlsDQppbXBvcnQgc3lzDQppbXBvcnQgdGltZQ0KZnJvbSBudXBpYy5mcmFtZXdvcmtzLm9wZi5tb2RlbF9mYWN0b3J5IGltcG9ydCBNb2RlbEZhY3RvcnkNCmltcG9ydCBteXNxbC5jb25uZWN0b3INCg0KbG9nZ2VyLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dlci5JTkZPLCBmb3JtYXQ9JyUoYXNjdGltZSlzIElORk8gJShtZXNzYWdlKXMnLCBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycpDQphcmd1bWVudHMgPSBzeXMuYXJndg0KDQpfQU5PTUFMWV9USFJFU0hPTEQgPSAwLjgNCiMgbWluaW11bSBtZXRyaWMgdmFsdWUgb2YgaW5wdXQNCl9JTlBVVF9NSU4gPSAwDQojIG1heGltdW0gbWV0cmljIHZhbHVlIG9mIGlucHV0DQpfSU5QVVRfTUFYID0gMTAwDQpNT0RFTF9QQVJBTVMgPSB7DQogICAgJ2luZmVyZW5jZUFyZ3MnOiB7DQogICAgICAgICdwcmVkaWN0aW9uU3RlcHMnOiBbMV0sDQogICAgICAgICdwcmVkaWN0ZWRGaWVsZCc6ICd2YWx1ZScsDQogICAgICAgICdpbnB1dFByZWRpY3RlZEZpZWxkJzogJ2F1dG8nDQogICAgfSwNCiAgICAnYWdncmVnYXRpb25JbmZvJzogew0KICAgICAgICAnc2Vjb25kcyc6IDAsDQogICAgICAgICdmaWVsZHMnOiBbXSwNCiAgICAgICAgJ21vbnRocyc6IDAsDQogICAgICAgICdkYXlzJzogMCwNCiAgICAgICAgJ3llYXJzJzogMCwNCiAgICAgICAgJ2hvdXJzJzogMCwNCiAgICAgICAgJ21pY3Jvc2Vjb25kcyc6IDAsDQogICAgICAgICd3ZWVrcyc6IDAsDQogICAgICAgICdtaW51dGVzJzogMCwNCiAgICAgICAgJ21pbGxpc2Vjb25kcyc6IDANCiAgICB9LA0KICAgICdtb2RlbCc6ICdIVE1QcmVkaWN0aW9uJywNCiAgICAndmVyc2lvbic6IDEsDQogICAgJ3ByZWRpY3RBaGVhZFRpbWUnOiBOb25lLA0KICAgICdtb2RlbFBhcmFtcyc6IHsNCiAgICAgICAgJ2luZmVyZW5jZVR5cGUnOiAnVGVtcG9yYWxBbm9tYWx5JywNCiAgICAgICAgJ3NlbnNvclBhcmFtcyc6IHsNCiAgICAgICAgICAgICdlbmNvZGVycyc6IHsNCiAgICAgICAgICAgICAgICAndGltZXN0YW1wX3RpbWVPZkRheSc6IHsNCiAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnRGF0ZUVuY29kZXInLA0KICAgICAgICAgICAgICAgICAgICAndGltZU9mRGF5JzogWw0KICAgICAgICAgICAgICAgICAgICAgICAgMjEsDQogICAgICAgICAgICAgICAgICAgICAgICA5LjQ5DQogICAgICAgICAgICAgICAgICAgIF0sDQogICAgICAgICAgICAgICAgICAgICdmaWVsZG5hbWUnOiAndGltZXN0YW1wJywNCiAgICAgICAgICAgICAgICAgICAgJ25hbWUnOiAndGltZXN0YW1wJw0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgJ3RpbWVzdGFtcF9kYXlPZldlZWsnOiBOb25lLA0KICAgICAgICAgICAgICAgICd0aW1lc3RhbXBfd2Vla2VuZCc6IE5vbmUsDQogICAgICAgICAgICAgICAgJ3ZhbHVlJzogew0KICAgICAgICAgICAgICAgICAgICAnbmFtZSc6ICd2YWx1ZScsDQogICAgICAgICAgICAgICAgICAgICdmaWVsZG5hbWUnOiAndmFsdWUnLA0KICAgICAgICAgICAgICAgICAgICAnc2VlZCc6IDQyLA0KICAgICAgICAgICAgICAgICAgICAnbnVtQnVja2V0cyc6IDEzMCwNCiAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnUmFuZG9tRGlzdHJpYnV0ZWRTY2FsYXJFbmNvZGVyJw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICAnc2Vuc29yQXV0b1Jlc2V0JzogTm9uZSwNCiAgICAgICAgICAgICd2ZXJib3NpdHknOiAwDQogICAgICAgIH0sDQogICAgICAgICdzcEVuYWJsZSc6IFRydWUsDQogICAgICAgICdzcFBhcmFtcyc6IHsNCiAgICAgICAgICAgICdzcGF0aWFsSW1wJzogJ2NwcCcsDQogICAgICAgICAgICAncG90ZW50aWFsUGN0JzogMC44LA0KICAgICAgICAgICAgJ2NvbHVtbkNvdW50JzogMjA0OCwNCiAgICAgICAgICAgICdnbG9iYWxJbmhpYml0aW9uJzogMSwNCiAgICAgICAgICAgICdpbnB1dFdpZHRoJzogMCwNCiAgICAgICAgICAgICdib29zdFN0cmVuZ3RoJzogMC4wLA0KICAgICAgICAgICAgJ251bUFjdGl2ZUNvbHVtbnNQZXJJbmhBcmVhJzogNDAsDQogICAgICAgICAgICAnc2VlZCc6IDE5NTYsDQogICAgICAgICAgICAnc3BWZXJib3NpdHknOiAwLA0KICAgICAgICAgICAgJ3NwYXRpYWxJbXAnOiAnY3BwJywNCiAgICAgICAgICAgICdzeW5QZXJtQWN0aXZlSW5jJzogMC4wMDMsDQogICAgICAgICAgICAnc3luUGVybUNvbm5lY3RlZCc6IDAuMiwNCiAgICAgICAgICAgICdzeW5QZXJtSW5hY3RpdmVEZWMnOiAwLjAwMDUNCiAgICAgICAgfSwNCiAgICAgICAgJ3RyYWluU1BOZXRPbmx5SWZSZXF1ZXN0ZWQnOiBGYWxzZSwNCiAgICAgICAgJ3RtRW5hYmxlJzogVHJ1ZSwNCiAgICAgICAgJ3RtUGFyYW1zJzogew0KICAgICAgICAgICAgJ2FjdGl2YXRpb25UaHJlc2hvbGQnOiAxMywNCiAgICAgICAgICAgICdjZWxsc1BlckNvbHVtbic6IDMyLA0KICAgICAgICAgICAgJ2NvbHVtbkNvdW50JzogMjA0OCwNCiAgICAgICAgICAgICdnbG9iYWxEZWNheSc6IDAuMCwNCiAgICAgICAgICAgICdpbml0aWFsUGVybSc6IDAuMjEsDQogICAgICAgICAgICAnaW5wdXRXaWR0aCc6IDIwNDgsDQogICAgICAgICAgICAnbWF4QWdlJzogMCwNCiAgICAgICAgICAgICdtYXhTZWdtZW50c1BlckNlbGwnOiAxMjgsDQogICAgICAgICAgICAnbWF4U3luYXBzZXNQZXJTZWdtZW50JzogMzIsDQogICAgICAgICAgICAnbWluVGhyZXNob2xkJzogMTAsDQogICAgICAgICAgICAnbmV3U3luYXBzZUNvdW50JzogMjAsDQogICAgICAgICAgICAnb3V0cHV0VHlwZSc6ICdub3JtYWwnLA0KICAgICAgICAgICAgJ3BhbUxlbmd0aCc6IDMsDQogICAgICAgICAgICAncGVybWFuZW5jZURlYyc6IDAuMSwNCiAgICAgICAgICAgICdwZXJtYW5lbmNlSW5jJzogMC4xLA0KICAgICAgICAgICAgJ3NlZWQnOiAxOTYwLA0KICAgICAgICAgICAgJ3RlbXBvcmFsSW1wJzogJ2NwcCcsDQogICAgICAgICAgICAndmVyYm9zaXR5JzogMA0KICAgICAgICB9LA0KICAgICAgICAnY2xFbmFibGUnOiBGYWxzZSwNCiAgICAgICAgJ2NsUGFyYW1zJzogew0KICAgICAgICAgICAgJ2FscGhhJzogMC4wMzU4Mjg5MzM2MTIxNTc5OTgsDQogICAgICAgICAgICAncmVnaW9uTmFtZSc6ICdTRFJDbGFzc2lmaWVyUmVnaW9uJywNCiAgICAgICAgICAgICdzdGVwcyc6ICcxJywNCiAgICAgICAgICAgICd2ZXJib3NpdHknOiAwDQogICAgICAgIH0sDQogICAgICAgICdhbm9tYWx5UGFyYW1zJzogew0KICAgICAgICAgICAgJ2Fub21hbHlDYWNoZVJlY29yZHMnOiBOb25lLA0KICAgICAgICAgICAgJ2F1dG9EZXRlY3RUaHJlc2hvbGQnOiBOb25lLA0KICAgICAgICAgICAgJ2F1dG9EZXRlY3RXYWl0UmVjb3Jkcyc6IDUwMzANCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KDQpkZWYgX3NldFJhbmRvbUVuY29kZXJSZXNvbHV0aW9uKG1pblJlc29sdXRpb249MC4wMDEpOg0KICAgICcnJw0KICAgIEdpdmVuIG1vZGVsIHBhcmFtcywgZmlndXJlIG91dCB0aGUgY29ycmVjdCByZXNvbHV0aW9uIGZvciB0aGUNCiAgICBSYW5kb21EaXN0cmlidXRlZCBlbmNvZGVyLiBNb2RpZmllcyBwYXJhbXMgaW4gcGxhY2UuDQogICAgJycnDQogICAgZW5jb2RlciA9ICgNCiAgICAgICAgTU9ERUxfUEFSQU1TWydtb2RlbFBhcmFtcyddWydzZW5zb3JQYXJhbXMnXVsnZW5jb2RlcnMnXVsndmFsdWUnXQ0KICAgICkNCg0KICAgIGlmIGVuY29kZXJbJ3R5cGUnXSA9PSAnUmFuZG9tRGlzdHJpYnV0ZWRTY2FsYXJFbmNvZGVyJzoNCiAgICAgICAgcmFuZ2VQYWRkaW5nID0gYWJzKF9JTlBVVF9NQVggLSBfSU5QVVRfTUlOKSAqIDAuMg0KICAgICAgICBtaW5WYWx1ZSA9IF9JTlBVVF9NSU4gLSByYW5nZVBhZGRpbmcNCiAgICAgICAgbWF4VmFsdWUgPSBfSU5QVVRfTUFYICsgcmFuZ2VQYWRkaW5nDQogICAgICAgIHJlc29sdXRpb24gPSBtYXgobWluUmVzb2x1dGlvbiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAobWF4VmFsdWUgLSBtaW5WYWx1ZSkgLyBlbmNvZGVyLnBvcCgnbnVtQnVja2V0cycpDQogICAgICAgICAgICAgICAgICAgICAgICAgKQ0KICAgICAgICBlbmNvZGVyWydyZXNvbHV0aW9uJ10gPSByZXNvbHV0aW9uDQoNCg0KZGVmIGNyZWF0ZU1vZGVsKCk6DQogICAgX3NldFJhbmRvbUVuY29kZXJSZXNvbHV0aW9uKCkNCiAgICAjIHJldHVybiBNb2RlbEZhY3RvcnkuY3JlYXRlKG1vZGVsX3BhcmFtcy5NT0RFTF9QQVJBTVMpDQoNCg0KZGVmIHJ1bkFub21hbHlEZXRlY3Rpb24oKToNCg0KICAgIGdsb2JhbCBtYXRyaWNlc3R5cGUNCg0KICAgIHByaW50KCdTdGFydGluZyBQaXBlbGluZScpDQoNCiAgICBtb2RlbCA9IGNyZWF0ZU1vZGVsKCkNCiAgICBsb2dnZXIuaW5mbygnTWV0cmljOjogVGltZXN0YW1wIDo6IFZhbHVlIDo6IEFub21hbHlTY29yeSA6OiBJc0Fub21hbHknKQ0KICAgIHRyeToNCiAgICAgIGxvZ2dlci5pbmZvKCdDcmVhdGluZyBNb2RlbCcpDQogICAgICBtb2RlbCA9IE1vZGVsRmFjdG9yeS5jcmVhdGUoTU9ERUxfUEFSQU1TKQ0KICAgICAgd2hpbGUoVHJ1ZSk6DQogICAgICAgICAgDQogICAgICAgIGxzdCA9IFtdDQogICAgICAgIG1vZGVsLmVuYWJsZUluZmVyZW5jZSh7J3ByZWRpY3RlZEZpZWxkJzogJ3ZhbHVlJ30pDQogICAgICAgIG1vZGVsSW5wdXQgPSBPcmRlcmVkRGljdCgpDQogICAgICAgIG1vZGVsSW5wdXRbJ3RpbWVzdGFtcCddID0gZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkNCiAgICAgICAgbW9kZWxJbnB1dFsndmFsdWUnXSA9IHBzdXRpbC5jcHVfcGVyY2VudChpbnRlcnZhbD1Ob25lKQ0KICAgICAgICANCiAgICAgICAgcmVzdWx0ID0gbW9kZWwucnVuKG1vZGVsSW5wdXQpDQogICAgICAgIGFub21hbHlTY29yZSA9IHJlc3VsdC5pbmZlcmVuY2VzWydhbm9tYWx5U2NvcmUnXQ0KICAgICAgIA0KICAgICAgICBsc3QuYXBwZW5kKChtb2RlbElucHV0Wyd0aW1lc3RhbXAnXSwgbW9kZWxJbnB1dFsndmFsdWUnXSwgZmxvYXQoYW5vbWFseVNjb3JlKSkpDQogICAgICAgIGlzQW5vbWFseSA9MA0KICAgICAgICBpZiBhbm9tYWx5U2NvcmUgPiBfQU5PTUFMWV9USFJFU0hPTEQ6DQogICAgICAgICAgICBpc0Fub21hbHkgPTENCiAgICAgICAgICAgIA0KICAgICAgICBsb2dnZXIuaW5mbygnY3B1X3BlcmNlbnQ6OiB7MH0gOjogezF9JSA6OiB7Mn0gOjogezN9Jy5mb3JtYXQobW9kZWxJbnB1dFsndGltZXN0YW1wJ10sbW9kZWxJbnB1dFsndmFsdWUnXSxmbG9hdChhbm9tYWx5U2NvcmUpLGlzQW5vbWFseSkpDQogICAgICAgIHRpbWUuc2xlZXAoMjApDQogICAgZXhjZXB0Og0KICAgICAgICBsb2dnZXIuZXJyb3IoJ0Vycm9yJykNCiAgICAgICAgDQoNCg0KaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoNCiAgICBsb2dnaW5nLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dpbmcuSU5GTykNCiAgICBydW5Bbm9tYWx5RGV0ZWN0aW9uKCkNCiAgICBpZiBjbnguaXNfY29ubmVjdGVkKCk6DQogICAgICAgIGNueC5jbG9zZSgpDQoNCg0KDQoNCg0KDQoNCg0KDQo=","leo1311"
"SNOW_Get_Metadata_API","SNOW_Get_Metadata_API_Acme.py","","leo1311"
"SNOW_Get_API","SNOW_Get_API_Acme.py","","leo1311"
"SNOW_Create_API","SNOW_Create_API_Acme.py","","leo1311"
"SNOW_Update_API","SNOW_Update_API_Acme.py","","leo1311"
"ACMKYPHR40814","ACMKYPHR40814_Acme.py","aW1wb3J0IGxvZ2dpbmcNCmltcG9ydCBzeXMNCmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCBxdW90ZV9wbHVzLCB1cmxwYXJzZQ0KZnJvbSBsZWFwLnV0aWxzLlV0aWxpdGllcyBpbXBvcnQgVXRpbGl0aWVzDQpmcm9tIHNrbGVhcm4uZmVhdHVyZV9leHRyYWN0aW9uLnRleHQgaW1wb3J0IFRmaWRmVmVjdG9yaXplcg0KaW1wb3J0IG51bXB5IGFzIG5wDQppbXBvcnQgdGltZWl0DQppbXBvcnQganNvbg0KaW1wb3J0IGpheWRlYmVhcGkNCmltcG9ydCBvcw0KDQpsb2dnaW5nLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dpbmcuSU5GTywgZm9ybWF0PSclKGFzY3RpbWUpcyBJTkZPICUobWVzc2FnZSlzJywgZGF0ZWZtdD0nJXkvJW0vJWQgJUg6JU06JVMnKQ0KDQphcmd1bWVudHMgPSBzeXMuYXJndg0KDQpkaWN0ID0ge30NCmZvciBhcmcgaW4gYXJndW1lbnRzOg0KICAgIGFyZyA9IGFyZy5yZXBsYWNlKCdcXFxcdTAwM2QnLCc9JykNCiAgICB0cnk6DQogICAgICAgIGRpY3RbYXJnLnNwbGl0KCc6JylbMF1dID0gKCc6Jykuam9pbihhcmcuc3BsaXQoJzonKVsxOl0pDQogICAgZXhjZXB0Og0KICAgICAgICBhID0gJ2Vycm9yJw0KDQoNCmRlZiBnZXRTaW1pbGFyKHNlbnRlbmNlcywga2V5d29yZHMpOg0KICAgIGNvcnB1cyA9IHNlbnRlbmNlcyArIGtleXdvcmRzDQogICAga2V5d29yZHN0YXJ0SW5kZXggPSBsZW4oc2VudGVuY2VzKQ0KICAgIHRmaWRmQ29ycHVzID0gVGZpZGZWZWN0b3JpemVyKG1pbl9kZj0xLCBzdG9wX3dvcmRzPSdlbmdsaXNoJykuZml0X3RyYW5zZm9ybShjb3JwdXMpDQogICAgcGFpcndpc2Vfc2ltaWxhcml0eSA9IHRmaWRmQ29ycHVzICogdGZpZGZDb3JwdXMuVA0KICAgIGFyciA9IHBhaXJ3aXNlX3NpbWlsYXJpdHkudG9hcnJheSgpDQogICAgbnAuZmlsbF9kaWFnb25hbChhcnIsIG5wLm5hbikNCiAgICByZXN1bHRzID0ge30NCiAgICBmb3IgcyBpbiBzZW50ZW5jZXM6DQogICAgICAgIGlucHV0X2lkeCA9IHNlbnRlbmNlcy5pbmRleChzKQ0KICAgICAgICByZXN1bHRfaWR4ID0gbnAubmFuYXJnbWF4KGFycltpbnB1dF9pZHhdW2tleXdvcmRzdGFydEluZGV4Ol0pDQogICAgICAgIG1hdGNoID0gYXJyW2lucHV0X2lkeF1ba2V5d29yZHN0YXJ0SW5kZXggKyByZXN1bHRfaWR4XQ0KICAgICAgICByID0ga2V5d29yZHNbcmVzdWx0X2lkeF0NCiAgICAgICAgaWYgbWF0Y2ggPiAwOg0KICAgICAgICAgICAgcmVzdWx0c1tzXSA9IHIgKyAnOicgKyBzdHIobWF0Y2gpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXN1bHRzW3NdID0gJ05PIE1BVENIOjAnDQogICAgcmV0dXJuIHJlc3VsdHMNCg0KDQpsZWFwZHMgPSBkaWN0WydMRUFQRFMnXQ0KbGVhcERTZGljdCA9IGpzb24ubG9hZHMobGVhcGRzKQ0KDQp1c2VybmFtZSA9IGxlYXBEU2RpY3RbJ3VzZXJOYW1lJ10NCnBhc3N3b3JkID0gVXRpbGl0aWVzLmRlY3J5cHQobGVhcERTZGljdFsncGFzc3dvcmQnXSwgbGVhcERTZGljdFsnc2FsdCddKQ0KdXJsID0gbGVhcERTZGljdFsndXJsJ10NCmRyaXZlcm5hbWUgPSAnb3JnLmgyLkRyaXZlcicNCmRyaXZlcnBhdGggPSBvcy5wYXRoLmpvaW4ob3MuZW52aXJvblsnU1BBUktfSE9NRSddLCAnamFycy9oMi0xLjQuMjAwLmphcicpDQojaG9zdCA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkuaG9zdG5hbWUNCiNwb3J0ID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5wb3J0DQojZGF0YWJhc2UgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLnBhdGgucnNwbGl0KCcvJywgMSlbMV0NCmNueCA9IGpheWRlYmVhcGkuY29ubmVjdChkcml2ZXJuYW1lLCB1cmwsIFt1c2VybmFtZSwgcGFzc3dvcmRdLCBkcml2ZXJwYXRoKQ0KbXljdXJzb3IgPSBjbnguY3Vyc29yKCkNClRhYmxlTmFtZSA9IGRpY3RbJ1RhYmxlTmFtZSddDQpzcWwgPSAnJydTRUxFQ1QgRElTVElOQ1QgVFJJTShleHRyYWN0ZWRfcGhyYXNlKSBmcm9tIHswfSB3aGVyZSBleHRyYWN0ZWRfcGhyYXNlIGlzIG5vdCBudWxsIGFuZCBleHRyYWN0ZWRfcGhyYXNlIDw+ICcnICAnJycuZm9ybWF0KFRhYmxlTmFtZSkNCm15Y3Vyc29yLmV4ZWN1dGUoc3FsKQ0KcmVzdWx0cyA9IG15Y3Vyc29yLmZldGNoYWxsKCkNCm15Y3Vyc29yLmNsb3NlKCkNCnBocmFzZXMgPSBbXQ0KZm9yIGl0ZW0gaW4gcmVzdWx0czoNCiAgICBwaHJhc2VzLmFwcGVuZChpdGVtWzBdKQ0KDQpteWN1cnNvcjIgPSBjbnguY3Vyc29yKCkNCnNxbCA9ICdTRUxFQ1QgRElTVElOQ1QgS2V5X1dvcmQgZnJvbSBFQVNFTWFwcGluZycNCm15Y3Vyc29yMi5leGVjdXRlKHNxbCkNCnJlc3VsdHMgPSBteWN1cnNvcjIuZmV0Y2hhbGwoKQ0Ka2V5d29yZHMgPSBbXQ0KZm9yIGl0ZW0gaW4gcmVzdWx0czoNCiAgICBrZXl3b3Jkcy5hcHBlbmQoaXRlbVswXSkNCm15Y3Vyc29yMi5jbG9zZSgpDQoNCmNueC5jbG9zZSgpDQoNCg0KZGVmIGdldEVBU0UodHVwKToNCiAgICB0cnk6DQogICAgICAgIHJlc3VsdHMgPSBnZXRTaW1pbGFyKHR1cFswXSwgdHVwWzFdKQ0KICAgICAgICBUYWJsZU5hbWUgPSBkaWN0WydUYWJsZU5hbWUnXQ0KICAgICAgICBxdWVyeSA9ICcnJ1VwZGF0ZSB7MH0gc2V0IG1hcHBlZF9waHJhc2UgPT8gLCBtYXBwZWRfcGhyYXNlX2NvbmZpZGVubmNlID0/ICB3aGVyZSBUUklNKGV4dHJhY3RlZF9waHJhc2UpID0gPyAnJycuZm9ybWF0KFRhYmxlTmFtZSkNCiAgICAgICAgaW5wdXRkYXRhID0gW10NCiAgICAgICAgZm9yIHBhdHRlcm4gaW4gcmVzdWx0cy5rZXlzKCk6DQogICAgICAgICAgICBrdyA9IHJlc3VsdHNbcGF0dGVybl0uc3BsaXQoJzonKVswXQ0KICAgICAgICAgICAgc2NvcmUgPSByZXN1bHRzW3BhdHRlcm5dLnNwbGl0KCc6JylbLTFdDQogICAgICAgICAgICBpZiBrdyAhPSAnTk8gTUFUQ0gnOg0KICAgICAgICAgICAgICAgIGlucHV0ZGF0YS5hcHBlbmQoKGt3LCBzY29yZSwgcGF0dGVybikpDQogICAgICAgIA0KICAgICAgICBkcml2ZXJuYW1lID0gJ29yZy5oMi5Ecml2ZXInDQogICAgICAgIGRyaXZlcnBhdGggPSBvcy5wYXRoLmpvaW4ob3MuZW52aXJvblsnU1BBUktfSE9NRSddLCAnamFycy9oMi0xLjQuMjAwLmphcicpDQogICAgICAgIGNueCA9IGpheWRlYmVhcGkuY29ubmVjdChkcml2ZXJuYW1lLCB0dXBbNF0sIFt0dXBbMl0sIHR1cFszXV0sIGRyaXZlcnBhdGgpDQogICAgICAgIG15Y3Vyc29yID0gY254LmN1cnNvcigpDQogICAgICAgIHJlcyA9IG15Y3Vyc29yLmV4ZWN1dGVtYW55KHF1ZXJ5LCBpbnB1dGRhdGEpDQogICAgICAgIGNueC5jb21taXQoKQ0KICAgICAgICBteWN1cnNvci5jbG9zZSgpDQogICAgICAgIGNueC5jbG9zZSgpDQogICAgICAgIHJldHVybiBUcnVlDQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBleDoNCiAgICAgICAgbG9nZ2luZy53YXJuaW5nKGV4KQ0KICAgICAgICByZXR1cm4gRmFsc2UNCg0KDQpmcm9tIG11bHRpcHJvY2Vzc2luZy5kdW1teSBpbXBvcnQgUG9vbCBhcyBUaHJlYWRQb29sDQoNCmF1eF92YWwgPSBbXQ0KdG90YWxsZW4gPSBsZW4ocGhyYXNlcykNCmxvZ2dpbmcuaW5mbygnVG90YWwgUmVjb3JkczogezB9Jy5mb3JtYXQodG90YWxsZW4pKQ0Kc3RhcnQgPSAwDQpzdGVwID0gMTAwMA0KZm9yIGkgaW4gcmFuZ2Uoc3RhcnQsIHRvdGFsbGVuLCBzdGVwKToNCiAgICBzdG9wID0gaSArIHN0ZXANCiAgICBpZiAoc3RvcCA+IHRvdGFsbGVuKToNCiAgICAgICAgc3RvcCA9IHRvdGFsbGVuDQogICAgdHJ5Og0KICAgICAgICBhdXhfdmFsLmFwcGVuZCgocGhyYXNlc1tpOnN0b3BdLCBrZXl3b3JkcywgdXNlcm5hbWUsIHBhc3N3b3JkLCB1cmwpKQ0KICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgbG9nZ2luZy5pbmZvKGUpDQoNCnBvb2wgPSBUaHJlYWRQb29sKDQpDQpsb2dnaW5nLmluZm8obGVuKGF1eF92YWwpKQ0KbG9nZ2luZy5pbmZvKCdTdGFydGluZyBQcm9jZXNzJykNCg0KbWFwZGF0YSA9IHBvb2wubWFwKGdldEVBU0UsIGF1eF92YWwpDQoNCmxvZ2dpbmcuaW5mbygnQ29tcGxldGVkJykNCg0KDQoNCg0KDQoNCg==","leo1311"
"ACMGNRCN39596","ACMGNRCN39596_Acme.py","","leo1311"
"ACMLP_CR65949","ACMLP_CR65949_Acme.py","aW1wb3J0IHN5cw0KaW1wb3J0IG9zDQppbXBvcnQgamF5ZGViZWFwaQ0KaW1wb3J0IGpzb24NCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lDQpmcm9tIGxlYXAudXRpbHMuVXRpbGl0aWVzIGltcG9ydCBVdGlsaXRpZXMNCmltcG9ydCBsb2dnaW5nIGFzIGxvZ2dlcg0KZnJvbSBkYXRldGltZSBpbXBvcnQgdGltZXpvbmUNCg0KDQpsb2dnZXIuYmFzaWNDb25maWcobGV2ZWw9bG9nZ2VyLklORk8sZm9ybWF0PSclKGFzY3RpbWUpcyBJTkZPICUobWVzc2FnZSlzJywgZGF0ZWZtdD0nJXkvJW0vJWQgJUg6JU06JVMnKQ0KDQphcmd1bWVudHMgPXN5cy5hcmd2DQpkaWN0PXt9DQpmb3IgYXJnIGluIGFyZ3VtZW50czoNCiAgICBhcmcgPSBhcmcucmVwbGFjZSgnXFxcXHUwMDNkJywnPScpDQogICAgdHJ5Og0KICAgICAgICBkaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICgnOicpLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQ0KICAgIGV4Y2VwdDoNCiAgICAgICAgYT0nZXJyb3InDQoNCg0KaWNtUGF5bG9hZCA9IGpzb24ubG9hZHMoZGljdFsnaW5jaWRlbnRQYXlsb2FkJ10pDQoNCmljbVBheWxvYWRNYXBwaW5nID0geydudW1iZXInOidudW1iZXInLCdzaG9ydGRlc2NyaXB0aW9uJzonc2hvcnRkZXNjcmlwdGlvbicsJ3ByaW9yaXR5LmRpc3BsYXlWYWx1ZSc6J3ByaW9yaXR5Jywnc3RhdGUuZGlzcGxheVZhbHVlJzonc3RhdGUnLA0KICAgICAgICAgICAgICAgICAgICAgICAgJ2Rlc2NyaXB0aW9uJzonZGVzY3JpcHRpb24nLCdjYXRlZ29yeS5kaXNwbGF5VmFsdWUnOidjYXRlZ29yeScsJ2ltcGFjdC5kaXNwbGF5VmFsdWUnOidpbXBhY3QnLA0KICAgICAgICAgICAgICAgICAgICAgICAgJ2Fzc2lnbm1lbnRncm91cC5kaXNwbGF5VmFsdWUnOidhc3NpZ25tZW50Z3JvdXAnLCdjb25maWd1cmF0aW9uaXRlbS5kaXNwbGF5VmFsdWUnOidjb25maWd1cmF0aW9uSXRlbScsJ2Fzc2lnbmVkdG8uZGlzcGxheVZhbHVlJzonYXNzaWduZWR0bycsDQogICAgICAgICAgICAgICAgICAgICAgICAnc29wJzonc29wJywncmVzb2x1dGlvblN0ZXBzQ2x1c3Rlck5hbWUnOid3b3JrZmxvdycsICdjYWxsZXIuZGlzcGxheVZhbHVlJzonY2FsbGVyJ30NCiNtYXBDb2x1bW5zDQpmb3VuZENvbHVtbnMgPSBbXQ0Kcm93ID0ge30NCmZvciBrZXkgaW4gaWNtUGF5bG9hZE1hcHBpbmcua2V5cygpOg0KICAgIGp2ID0gaWNtUGF5bG9hZA0KICAgIGljbUNvbHVtbiA9IGtleS5zcGxpdCgnLicpDQogICAgZm9yIGl0ZW0gaW4gaWNtQ29sdW1uOg0KICAgICAgICB0cnk6DQogICAgICAgICAgICBqdiA9IGp2W2l0ZW1dDQogICAgICAgICAgICByb3dbaWNtUGF5bG9hZE1hcHBpbmdba2V5XV0gPSBqdg0KICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICBhPSdObyBtYXBwaW5nJw0KDQoNCnJvd1snbnVtYmVyJ10gID0gJ0lOQ3swfScuZm9ybWF0KGludChkYXRldGltZS5ub3coKS5yZXBsYWNlKHR6aW5mbz10aW1lem9uZS51dGMpLnRpbWVzdGFtcCgpKSkNCnJvd1snc291cmNlJ10gPSAnTEVBUCcNCnJvd1sndHlwZSddID0gZGljdFsndGlja2V0VHlwZSddDQpyb3dbJ2xhc3RVcGRhdGVkJ109ZGF0ZXRpbWUubm93KCkNCnJvd1snb3BlbmVkRGF0ZSddPWRhdGV0aW1lLm5vdygpDQpyb3dbJ3VwZGF0ZWREYXRlJ109ZGF0ZXRpbWUubm93KCkNCnJvd1snY3JlYXRlZERhdGUnXT1kYXRldGltZS5ub3coKQ0Kcm93WydjcmVhdGVkYnknXSA9ICdhZG1pbicNCg0KI0xFQVAgRGF0YXNvdXJjZQ0KbGVhcERTZGljdCA9IGpzb24ubG9hZHMoZGljdFsnTEVBUERhdGFTb3VyY2UnXSkNCg0KIyAjc2F2ZSB0byBkYg0KY29sdW1uTGlzdCA9IHJvdy5rZXlzKCkNCnVzZXJuYW1lID0gbGVhcERTZGljdFsndXNlck5hbWUnXQ0KcGFzc3dvcmQgPSBVdGlsaXRpZXMuZGVjcnlwdChsZWFwRFNkaWN0WydwYXNzd29yZCddLCBsZWFwRFNkaWN0WydzYWx0J10pDQpVcmwgPSBsZWFwRFNkaWN0Wyd1cmwnXQ0KDQpkcml2ZXJuYW1lID0gJ29yZy5oMi5Ecml2ZXInDQpkcml2ZXJwYXRoID0gb3MucGF0aC5qb2luKG9zLmVudmlyb25bJ1NQQVJLX0hPTUUnXSwgJ2phcnMvaDItMS40LjIwMC5qYXInKQ0KDQpjbnggPSBqYXlkZWJlYXBpLmNvbm5lY3QoZHJpdmVybmFtZSwgVXJsLCBbdXNlcm5hbWUsIHBhc3N3b3JkXSwgZHJpdmVycGF0aCkNCm15Y3Vyc29yID0gY254LmN1cnNvcigpDQp0YWJsZW5hbWU9IGRpY3RbJ2RhdGFUYWJsZSddIA0KDQpwYXJhbXNEaWN0ID0ge30NCnZhbHVlcyA9IFtdDQpmb3Iga2V5IGluIGNvbHVtbkxpc3Q6DQogICAgaWYgaXNpbnN0YW5jZShyb3dba2V5XSxkYXRldGltZSk6DQogICAgICAgIHZhbHVlcy5hcHBlbmQocm93W2tleV0uc3RyZnRpbWUoJyVZLSVtLSVkICVIOiVNOiVTJykpDQogICAgZWxzZToNCiAgICAgICAgdmFsdWVzLmFwcGVuZChyb3dba2V5XSkNCg0KY29sdW1ucyA9ICcsICcuam9pbignYHswfWAnLmZvcm1hdChrKSBmb3IgayBpbiBjb2x1bW5MaXN0KQ0KZHVwbGljYXRlcyA9ICcsICcuam9pbignezB9PVZBTFVFUyh7MH0pJy5mb3JtYXQoaykgZm9yIGsgaW4gcm93KQ0KcGxhY2VfaG9sZGVycyA9ICcsICcuam9pbignPycuZm9ybWF0KGspIGZvciBrIGluIHJvdykNCg0KdHJ5Og0KICAgIHF1ZXJ5ID0gJ0lOU0VSVCBJTlRPIHswfSAoezF9KSBWQUxVRVMgKHsyfSknLmZvcm1hdCh0YWJsZW5hbWUsIGNvbHVtbnMsIHBsYWNlX2hvbGRlcnMpDQogICAgcXVlcnkgPSAnezB9IE9OIERVUExJQ0FURSBLRVkgVVBEQVRFIHsxfScuZm9ybWF0KHF1ZXJ5LCBkdXBsaWNhdGVzKQ0KICAgIG15Y3Vyc29yLmV4ZWN1dGVtYW55KHF1ZXJ5LCAodmFsdWVzLCkpDQogICAgY254LmNvbW1pdCgpDQogICAgcHJpbnQoJ0luY2lkZW50IENyZWF0ZWQgOnswfScuZm9ybWF0KHJvd1snbnVtYmVyJ10pKQ0KZXhjZXB0IEV4Y2VwdGlvbiBhcyBleDoNCiAgICBwcmludChleCkNCg0KbXljdXJzb3IuY2xvc2UoKQ0KY254LmNsb3NlKCkNCg0KbG9nZ2VyLmluZm8oJ0NvbXBsZXRlZCcpDQoNCg0K","leo1311"
"ACMLP_PD72695","ACMLP_PD72695_Acme.py","aW1wb3J0IHN5cw0KaW1wb3J0IG9zDQppbXBvcnQgamF5ZGViZWFwaQ0KaW1wb3J0IGpzb24NCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lDQpmcm9tIGxlYXAudXRpbHMuVXRpbGl0aWVzIGltcG9ydCBVdGlsaXRpZXMNCmltcG9ydCBsb2dnaW5nIGFzIGxvZ2dlcg0KZnJvbSBkYXRldGltZSBpbXBvcnQgdGltZXpvbmUNCg0KDQpsb2dnZXIuYmFzaWNDb25maWcobGV2ZWw9bG9nZ2VyLklORk8sZm9ybWF0PSclKGFzY3RpbWUpcyBJTkZPICUobWVzc2FnZSlzJywgZGF0ZWZtdD0nJXkvJW0vJWQgJUg6JU06JVMnKQ0KDQphcmd1bWVudHMgPXN5cy5hcmd2DQpkaWN0PXt9DQpmb3IgYXJnIGluIGFyZ3VtZW50czoNCiAgICBhcmcgPSBhcmcucmVwbGFjZSgnXFxcXHUwMDNkJywnPScpDQogICAgdHJ5Og0KICAgICAgICBkaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICgnOicpLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQ0KICAgIGV4Y2VwdDoNCiAgICAgICAgYT0nZXJyb3InDQoNCg0KaWNtUGF5bG9hZCA9IGpzb24ubG9hZHMoZGljdFsnaW5jaWRlbnRQYXlsb2FkJ10pDQoNCmljbVBheWxvYWRNYXBwaW5nID0geydudW1iZXInOidudW1iZXInLCdzaG9ydGRlc2NyaXB0aW9uJzonc2hvcnRkZXNjcmlwdGlvbicsJ3ByaW9yaXR5LmRpc3BsYXlWYWx1ZSc6J3ByaW9yaXR5Jywnc3RhdGUuZGlzcGxheVZhbHVlJzonc3RhdGUnLA0KICAgICAgICAgICAgICAgICAgICAgICAgJ2Rlc2NyaXB0aW9uJzonZGVzY3JpcHRpb24nLCdjYXRlZ29yeS5kaXNwbGF5VmFsdWUnOidjYXRlZ29yeScsJ2ltcGFjdC5kaXNwbGF5VmFsdWUnOidpbXBhY3QnLA0KICAgICAgICAgICAgICAgICAgICAgICAgJ2Fzc2lnbm1lbnRncm91cC5kaXNwbGF5VmFsdWUnOidhc3NpZ25tZW50Z3JvdXAnLCdjb25maWd1cmF0aW9uaXRlbS5kaXNwbGF5VmFsdWUnOidjb25maWd1cmF0aW9uSXRlbScsJ2Fzc2lnbmVkdG8uZGlzcGxheVZhbHVlJzonYXNzaWduZWR0bycsDQogICAgICAgICAgICAgICAgICAgICAgICAnc29wJzonc29wJywncmVzb2x1dGlvblN0ZXBzQ2x1c3Rlck5hbWUnOid3b3JrZmxvdycsICdjYWxsZXIuZGlzcGxheVZhbHVlJzonY2FsbGVyJ30NCiNtYXBDb2x1bW5zDQpmb3VuZENvbHVtbnMgPSBbXQ0Kcm93ID0ge30NCmZvciBrZXkgaW4gaWNtUGF5bG9hZE1hcHBpbmcua2V5cygpOg0KICAgIGp2ID0gaWNtUGF5bG9hZA0KICAgIGljbUNvbHVtbiA9IGtleS5zcGxpdCgnLicpDQogICAgZm9yIGl0ZW0gaW4gaWNtQ29sdW1uOg0KICAgICAgICB0cnk6DQogICAgICAgICAgICBqdiA9IGp2W2l0ZW1dDQogICAgICAgICAgICByb3dbaWNtUGF5bG9hZE1hcHBpbmdba2V5XV0gPSBqdg0KICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICBhPSdObyBtYXBwaW5nJw0KDQoNCg0Kcm93Wydzb3VyY2UnXSA9ICdMRUFQJw0Kcm93Wyd0eXBlJ10gPSBkaWN0Wyd0aWNrZXRUeXBlJ10NCnJvd1snbGFzdFVwZGF0ZWQnXT1kYXRldGltZS5ub3coKQ0Kcm93WydvcGVuZWREYXRlJ109ZGF0ZXRpbWUubm93KCkNCnJvd1sndXBkYXRlZERhdGUnXT1kYXRldGltZS5ub3coKQ0Kcm93WydjcmVhdGVkRGF0ZSddPWRhdGV0aW1lLm5vdygpDQpyb3dbJ2NyZWF0ZWRieSddID0gJ2FkbWluJw0KDQojTEVBUCBEYXRhc291cmNlDQpsZWFwRFNkaWN0ID0ganNvbi5sb2FkcyhkaWN0WydMRUFQRGF0YVNvdXJjZSddKQ0KDQojICNzYXZlIHRvIGRiDQpjb2x1bW5MaXN0ID0gcm93LmtleXMoKQ0KdXNlcm5hbWUgPSBsZWFwRFNkaWN0Wyd1c2VyTmFtZSddDQpwYXNzd29yZCA9IFV0aWxpdGllcy5kZWNyeXB0KGxlYXBEU2RpY3RbJ3Bhc3N3b3JkJ10sIGxlYXBEU2RpY3RbJ3NhbHQnXSkNClVybCA9IGxlYXBEU2RpY3RbJ3VybCddDQpVcmw9J2pkYmM6aDI6dGNwOi8vbG9jYWxob3N0L0Q6L2xlYXAtMS4zLjExLXdpbi9kYXRhL2xlYXBtYXN0ZXJfZGF0YTtNT0RFPU1ZU1FMO0NBU0VfSU5TRU5TSVRJVkVfSURFTlRJRklFUlM9VFJVRScNCmRyaXZlcm5hbWUgPSAnb3JnLmgyLkRyaXZlcicNCmRyaXZlcnBhdGggPSBvcy5wYXRoLmpvaW4ob3MuZW52aXJvblsnU1BBUktfSE9NRSddLCAnamFycy9oMi0xLjQuMjAwLmphcicpDQoNCmNueCA9IGpheWRlYmVhcGkuY29ubmVjdChkcml2ZXJuYW1lLCBVcmwsIFt1c2VybmFtZSwgcGFzc3dvcmRdLCBkcml2ZXJwYXRoKQ0KbXljdXJzb3IgPSBjbnguY3Vyc29yKCkNCnRhYmxlbmFtZT0gZGljdFsnZGF0YVRhYmxlJ10gDQoNCnBhcmFtc0RpY3QgPSB7fQ0KdmFsdWVzID0gW10NCmZvciBrZXkgaW4gY29sdW1uTGlzdDoNCiAgICBpZiBpc2luc3RhbmNlKHJvd1trZXldLGRhdGV0aW1lKToNCiAgICAgICAgdmFsdWVzLmFwcGVuZChyb3dba2V5XS5zdHJmdGltZSgnJVktJW0tJWQgJUg6JU06JVMnKSkNCiAgICBlbHNlOg0KICAgICAgICB2YWx1ZXMuYXBwZW5kKHJvd1trZXldKQ0KDQpjb2x1bW5zID0gJywgJy5qb2luKCdgezB9YCcuZm9ybWF0KGspIGZvciBrIGluIGNvbHVtbkxpc3QpDQpkdXBsaWNhdGVzID0gJywgJy5qb2luKCd7MH09VkFMVUVTKHswfSknLmZvcm1hdChrKSBmb3IgayBpbiByb3cpDQpwbGFjZV9ob2xkZXJzID0gJywgJy5qb2luKCc/Jy5mb3JtYXQoaykgZm9yIGsgaW4gcm93KQ0KDQp0cnk6DQogICAgcXVlcnkgPSAnSU5TRVJUIElOVE8gezB9ICh7MX0pIFZBTFVFUyAoezJ9KScuZm9ybWF0KHRhYmxlbmFtZSwgY29sdW1ucywgcGxhY2VfaG9sZGVycykNCiAgICBxdWVyeSA9ICd7MH0gT04gRFVQTElDQVRFIEtFWSBVUERBVEUgezF9Jy5mb3JtYXQocXVlcnksIGR1cGxpY2F0ZXMpDQogICAgbXljdXJzb3IuZXhlY3V0ZW1hbnkocXVlcnksICh2YWx1ZXMsKSkNCiAgICBjbnguY29tbWl0KCkNCiAgICBwcmludCgnSW5jaWRlbnQgVXBkYXRlZCA6ezB9Jy5mb3JtYXQocm93WydudW1iZXInXSkpDQpleGNlcHQgRXhjZXB0aW9uIGFzIGV4Og0KICAgIHByaW50KGV4KQ0KDQpteWN1cnNvci5jbG9zZSgpDQpjbnguY2xvc2UoKQ0KDQpsb2dnZXIuaW5mbygnQ29tcGxldGVkJykNCg0KDQoNCg0KDQo=","leo1311"
