"cname","filename","filescript","organization"
"AnomalyDetection","AnomalyDetection_Core.py","JycnDQpUaGUgc2NyaXB0IHByaW50cyBvdXQgYWxsIHJlY29yZHMgdGhhdCBoYXZlIGFuIGFibm9ybWFsbHkgaGlnaCBhbm9tYWx5DQpzY29yZS4NCicnJw0KaW1wb3J0IG9zDQppbXBvcnQgc2h1dGlsDQppbXBvcnQgY3N2DQppbXBvcnQgZGF0ZXRpbWUNCmltcG9ydCBsb2dnaW5nDQpmcm9tIGNvbGxlY3Rpb25zIGltcG9ydCBPcmRlcmVkRGljdA0KaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyDQppbXBvcnQgcHN1dGlsDQppbXBvcnQgc3lzDQppbXBvcnQgdGltZQ0KZnJvbSBudXBpYy5mcmFtZXdvcmtzLm9wZi5tb2RlbF9mYWN0b3J5IGltcG9ydCBNb2RlbEZhY3RvcnkNCmltcG9ydCBteXNxbC5jb25uZWN0b3INCg0KbG9nZ2VyLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dlci5JTkZPLCBmb3JtYXQ9JyUoYXNjdGltZSlzIElORk8gJShtZXNzYWdlKXMnLCBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycpDQphcmd1bWVudHMgPSBzeXMuYXJndg0KDQpfQU5PTUFMWV9USFJFU0hPTEQgPSAwLjgNCiMgbWluaW11bSBtZXRyaWMgdmFsdWUgb2YgaW5wdXQNCl9JTlBVVF9NSU4gPSAwDQojIG1heGltdW0gbWV0cmljIHZhbHVlIG9mIGlucHV0DQpfSU5QVVRfTUFYID0gMTAwDQpNT0RFTF9QQVJBTVMgPSB7DQogICAgJ2luZmVyZW5jZUFyZ3MnOiB7DQogICAgICAgICdwcmVkaWN0aW9uU3RlcHMnOiBbMV0sDQogICAgICAgICdwcmVkaWN0ZWRGaWVsZCc6ICd2YWx1ZScsDQogICAgICAgICdpbnB1dFByZWRpY3RlZEZpZWxkJzogJ2F1dG8nDQogICAgfSwNCiAgICAnYWdncmVnYXRpb25JbmZvJzogew0KICAgICAgICAnc2Vjb25kcyc6IDAsDQogICAgICAgICdmaWVsZHMnOiBbXSwNCiAgICAgICAgJ21vbnRocyc6IDAsDQogICAgICAgICdkYXlzJzogMCwNCiAgICAgICAgJ3llYXJzJzogMCwNCiAgICAgICAgJ2hvdXJzJzogMCwNCiAgICAgICAgJ21pY3Jvc2Vjb25kcyc6IDAsDQogICAgICAgICd3ZWVrcyc6IDAsDQogICAgICAgICdtaW51dGVzJzogMCwNCiAgICAgICAgJ21pbGxpc2Vjb25kcyc6IDANCiAgICB9LA0KICAgICdtb2RlbCc6ICdIVE1QcmVkaWN0aW9uJywNCiAgICAndmVyc2lvbic6IDEsDQogICAgJ3ByZWRpY3RBaGVhZFRpbWUnOiBOb25lLA0KICAgICdtb2RlbFBhcmFtcyc6IHsNCiAgICAgICAgJ2luZmVyZW5jZVR5cGUnOiAnVGVtcG9yYWxBbm9tYWx5JywNCiAgICAgICAgJ3NlbnNvclBhcmFtcyc6IHsNCiAgICAgICAgICAgICdlbmNvZGVycyc6IHsNCiAgICAgICAgICAgICAgICAndGltZXN0YW1wX3RpbWVPZkRheSc6IHsNCiAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnRGF0ZUVuY29kZXInLA0KICAgICAgICAgICAgICAgICAgICAndGltZU9mRGF5JzogWw0KICAgICAgICAgICAgICAgICAgICAgICAgMjEsDQogICAgICAgICAgICAgICAgICAgICAgICA5LjQ5DQogICAgICAgICAgICAgICAgICAgIF0sDQogICAgICAgICAgICAgICAgICAgICdmaWVsZG5hbWUnOiAndGltZXN0YW1wJywNCiAgICAgICAgICAgICAgICAgICAgJ25hbWUnOiAndGltZXN0YW1wJw0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgJ3RpbWVzdGFtcF9kYXlPZldlZWsnOiBOb25lLA0KICAgICAgICAgICAgICAgICd0aW1lc3RhbXBfd2Vla2VuZCc6IE5vbmUsDQogICAgICAgICAgICAgICAgJ3ZhbHVlJzogew0KICAgICAgICAgICAgICAgICAgICAnbmFtZSc6ICd2YWx1ZScsDQogICAgICAgICAgICAgICAgICAgICdmaWVsZG5hbWUnOiAndmFsdWUnLA0KICAgICAgICAgICAgICAgICAgICAnc2VlZCc6IDQyLA0KICAgICAgICAgICAgICAgICAgICAnbnVtQnVja2V0cyc6IDEzMCwNCiAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnUmFuZG9tRGlzdHJpYnV0ZWRTY2FsYXJFbmNvZGVyJw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICAnc2Vuc29yQXV0b1Jlc2V0JzogTm9uZSwNCiAgICAgICAgICAgICd2ZXJib3NpdHknOiAwDQogICAgICAgIH0sDQogICAgICAgICdzcEVuYWJsZSc6IFRydWUsDQogICAgICAgICdzcFBhcmFtcyc6IHsNCiAgICAgICAgICAgICdzcGF0aWFsSW1wJzogJ2NwcCcsDQogICAgICAgICAgICAncG90ZW50aWFsUGN0JzogMC44LA0KICAgICAgICAgICAgJ2NvbHVtbkNvdW50JzogMjA0OCwNCiAgICAgICAgICAgICdnbG9iYWxJbmhpYml0aW9uJzogMSwNCiAgICAgICAgICAgICdpbnB1dFdpZHRoJzogMCwNCiAgICAgICAgICAgICdib29zdFN0cmVuZ3RoJzogMC4wLA0KICAgICAgICAgICAgJ251bUFjdGl2ZUNvbHVtbnNQZXJJbmhBcmVhJzogNDAsDQogICAgICAgICAgICAnc2VlZCc6IDE5NTYsDQogICAgICAgICAgICAnc3BWZXJib3NpdHknOiAwLA0KICAgICAgICAgICAgJ3NwYXRpYWxJbXAnOiAnY3BwJywNCiAgICAgICAgICAgICdzeW5QZXJtQWN0aXZlSW5jJzogMC4wMDMsDQogICAgICAgICAgICAnc3luUGVybUNvbm5lY3RlZCc6IDAuMiwNCiAgICAgICAgICAgICdzeW5QZXJtSW5hY3RpdmVEZWMnOiAwLjAwMDUNCiAgICAgICAgfSwNCiAgICAgICAgJ3RyYWluU1BOZXRPbmx5SWZSZXF1ZXN0ZWQnOiBGYWxzZSwNCiAgICAgICAgJ3RtRW5hYmxlJzogVHJ1ZSwNCiAgICAgICAgJ3RtUGFyYW1zJzogew0KICAgICAgICAgICAgJ2FjdGl2YXRpb25UaHJlc2hvbGQnOiAxMywNCiAgICAgICAgICAgICdjZWxsc1BlckNvbHVtbic6IDMyLA0KICAgICAgICAgICAgJ2NvbHVtbkNvdW50JzogMjA0OCwNCiAgICAgICAgICAgICdnbG9iYWxEZWNheSc6IDAuMCwNCiAgICAgICAgICAgICdpbml0aWFsUGVybSc6IDAuMjEsDQogICAgICAgICAgICAnaW5wdXRXaWR0aCc6IDIwNDgsDQogICAgICAgICAgICAnbWF4QWdlJzogMCwNCiAgICAgICAgICAgICdtYXhTZWdtZW50c1BlckNlbGwnOiAxMjgsDQogICAgICAgICAgICAnbWF4U3luYXBzZXNQZXJTZWdtZW50JzogMzIsDQogICAgICAgICAgICAnbWluVGhyZXNob2xkJzogMTAsDQogICAgICAgICAgICAnbmV3U3luYXBzZUNvdW50JzogMjAsDQogICAgICAgICAgICAnb3V0cHV0VHlwZSc6ICdub3JtYWwnLA0KICAgICAgICAgICAgJ3BhbUxlbmd0aCc6IDMsDQogICAgICAgICAgICAncGVybWFuZW5jZURlYyc6IDAuMSwNCiAgICAgICAgICAgICdwZXJtYW5lbmNlSW5jJzogMC4xLA0KICAgICAgICAgICAgJ3NlZWQnOiAxOTYwLA0KICAgICAgICAgICAgJ3RlbXBvcmFsSW1wJzogJ2NwcCcsDQogICAgICAgICAgICAndmVyYm9zaXR5JzogMA0KICAgICAgICB9LA0KICAgICAgICAnY2xFbmFibGUnOiBGYWxzZSwNCiAgICAgICAgJ2NsUGFyYW1zJzogew0KICAgICAgICAgICAgJ2FscGhhJzogMC4wMzU4Mjg5MzM2MTIxNTc5OTgsDQogICAgICAgICAgICAncmVnaW9uTmFtZSc6ICdTRFJDbGFzc2lmaWVyUmVnaW9uJywNCiAgICAgICAgICAgICdzdGVwcyc6ICcxJywNCiAgICAgICAgICAgICd2ZXJib3NpdHknOiAwDQogICAgICAgIH0sDQogICAgICAgICdhbm9tYWx5UGFyYW1zJzogew0KICAgICAgICAgICAgJ2Fub21hbHlDYWNoZVJlY29yZHMnOiBOb25lLA0KICAgICAgICAgICAgJ2F1dG9EZXRlY3RUaHJlc2hvbGQnOiBOb25lLA0KICAgICAgICAgICAgJ2F1dG9EZXRlY3RXYWl0UmVjb3Jkcyc6IDUwMzANCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KDQpkZWYgX3NldFJhbmRvbUVuY29kZXJSZXNvbHV0aW9uKG1pblJlc29sdXRpb249MC4wMDEpOg0KICAgICcnJw0KICAgIEdpdmVuIG1vZGVsIHBhcmFtcywgZmlndXJlIG91dCB0aGUgY29ycmVjdCByZXNvbHV0aW9uIGZvciB0aGUNCiAgICBSYW5kb21EaXN0cmlidXRlZCBlbmNvZGVyLiBNb2RpZmllcyBwYXJhbXMgaW4gcGxhY2UuDQogICAgJycnDQogICAgZW5jb2RlciA9ICgNCiAgICAgICAgTU9ERUxfUEFSQU1TWydtb2RlbFBhcmFtcyddWydzZW5zb3JQYXJhbXMnXVsnZW5jb2RlcnMnXVsndmFsdWUnXQ0KICAgICkNCg0KICAgIGlmIGVuY29kZXJbJ3R5cGUnXSA9PSAnUmFuZG9tRGlzdHJpYnV0ZWRTY2FsYXJFbmNvZGVyJzoNCiAgICAgICAgcmFuZ2VQYWRkaW5nID0gYWJzKF9JTlBVVF9NQVggLSBfSU5QVVRfTUlOKSAqIDAuMg0KICAgICAgICBtaW5WYWx1ZSA9IF9JTlBVVF9NSU4gLSByYW5nZVBhZGRpbmcNCiAgICAgICAgbWF4VmFsdWUgPSBfSU5QVVRfTUFYICsgcmFuZ2VQYWRkaW5nDQogICAgICAgIHJlc29sdXRpb24gPSBtYXgobWluUmVzb2x1dGlvbiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAobWF4VmFsdWUgLSBtaW5WYWx1ZSkgLyBlbmNvZGVyLnBvcCgnbnVtQnVja2V0cycpDQogICAgICAgICAgICAgICAgICAgICAgICAgKQ0KICAgICAgICBlbmNvZGVyWydyZXNvbHV0aW9uJ10gPSByZXNvbHV0aW9uDQoNCg0KZGVmIGNyZWF0ZU1vZGVsKCk6DQogICAgX3NldFJhbmRvbUVuY29kZXJSZXNvbHV0aW9uKCkNCiAgICAjIHJldHVybiBNb2RlbEZhY3RvcnkuY3JlYXRlKG1vZGVsX3BhcmFtcy5NT0RFTF9QQVJBTVMpDQoNCg0KZGVmIHJ1bkFub21hbHlEZXRlY3Rpb24oKToNCg0KICAgIGdsb2JhbCBtYXRyaWNlc3R5cGUNCg0KICAgIHByaW50KCdTdGFydGluZyBQaXBlbGluZScpDQoNCiAgICBtb2RlbCA9IGNyZWF0ZU1vZGVsKCkNCiAgICBsb2dnZXIuaW5mbygnTWV0cmljOjogVGltZXN0YW1wIDo6IFZhbHVlIDo6IEFub21hbHlTY29yeSA6OiBJc0Fub21hbHknKQ0KICAgIHRyeToNCiAgICAgIGxvZ2dlci5pbmZvKCdDcmVhdGluZyBNb2RlbCcpDQogICAgICBtb2RlbCA9IE1vZGVsRmFjdG9yeS5jcmVhdGUoTU9ERUxfUEFSQU1TKQ0KICAgICAgd2hpbGUoVHJ1ZSk6DQogICAgICAgICAgDQogICAgICAgIGxzdCA9IFtdDQogICAgICAgIG1vZGVsLmVuYWJsZUluZmVyZW5jZSh7J3ByZWRpY3RlZEZpZWxkJzogJ3ZhbHVlJ30pDQogICAgICAgIG1vZGVsSW5wdXQgPSBPcmRlcmVkRGljdCgpDQogICAgICAgIG1vZGVsSW5wdXRbJ3RpbWVzdGFtcCddID0gZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkNCiAgICAgICAgbW9kZWxJbnB1dFsndmFsdWUnXSA9IHBzdXRpbC5jcHVfcGVyY2VudChpbnRlcnZhbD1Ob25lKQ0KICAgICAgICANCiAgICAgICAgcmVzdWx0ID0gbW9kZWwucnVuKG1vZGVsSW5wdXQpDQogICAgICAgIGFub21hbHlTY29yZSA9IHJlc3VsdC5pbmZlcmVuY2VzWydhbm9tYWx5U2NvcmUnXQ0KICAgICAgIA0KICAgICAgICBsc3QuYXBwZW5kKChtb2RlbElucHV0Wyd0aW1lc3RhbXAnXSwgbW9kZWxJbnB1dFsndmFsdWUnXSwgZmxvYXQoYW5vbWFseVNjb3JlKSkpDQogICAgICAgIGlzQW5vbWFseSA9MA0KICAgICAgICBpZiBhbm9tYWx5U2NvcmUgPiBfQU5PTUFMWV9USFJFU0hPTEQ6DQogICAgICAgICAgICBpc0Fub21hbHkgPTENCiAgICAgICAgICAgIA0KICAgICAgICBsb2dnZXIuaW5mbygnY3B1X3BlcmNlbnQ6OiB7MH0gOjogezF9JSA6OiB7Mn0gOjogezN9Jy5mb3JtYXQobW9kZWxJbnB1dFsndGltZXN0YW1wJ10sbW9kZWxJbnB1dFsndmFsdWUnXSxmbG9hdChhbm9tYWx5U2NvcmUpLGlzQW5vbWFseSkpDQogICAgICAgIHRpbWUuc2xlZXAoMjApDQogICAgZXhjZXB0Og0KICAgICAgICBsb2dnZXIuZXJyb3IoJ0Vycm9yJykNCiAgICAgICAgDQoNCg0KaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoNCiAgICBsb2dnaW5nLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dpbmcuSU5GTykNCiAgICBydW5Bbm9tYWx5RGV0ZWN0aW9uKCkNCiAgICBpZiBjbnguaXNfY29ubmVjdGVkKCk6DQogICAgICAgIGNueC5jbG9zZSgpDQoNCg0KDQoNCg0KDQoNCg0KDQo=","leo1311"
"SNOW_Get_Metadata_API","SNOW_Get_Metadata_API_Acme.py","","leo1311"
"SNOW_Get_API","SNOW_Get_API_Acme.py","","leo1311"
"SNOW_Create_API","SNOW_Create_API_Acme.py","","leo1311"
"SNOW_Update_API","SNOW_Update_API_Acme.py","","leo1311"
"ACMKYPHR40814","ACMKYPHR40814_Acme.py","aW1wb3J0IG15c3FsLmNvbm5lY3Rvcg0KaW1wb3J0IGxvZ2dpbmcNCmltcG9ydCBzeXMNCmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCBxdW90ZV9wbHVzLCB1cmxwYXJzZQ0KZnJvbSBsZWFwLnV0aWxzLlV0aWxpdGllcyBpbXBvcnQgVXRpbGl0aWVzDQpmcm9tIHNrbGVhcm4uZmVhdHVyZV9leHRyYWN0aW9uLnRleHQgaW1wb3J0IFRmaWRmVmVjdG9yaXplcg0KaW1wb3J0IG51bXB5IGFzIG5wDQppbXBvcnQgdGltZWl0DQppbXBvcnQganNvbg0KDQpsb2dnaW5nLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dpbmcuSU5GTywgZm9ybWF0PSclKGFzY3RpbWUpcyBJTkZPICUobWVzc2FnZSlzJywgZGF0ZWZtdD0nJXkvJW0vJWQgJUg6JU06JVMnKQ0KDQphcmd1bWVudHMgPSBzeXMuYXJndg0KDQpkaWN0ID0ge30NCmZvciBhcmcgaW4gYXJndW1lbnRzOg0KICAgIHRyeToNCiAgICAgICAgZGljdFthcmcuc3BsaXQoJzonKVswXV0gPSAoJzonKS5qb2luKGFyZy5zcGxpdCgnOicpWzE6XSkNCiAgICBleGNlcHQ6DQogICAgICAgIGEgPSAnZXJyb3InDQoNCg0KZGVmIGdldFNpbWlsYXIoc2VudGVuY2VzLCBrZXl3b3Jkcyk6DQogICAgY29ycHVzID0gc2VudGVuY2VzICsga2V5d29yZHMNCiAgICBrZXl3b3Jkc3RhcnRJbmRleCA9IGxlbihzZW50ZW5jZXMpDQogICAgdGZpZGZDb3JwdXMgPSBUZmlkZlZlY3Rvcml6ZXIobWluX2RmPTEsIHN0b3Bfd29yZHM9J2VuZ2xpc2gnKS5maXRfdHJhbnNmb3JtKGNvcnB1cykNCiAgICBwYWlyd2lzZV9zaW1pbGFyaXR5ID0gdGZpZGZDb3JwdXMgKiB0ZmlkZkNvcnB1cy5UDQogICAgYXJyID0gcGFpcndpc2Vfc2ltaWxhcml0eS50b2FycmF5KCkNCiAgICBucC5maWxsX2RpYWdvbmFsKGFyciwgbnAubmFuKQ0KICAgIHJlc3VsdHMgPSB7fQ0KICAgIGZvciBzIGluIHNlbnRlbmNlczoNCiAgICAgICAgaW5wdXRfaWR4ID0gc2VudGVuY2VzLmluZGV4KHMpDQogICAgICAgIHJlc3VsdF9pZHggPSBucC5uYW5hcmdtYXgoYXJyW2lucHV0X2lkeF1ba2V5d29yZHN0YXJ0SW5kZXg6XSkNCiAgICAgICAgbWF0Y2ggPSBhcnJbaW5wdXRfaWR4XVtrZXl3b3Jkc3RhcnRJbmRleCArIHJlc3VsdF9pZHhdDQogICAgICAgIHIgPSBrZXl3b3Jkc1tyZXN1bHRfaWR4XQ0KICAgICAgICBpZiBtYXRjaCA+IDA6DQogICAgICAgICAgICByZXN1bHRzW3NdID0gciArICc6JyArIHN0cihtYXRjaCkNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJlc3VsdHNbc10gPSAnTk8gTUFUQ0g6MCcNCiAgICByZXR1cm4gcmVzdWx0cw0KDQoNCmxlYXBkcyA9IGRpY3RbJ0xFQVBEUyddDQpsZWFwRFNkaWN0ID0ganNvbi5sb2FkcyhsZWFwZHMpDQoNCnVzZXJuYW1lID0gbGVhcERTZGljdFsndXNlck5hbWUnXQ0KcGFzc3dvcmQgPSBVdGlsaXRpZXMuZGVjcnlwdChsZWFwRFNkaWN0WydwYXNzd29yZCddLCBsZWFwRFNkaWN0WydzYWx0J10pDQpob3N0ID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5ob3N0bmFtZQ0KcG9ydCA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkucG9ydA0KZGF0YWJhc2UgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLnBhdGgucnNwbGl0KCcvJywgMSlbMV0NCmNueCA9IG15c3FsLmNvbm5lY3Rvci5jb25uZWN0KHVzZXI9dXNlcm5hbWUsIHBhc3N3b3JkPXBhc3N3b3JkLCBob3N0PWhvc3QsIHBvcnQ9cG9ydCwgZGF0YWJhc2U9ZGF0YWJhc2UpDQpteWN1cnNvciA9IGNueC5jdXJzb3IoKQ0KVGFibGVOYW1lID0gZGljdFsnVGFibGVOYW1lJ10NCnNxbCA9ICcnJ1NFTEVDVCBESVNUSU5DVCBUUklNKGV4dHJhY3RlZF9waHJhc2UpIGZyb20gezB9IHdoZXJlIGV4dHJhY3RlZF9waHJhc2UgaXMgbm90IG51bGwgYW5kIGV4dHJhY3RlZF9waHJhc2UgPD4gJycgICcnJy5mb3JtYXQoVGFibGVOYW1lKQ0KbXljdXJzb3IuZXhlY3V0ZShzcWwpDQpyZXN1bHRzID0gbXljdXJzb3IuZmV0Y2hhbGwoKQ0KbXljdXJzb3IuY2xvc2UoKQ0KcGhyYXNlcyA9IFtdDQpmb3IgaXRlbSBpbiByZXN1bHRzOg0KICAgIHBocmFzZXMuYXBwZW5kKGl0ZW1bMF0pDQoNCm15Y3Vyc29yMiA9IGNueC5jdXJzb3IoKQ0Kc3FsID0gJ1NFTEVDVCBESVNUSU5DVCBLZXlfV29yZCBmcm9tIEVBU0VNYXBwaW5nJw0KbXljdXJzb3IyLmV4ZWN1dGUoc3FsKQ0KcmVzdWx0cyA9IG15Y3Vyc29yMi5mZXRjaGFsbCgpDQprZXl3b3JkcyA9IFtdDQpmb3IgaXRlbSBpbiByZXN1bHRzOg0KICAgIGtleXdvcmRzLmFwcGVuZChpdGVtWzBdKQ0KbXljdXJzb3IyLmNsb3NlKCkNCg0KY254LmNsb3NlKCkNCg0KDQpkZWYgZ2V0RUFTRSh0dXApOg0KICAgIHRyeToNCiAgICAgICAgcmVzdWx0cyA9IGdldFNpbWlsYXIodHVwWzBdLCB0dXBbMV0pDQogICAgICAgIFRhYmxlTmFtZSA9IGRpY3RbJ1RhYmxlTmFtZSddDQogICAgICAgIHF1ZXJ5ID0gJycnVXBkYXRlIHswfSBzZXQgbWFwcGVkX3BocmFzZSA9ICVzICwgbWFwcGVkX3BocmFzZV9jb25maWRlbm5jZSA9JXMgIHdoZXJlIFRSSU0oZXh0cmFjdGVkX3BocmFzZSkgPSAlcyAnJycuZm9ybWF0KFRhYmxlTmFtZSkNCiAgICAgICAgaW5wdXRkYXRhID0gW10NCiAgICAgICAgZm9yIHBhdHRlcm4gaW4gcmVzdWx0cy5rZXlzKCk6DQogICAgICAgICAgICBrdyA9IHJlc3VsdHNbcGF0dGVybl0uc3BsaXQoJzonKVswXQ0KICAgICAgICAgICAgc2NvcmUgPSByZXN1bHRzW3BhdHRlcm5dLnNwbGl0KCc6JylbLTFdDQogICAgICAgICAgICBpZiBrdyAhPSAnTk8gTUFUQ0gnOg0KICAgICAgICAgICAgICAgIGlucHV0ZGF0YS5hcHBlbmQoKGt3LCBzY29yZSwgcGF0dGVybikpDQogICAgICAgIGNueCA9IG15c3FsLmNvbm5lY3Rvci5jb25uZWN0KHVzZXI9dHVwWzJdLCBwYXNzd29yZD10dXBbM10sIGhvc3Q9dHVwWzRdLCBwb3J0PXR1cFs1XSwgZGF0YWJhc2U9dHVwWzZdKQ0KICAgICAgICBteWN1cnNvciA9IGNueC5jdXJzb3IoKQ0KICAgICAgICByZXMgPSBteWN1cnNvci5leGVjdXRlbWFueShxdWVyeSwgaW5wdXRkYXRhKQ0KICAgICAgICBjbnguY29tbWl0KCkNCiAgICAgICAgbXljdXJzb3IuY2xvc2UoKQ0KICAgICAgICBjbnguY2xvc2UoKQ0KICAgICAgICByZXR1cm4gVHJ1ZQ0KICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZXg6DQogICAgICAgIGxvZ2dpbmcud2FybmluZyhleCkNCiAgICAgICAgcmV0dXJuIEZhbHNlDQoNCg0KZnJvbSBtdWx0aXByb2Nlc3NpbmcuZHVtbXkgaW1wb3J0IFBvb2wgYXMgVGhyZWFkUG9vbA0KDQphdXhfdmFsID0gW10NCnRvdGFsbGVuID0gbGVuKHBocmFzZXMpDQpsb2dnaW5nLmluZm8oJ1RvdGFsIFJlY29yZHM6IHswfScuZm9ybWF0KHRvdGFsbGVuKSkNCnN0YXJ0ID0gMA0Kc3RlcCA9IDEwMDANCmZvciBpIGluIHJhbmdlKHN0YXJ0LCB0b3RhbGxlbiwgc3RlcCk6DQogICAgc3RvcCA9IGkgKyBzdGVwDQogICAgaWYgKHN0b3AgPiB0b3RhbGxlbik6DQogICAgICAgIHN0b3AgPSB0b3RhbGxlbg0KICAgIHRyeToNCiAgICAgICAgYXV4X3ZhbC5hcHBlbmQoKHBocmFzZXNbaTpzdG9wXSwga2V5d29yZHMsIHVzZXJuYW1lLCBwYXNzd29yZCwgaG9zdCwgcG9ydCwgZGF0YWJhc2UpKQ0KICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgbG9nZ2luZy5pbmZvKGUpDQoNCnBvb2wgPSBUaHJlYWRQb29sKDQpDQpsb2dnaW5nLmluZm8obGVuKGF1eF92YWwpKQ0KbG9nZ2luZy5pbmZvKCdTdGFydGluZyBQcm9jZXNzJykNCg0KbWFwZGF0YSA9IHBvb2wubWFwKGdldEVBU0UsIGF1eF92YWwpDQoNCmxvZ2dpbmcuaW5mbygnQ29tcGxldGVkJykNCg0KDQoNCg==","leo1311"
"ACMGNRCN39596","ACMGNRCN39596_Acme.py","","leo1311"
"ACMLP_CR65949","ACMLP_CR65949_Acme.py","aW1wb3J0IHN5cw0KaW1wb3J0IG9zDQppbXBvcnQgbXlzcWwuY29ubmVjdG9yDQppbXBvcnQganNvbg0KZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUNCmZyb20gbGVhcC51dGlscy5VdGlsaXRpZXMgaW1wb3J0IFV0aWxpdGllcw0KaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyDQpmcm9tIGRhdGV0aW1lIGltcG9ydCB0aW1lem9uZQ0KZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHF1b3RlX3BsdXMsIHVybHBhcnNlDQoNCmxvZ2dlci5iYXNpY0NvbmZpZyhsZXZlbD1sb2dnZXIuSU5GTyxmb3JtYXQ9JyUoYXNjdGltZSlzIElORk8gJShtZXNzYWdlKXMnLCBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycpDQoNCmFyZ3VtZW50cyA9c3lzLmFyZ3YNCmRpY3Q9e30NCmZvciBhcmcgaW4gYXJndW1lbnRzOg0KICAgIHRyeToNCiAgICAgICAgZGljdFthcmcuc3BsaXQoJzonKVswXV0gPSAoJzonKS5qb2luKGFyZy5zcGxpdCgnOicpWzE6XSkNCiAgICBleGNlcHQ6DQogICAgICAgIGE9J2Vycm9yJw0KDQoNCmljbVBheWxvYWQgPSBqc29uLmxvYWRzKGRpY3RbJ2luY2lkZW50UGF5bG9hZCddKQ0KDQppY21QYXlsb2FkTWFwcGluZyA9IHsnbnVtYmVyJzonbnVtYmVyJywnc2hvcnRkZXNjcmlwdGlvbic6J3Nob3J0ZGVzY3JpcHRpb24nLCdwcmlvcml0eS5kaXNwbGF5VmFsdWUnOidwcmlvcml0eScsJ3N0YXRlLmRpc3BsYXlWYWx1ZSc6J3N0YXRlJywNCiAgICAgICAgICAgICAgICAgICAgICAgICdkZXNjcmlwdGlvbic6J2Rlc2NyaXB0aW9uJywnY2F0ZWdvcnkuZGlzcGxheVZhbHVlJzonY2F0ZWdvcnknLCdpbXBhY3QuZGlzcGxheVZhbHVlJzonaW1wYWN0JywNCiAgICAgICAgICAgICAgICAgICAgICAgICdhc3NpZ25tZW50Z3JvdXAuZGlzcGxheVZhbHVlJzonYXNzaWdubWVudGdyb3VwJywnY29uZmlndXJhdGlvbml0ZW0uZGlzcGxheVZhbHVlJzonY29uZmlndXJhdGlvbkl0ZW0nLCdhc3NpZ25lZHRvLmRpc3BsYXlWYWx1ZSc6J2Fzc2lnbmVkdG8nLA0KICAgICAgICAgICAgICAgICAgICAgICAgJ3NvcCc6J3NvcCcsJ3Jlc29sdXRpb25TdGVwc0NsdXN0ZXJOYW1lJzond29ya2Zsb3cnLCAnY2FsbGVyLmRpc3BsYXlWYWx1ZSc6J2NhbGxlcid9DQojbWFwQ29sdW1ucw0KZm91bmRDb2x1bW5zID0gW10NCnJvdyA9IHt9DQpmb3Iga2V5IGluIGljbVBheWxvYWRNYXBwaW5nLmtleXMoKToNCiAgICBqdiA9IGljbVBheWxvYWQNCiAgICBpY21Db2x1bW4gPSBrZXkuc3BsaXQoJy4nKQ0KICAgIGZvciBpdGVtIGluIGljbUNvbHVtbjoNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAganYgPSBqdltpdGVtXQ0KICAgICAgICAgICAgcm93W2ljbVBheWxvYWRNYXBwaW5nW2tleV1dID0ganYNCiAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgYT0nTm8gbWFwcGluZycNCg0Kcm93WydudW1iZXInXSA9ICdJTkN7MH0nLmZvcm1hdChpbnQoZGF0ZXRpbWUubm93KCkucmVwbGFjZSh0emluZm89dGltZXpvbmUudXRjKS50aW1lc3RhbXAoKSkpDQpyb3dbJ3NvdXJjZSddID0gJ0xFQVAnDQpyb3dbJ3R5cGUnXSA9IGRpY3RbJ3RpY2tldFR5cGUnXQ0Kcm93WydsYXN0VXBkYXRlZCddPWRhdGV0aW1lLm5vdygpDQpyb3dbJ29wZW5lZERhdGUnXT1kYXRldGltZS5ub3coKQ0Kcm93Wyd1cGRhdGVkRGF0ZSddPWRhdGV0aW1lLm5vdygpDQpyb3dbJ2NyZWF0ZWREYXRlJ109ZGF0ZXRpbWUubm93KCkNCnJvd1snY3JlYXRlZGJ5J10gPSAnYWRtaW4nDQoNCiNMRUFQIERhdGFzb3VyY2UNCmxlYXBEU2RpY3QgPSBqc29uLmxvYWRzKGRpY3RbJ0xFQVBEYXRhU291cmNlJ10pDQoNCiMgI3NhdmUgdG8gZGINCmNvbHVtbkxpc3QgPSByb3cua2V5cygpDQp1c2VybmFtZSA9IGxlYXBEU2RpY3RbJ3VzZXJOYW1lJ10NCnBhc3N3b3JkID0gVXRpbGl0aWVzLmRlY3J5cHQobGVhcERTZGljdFsncGFzc3dvcmQnXSxsZWFwRFNkaWN0WydzYWx0J10pDQpob3N0ID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5ob3N0bmFtZQ0KcG9ydCA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkucG9ydA0KZGF0YWJhc2UgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLnBhdGgucnNwbGl0KCcvJywgMSlbMV0NCg0KY254PW15c3FsLmNvbm5lY3Rvci5jb25uZWN0KHVzZXI9dXNlcm5hbWUsIHBhc3N3b3JkPXBhc3N3b3JkLCBob3N0PWhvc3QscG9ydD1wb3J0LCBkYXRhYmFzZT1kYXRhYmFzZSkNCm15Y3Vyc29yID0gY254LmN1cnNvcigpDQp0YWJsZW5hbWU9IGRpY3RbJ2RhdGFUYWJsZSddIA0KDQpwYXJhbXNEaWN0ID0ge30NCnZhbHVlcyA9IFtdDQpmb3Iga2V5IGluIGNvbHVtbkxpc3Q6DQogICAgdmFsdWVzLmFwcGVuZChyb3dba2V5XSkNCg0KY29sdW1ucyA9ICcsICcuam9pbignYHswfWAnLmZvcm1hdChrKSBmb3IgayBpbiBjb2x1bW5MaXN0KQ0KZHVwbGljYXRlcyA9ICcsICcuam9pbignezB9PVZBTFVFUyh7MH0pJy5mb3JtYXQoaykgZm9yIGsgaW4gcm93KQ0KcGxhY2VfaG9sZGVycyA9ICcsICcuam9pbignJXMnLmZvcm1hdChrKSBmb3IgayBpbiByb3cpDQoNCnRyeToNCiAgICBxdWVyeSA9ICdJTlNFUlQgSU5UTyB7MH0gKHsxfSkgVkFMVUVTICh7Mn0pJy5mb3JtYXQodGFibGVuYW1lLCBjb2x1bW5zLCBwbGFjZV9ob2xkZXJzKQ0KICAgIHF1ZXJ5ID0gJ3swfSBPTiBEVVBMSUNBVEUgS0VZIFVQREFURSB7MX0nLmZvcm1hdChxdWVyeSwgZHVwbGljYXRlcykNCiAgICBteWN1cnNvci5leGVjdXRlbWFueShxdWVyeSwgKHZhbHVlcywpKQ0KICAgIGNueC5jb21taXQoKQ0KICAgIHByaW50KCdJbmNpZGVudCBVcGRhdGVkIDp7MH0nLmZvcm1hdChyb3dbJ251bWJlciddKSkNCmV4Y2VwdCBFeGNlcHRpb24gYXMgZXg6DQogICAgcHJpbnQoZXgpDQoNCm15Y3Vyc29yLmNsb3NlKCkNCmNueC5jbG9zZSgpDQoNCmxvZ2dlci5pbmZvKCdDb21wbGV0ZWQnKQ==","leo1311"
"ACMLP_PD72695","ACMLP_PD72695_Acme.py","aW1wb3J0IHN5cwppbXBvcnQgb3MKaW1wb3J0IG15c3FsLmNvbm5lY3RvcgppbXBvcnQganNvbgpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQpmcm9tIGxlYXAudXRpbHMuVXRpbGl0aWVzIGltcG9ydCBVdGlsaXRpZXMKaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyCmZyb20gZGF0ZXRpbWUgaW1wb3J0IHRpbWV6b25lCgoKbG9nZ2VyLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dlci5JTkZPLGZvcm1hdD0nJShhc2N0aW1lKXMgSU5GTyAlKG1lc3NhZ2UpcycsIGRhdGVmbXQ9JyV5LyVtLyVkICVIOiVNOiVTJykKCmFyZ3VtZW50cyA9c3lzLmFyZ3YKZGljdD17fQpmb3IgYXJnIGluIGFyZ3VtZW50czoKICAgIHRyeToKICAgICAgICBkaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICgnOicpLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQogICAgZXhjZXB0OgogICAgICAgIGE9J2Vycm9yJwoKCmljbVBheWxvYWQgPSBqc29uLmxvYWRzKGRpY3RbJ2luY2lkZW50UGF5bG9hZCddKQoKaWNtUGF5bG9hZE1hcHBpbmcgPSB7J251bWJlcic6J251bWJlcicsJ3Nob3J0ZGVzY3JpcHRpb24nOidzaG9ydGRlc2NyaXB0aW9uJywncHJpb3JpdHkuZGlzcGxheVZhbHVlJzoncHJpb3JpdHknLCdzdGF0ZS5kaXNwbGF5VmFsdWUnOidzdGF0ZScsCiAgICAgICAgICAgICAgICAgICAgICAgICdkZXNjcmlwdGlvbic6J2Rlc2NyaXB0aW9uJywnY2F0ZWdvcnkuZGlzcGxheVZhbHVlJzonY2F0ZWdvcnknLCdpbXBhY3QuZGlzcGxheVZhbHVlJzonaW1wYWN0JywKICAgICAgICAgICAgICAgICAgICAgICAgJ2Fzc2lnbm1lbnRncm91cC5kaXNwbGF5VmFsdWUnOidhc3NpZ25tZW50Z3JvdXAnLCdjb25maWd1cmF0aW9uaXRlbS5kaXNwbGF5VmFsdWUnOidjb25maWd1cmF0aW9uSXRlbScsJ2Fzc2lnbmVkdG8uZGlzcGxheVZhbHVlJzonYXNzaWduZWR0bycsCiAgICAgICAgICAgICAgICAgICAgICAgICdzb3AnOidzb3AnLCdyZXNvbHV0aW9uU3RlcHNDbHVzdGVyTmFtZSc6J3dvcmtmbG93JywgJ2NhbGxlci5kaXNwbGF5VmFsdWUnOidjYWxsZXInfQojbWFwQ29sdW1ucwpmb3VuZENvbHVtbnMgPSBbXQpyb3cgPSB7fQpmb3Iga2V5IGluIGljbVBheWxvYWRNYXBwaW5nLmtleXMoKToKICAgIGp2ID0gaWNtUGF5bG9hZAogICAgaWNtQ29sdW1uID0ga2V5LnNwbGl0KCcuJykKICAgIGZvciBpdGVtIGluIGljbUNvbHVtbjoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGp2ID0ganZbaXRlbV0KICAgICAgICAgICAgcm93W2ljbVBheWxvYWRNYXBwaW5nW2tleV1dID0ganYKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIGE9J05vIG1hcHBpbmcnCgoKCnJvd1snc291cmNlJ10gPSAnTEVBUCcKcm93Wyd0eXBlJ10gPSBkaWN0Wyd0aWNrZXRUeXBlJ10Kcm93WydsYXN0VXBkYXRlZCddPWRhdGV0aW1lLm5vdygpCnJvd1snb3BlbmVkRGF0ZSddPWRhdGV0aW1lLm5vdygpCnJvd1sndXBkYXRlZERhdGUnXT1kYXRldGltZS5ub3coKQpyb3dbJ2NyZWF0ZWREYXRlJ109ZGF0ZXRpbWUubm93KCkKcm93WydjcmVhdGVkYnknXSA9ICdhZG1pbicKCiNMRUFQIERhdGFzb3VyY2UKbGVhcERTZGljdCA9IGpzb24ubG9hZHMoZGljdFsnTEVBUERhdGFTb3VyY2UnXSkKCiMgI3NhdmUgdG8gZGIKY29sdW1uTGlzdCA9IHJvdy5rZXlzKCkKdXNlcm5hbWUgPSBsZWFwRFNkaWN0Wyd1c2VyTmFtZSddCnBhc3N3b3JkID0gVXRpbGl0aWVzLmRlY3J5cHQobGVhcERTZGljdFsncGFzc3dvcmQnXSxsZWFwRFNkaWN0WydzYWx0J10pCmhvc3QgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLmhvc3RuYW1lCnBvcnQgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLnBvcnQKZGF0YWJhc2UgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLnBhdGgucnNwbGl0KCcvJywgMSlbMV0KCmNueD1teXNxbC5jb25uZWN0b3IuY29ubmVjdCh1c2VyPXVzZXJuYW1lLCBwYXNzd29yZD1wYXNzd29yZCwgaG9zdD1ob3N0LHBvcnQ9cG9ydCwgZGF0YWJhc2U9ZGF0YWJhc2UpCm15Y3Vyc29yID0gY254LmN1cnNvcigpCnRhYmxlbmFtZT0gZGljdFsnZGF0YVRhYmxlJ10gCgpwYXJhbXNEaWN0ID0ge30KdmFsdWVzID0gW10KZm9yIGtleSBpbiBjb2x1bW5MaXN0OgogICAgdmFsdWVzLmFwcGVuZChyb3dba2V5XSkKCmNvbHVtbnMgPSAnLCAnLmpvaW4oJ2B7MH1gJy5mb3JtYXQoaykgZm9yIGsgaW4gY29sdW1uTGlzdCkKZHVwbGljYXRlcyA9ICcsICcuam9pbignezB9PVZBTFVFUyh7MH0pJy5mb3JtYXQoaykgZm9yIGsgaW4gcm93KQpwbGFjZV9ob2xkZXJzID0gJywgJy5qb2luKCclcycuZm9ybWF0KGspIGZvciBrIGluIHJvdykKCnRyeToKICAgIHF1ZXJ5ID0gJ0lOU0VSVCBJTlRPIHswfSAoezF9KSBWQUxVRVMgKHsyfSknLmZvcm1hdCh0YWJsZW5hbWUsIGNvbHVtbnMsIHBsYWNlX2hvbGRlcnMpCiAgICBxdWVyeSA9ICd7MH0gT04gRFVQTElDQVRFIEtFWSBVUERBVEUgezF9Jy5mb3JtYXQocXVlcnksIGR1cGxpY2F0ZXMpCiAgICBteWN1cnNvci5leGVjdXRlbWFueShxdWVyeSwgKHZhbHVlcywpKQogICAgY254LmNvbW1pdCgpCiAgICBwcmludCgnSW5jaWRlbnQgVXBkYXRlZCA6ezB9Jy5mb3JtYXQocm93WydudW1iZXInXSkpCmV4Y2VwdCBFeGNlcHRpb24gYXMgZXg6CiAgICBwcmludChleCkKCm15Y3Vyc29yLmNsb3NlKCkKY254LmNsb3NlKCkKCmxvZ2dlci5pbmZvKCdDb21wbGV0ZWQnKQoKCgoKCgoKCg==","leo1311"
"LEOBTM_S61592","LEOBTM_S61592_leo1311.py","ZnJvbSBweXNwYXJrLnNxbCBpbXBvcnQgU3BhcmtTZXNzaW9uDQoNCmltcG9ydCByZXF1ZXN0cw0KDQppbXBvcnQgc3lzDQoNCmltcG9ydCBteXNxbC5jb25uZWN0b3INCg0KZnJvbSBweXNwYXJrLnNxbC5mdW5jdGlvbnMgaW1wb3J0ICoNCg0KZnJvbSBweXNwYXJrLnNxbC50eXBlcyBpbXBvcnQgKg0KDQppbXBvcnQganNvbg0KDQpmcm9tIHVybGxpYi5wYXJzZSBpbXBvcnQgcXVvdGVfcGx1cywgdXJscGFyc2UNCg0KZnJvbSBsZWFwLnV0aWxzLlV0aWxpdGllcyBpbXBvcnQgVXRpbGl0aWVzDQoNCmltcG9ydCBkYXRldGltZQ0KDQppbXBvcnQgbG9nZ2luZyBhcyBsb2dnZXINCg0KaW1wb3J0IHVybGxpYjMNCg0KaW1wb3J0IG9zDQoNCmltcG9ydCBtYXRoDQoNCnVybGxpYjMuZGlzYWJsZV93YXJuaW5ncygpDQoNCmxvZ2dlci5iYXNpY0NvbmZpZyhsZXZlbD1sb2dnZXIuSU5GTyxmb3JtYXQ9JyUoYXNjdGltZSlzIElORk8gJShtZXNzYWdlKXMnLCBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycpDQoNCmFyZ3VtZW50cyA9c3lzLmFyZ3YNCg0KbG9nZ2VyLmluZm8oYXJndW1lbnRzKQ0KDQpkaWN0PXt9DQoNCmZvciBhcmcgaW4gYXJndW1lbnRzOg0KDQogICAgIHRyeToNCg0KICAgICAgICAgZGljdFthcmcuc3BsaXQoJzonKVswXV0gPSAoJzonKS5qb2luKGFyZy5zcGxpdCgnOicpWzE6XSkNCg0KICAgICAgICAgDQoNCiAgICAgZXhjZXB0Og0KDQogICAgICAgICBhPSdlcnJvcicNCg0KI1NOb3cgRGF0YXNvdXJjZQ0KDQpzbm93ZHMgPSBkaWN0WydTbm93RGF0YVNvdXJjZSddDQoNCnNub3dEU2RpY3Q9anNvbi5sb2Fkcyhzbm93ZHMpDQoNCg0KDQojIFNldCB0aGUgcmVxdWVzdCBwYXJhbWV0ZXJzDQoNCnVybCA9IHNub3dEU2RpY3RbJ1VybCddDQoNCnVzZXIgPSBzbm93RFNkaWN0WydBdXRoRGV0YWlscyddWyd1c2VybmFtZSddDQoNCnB3ZCA9IFV0aWxpdGllcy5kZWNyeXB0KHNub3dEU2RpY3RbJ0F1dGhEZXRhaWxzJ11bJ3Bhc3N3b3JkJ10sIHNub3dEU2RpY3RbJ3NhbHQnXSkNCg0KYXBpID0gZGljdFsnYXBpJ10NCg0Kc25vd3RhYmxlPWRpY3RbJ3Nub3dUYWJsZSddDQoNCnRhYmxlbmFtZSA9IGRpY3RbJ2RhdGFUYWJsZSddDQoNCnBhcmFtcyA9ZGljdFsncGFyYW1zJ10NCg0KbGltaXQgPSBkaWN0WydsaW1pdCddDQoNCm9mZnNldCA9IGRpY3RbJ29mZnNldCddDQoNCmFwcGxpY2F0aW9uSWQgPSBkaWN0WydhcHBsaWNhdGlvbklkJ10NCg0KYXBwSWQgPSBpbnQoYXBwbGljYXRpb25JZCkNCg0KcmVzdWx0Q291bnQgPSBpbnQobGltaXQpDQoNCg0KDQoNCg0KZGVmIHByb2Nlc3NfcGFydGl0aW9uKGl0ZXJhdG9yKToNCg0KICBsb2dnZXIuZXJyb3IoJzAnKQ0KDQogIGNueCA9IG15c3FsLmNvbm5lY3Rvci5jb25uZWN0KHVzZXI9dXNlcm5hbWUsIHBhc3N3b3JkPXBhc3N3b3JkLCBob3N0PWhvc3QscG9ydD1wb3J0LCBkYXRhYmFzZT1kYXRhYmFzZSkNCg0KICBteWN1cnNvciA9IGNueC5jdXJzb3IoKQ0KDQogIGZvciByb3cgaW4gaXRlcmF0b3I6DQoNCiAgICB0cnk6DQoNCiAgICAgICAgbG9nZ2VyLmVycm9yKCcxJykNCg0KICAgICAgICBwYXJhbXNEaWN0ID0ge30NCg0KICAgICAgICB2YWx1ZXMgPSBbXQ0KDQogICAgICAgIGZvciBpIGluIHJhbmdlKDAsIGxlbihjb2x1bW5MaXN0KSk6DQoNCiAgICAgICAgICBwYXJhbXNEaWN0W2NvbHVtbkxpc3RbaV1dID0gcm93W2ldDQoNCiAgICAgICAgICB2YWx1ZXMuYXBwZW5kKHJvd1tpXSkNCg0KICAgICAgICBsb2dnZXIuaW5mbygnMicpICANCg0KICAgICAgICBjb2x1bW5zID0gJywgJy5qb2luKCdgezB9YCcuZm9ybWF0KGspIGZvciBrIGluIHBhcmFtc0RpY3QpDQoNCiAgICAgICAgZHVwbGljYXRlcyA9ICcsICcuam9pbignezB9PVZBTFVFUyh7MH0pJy5mb3JtYXQoaykgZm9yIGsgaW4gcGFyYW1zRGljdCkNCg0KICAgICAgICBwbGFjZV9ob2xkZXJzID0gJywgJy5qb2luKCclcycuZm9ybWF0KGspIGZvciBrIGluIHBhcmFtc0RpY3QpDQoNCiAgICAgICAgcXVlcnkgPSAnSU5TRVJUIElOVE8gezB9ICh7MX0pIFZBTFVFUyAoezJ9KScuZm9ybWF0KHRhYmxlbmFtZSwgY29sdW1ucywgcGxhY2VfaG9sZGVycykNCg0KICAgICAgICBsb2dnZXIuZXJyb3IocXVlcnkpDQoNCiAgICAgICAgcXVlcnkgPSAnezB9IE9OIERVUExJQ0FURSBLRVkgVVBEQVRFIHsxfScuZm9ybWF0KHF1ZXJ5LCBkdXBsaWNhdGVzKQ0KDQogICAgICAgIG15Y3Vyc29yLmV4ZWN1dGVtYW55KHF1ZXJ5LCAodmFsdWVzLCkpDQoNCiAgICAgICAgY254LmNvbW1pdCgpDQoNCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGV4Og0KDQogICAgICAgIGxvZ2dlci5lcnJvcihleCkNCg0KICAgICAgICBwcmludChleCkNCg0KICAgICNsb2dnZXIuaW5mbyhyb3cpDQoNCiAgbXljdXJzb3IuY2xvc2UoKQ0KDQogIGNueC5jbG9zZSgpDQoNCiAgDQoNCiAgDQoNCiMgU2V0IHByb3BlciBoZWFkZXJzDQoNCmhlYWRlcnMgPSB7J0NvbnRlbnQtVHlwZSc6J2FwcGxpY2F0aW9uL2pzb24nLCdBY2NlcHQnOidhcHBsaWNhdGlvbi9qc29uJ30NCg0KI2FkZCBmaWx0ZXIgdG8gZ2V0IHJlY29yZHMgdXBkYXRlZCBpbiBsYXN0IDI0ICBob3Vycw0KDQppZiBkaWN0WydmdWxsTG9hZCddID09ICdUcnVlJzoNCg0KICAgIGZyb21EYXRlID0gZGF0ZXRpbWUuZGF0ZXRpbWUoMjAxNywxLDEpDQoNCmVsc2U6DQoNCiAgICB0cnk6DQoNCiAgICAgICAgdGltZWRlbHRhID0gZmxvYXQoZGljdFsnVGltZURlbHRhKGhycyknXSkNCg0KICAgIGV4Y2VwdDoNCg0KICAgICAgICB0aW1lZGVsdGEgPSAxICMgZGVmYXVsdCAxIGhvdXINCg0KICAgIGxvZ2dlci5pbmZvKCdGZXRjaGluZyByZWNvcmRzIGZvciBsYXN0IHswfSBocnMnLmZvcm1hdCh0aW1lZGVsdGEpKQ0KDQogICAgZnJvbURhdGUgPSAgZGF0ZXRpbWUuZGF0ZXRpbWUudXRjbm93KCkgLSAgZGF0ZXRpbWUudGltZWRlbHRhKGhvdXJzID0gdGltZWRlbHRhKQ0KDQp0aW1lc3RhbXBQYXJhbSA9ICdzeXNfdXBkYXRlZF9vbj49Jytmcm9tRGF0ZS5zdHJmdGltZSgnJVktJW0tJWQgJUg6JU06JVMnKQ0KDQpwYXJhbXMgPSBwYXJhbXMgKyAnJnN5c3Bhcm1fcXVlcnk9JyArIHF1b3RlX3BsdXModGltZXN0YW1wUGFyYW0pDQoNCiMgRG8gdGhlIEhUVFAgcmVxdWVzdA0KDQp3aGlsZShyZXN1bHRDb3VudD09aW50KGxpbWl0KSk6DQoNCiAgICB1cmwgPSB1cmwrYXBpK3Nub3d0YWJsZSsnPycrcGFyYW1zKycmc3lzcGFybV9saW1pdD0nK3N0cihsaW1pdCkrJyZzeXNwYXJtX29mZnNldD0nK3N0cihvZmZzZXQpDQoNCiAgICBwcm94eURpY3QgPXt9DQoNCiAgICBpZiBkaWN0WydzZXRQcm94eSddID09ICdUcnVlJzoNCg0KICAgICAgICBwcm94eURpY3QgPSB7DQoNCiAgICAgICAgICAgICAgICAgICAgICAnaHR0cCcgIDogb3MuZW52aXJvblsnSFRUUF9QUk9YWSddLA0KDQogICAgICAgICAgICAgICAgICAgICAgJ2h0dHBzJyA6IG9zLmVudmlyb25bJ0hUVFBTX1BST1hZJ10gICAgICANCg0KICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgIA0KDQogICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQodXJsLCBhdXRoPSh1c2VyLCBwd2QpLCBoZWFkZXJzPWhlYWRlcnMgLHByb3hpZXM9cHJveHlEaWN0KQ0KDQogICAgbG9nZ2VyLmluZm8ocmVzcG9uc2UpDQoNCiAgICAjIENoZWNrIGZvciBIVFRQIGNvZGVzIG90aGVyIHRoYW4gMjAwDQoNCiAgICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSAhPSAyMDA6DQoNCiAgICAgICAgbG9nZ2VyLmluZm8oJ1N0YXR1czonLCByZXNwb25zZS5zdGF0dXNfY29kZSwgJ0hlYWRlcnM6JywgcmVzcG9uc2UuaGVhZGVycywgJ0Vycm9yIFJlc3BvbnNlOicscmVzcG9uc2UuanNvbigpKQ0KDQogICAgICAgIGV4aXQoKQ0KDQogICAgIyBEZWNvZGUgdGhlIEpTT04gcmVzcG9uc2UgaW50byBhIGRpY3Rpb25hcnkgYW5kIHVzZSB0aGUgZGF0YQ0KDQogICAgZGF0YSA9IHJlc3BvbnNlLmpzb24oKQ0KDQogICAgbG9nZ2VyLmluZm8oJ1JlY29yZHMgRmV0Y2hlZCB7MH0nLmZvcm1hdCggbGVuKGRhdGFbJ3Jlc3VsdCddKSkpDQoNCiAgICAjbG9nZ2VyLmluZm8oZGF0YSkNCg0KICAgIGJ0bSA9IFtdDQoNCiAgICBmb3Igcm93IGluIGRhdGFbJ3Jlc3VsdCddOg0KDQogICAgICAgIGJ0bS5hcHBlbmQoeydjYXNlX2lkJzpyb3dbJ251bWJlciddLCdjYXNlSnNvbic6c3RyKHJvdyksJ2V4dGVybmFsX2lkJzpyb3dbJ3N5c19pZCddLCdwcmlvcml0eSc6cm93Wydwcmlvcml0eSddLCdjYXRlZ29yeSc6cm93WydjYXRlZ29yeSddfSkNCg0KICAgICAgICBsb2dnZXIuZXJyb3Iocm93KQ0KDQogICAgc3BhcmsgPSBTcGFya1Nlc3Npb24uYnVpbGRlci5jb25maWcoJ3NwYXJrLnVpLnNob3dDb25zb2xlUHJvZ3Jlc3MnLCAnZmFsc2UnKS5nZXRPckNyZWF0ZSgpDQoNCiAgICBkZiA9IHNwYXJrLmNyZWF0ZURhdGFGcmFtZShidG0pDQoNCiAgICBkZiA9IGRmLndpdGhDb2x1bW4oJ3N0YXR1cycsbGl0KCdFeHRyYWN0ZWQnKSkNCg0KICAgIGRmID0gZGYud2l0aENvbHVtbignc291cmNlJyxsaXQoJ1NOT1cnKSkNCg0KICAgIGRmID0gZGYud2l0aENvbHVtbignYXBwbGljYXRpb25faWQnLGxpdChhcHBJZCkpDQoNCiAgICBjb2x1bW5MaXN0ID0gZGYuY29sdW1ucw0KDQogICAgbGVhcGRzID0gZGljdFsnTEVBUERhdGFTb3VyY2UnXQ0KDQogICAgbGVhcERTZGljdCA9anNvbi5sb2FkcyhsZWFwZHMpDQoNCiAgICANCg0KICAgIHVzZXJuYW1lID0gbGVhcERTZGljdFsndXNlck5hbWUnXQ0KDQogICAgcGFzc3dvcmQgPSBVdGlsaXRpZXMuZGVjcnlwdChsZWFwRFNkaWN0WydwYXNzd29yZCddLGxlYXBEU2RpY3RbJ3NhbHQnXSkNCg0KICAgIGhvc3QgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLmhvc3RuYW1lDQoNCiAgICBwb3J0ID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5wb3J0DQoNCiAgICBkYXRhYmFzZSA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkucGF0aC5yc3BsaXQoJy8nLCAxKVsxXQ0KDQogICAgaWYocmVzdWx0Q291bnQgPT0gMCk6DQoNCiAgICAgICAgYnJlYWs7DQoNCiAgICBkZiA9IGRmLnJlcGFydGl0aW9uKG1hdGguZmxvb3IocmVzdWx0Q291bnQvKGludChsaW1pdCkvMTApKSkNCg0KICAgIGxvZ2dlci5pbmZvKCdJbnNlcnRpbmcgUmVjb3JkcyBpbiBEQicpDQoNCiAgICBkZi5mb3JlYWNoUGFydGl0aW9uKHByb2Nlc3NfcGFydGl0aW9uKQ0KDQogICAgZGYuc2hvdygpDQoNCiAgICByZXN1bHRDb3VudCA9IGxlbihkYXRhWydyZXN1bHQnXSkNCg0KICAgIG9mZnNldCA9IG9mZnNldCArIGxpbWl0DQoNCmxvZ2dlci5pbmZvKCdDb21wbGV0ZWQnKQ0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQo=","leo1311"
"LEOHP_LR25645","LEOHP_LR25645_leo1311.py","aW1wb3J0IHBhbmRhcyBhcyBwZA0KaW1wb3J0IG15c3FsLmNvbm5lY3Rvcg0KaW1wb3J0IGpzb24NCmltcG9ydCBzeXMNCmZyb20gbGVhcC51dGlscy5VdGlsaXRpZXMgaW1wb3J0IFV0aWxpdGllcw0KZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHF1b3RlX3BsdXMsIHVybHBhcnNlDQppbXBvcnQgbG9nZ2luZw0KDQpsb2dnaW5nLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dpbmcuSU5GTykNCmFyZ3VtZW50cyA9IHN5cy5hcmd2DQpkaWN0ID0ge30NCmZvciBhcmcgaW4gYXJndW1lbnRzOg0KICAgIHRyeToNCiAgICAgICAgZGljdFthcmcuc3BsaXQoJzonKVswXV0gPSAoJzonKS5qb2luKGFyZy5zcGxpdCgnOicpWzE6XSkNCiAgICBleGNlcHQ6DQogICAgICAgIGEgPSAnZXJyb3InDQpwcmludChkaWN0KQ0KbGVhcGRzID0gZGljdFsnbGVhcGRzJ10NCmxlYXBEU2RpY3QgPSBqc29uLmxvYWRzKGxlYXBkcykNCnVzZXJuYW1lID0gbGVhcERTZGljdFsndXNlck5hbWUnXQ0KcGFzc3dvcmQgPSBVdGlsaXRpZXMuZGVjcnlwdChsZWFwRFNkaWN0WydwYXNzd29yZCddLCBsZWFwRFNkaWN0WydzYWx0J10pDQpob3N0ID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5ob3N0bmFtZQ0KcG9ydCA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkucG9ydA0KZGF0YWJhc2UgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLnBhdGgucnNwbGl0KCcvJywgMSlbMV0NCmNvbm5lY3Rpb24gPSBteXNxbC5jb25uZWN0b3IuY29ubmVjdCh1c2VyPXVzZXJuYW1lLCBwYXNzd29yZD1wYXNzd29yZCwgaG9zdD1ob3N0LCBwb3J0PXBvcnQsIGRhdGFiYXNlPWRhdGFiYXNlKQ0KbXljdXJzb3IgPSBjb25uZWN0aW9uLmN1cnNvcigpDQoNCnF1ZXJ5MSA9ICcnJ1NFTEVDVCBjaS5pZCBBUyBjaWlkLGNpLmNpX25hbWUsdGt0LnR5cGUsIENPVU5UKCopIEFTIG5ld3ZhbHVlIEZST00gaHBlX3RpY2tldHMgdGt0IEpPSU4gY2ZtX2NvbmZpZ3VyYXRpb25faXRlbSBjaSBPTg0KdGt0LmNvbmZpZ3VyYXRpb25JdGVtPVRSSU0oU1VCU1RSSU5HX0lOREVYKGNpLmNpX25hbWUsJ18nLDEpKSAgV0hFUkUgdGt0LnN0YXRlIElOICgnT3BlbicsJ0luIFByb2dyZXNzJywnT24gSG9sZCcsJ05ldycpDQpBTkQgdGt0LnR5cGU9J0FsZXJ0JyBBTkQgY2kucHJvamVjdF9pZD0nNCcgQU5EIGNpLmNpX25hbWUgPSAnQWRkaXNvbiBOR0lUIC8gRUNQX0FsZXJ0cycgR1JPVVAgQlkgY2kuY2lfbmFtZSx0a3QudHlwZSxjaS5pZCcnJw0KbXljdXJzb3IuZXhlY3V0ZShxdWVyeTEpDQpxdWVyeTFkYXRhID0gbXljdXJzb3IuZmV0Y2hhbGwoKQ0KcXVlcnkxZGYgPSBwZC5EYXRhRnJhbWUuZnJvbV9yZWNvcmRzKHF1ZXJ5MWRhdGEsIGNvbHVtbnM9WydjaWlkJywgJ2NpX25hbWUnLCAndHlwZScsICduZXd2YWx1ZSddKQ0KDQpxdWVyeTIgPSAnJydTRUxFQ1Qgc3ZnLiosY2ltYXAuY2lfaWQgRlJPTSBiY2Nfc3ZnX2NpX21hcHBpbmcgY2ltYXAgIEpPSU4gYmNjX3N2Z19kYXNoYm9hcmRfbWFwcGluZyBkbWFwIE9ODQpjaW1hcC5zdmdfZGFzaGJvYXJkX2lkPWRtYXAuaWQgIEpPSU4gYmNjX3N2Z19lbGVtZW50cyBzdmcgT04gY2ltYXAuZWxlbWVudF9pZD1zdmcuZWxlbWVudF9pZCBBTkQgZG1hcC5zdmdfaWQ9c3ZnLnN2Z19pZA0KSk9JTiBjZm1fY29uZmlndXJhdGlvbl9pdGVtIGNpIE9ODQpjaS5pZD1jaW1hcC5jaV9pZCBXSEVSRSBzdmcucHJvamVjdF9pZD0nNCcgQU5EIGNpbWFwLnByb2plY3RfaWQ9JzQnIEFORCBkbWFwLnByb2plY3RfaWQ9JzQnIEFORCBjaS5jaV9uYW1lID0gJ0FkZGlzb24gTkdJVCAvIEVDUF9BbGVydHMnICcnJw0KbXljdXJzb3IuZXhlY3V0ZShxdWVyeTIpDQpxdWVyeTJkYXRhID0gbXljdXJzb3IuZmV0Y2hhbGwoKQ0KcXVlcnkyZGYgPSBwZC5EYXRhRnJhbWUuZnJvbV9yZWNvcmRzKHF1ZXJ5MmRhdGEsIGNvbHVtbnM9WydpZCcsJ2JvcmRlcl90cnVlJywnYm94Y29sb3JfdHJ1ZScsJ2RlZmF1bHRfYm9yZGVyJywnZGVmYXVsdF9maWxsX2NvbG9yJywnZGVmYXVsdF9mb250JywnZGVmYXVsdF92aXNpYmlsaXR5JywnZWxlbWVudF9pZCcsJ2ZpbGxfY29sb3JfdHJ1ZScsJ2ZvbnRfdHJ1ZScsJ3J1bnRpbWVfYm9yZGVyJywncnVudGltZV9ib3hjb2xvcicsJ3J1bnRpbWVfZmlsbF9jb2xvcicsJ3J1bnRpbWVfZm9udCcsJ3J1bnRpbWVfdGV4dCcsJ3J1bnRpbWVfdmlzaWJpbGl0eScsJ3Zpc2liaWxpdHlfdHJ1ZScsJ3Byb2plY3RfaWQnLCdzdmdfaWQnLCdiYWNrZ3JvdW5kX2NvbG9yX3NldCcsJ2JhY2tncm91bmRfY29sb3InLCdjaV9pZCddKQ0KDQpteWN1cnNvci5leGVjdXRlKA0KICAgICcnJ1VQREFURSBiY2Nfc3ZnX2VsZW1lbnRzIFNFVCBydW50aW1lX2ZpbGxfY29sb3I9MSBXSEVSRSBlbGVtZW50X2lkIElOICgnc2hhcGUzNjEwMDAyLTQ0MCcsJ3NoYXBlMzItODknKSAnJycpDQpteWN1cnNvci5leGVjdXRlKA0KICAgICcnJ1VQREFURSBiY2Nfc3ZnX2VsZW1lbnRzIFNFVCBmaWxsX2NvbG9yX3RydWU9J2dyZWVuJyBXSEVSRSBlbGVtZW50X2lkIElOICgnc2hhcGUzNjEwMDAyLTQ0MCcsJ3NoYXBlMzItODknKSAnJycpDQpteWN1cnNvci5leGVjdXRlKA0KICAgICcnJ1VQREFURSBiY2Nfc3ZnX2VsZW1lbnRzIFNFVCBydW50aW1lX3RleHQ9JzAnIFdIRVJFIGVsZW1lbnRfaWQgSU4gKCdzaGFwZTM2MTAwMDItNDQwJywnc2hhcGUzMi04OScpICcnJykNCmRhdGFzZXQgPSBxdWVyeTFkZi5tZXJnZShxdWVyeTJkZiwgbGVmdF9vbj0nY2lpZCcsIHJpZ2h0X29uPSdjaV9pZCcsIGhvdz0ncmlnaHQnKQ0KZGF0YXNldC5maWxsbmEoeydjaWlkJzogZGF0YXNldFsnY2lfaWQnXX0sIGlucGxhY2U9VHJ1ZSkNCmRhdGFzZXQuaW5mbygpDQpwcmludCgnZGF0YXNldCBsaW5lIDU0JywgZGF0YXNldFsnbmV3dmFsdWUnXSkNCnN1bW1hdGlvbiA9IDANCmZvciBpbmRleCwgcm93IGluIGRhdGFzZXQuaXRlcnJvd3MoKToNCiAgICBpZiBub3QgcGQuaXNuYShyb3dbJ25ld3ZhbHVlJ10pOg0KICAgICAgICBzdW1tYXRpb24gKz0gcm93WyduZXd2YWx1ZSddDQogICAgICAgIHByaW50KCdzdW1tYXRpb24nLCBzdW1tYXRpb24pDQpkYXRhc2V0WydydW50aW1lX2ZpbGxfY29sb3InXSA9IDENCmRhdGFzZXRbJ2ZpbGxfY29sb3JfdHJ1ZSddID0gZGF0YXNldFsnbmV3dmFsdWUnXS5hcHBseShsYW1iZGEgeDogJ3JlZCcgaWYgeCA+IDAgZWxzZSAnZ3JlZW4nKQ0KcHJpbnQoJ2RhdGFzZXRmaWxsY29sb3J0cnVlJywgZGF0YXNldFsnZmlsbF9jb2xvcl90cnVlJ10pDQpyb3dfbGlzdCA9IFtdDQpmb3IgaW5kZXgsIHJvdyBpbiBkYXRhc2V0Lml0ZXJyb3dzKCk6DQogICAgcm93X2RpY3QgPSByb3cudG9fZGljdCgpDQpyb3dfbGlzdC5hcHBlbmQocm93X2RpY3QpDQpmb3IgZiBpbiByb3dfbGlzdDoNCiAgICBpZiBmWyduZXd2YWx1ZSddIGlzIG5vdCBOb25lOg0KICAgICAgICBkYXRhc2V0WydydW50aW1lX3RleHQnXSA9IHN0cihzdW1tYXRpb24gLy8gMikNCnByaW50KCdzdW1tYXRpb24gbGluZSA3MicsIHN1bW1hdGlvbikNCnByaW50KCdsaW5lIDczICcsIGRhdGFzZXRbJ3J1bnRpbWVfdGV4dCddKQ0KIyB3ID0gZGF0YXNldC5zb3J0X3ZhbHVlcygnY2lfbmFtZScpLmdyb3VwYnkoWydjaWlkJ10pWydjaV9uYW1lJ10udHJhbnNmb3JtKCdjdW1jb3VudCcpDQpkYXRhc2V0WydjaWlkJ10gPSBkYXRhc2V0WydjaWlkJ10uZmlsbG5hKGRhdGFzZXRbJ2NpX2lkJ10pDQojIGRhdGFzZXRbJ2ZpbGxfY29sb3JfdHJ1ZSddID0gdw0KZGF0YXNldCA9IGRhdGFzZXQuZHJvcChjb2x1bW5zPVsnY2lpZCcsICdjaV9uYW1lJywgJ25ld3ZhbHVlJywgJ2NpX2lkJ10pDQpwcmludCgncnVudGltZV90ZXh0X3ZhbHVlJywgZGF0YXNldFsncnVudGltZV90ZXh0J10udmFsdWVzKQ0KZWxlbWVudF9pZHMgPSBkYXRhc2V0WydlbGVtZW50X2lkJ10uYXN0eXBlKHN0cikudG9saXN0KCkNCnJ1bl90aW1lX3ZhbHVlcyA9IGRhdGFzZXRbJ3J1bnRpbWVfdGV4dCddLnRvbGlzdCgpDQpxdWVyeV9lbGVtZW50X3RleHQgPSBmJ1VQREFURSBiY2Nfc3ZnX2VsZW1lbnRzIFNFVCBmaWxsX2NvbG9yX3RydWUgPSA/LCBydW50aW1lX3RleHQgPSA/IFdIRVJFIGVsZW1lbnRfaWQgPSA/Jw0KIyBwbGFjZWhvbGRlcnMgPSAnLCcuam9pbihgJz8nYCogbGVuKGVsZW1lbnRfaWRzKSkNCmZvciBlbGVtZW50X2lkLCBydW50aW1lX3RleHRfdmFsdWUgaW4gemlwKGVsZW1lbnRfaWRzLCBydW5fdGltZV92YWx1ZXMpOg0KICAgIHByaW50KHJ1bnRpbWVfdGV4dF92YWx1ZSxlbGVtZW50X2lkLCdlbmRyZXN1bHQnKQ0KICAgIHF1ZXJ5ID0gZicnJ1VQREFURSBiY2Nfc3ZnX2VsZW1lbnRzIFNFVCBmaWxsX2NvbG9yX3RydWUgPSAncmVkJywgcnVudGltZV90ZXh0ID0gJ3tydW50aW1lX3RleHRfdmFsdWV9JyBXSEVSRSBlbGVtZW50X2lkID0gJ3tlbGVtZW50X2lkfScgJycnDQogICAgbXljdXJzb3IuZXhlY3V0ZShxdWVyeSkNCm15Y3Vyc29yLmNsb3NlKCkNCmNvbm5lY3Rpb24uY29tbWl0KCkNCmNvbm5lY3Rpb24uY2xvc2UoKQ0KcHJpbnQoJ2NvbXBsZXRlZCcp","leo1311"
"LEOCP_SG46231","LEOCP_SG46231_leo1311.py","aW1wb3J0IGpzb24KZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUsIHRpbWVkZWx0YSwgZGF0ZQppbXBvcnQgbG9nZ2luZyBhcyBsb2dnZXIKaW1wb3J0IHJlcXVlc3RzCmltcG9ydCBteXNxbC5jb25uZWN0b3IgYXMgY29ubmVjdG9yCmltcG9ydCBvcwpmcm9tIHJlcXVlc3RzLm1vZGVscyBpbXBvcnQgUHJlcGFyZWRSZXF1ZXN0CmltcG9ydCB0aW1lCmltcG9ydCByZQoKCiNyZXF1aXJlZCBwcm94eSB0byBnZXQgcmVzcG9uc2UgZnJvbSBhcGkKb3MuZW52aXJvblsnSFRUUF9QUk9YWSddPScnCm9zLmVudmlyb25bJ0hUVFBTX1BST1hZJ109JycKCmxvZ2dlci5iYXNpY0NvbmZpZyhsZXZlbD1sb2dnZXIuSU5GTywgZm9ybWF0PSclKGFzY3RpbWUpcyBJTkZPICUobWVzc2FnZSlzJywgZGF0ZWZtdD0nJXkvJW0vJWQgJUg6JU06JVMnKQoKI2Z1Y3Rpb24gdG8gdXBkYXRlIHRoZSBzdGF0dXMgaW4gc2VydmljZSBub3cKZGVmIHN0YXR1c19zZXJ2aWNlbm93KHN5c19pZCk6CiAgICB1cmwgPSAnaHR0cHM6Ly9pbmZvc3lzcTNkZXYxLnNlcnZpY2Utbm93LmNvbS9hcGkvbm93L3RhYmxlL2luY2lkZW50Lycrc3lzX2lkCgogICAgaGVhZGVycyA9IHsnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLCAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nfQoKICAgIHBheWxvYWQgPSB7J3N0YXRlJzogJ0Nsb3NlZCd9CgogICAgcmVzID0gcmVxdWVzdHMucHV0KAogICAgICAgIHVybCwKICAgICAgICBhdXRoPSgnSUNTUF9pY2FwX3VzZXInLCAncXdlcjEyMzQnKSwKICAgICAgICBoZWFkZXJzPWhlYWRlcnMsCiAgICAgICAgZGF0YT1qc29uLmR1bXBzKHBheWxvYWQpLAogICAgKQoKI3N0YXJ0IHRpbWUgZm9yIHRoZSB1cmwgdXRjCmN1cnJlbnRfdGltZSA9IGRhdGV0aW1lLnV0Y25vdygpCiNzdGFydCA9IGRhdGV0aW1lLmRhdGV0aW1lKGN1cnJlbnRfdGltZS55ZWFyLCBjdXJyZW50X3RpbWUubW9udGgsIGN1cnJlbnRfdGltZS5kYXksIGN1cnJlbnRfdGltZS5ob3VyLCBjdXJyZW50X3RpbWUubWludXRlLCBjdXJyZW50X3RpbWUuc2Vjb25kLCB0emluZm8gPSBOb25lKQojc3RhcnRfdGltZSA9IGN1cnJlbnRfdGltZS5zdHJmdGltZSgnJVktJW0tJWQgJUg6JU06JVMnKQplbmQgPSBjdXJyZW50X3RpbWUuaXNvZm9ybWF0KCkgKyAnWicKI3ByaW50KGVuZCkKCgojZW5kIHRpbWUgZm9yIHVybAp0ZW5fbWluX2FnbyA9IGN1cnJlbnRfdGltZSAtIHRpbWVkZWx0YShtaW51dGVzPTEwKQojZW5kX3RpbWUgPSB0ZW5fbWluX2Fnby5zdHJmdGltZSgnJVktJW0tJWQgJUg6JU06JVMnKQpzdGFydCA9IHRlbl9taW5fYWdvLmlzb2Zvcm1hdCgpKydaJwojcHJpbnQodHlwZSh0ZW5fbWluX2FnbykpCiNwcmludChzdGFydCkKCgojIHJlYWQganNvbiBmaWxlIGFuZCBleHRyYWN0IHRoZSB2YWx1ZXMgd2hpY2ggaXMgbGlzdCBvZiBsaXN0CnVybCA9ICdodHRwOi8vdmljdHNlY3N0MjY6OTA5MC9hcGkvdjEvcXVlcnlfcmFuZ2UnCgpwYXJhbXMgPSB7J3F1ZXJ5JzoncHJvY2Vzc19jcHVfdXNhZ2UnLCAnc3RhcnQnOnN0YXJ0LCAnZW5kJzplbmQsJ3N0ZXAnOicxMHMnfQoKIyByZXEgPSBQcmVwYXJlZFJlcXVlc3QoKQojIHJlcS5wcmVwYXJlX3VybCh1cmwsIHBhcmFtcykKIyBwcmludChyZXEudXJsKQoKcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQodXJsLCBwYXJhbXM9cGFyYW1zKQpwcmludChyZXNwb25zZSkKbG9nZ2VyLmluZm8ocmVzcG9uc2UpCgojIGRpY3Rpb25hcnkgaW4gcHl0aG9uIGFuZCBnZXR0aW5nIHRoZSBkYXRhIGludG8gYSBsaXN0IG9mIGxpc3QKaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwOgogICAgcmVzID0ganNvbi5sb2FkcyhyZXNwb25zZS50ZXh0KQogICAgI3JlcyA9IGV2YWwocmVzcG9uc2UudGV4dCkKZWxzZToKICAgIHByaW50KCdubyBkYXRhIGlzIGF2YWlsYWJsZScpCgojdmFsdWVzX2xpc3QgPSByZXNbJ2RhdGEnXVsncmVzdWx0J11bMF1bJ3ZhbHVlcyddCiNwcmludCh2YWx1ZXNfbGlzdCkKCiNpbml0aWFsaXplIGEgbmV3IGRpY3Rpb25hcnkKbmV3X3JlcyA9IHt9CgojY3JlYXRpbmcgYSBkaWN0aW9uYXJ5IGFuZCBncm91cGluZyB0aGUgY3B1IHVzYWdlIHZhbHVlIGxpc3Qgd2l0aCBpbnN0YW5jZSBuYW1lIApmb3IgdmFsIGluIHJlc1snZGF0YSddWydyZXN1bHQnXToKICAgIGluc3RhbmNlID0gdmFsWydtZXRyaWMnXVsnX19uYW1lX18nXSsnICcrdmFsWydtZXRyaWMnXVsnaW5zdGFuY2UnXQogICAgdmFsdWVfc2V0ID0gdmFsWyd2YWx1ZXMnXQogICAgbmV3X3Jlc1tpbnN0YW5jZV0gPSB2YWx1ZV9zZXQKCiNwcmludChuZXdfcmVzKQoKI3Jlc3VsdCBsaXN0IGNvbnRhaW5zIGNwdSB1c2FnZSB2YWx1ZSBiZXR3ZWVuIHR3byB0aW1lc3RhbXBzCiMgZm9yIGl0ZW0gaW4gdmFsdWVzX2xpc3Q6CiMgICAgIHRpbWVzdGFtcCwgdmFsdWUgPSBpdGVtCiMgICAgICNpZiB0aW1lc3RhbXAgPj0gdGltZXN0YW1wXzEwX21pbl9hZ28gYW5kIHRpbWVzdGFtcCA8PSB0aW1lc3RhbXBfY3VycmVudDoKIyAgICAgcmVzdWx0X2xpc3QuYXBwZW5kKHZhbHVlKQojcHJpbnQocmVzdWx0X2xpc3QpCgp0aHJlc2hvbGQgPSAwLjEKCiNnZXQgdGhlIGRhdGEgZnJvbSB0aGUgZGIKdXNlcm5hbWUgPSAnbGVhcGFkbWluJwpwYXNzd29yZCA9ICdJbmZ5QDEyMzQ1NjcnCmhvc3QgPSAnY3ZpY3RscHRzdDInCnBvcnQgPSAzMzA2CmRhdGFiYXNlID0gJ2VtZl9pbmRlcGVuZGVudCcKZW1mX2RiID0gY29ubmVjdG9yLmNvbm5lY3QodXNlcj11c2VybmFtZSwgcGFzc3dvcmQ9cGFzc3dvcmQsIGhvc3Q9aG9zdCwgcG9ydD1wb3J0LCBkYXRhYmFzZT1kYXRhYmFzZSkKY3Vyc29yID0gZW1mX2RiLmN1cnNvcigpCnF1ZXJ5PSdTRUxFQ1QgaWQsIHNlbGVjdG9yX3BhcmFtIEZST00gZW1mX2V2ZW50IFdIRVJFIGl0c21fc3RhdHVzID0gXCdJbiBQcm9ncmVzc1wnIE9SREVSIEJZIGNyZWF0ZV90aW1lIEFTQycKY3Vyc29yLmV4ZWN1dGUocXVlcnkpCmV2ZW50X2RhdGEgPSBjdXJzb3IuZmV0Y2hhbGwoKQoKI0luaXRpYWxpemUgYSBkaWN0aW9uYXJ5IHRvIHN0b3JlIGV2ZW50cyBncm91cCBieSBpbnN0YW5jZQpldmVudHNfYnlfaW5zdGFuY2UgPSB7fQoKI2dyb3VwIGV2ZW50cyBieSBpbnN0YW5jZQpmb3Igcm93IGluIGV2ZW50X2RhdGE6CiAgICBzZWxlY3Rvcl9wYXJhbSA9IHJvd1sxXQogICAgc3BsaXRfc3RyaW5nID0gcmUuc3BsaXQocidccytcZHsyfS1cZHsyfS1cZHs0fVxzK1xkezJ9OlxkezJ9OlxkezJ9Jywgc2VsZWN0b3JfcGFyYW0pCiAgICBzZWxlY3Rvcl9wYXJhbSA9IHNwbGl0X3N0cmluZ1swXQogICAgaWYgc2VsZWN0b3JfcGFyYW0gbm90IGluIGV2ZW50c19ieV9pbnN0YW5jZToKICAgICAgICBldmVudHNfYnlfaW5zdGFuY2Vbc2VsZWN0b3JfcGFyYW1dID0gW10KICAgIGV2ZW50c19ieV9pbnN0YW5jZVtzZWxlY3Rvcl9wYXJhbV0uYXBwZW5kKHJvd1swXSkKI3ByaW50KCdwcmludGl0bmcgZXZlbnRzIGJ5IGluc3RhbmNlJykKI2xvZ2dlci5pbmZvKGV2ZW50c19ieV9pbnN0YW5jZSkKCiNJbml0aWFsaXplIHRoZSBmbGFnCmZsYWcgPSAwCgojSW5pdGlhbGlzaW5nIGEgbmV3IGxpc3QKcmVzdWx0X2xpc3QgPSBbXQoKI2l0ZXJhdGUgdGhyb3VnaCBldmVudHNfYnlfaW5zdGFuY2UgYW5kIGNoZWNrIHRocm91Z2gga2V5cyBzZWxlY3Rvcl9wYXJhbSBhbmQgdmFsdWVzIGFsc28gd2hpbGUgY2hlY2tpbmcgdGhlIGluc3RhbmNlIGFyZSBzYW1lIGFuZCB1cGRhdGluZyB0aGUgc3RhdHVzIGluIHNlcnZpY2Vub3cgYW5kIGRiCmZvciBrZXkgaW4gZXZlbnRzX2J5X2luc3RhbmNlLml0ZW1zKCk6CiAgICAjbG9nZ2VyLmluZm8oa2V5KQogICAgaWYga2V5WzBdIGluIG5ld19yZXMua2V5cygpOgogICAgICAgIHJlc3VsdF9saXN0ID0gbmV3X3Jlc1trZXlbMF1dICAgCiAgICAjbG9nZ2VyLmluZm8ocmVzdWx0X2xpc3QpCiAgICAjbG9nZ2VyLmluZm8oa2V5WzFdKQogICAgdmFsdWVzID0ga2V5WzFdCiAgICAjbG9nZ2VyLmluZm8odmFsdWVzKQogICAgZm9yIHZhbHVlIGluIHZhbHVlczoKICAgICAgICAjcHJpbnQodmFsdWUpCiAgICAgICAgZm9yIG51bXMgaW4gcmVzdWx0X2xpc3Q6CiAgICAgICAgICAgIGlmIGZsb2F0KG51bXNbMV0pID4gdGhyZXNob2xkOgogICAgICAgICAgICAgICAgZmxhZyA9IDEKICAgICAgICBpZiBmbGFnID09IDE6CiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgZWxzZToKICAgICAgICAgICAgdXBkYXRlX3F1ZXJ5ID0gZidVUERBVEUgZW1mX2V2ZW50IFNFVCBpdHNtX3N0YXR1cyA9IFwnQ2xvc2VkXCcgV0hFUkUgaWQ9e3ZhbHVlfScKICAgICAgICAgICAgI2xvZ2dlci5pbmZvKHVwZGF0ZV9xdWVyeSkKICAgICAgICAgICAgY3Vyc29yLmV4ZWN1dGUodXBkYXRlX3F1ZXJ5KQogICAgICAgICAgICBnZXRfc3lzX2lkID0gZidTRUxFQ1Qgc291cmNlX2V2ZW50X2lkIEZST00gZW1mX2V2ZW50IFdIRVJFIGlkPXt2YWx1ZX0nCiAgICAgICAgICAgIGN1cnNvci5leGVjdXRlKGdldF9zeXNfaWQpCiAgICAgICAgICAgIHN5c19yb3cgPSBjdXJzb3IuZmV0Y2hhbGwoKQogICAgICAgICAgICAjbG9nZ2VyLmluZm8oc3lzX3JvdykKICAgICAgICAgICAgc3lzX2lkID0gc3RyKHN5c19yb3dbMF1bMF0pCiAgICAgICAgICAgICNsb2dnZXIuaW5mbyhzeXNfaWQpCiAgICAgICAgICAgIHN0YXR1c19zZXJ2aWNlbm93KHN5c19pZCkKICAgIGlmIGZsYWcgPT0gMToKICAgICAgICBicmVhawoKCmlmIGZsYWcgPT0gMToKICAgIHByaW50KCdBbGwgdGhlIHZhbHVlcyBhcmUgbm90IGJlbG93IHRocmVzaG9sZCcpCmVsc2U6CiAgICBwcmludCgnQWxsIHZhbHVlcyBhcmUgYmVsb3cgdGhyZXNob2xkJykKCgoKCmVtZl9kYi5jb21taXQoKQoKCgpsb2dnZXIuaW5mbygnQ29tcGxldGVkJykKCg==","leo1311"
"LEOPBLSH94433","LEOPBLSH94433_leo1311.py","","leo1311"
"LEOEVNT_76585","LEOEVNT_76585_leo1311.py","IyBpbXBvcnQgYmFzZTY0CgojIGltcG9ydCByZQoKIyBpbXBvcnQgbXlzcWwuY29ubmVjdG9yIGFzIGNvbm5lY3RvcgoKIyBpbXBvcnQgcmVxdWVzdHMKCiMgaW1wb3J0IGpzb24KCmltcG9ydCBsb2dnaW5nIGFzIGxvZ2dlcgoKCgpsb2dnZXIuYmFzaWNDb25maWcobGV2ZWw9bG9nZ2VyLklORk8sZm9ybWF0PSclKGFzY3RpbWUpcyBJTkZPICUobWVzc2FnZSlzJywgZGF0ZWZtdD0nJXkvJW0vJWQgJUg6JU06JVMnKQoKCgojIHVzZXJuYW1lID0gJ2xlYXBhZG1pbicKCiMgcGFzc3dvcmQgPSAnSW5meUAxMjM0NTY3JwoKIyBob3N0ID0gJ2N2aWN0bHB0c3QyJwoKIyBwb3J0ID0gMzMwNgoKIyBkYXRhYmFzZSA9ICdlbWZfaW5kZXBlbmRlbnQnICAKCiMgZW1mX2RiID0gY29ubmVjdG9yLmNvbm5lY3QodXNlcj11c2VybmFtZSwgcGFzc3dvcmQ9cGFzc3dvcmQsIGhvc3Q9aG9zdCwgcG9ydD1wb3J0LCBkYXRhYmFzZT1kYXRhYmFzZSkKCiMgZXZlbnRzRGF0YSA9IFtdCgojIGN1cnNvciA9IGVtZl9kYi5jdXJzb3IoKQoKCgojICNub3Qgc3VyZSBvbiB3aGF0IGJhc2lzIGRhdGEgbmVlZHMgdG8gYmUgZmV0Y2hlZCBmcm9tIGVtZl9ldmVudCB0YWJsZS4gYXMgb2Ygbm93IGZldGNoaW5nIHNvbWUgbGFzdCBmZXcgZGF0YQoKIyBjdXJzb3IuZXhlY3V0ZShmJ1NFTEVDVCAqIEZST00gYGVtZl9ldmVudGAgZSBXSEVSRSBlLmNyZWF0ZV90aW1lID49KENVUlJFTlRfREFURSkgQU5EIGUuaXRzbV9zdGF0dXM9XCdJbiBQcm9ncmVzc1wnOycpCgojIGZpbHRlcmVkX2RhdGEgPSBjdXJzb3IuZmV0Y2hhbGwoKQoKCgojICNGaWx0ZXJpbmcgZGF0YSBiYXNlZCBvbiBpdHNtX3N0YXR1cyhuZWVkcyB0byBiZSBjaGVja2VkIGlmIGl0IHMgYmFzZWQgb24gZXZlbnQgc3RhdHVzIG9yIGl0c20gc3RhdHVzKQoKIyAjZmlsdGVyZWRfZGF0YSA9IFtpdGVtIGZvciBpdGVtIGluIHNxbERhdGEgaWYgaXRlbVsxM10gPT0gJ0luIFByb2dyZXNzJ10KCiMgI3NvcnRpbmcgaXQgYmFzZWQgb24gY3JlYXRpb24gdGltZQoKIyBmaWx0ZXJlZF9kYXRhLnNvcnQoa2V5PWxhbWJkYSB4OiB4WzFdKQoKCgojIHNlZ3JlZ2F0ZWRfZGF0YSA9IHt9CgojIGZvciB0dXBsZSBpbiBmaWx0ZXJlZF9kYXRhOgoKIyAgc3RyaW5nMSA9IHR1cGxlWzJdCgojICAjbG9nZ2VyLmluZm8oc3RyaW5nMSkKCiMgICNzcGxpdF9zdHJpbmcgPSBzdHJpbmcxLnNwbGl0KCctJykKCiMgIyAga2V5ID0gc3BsaXRfc3RyaW5nWzBdKyctJytzcGxpdF9zdHJpbmdbMV0KCiMgICNzcGxpdF9zdHJpbmcgPSByZS5zcGxpdChyJ1xzK1xkezJ9LVxkezJ9LVxkezR9XHMrXGR7Mn06XGR7Mn06XGR7Mn0nLCBzdHJpbmcxKQoKIyAgc3BsaXRfc3RyaW5nID0gcmUuc3BsaXQocidccytcZHsyfTpcZHsyfTpcZHsyfScsIHN0cmluZzEpCgojICBrZXkgPSBzcGxpdF9zdHJpbmdbMF0KCiMgIGxvZ2dlci5pbmZvKGtleSkKCiMgIGlmIGtleSBub3QgaW4gc2VncmVnYXRlZF9kYXRhOgoKIyAgIHNlZ3JlZ2F0ZWRfZGF0YVtrZXldID0gW10KCiMgIHNlZ3JlZ2F0ZWRfZGF0YVtrZXldLmFwcGVuZCh0dXBsZSkKCgoKIyAjbG9nZ2VyLmluZm8oc2VncmVnYXRlZF9kYXRhKQoKIyBkYXRhbGlzdD1bXQoKIyBmb3Iga2V5LCB2YWx1ZSBpbiBzZWdyZWdhdGVkX2RhdGEuaXRlbXMoKToKCiMgICAgICNsb2dnZXIuaW5mbyhrZXkpCgojICAgICAjbG9nZ2VyLmluZm8oJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKQoKICAgIAoKICAgCgojICAgICBjb3VudCA9IDAKCiMgICAgIGlkPTAKCiMgICAgIGZvciBpIGluIHZhbHVlOgoKICAgICAgIAoKIyAgICAgICBpZihjb3VudCA9PSAwKToKCiMgICAgICAgICAgIGxpc3RfdmVyc2lvbiA9IGxpc3QoaSkKCiMgICAgICAgICAgIGxpc3RfdmVyc2lvblsxNV0gPSAxCgojICAgICAgICAgICBpZD1saXN0X3ZlcnNpb25bMF0KCiAgICAgICAgICAKCiAgICAgICAgICAKCiMgICAgICAgICAgIGRhdGFsaXN0LmFwcGVuZChsaXN0X3ZlcnNpb24pCgojICAgICAgIGVsc2U6CgojICAgICAgICAgICBsaXN0X3ZlcnNpb24gPSBsaXN0KGkpCgojICAgICAgICAgICBsaXN0X3ZlcnNpb25bMTVdID0gMAoKIyAgICAgICAgICMgICBsb2dnZXIuaW5mbyhpZCkKCiMgICAgICAgICAgIGxpc3RfdmVyc2lvblsxNF0gPSAgaWQKCiMgICAgICAgICAjICAgbG9nZ2VyLmluZm8obGlzdF92ZXJzaW9uKQoKIyAgICAgICAgICAgZGF0YWxpc3QuYXBwZW5kKGxpc3RfdmVyc2lvbikKCiAgICAgICAKCiMgICAgICAgY291bnQgPSBjb3VudCArIDEKCiAgIAoKIyAgICAgIyAgZWxzZToKCiMgICAgICMgICB2YWx1ZVtpXVsxNF0gPSB2YWx1ZVtpLTFdWzBdCgoKCiMgbG9nZ2VyLmluZm8oZGF0YWxpc3QpCgojIGZvciBpdGVtIGluIGRhdGFsaXN0OgoKIyAgICAgaWYoaXRlbVsxNF09PSBOb25lKToKCiMgICAgICAgICBjdXJzb3IuZXhlY3V0ZShmJ1VQREFURSBlbWZfZXZlbnQgU0VUIHBhcmVudF9mbGFnID0ge2l0ZW1bMTVdfSBXSEVSRSBpZCA9IHtpdGVtWzBdfScpCgojICAgICBlbHNlOiAgICAKCiMgICAgICAgICBjdXJzb3IuZXhlY3V0ZShmJ1VQREFURSBlbWZfZXZlbnQgU0VUIHBhcmVudF9mbGFnID0ge2l0ZW1bMTVdfSwgcGFyZW50X2lkID0ge2l0ZW1bMTRdfSBXSEVSRSBpZCA9IHtpdGVtWzBdfScpCgojICAgICBlbWZfZGIuY29tbWl0KCkKCmxvZ2dlci5pbmZvKCdjb21wbGV0ZWQnKSAgICAKCgoKCgo=","leo1311"
"LEOSRVCN34085","LEOSRVCN34085_leo1311.py","","leo1311"
"LEOTSTCQ33709","LEOTSTCQ33709_leo1311.py","cGlwIGluc3RhbGwgcHltb25nbwo=","leo1311"
"LEOACTNB21033","LEOACTNB21033_leo1311.py","aW1wb3J0IHN5cwppbXBvcnQganNvbgppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IGRhdGV0aW1lCmltcG9ydCBweW1vbmdvIAppbXBvcnQgbG9nZ2luZyBhcyBsb2dnZXIKaW1wb3J0IGJhc2U2NAppbXBvcnQgcGFuZGFzIGFzIHBkCmltcG9ydCBza2xlYXJuCmZyb20gc2tsZWFybi5lbnNlbWJsZSBpbXBvcnQgSXNvbGF0aW9uRm9yZXN0CmltcG9ydCBwaWNrbGUKaW1wb3J0IG15c3FsLmNvbm5lY3RvciBhcyBjb25uZWN0b3IKaW1wb3J0IG9zCmltcG9ydCB0aW1lCmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCBxdW90ZV9wbHVzLCB1cmxwYXJzZQpmcm9tIGxlYXAudXRpbHMuVXRpbGl0aWVzIGltcG9ydCBVdGlsaXRpZXMKCm9zLmVudmlyb25bJ0hUVFBfUFJPWFknXT0nJwpvcy5lbnZpcm9uWydIVFRQU19QUk9YWSddPScnCgoKCmxvZ2dlci5iYXNpY0NvbmZpZyhsZXZlbD1sb2dnZXIuSU5GTywgZm9ybWF0PSclKGFzY3RpbWUpcyBJTkZPICUobWVzc2FnZSlzJywgZGF0ZWZtdD0nJXkvJW0vJWQgJUg6JU06JVMnKQoKYXJndW1lbnRzID0gc3lzLmFyZ3YKbXlfZGljdCA9IHt9CmZvciBhcmcgaW4gYXJndW1lbnRzOgogICAgdHJ5OgogICAgICAgIG15X2RpY3RbYXJnLnNwbGl0KCc6JylbMF1dID0gJzonLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQogICAgZXhjZXB0OgogICAgICAgIGEgPSAnZXJyb3InCgoKbG9nZ2VyLmluZm8oJ1JlYWRpbmcgaW5zdGFuY2VfZGF0ZXRpbWU6JykKbG9nZ2VyLmluZm8obXlfZGljdFsnaW5zdGFuY2VfZGF0ZXRpbWUnXSkKaW5zdGFuY2VfZGF0ZXRpbWU9bXlfZGljdFsnaW5zdGFuY2VfZGF0ZXRpbWUnXQpsb2dnZXIuaW5mbygnUmVhZGluZyBtZXRyaWNfdmFsdWU6JykKbG9nZ2VyLmluZm8obXlfZGljdFsnbWV0cmljX3ZhbHVlJ10pCm1ldHJpY192YWx1ZT1mbG9hdChteV9kaWN0WydtZXRyaWNfdmFsdWUnXSkKCiNMRUFQIERhdGFzb3VyY2UKbGVhcGRzID0gbXlfZGljdFsnTEVBUERhdGFTb3VyY2UnXQpsb2dnZXIuaW5mbygnbGVhcGRzJykKbG9nZ2VyLmluZm8obGVhcGRzKQpsZWFwRFNkaWN0ID1qc29uLmxvYWRzKGxlYXBkcykKCiNzYXZlIHRvIGRiCiMgY29sdW1uTGlzdCA9IGRmLmNvbHVtbnMKdXNlcm5hbWUgPSBsZWFwRFNkaWN0Wyd1c2VyTmFtZSddCnBhc3N3b3JkID0gVXRpbGl0aWVzLmRlY3J5cHQobGVhcERTZGljdFsncGFzc3dvcmQnXSxsZWFwRFNkaWN0WydzYWx0J10pCmhvc3QgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLmhvc3RuYW1lCnBvcnQgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLnBvcnQKZGF0YWJhc2UgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLnBhdGgucnNwbGl0KCcvJywgMSlbMV0KCgoKCiMgdXNlcm5hbWUgPSAnbGVhcGFkbScKIyBwYXNzd29yZCA9ICdGMSlne3R5QycKIyBob3N0ID0gJzEwLjgyLjEyMS4xNTUnCiMgcG9ydCA9IDMzMDYKIyBkYXRhYmFzZSA9ICdsZWFwcXR6JwoKIyB0aW1lLnNsZWVwKDMwKQoKCmVtZl9kYiA9IGNvbm5lY3Rvci5jb25uZWN0KAogICAgdXNlcj11c2VybmFtZSwgcGFzc3dvcmQ9cGFzc3dvcmQsIGhvc3Q9aG9zdCwgcG9ydD1wb3J0LCBkYXRhYmFzZT1kYXRhYmFzZQopCgoKCiMgdHJ5OgojICBxdWVyeSA9IGYnU0VMRUNUICogRlJPTSBgZW1mX2V2ZW50YCBXSEVSRSBzZWxlY3Rvcl9wYXJhbSA9IFwne2luc3RhbmNlX2RhdGV0aW1lfVwnOycKIyAgY3Vyc29yLmV4ZWN1dGUocXVlcnkpCiMgIHJlc3VsdHMgPSBjdXJzb3IuZmV0Y2hhbGwoKQojICBpZihsZW4ocmVzdWx0cykhPTApOgojICAgICBsb2dnZXIuaW5mbygnY29uZGl0aW9uIHRydWUnKQojICAgICBhY3Rpb25fZmxhZz0nWUVTJyAgICAgCiMgICAgIHF1ZXJ5MiA9IGYnVVBEQVRFIGBlbWZfZXZlbnRgIFNFVCBhY3Rpb25hYmxlID0gXCd7YWN0aW9uX2ZsYWd9XCcgV0hFUkUgc2VsZWN0b3JfcGFyYW0gPSBcJ3tpbnN0YW5jZV9kYXRldGltZX1cJzsnCiMgICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5MikKIyAgZW1mX2RiLmNvbW1pdCgpCiMgZXhjZXB0IGNvbm5lY3Rvci5lcnJvcnMuT3BlcmF0aW9uYWxFcnJvciBhcyBlOgojICAgICAjIEhhbmRsZSB0aGUgdGltZW91dCBleGNlcHRpb24KIyAgICAgICBsb2dnZXIuaW5mbygnTXlTUUwgY29ubmVjdGlvbiB0aW1lb3V0OiB7fScuZm9ybWF0KGUpKQogCiMgZmluYWxseToKIyAgICAgIyBDbG9zZSB0aGUgZGF0YWJhc2UgY29ubmVjdGlvbgojICAgICAgIGVtZl9kYi5jbG9zZSgpCgoKCmFwaV91cmwgPSAnaHR0cHM6Ly9sZWFwNzo0MDA1L2FwaS9ldmVudC90cmlnZ2VyL1JhYmJpdG1xX2VtZj9vcmc9bGVvMTMxMScKaGVhZGVycyA9ICB7J0NvbnRlbnQtVHlwZSc6J2FwcGxpY2F0aW9uL2pzb24nfQoKYWxlcnRqc29uID0ge30KYWxlcnRqc29uWydpbnN0YW5jZV9kYXRldGltZSddPWluc3RhbmNlX2RhdGV0aW1lCmFsZXJ0anNvblsnbWV0cmljX3ZhbHVlJ109bWV0cmljX3ZhbHVlCgpkYXRhID0nJyd7fScnJwpxdWVyeWpzb24gPSBqc29uLmxvYWRzKGRhdGEpCnF1ZXJ5anNvblsnZXZlbnRJZCddID0nZXZlbnQnK3N0cihzdHIoZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkudGltZXN0YW1wKCkpLnJlcGxhY2UoJy4nLCAnJykpCnF1ZXJ5anNvblsnZXZlbnRUeXBlTmFtZSddID0nVGlja2V0aW5nX2FuZF9kZWR1cGxpY2F0ZV9ldmVudCcKcXVlcnlqc29uWydjb250ZXh0J109YWxlcnRqc29uCmxvZ2dlci5pbmZvKHF1ZXJ5anNvbikKcXVlcnlqc29uMj1qc29uLmxvYWRzKGRhdGEpCnF1ZXJ5anNvbjJbJ2JvZHknXT1xdWVyeWpzb24KcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KGFwaV91cmwsIGRhdGE9anNvbi5kdW1wcyhxdWVyeWpzb24yKSwgaGVhZGVycz1oZWFkZXJzLHZlcmlmeT1GYWxzZSkKbG9nZ2VyLmluZm8ocmVzcG9uc2UucmFpc2VfZm9yX3N0YXR1cygpKQoKCmxvZ2dlci5pbmZvKCdDb21wbGV0ZWQnKQoKCgoKCgoKCgoKCgoKCgoK","leo1311"
"LEOSRPLC78198","LEOSRPLC78198_leo1311.py","aW1wb3J0IG15c3FsLmNvbm5lY3RvciBhcyBjb25uZWN0b3IKaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyCgpsb2dnZXIuYmFzaWNDb25maWcoCiAgICBsZXZlbD1sb2dnZXIuSU5GTywKICAgIGZvcm1hdD0nJShhc2N0aW1lKXMgSU5GTyAlKG1lc3NhZ2UpcycsCiAgICBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycsCikKCnVzZXJuYW1lID0gJ2xlYXBhZG0nCgpwYXNzd29yZCA9ICdGMSlne3R5QycKCmhvc3QgPSAnMTAuODIuMTIxLjE1NScKCnBvcnQgPSAzMzA2CgoKZGF0YWJhc2UgPSAnbGVhcHF0eicKCmxvZ2dlci5pbmZvKCdydW5uaW5nJykKdHJ5OgogY29ubmVjdGlvbiA9IGNvbm5lY3Rvci5jb25uZWN0KAogICAgdXNlcj11c2VybmFtZSwgcGFzc3dvcmQ9cGFzc3dvcmQsIGhvc3Q9aG9zdCwgcG9ydD1wb3J0LCBkYXRhYmFzZT1kYXRhYmFzZQogKQpleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICBwcmludCgnRmFpbGVkIHRvIGNvbm5lY3QgdG8gdGhlIGRhdGFiYXNlOicsIGUpCgoKY3Vyc29yID0gY29ubmVjdGlvbi5jdXJzb3IoKQpxdWVyeSA9IGYnVVBEQVRFIHNyZV9hcHBfYXZhaWxhYmlsaXR5IEFzIHMgU0VUIHMuYXZhaWxhYmlsaXR5X2RhdGUgPSAgQ09OQ0FUKEVYVFJBQ1QoWUVBUiBGUk9NIENVUlJFTlRfVElNRVNUQU1QKCkpLCBcJy1cJyxFWFRSQUNUKE1PTlRIIEZST00gQ1VSUkVOVF9USU1FU1RBTVAoKSksIFwnLVwnLEVYVFJBQ1QoREFZIEZST00gcy5hdmFpbGFiaWxpdHlfZGF0ZSkpICcKCnF1ZXJ5MiA9IGYnVVBEQVRFIGBzcmVfcHJvYmVfcnVuX2FwcGAgQXMgcyBTRVQgcy5ydW5fZGF0ZSA9ICBDT05DQVQoRVhUUkFDVChZRUFSIEZST00gQ1VSUkVOVF9USU1FU1RBTVAoKSksIFwnLVwnLEVYVFJBQ1QoTU9OVEggRlJPTSBDVVJSRU5UX1RJTUVTVEFNUCgpKSwgXCctXCcsRVhUUkFDVChEQVkgRlJPTSBzLnJ1bl9kYXRlKSkgJwoKY3Vyc29yLmV4ZWN1dGUocXVlcnkpCmN1cnNvci5leGVjdXRlKHF1ZXJ5MikKY29ubmVjdGlvbi5jb21taXQoKQoKCmxvZ2dlci5pbmZvKCdjb21wbGV0ZWQnKQoKCgoK","leo1311"
"LEORSLTN84194","LEORSLTN84194_leo1311.py","","leo1311"
"LEOCLSR_66979","LEOCLSR_66979_leo1311.py","aW1wb3J0IGJhc2U2NAoKaW1wb3J0IG15c3FsLmNvbm5lY3RvciBhcyBjb25uZWN0b3IKCmltcG9ydCByZXF1ZXN0cwppbXBvcnQgc3lzCmltcG9ydCBqc29uCmltcG9ydCByZQppbXBvcnQgbG9nZ2luZyBhcyBsb2dnZXIKaW1wb3J0IGRhdGV0aW1lCmltcG9ydCBvcyAKaW1wb3J0IHRpbWUKZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHF1b3RlX3BsdXMsIHVybHBhcnNlCmZyb20gbGVhcC51dGlscy5VdGlsaXRpZXMgaW1wb3J0IFV0aWxpdGllcwpmcm9tIHB5c3Bhcmsuc3FsIGltcG9ydCBTcGFya1Nlc3Npb24KCm9zLmVudmlyb25bJ0hUVFBfUFJPWFknXT0nJwpvcy5lbnZpcm9uWydIVFRQU19QUk9YWSddPScnCgpsb2dnZXIuYmFzaWNDb25maWcoCiAgICBsZXZlbD1sb2dnZXIuSU5GTywKICAgIGZvcm1hdD0nJShhc2N0aW1lKXMgSU5GTyAlKG1lc3NhZ2UpcycsCiAgICBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycsCikKCnRocmVzaG9sZD01MAoKIyB1c2VybmFtZSA9ICdsZWFwYWRtJwojIHBhc3N3b3JkID0gJ0YxKWd7dHlDJwojIGhvc3QgPSAnMTAuODIuMTIxLjE1NScKIyBwb3J0ID0gMzMwNgojIGRhdGFiYXNlID0gJ2xlYXBxdHonCgoKCmFyZ3VtZW50cyA9IHN5cy5hcmd2Cm15X2RpY3QgPSB7fQpmb3IgYXJnIGluIGFyZ3VtZW50czoKICAgIHRyeToKICAgICAgICBteV9kaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICc6Jy5qb2luKGFyZy5zcGxpdCgnOicpWzE6XSkKICAgIGV4Y2VwdDoKICAgICAgICBhID0gJ2Vycm9yJwogCiAKbG9nZ2VyLmluZm8oJ1JlYWRpbmcgaW5zdGFuY2VfZGF0ZXRpbWU6JykKI0xFQVAgRGF0YXNvdXJjZQpsZWFwZHMgPSBteV9kaWN0WydMRUFQRGF0YVNvdXJjZSddCmxvZ2dlci5pbmZvKCdsZWFwZHMnKQpsb2dnZXIuaW5mbyhsZWFwZHMpCmxlYXBEU2RpY3QgPWpzb24ubG9hZHMobGVhcGRzKQoKI3NhdmUgdG8gZGIKIyBjb2x1bW5MaXN0ID0gZGYuY29sdW1ucwp1c2VybmFtZSA9IGxlYXBEU2RpY3RbJ3VzZXJOYW1lJ10KcGFzc3dvcmQgPSBVdGlsaXRpZXMuZGVjcnlwdChsZWFwRFNkaWN0WydwYXNzd29yZCddLGxlYXBEU2RpY3RbJ3NhbHQnXSkKaG9zdCA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkuaG9zdG5hbWUKcG9ydCA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkucG9ydApkYXRhYmFzZSA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkucGF0aC5yc3BsaXQoJy8nLCAxKVsxXQoKY29ubmVjdGlvbiA9IGNvbm5lY3Rvci5jb25uZWN0KAogICAgdXNlcj11c2VybmFtZSwgcGFzc3dvcmQ9cGFzc3dvcmQsIGhvc3Q9aG9zdCwgcG9ydD1wb3J0LCBkYXRhYmFzZT1kYXRhYmFzZQopCmN1cnNvciA9IGNvbm5lY3Rpb24uY3Vyc29yKCkKCgp0aW1lLnNsZWVwKDMwKQpsb2dnZXIuaW5mbyhteV9kaWN0WydpbnN0YW5jZV9kYXRldGltZSddKQppbnN0YW5jZV9kYXRldGltZT1teV9kaWN0WydpbnN0YW5jZV9kYXRldGltZSddCnNwbGl0X3N0cmluZyA9IHJlLnNwbGl0KHInICcsIGluc3RhbmNlX2RhdGV0aW1lKQojaW5zdGFuY2VfZGF0ZXRpbWVfZW49c3BsaXRfc3RyaW5nWzBdK3NwbGl0X3N0cmluZ1sxXStzdHIoc3RyKGRhdGV0aW1lLmRhdGV0aW1lLm5vdygpLnRpbWVzdGFtcCgpKS5yZXBsYWNlKCcuJywgJycpKQppbnN0YW5jZV9kYXRldGltZV9lbj1zcGxpdF9zdHJpbmdbMF0rICcgJytzcGxpdF9zdHJpbmdbMV0rJyAnK3NwbGl0X3N0cmluZ1syXQpmbGFnOmFueQphY3Rpb25lZF91cG9uPW15X2RpY3RbJ2FjdGlvbmVkX3Vwb24nXQojaW5zdGFuY2VfZGF0ZXRpbWVfZW49J3dpbmRvd3NfbWVtb3J5X3VzYWdlMSBudWxsIDIwLjAnCgoKCmN1cnJlbnRfdGltZSA9IGRhdGV0aW1lLmRhdGV0aW1lLnV0Y25vdygpCiMgc3RhcnQ9Y3VycmVudF90aW1lIC0gZGF0ZXRpbWUudGltZWRlbHRhKG1pbnV0ZXM9MTApCiMgZW5kPWN1cnJlbnRfdGltZQpvbmVfbWluX2FnbyA9IGN1cnJlbnRfdGltZSAtIGRhdGV0aW1lLnRpbWVkZWx0YShtaW51dGVzPTEpCnR3b19taW5fYWdvID0gY3VycmVudF90aW1lIC0gZGF0ZXRpbWUudGltZWRlbHRhKG1pbnV0ZXM9MikKCiN0d29fZGF5c19hZ28gPSBjdXJyZW50X3RpbWUgLSBkYXRldGltZS50aW1lZGVsdGEoKQpzdGFydCA9IHR3b19taW5fYWdvLmlzb2Zvcm1hdCgpKyAnWicKZW5kID0gb25lX21pbl9hZ28uaXNvZm9ybWF0KCkrICdaJwpwcmludCgnc3RhcnQgJykKcHJpbnQoc3RhcnQpCnByaW50KCdlbmQgJykKcHJpbnQoZW5kKQpwcm9tZXRoZXVzX2FwaT1mJ2h0dHA6Ly9jdnJpY3RscHRtMjE6OTA5MC9hcGkvdjEvcXVlcnlfcmFuZ2U/cXVlcnk9bGFiZWxfcmVwbGFjZSglMEElMjAlMjBsYWJlbF9yZXBsYWNlKCUwQSUyMCUyMGxhYmVsX3JlcGxhY2UoMTAwLWF2ZyhyYXRlKHdpbmRvd3NfY3B1X3RpbWVfdG90YWwlN0Jtb2RlJTNEXCdpZGxlXCclN0QlNUIxbSU1RCkpJTIwKiUyMDEwMCUyQ1wnX19uYW1lX19cJyUyQ1wnd2luZG93c19tZW1vcnlfdXNhZ2VcJyUyQ1wnX19uYW1lX19cJyUyQ1wnXCcpJTJDXCdpbnN0YW5jZVwnJTJDXCdudWxsXCclMkNcJ2luc3RhbmNlXCclMkNcJ1wnJTBBKSUwQSUyQ1wnam9iXCclMkNcJ251bGxcJyUyQ1wnam9iXCclMkNcJ1wnJTBBKSZzdGFydD17c3RhcnR9JmVuZD17ZW5kfSZzdGVwPTEwcycKcHJpbnQocHJvbWV0aGV1c19hcGkpCnJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KHByb21ldGhldXNfYXBpKQoKIyBpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6CiMgICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldChwcm9tZXRoZXVzX2FwaSkKIyBlbHNlOgojICAgICAgICAgcHJpbnQocmVzcG9uc2UpCiMgICAgICAgICByZXNwb25zZSA9ICdObyBkYXRhIGF2YWlsYWJsZScKCiMgbWV0cmljX2RhdGE9cmVzcG9uc2UuanNvbigpCmpzb25fZGF0YSA9IGpzb24ubG9hZHMocmVzcG9uc2UuY29udGVudCkKZGF0YSA9IGpzb25fZGF0YVsnZGF0YSddCnJlc3VsdD1kYXRhWydyZXN1bHQnXQp2YWx1ZXM9cmVzdWx0WzBdWyd2YWx1ZXMnXQpmb3IgaXRlbSBpbiB2YWx1ZXM6CiBpZihmbG9hdChpdGVtWzFdKTx0aHJlc2hvbGQpOgogICAgICAgZmxhZz0ndHJ1ZScKIGVsc2U6CiAgICAgICBmbGFnPSdmYWxzZScKICAgICAgIGJyZWFrCgpvcy5lbnZpcm9uWydIVFRQX1BST1hZJ109J2JscnByb3h5LmFkLmluZm9zeXMuY29tOjQ0MycKb3MuZW52aXJvblsnSFRUUFNfUFJPWFknXT0nYmxycHJveHkuYWQuaW5mb3N5cy5jb206NDQzJwogICAKaWYgZmxhZyA9PSAndHJ1ZSc6CiB1cmwgPSAnaHR0cHM6Ly9pbmZvc3lzcTNkZXYxLnNlcnZpY2Utbm93LmNvbS9hcGkvbm93L3RhYmxlL2luY2lkZW50P3N5c3Bhcm1fcXVlcnk9c2hvcnRfZGVzY3JpcHRpb25DT05UQUlOUycraW5zdGFuY2VfZGF0ZXRpbWVfZW4rJyZzdGF0ZT02JwogbG9nZ2VyLmluZm8oJ3VybCcrdXJsKQoKIGhlYWRlcnMgPSB7J0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJywgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ30KCiByZXMgPSByZXF1ZXN0cy5nZXQoCiAgICAgICAgdXJsLAogICAgICAgIGF1dGg9KCdJQ1NQX2ljYXBfdXNlcicsICdxd2VyMTIzNCcpLAogICAgICAgIGhlYWRlcnM9aGVhZGVycwogICAgKQogcmVzcG9uc2U9cmVzLmpzb24oKQogcmVzdWx0ID0gcmVzcG9uc2VbJ3Jlc3VsdCddCiBsb2dnZXIuaW5mbygncmVzdWx0LS0tLS0tLS0nKQogbG9nZ2VyLmluZm8ocmVzdWx0KQogaWYobGVuKHJlc3VsdCk+MCk6IAogIHN5c19pZD1yZXN1bHRbMF1bJ3N5c19pZCddCiAgaXRzbV9udW1iZXI9cmVzdWx0WzBdWydudW1iZXInXQogIGxvZ2dlci5pbmZvKCdzeXNJZCcrc3lzX2lkKQogIGxvZ2dlci5pbmZvKCdzdGF0dXNfY29kZSAyMDAnKQogIHVybCA9ICdodHRwczovL2luZm9zeXNxM2RldjEuc2VydmljZS1ub3cuY29tL2FwaS9ub3cvdGFibGUvaW5jaWRlbnQvJytzeXNfaWQKCiAgaGVhZGVycyA9IHsnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLCAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nfQogIGlmKGFjdGlvbmVkX3Vwb24gPT0ndHJ1ZScpOgogICAgIGRhdGE9ewogICAgICAgICd3b3JrX25vdGVzJzogJ1RoZSBpc3N1ZSBpcyByZXNvbHZlZCBieSB0cmlnZ2VyaW5nIHRoZSByZXNvbHV0aW9uIHdvcmtmbG93JywKICAgICAgICAnc3RhdGUnOiAnQ2xvc2VkJwogICAgICB9CiAgZWxpZihhY3Rpb25lZF91cG9uID09J2ZhbHNlJyk6CiAgICAgIGRhdGE9ewogICAgICAgICd3b3JrX25vdGVzJzogJ0R1cGxpY2F0ZSBldmVudHMgYXJlIHN1cHByZXNzZWQnLAogICAgICAgICAnc3RhdGUnOiAnQ2xvc2VkJwogICAgIH0gIAoKICAgICNwYXlsb2FkID0geydzdGF0ZSc6ICdDbG9zZWQnfQoKICByZXMgPSByZXF1ZXN0cy5wdXQoCiAgICAgICAgdXJsLAogICAgICAgIGF1dGg9KCdJQ1NQX2ljYXBfdXNlcicsICdxd2VyMTIzNCcpLAogICAgICAgIGhlYWRlcnM9aGVhZGVycywKICAgICAgICBqc29uPWRhdGEKICAgICkgIAogIGxvZ2dlci5pbmZvKHVybCkKICBsb2dnZXIuaW5mbygncmVzcG9uc2UgY29kZS0tJykKICBsb2dnZXIuaW5mbyhyZXMuc3RhdHVzX2NvZGUpCiAKICB0cnk6CiAgICAgcXVlcnkgPSBmJ1VQREFURSBgZW1mX2V2ZW50YCBlIFNFVCBlLml0c21fc3RhdHVzPVwnQ2xvc2VkXCcgV0hFUkUgZS5pdHNtX251bWJlcj1cJ3tpdHNtX251bWJlcn1cJzsnCiAgICAgY3Vyc29yID0gY29ubmVjdGlvbi5jdXJzb3IoKQogICAgIyBsb2dnZXIuaW5mbyhjdXJzb3IpCiAgICAgcmVzcG9uc2UgPSBjdXJzb3IuZXhlY3V0ZSgKICAgICAgIHF1ZXJ5CiAgICAgKQogICAgIGxvZ2dlci5pbmZvKCd1cGRhdGUgcXVlcnkgZXhlY3V0ZWQnKQogICAgIyBsb2dnZXIuaW5mbyhyZXNwb25zZSkKICAgICBjb25uZWN0aW9uLmNvbW1pdCgpCiAgICAKICBleGNlcHQgY29ubmVjdG9yLmVycm9ycy5PcGVyYXRpb25hbEVycm9yIGFzIGU6CiAgICAjIEhhbmRsZSB0aGUgdGltZW91dCBleGNlcHRpb24KICAgICAgbG9nZ2VyLmluZm8oJ015U1FMIGNvbm5lY3Rpb24gdGltZW91dDoge30nLmZvcm1hdChlKSkKIAogIGZpbmFsbHk6CiAgICAjIENsb3NlIHRoZSBkYXRhYmFzZSBjb25uZWN0aW9uCiAgICAgIGNvbm5lY3Rpb24uY2xvc2UoKQppZiBmbGFnPT0gJ2ZhbHNlJzoKICAgIGxvZ2dlci5pbmZvKCdzdGlsbCB0aGUgbWV0cmljIHZhbHVlcyBhcmUgYmV5b25kIHRocmVzaG9sZCcpCiAKbG9nZ2VyLmluZm8oJ0NvbXBsZXRlZCcpCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoK","leo1311"
"LEOSNW_N78635","LEOSNW_N78635_leo1311.py","","leo1311"
"SREHPPLN49070","SREHPPLN49070_SRE1.py","aW1wb3J0IHBhbmRhcyBhcyBwZAppbXBvcnQgbXlzcWwuY29ubmVjdG9yCmltcG9ydCBqc29uCmltcG9ydCBzeXMKZnJvbSBsZWFwLnV0aWxzLlV0aWxpdGllcyBpbXBvcnQgVXRpbGl0aWVzCmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCBxdW90ZV9wbHVzLCB1cmxwYXJzZQppbXBvcnQgbG9nZ2luZwoKbG9nZ2luZy5iYXNpY0NvbmZpZyhsZXZlbD1sb2dnaW5nLklORk8pCmFyZ3VtZW50cyA9IHN5cy5hcmd2CmRpY3QgPSB7fQpmb3IgYXJnIGluIGFyZ3VtZW50czoKICAgIHRyeToKICAgICAgICBkaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICgnOicpLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQogICAgZXhjZXB0OgogICAgICAgIGEgPSAnZXJyb3InCnByaW50KGRpY3QpCmxlYXBkcyA9IGRpY3RbJ2xlYXBkcyddCmxlYXBEU2RpY3QgPSBqc29uLmxvYWRzKGxlYXBkcykKdXNlcm5hbWUgPSBsZWFwRFNkaWN0Wyd1c2VyTmFtZSddCnBhc3N3b3JkID0gVXRpbGl0aWVzLmRlY3J5cHQobGVhcERTZGljdFsncGFzc3dvcmQnXSwgbGVhcERTZGljdFsnc2FsdCddKQpob3N0ID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5ob3N0bmFtZQpwb3J0ID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5wb3J0CmRhdGFiYXNlID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5wYXRoLnJzcGxpdCgnLycsIDEpWzFdCmNvbm5lY3Rpb24gPSBteXNxbC5jb25uZWN0b3IuY29ubmVjdCh1c2VyPXVzZXJuYW1lLCBwYXNzd29yZD1wYXNzd29yZCwgaG9zdD1ob3N0LCBwb3J0PXBvcnQsIGRhdGFiYXNlPWRhdGFiYXNlKQpteWN1cnNvciA9IGNvbm5lY3Rpb24uY3Vyc29yKCkKCnF1ZXJ5MSA9ICcnJ1NFTEVDVCBjaS5pZCBBUyBjaWlkLGNpLmNpX25hbWUsdGt0LnR5cGUsIENPVU5UKCopIEFTIG5ld3ZhbHVlIEZST00gaHBlX3RpY2tldHMgdGt0IEpPSU4gY2ZtX2NvbmZpZ3VyYXRpb25faXRlbSBjaSBPTiAKdGt0LmNvbmZpZ3VyYXRpb25JdGVtPVRSSU0oU1VCU1RSSU5HX0lOREVYKGNpLmNpX25hbWUsJ18nLDEpKSAgV0hFUkUgdGt0LnN0YXRlIElOICgnT3BlbicsJ0luIFByb2dyZXNzJywnT24gSG9sZCcsJ05ldycpCkFORCB0a3QudHlwZT0nQWxlcnQnIEFORCBjaS5wcm9qZWN0X2lkPSc0JyBBTkQgY2kuY2lfbmFtZSA9ICdBZGRpc29uIE5HSVQgLyBFQ1BfQWxlcnRzJyBHUk9VUCBCWSBjaS5jaV9uYW1lLHRrdC50eXBlLGNpLmlkJycnCm15Y3Vyc29yLmV4ZWN1dGUocXVlcnkxKQpxdWVyeTFkYXRhID0gbXljdXJzb3IuZmV0Y2hhbGwoKQpxdWVyeTFkZiA9IHBkLkRhdGFGcmFtZS5mcm9tX3JlY29yZHMocXVlcnkxZGF0YSwgY29sdW1ucz1bJ2NpaWQnLCAnY2lfbmFtZScsICd0eXBlJywgJ25ld3ZhbHVlJ10pCgpxdWVyeTIgPSAnJydTRUxFQ1Qgc3ZnLiosY2ltYXAuY2lfaWQgRlJPTSBiY2Nfc3ZnX2NpX21hcHBpbmcgY2ltYXAgIEpPSU4gYmNjX3N2Z19kYXNoYm9hcmRfbWFwcGluZyBkbWFwIE9OIApjaW1hcC5zdmdfZGFzaGJvYXJkX2lkPWRtYXAuaWQgIEpPSU4gYmNjX3N2Z19lbGVtZW50cyBzdmcgT04gY2ltYXAuZWxlbWVudF9pZD1zdmcuZWxlbWVudF9pZCBBTkQgZG1hcC5zdmdfaWQ9c3ZnLnN2Z19pZApKT0lOIGNmbV9jb25maWd1cmF0aW9uX2l0ZW0gY2kgT04KY2kuaWQ9Y2ltYXAuY2lfaWQgV0hFUkUgc3ZnLnByb2plY3RfaWQ9JzQnIEFORCBjaW1hcC5wcm9qZWN0X2lkPSc0JyBBTkQgZG1hcC5wcm9qZWN0X2lkPSc0JyBBTkQgY2kuY2lfbmFtZSA9ICdBZGRpc29uIE5HSVQgLyBFQ1BfQWxlcnRzJyAnJycKbXljdXJzb3IuZXhlY3V0ZShxdWVyeTIpCnF1ZXJ5MmRhdGEgPSBteWN1cnNvci5mZXRjaGFsbCgpCnF1ZXJ5MmRmID0gcGQuRGF0YUZyYW1lLmZyb21fcmVjb3JkcyhxdWVyeTJkYXRhLCBjb2x1bW5zPVsnaWQnLCdib3JkZXJfdHJ1ZScsJ2JveGNvbG9yX3RydWUnLCdkZWZhdWx0X2JvcmRlcicsJ2RlZmF1bHRfZmlsbF9jb2xvcicsJ2RlZmF1bHRfZm9udCcsJ2RlZmF1bHRfdmlzaWJpbGl0eScsJ2VsZW1lbnRfaWQnLCdmaWxsX2NvbG9yX3RydWUnLCdmb250X3RydWUnLCdydW50aW1lX2JvcmRlcicsJ3J1bnRpbWVfYm94Y29sb3InLCdydW50aW1lX2ZpbGxfY29sb3InLCdydW50aW1lX2ZvbnQnLCdydW50aW1lX3RleHQnLCdydW50aW1lX3Zpc2liaWxpdHknLCd2aXNpYmlsaXR5X3RydWUnLCdwcm9qZWN0X2lkJywnc3ZnX2lkJywnYmFja2dyb3VuZF9jb2xvcl9zZXQnLCdiYWNrZ3JvdW5kX2NvbG9yJywnY2lfaWQnXSkKCm15Y3Vyc29yLmV4ZWN1dGUoCiAgICAnJydVUERBVEUgYmNjX3N2Z19lbGVtZW50cyBTRVQgcnVudGltZV9maWxsX2NvbG9yPTEgV0hFUkUgZWxlbWVudF9pZCBJTiAoJ3NoYXBlMzYxMDAwMi00NDAnLCdzaGFwZTMyLTg5JykgJycnKQpteWN1cnNvci5leGVjdXRlKAogICAgJycnVVBEQVRFIGJjY19zdmdfZWxlbWVudHMgU0VUIGZpbGxfY29sb3JfdHJ1ZT0nZ3JlZW4nIFdIRVJFIGVsZW1lbnRfaWQgSU4gKCdzaGFwZTM2MTAwMDItNDQwJywnc2hhcGUzMi04OScpICcnJykKbXljdXJzb3IuZXhlY3V0ZSgKICAgICcnJ1VQREFURSBiY2Nfc3ZnX2VsZW1lbnRzIFNFVCBydW50aW1lX3RleHQ9JzAnIFdIRVJFIGVsZW1lbnRfaWQgSU4gKCdzaGFwZTM2MTAwMDItNDQwJywnc2hhcGUzMi04OScpICcnJykKZGF0YXNldCA9IHF1ZXJ5MWRmLm1lcmdlKHF1ZXJ5MmRmLCBsZWZ0X29uPSdjaWlkJywgcmlnaHRfb249J2NpX2lkJywgaG93PSdyaWdodCcpCmRhdGFzZXQuZmlsbG5hKHsnY2lpZCc6IGRhdGFzZXRbJ2NpX2lkJ119LCBpbnBsYWNlPVRydWUpCmRhdGFzZXQuaW5mbygpCnByaW50KCdkYXRhc2V0IGxpbmUgNTQnLCBkYXRhc2V0WyduZXd2YWx1ZSddKQpzdW1tYXRpb24gPSAwCmZvciBpbmRleCwgcm93IGluIGRhdGFzZXQuaXRlcnJvd3MoKToKICAgIGlmIG5vdCBwZC5pc25hKHJvd1snbmV3dmFsdWUnXSk6CiAgICAgICAgc3VtbWF0aW9uICs9IHJvd1snbmV3dmFsdWUnXQogICAgICAgIHByaW50KCdzdW1tYXRpb24nLCBzdW1tYXRpb24pCmRhdGFzZXRbJ3J1bnRpbWVfZmlsbF9jb2xvciddID0gMQpkYXRhc2V0WydmaWxsX2NvbG9yX3RydWUnXSA9IGRhdGFzZXRbJ25ld3ZhbHVlJ10uYXBwbHkobGFtYmRhIHg6ICdyZWQnIGlmIHggPiAwIGVsc2UgJ2dyZWVuJykKcHJpbnQoJ2RhdGFzZXRmaWxsY29sb3J0cnVlJywgZGF0YXNldFsnZmlsbF9jb2xvcl90cnVlJ10pCnJvd19saXN0ID0gW10KZm9yIGluZGV4LCByb3cgaW4gZGF0YXNldC5pdGVycm93cygpOgogICAgcm93X2RpY3QgPSByb3cudG9fZGljdCgpCnJvd19saXN0LmFwcGVuZChyb3dfZGljdCkKZm9yIGYgaW4gcm93X2xpc3Q6CiAgICBpZiBmWyduZXd2YWx1ZSddIGlzIG5vdCBOb25lOgogICAgICAgIGRhdGFzZXRbJ3J1bnRpbWVfdGV4dCddID0gc3RyKHN1bW1hdGlvbiAvLyAyKQpwcmludCgnc3VtbWF0aW9uIGxpbmUgNzInLCBzdW1tYXRpb24pCnByaW50KCdsaW5lIDczICcsIGRhdGFzZXRbJ3J1bnRpbWVfdGV4dCddKQojIHcgPSBkYXRhc2V0LnNvcnRfdmFsdWVzKCdjaV9uYW1lJykuZ3JvdXBieShbJ2NpaWQnXSlbJ2NpX25hbWUnXS50cmFuc2Zvcm0oJ2N1bWNvdW50JykKZGF0YXNldFsnY2lpZCddID0gZGF0YXNldFsnY2lpZCddLmZpbGxuYShkYXRhc2V0WydjaV9pZCddKQojIGRhdGFzZXRbJ2ZpbGxfY29sb3JfdHJ1ZSddID0gdwpkYXRhc2V0ID0gZGF0YXNldC5kcm9wKGNvbHVtbnM9WydjaWlkJywgJ2NpX25hbWUnLCAnbmV3dmFsdWUnLCAnY2lfaWQnXSkKcHJpbnQoJ3J1bnRpbWVfdGV4dF92YWx1ZScsIGRhdGFzZXRbJ3J1bnRpbWVfdGV4dCddLnZhbHVlcykKZWxlbWVudF9pZHMgPSBkYXRhc2V0WydlbGVtZW50X2lkJ10uYXN0eXBlKHN0cikudG9saXN0KCkKcnVuX3RpbWVfdmFsdWVzID0gZGF0YXNldFsncnVudGltZV90ZXh0J10udG9saXN0KCkKcXVlcnlfZWxlbWVudF90ZXh0ID0gZidVUERBVEUgYmNjX3N2Z19lbGVtZW50cyBTRVQgZmlsbF9jb2xvcl90cnVlID0gPywgcnVudGltZV90ZXh0ID0gPyBXSEVSRSBlbGVtZW50X2lkID0gPycKIyBwbGFjZWhvbGRlcnMgPSAnLCcuam9pbihgJz8nYCogbGVuKGVsZW1lbnRfaWRzKSkKZm9yIGVsZW1lbnRfaWQsIHJ1bnRpbWVfdGV4dF92YWx1ZSBpbiB6aXAoZWxlbWVudF9pZHMsIHJ1bl90aW1lX3ZhbHVlcyk6CiAgICBwcmludChydW50aW1lX3RleHRfdmFsdWUsZWxlbWVudF9pZCwnZW5kcmVzdWx0JykKICAgIHF1ZXJ5ID0gZicnJ1VQREFURSBiY2Nfc3ZnX2VsZW1lbnRzIFNFVCBmaWxsX2NvbG9yX3RydWUgPSAncmVkJywgcnVudGltZV90ZXh0ID0gJ3tydW50aW1lX3RleHRfdmFsdWV9JyBXSEVSRSBlbGVtZW50X2lkID0gJ3tlbGVtZW50X2lkfScgJycnCiAgICBteWN1cnNvci5leGVjdXRlKHF1ZXJ5KQpteWN1cnNvci5jbG9zZSgpCmNvbm5lY3Rpb24uY29tbWl0KCkKY29ubmVjdGlvbi5jbG9zZSgpCnByaW50KCdjb21wbGV0ZWQnKQoKCgoK","SRE1"
"SREHPPLN73704","SREHPPLN73704_SRE1.py","aW1wb3J0IHBhbmRhcyBhcyBwZAppbXBvcnQgbXlzcWwuY29ubmVjdG9yCmltcG9ydCBqc29uCmltcG9ydCBzeXMKZnJvbSBsZWFwLnV0aWxzLlV0aWxpdGllcyBpbXBvcnQgVXRpbGl0aWVzCmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCBxdW90ZV9wbHVzLCB1cmxwYXJzZQppbXBvcnQgbG9nZ2luZwoKbG9nZ2luZy5iYXNpY0NvbmZpZyhsZXZlbD1sb2dnaW5nLklORk8pCmFyZ3VtZW50cyA9IHN5cy5hcmd2CmRpY3QgPSB7fQpmb3IgYXJnIGluIGFyZ3VtZW50czoKICAgIHRyeToKICAgICAgICBkaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICgnOicpLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQogICAgZXhjZXB0OgogICAgICAgIGEgPSAnZXJyb3InCnByaW50KGRpY3QpCmxlYXBkcyA9IGRpY3RbJ2xlYXBkcyddCmxlYXBEU2RpY3QgPSBqc29uLmxvYWRzKGxlYXBkcykKdXNlcm5hbWUgPSBsZWFwRFNkaWN0Wyd1c2VyTmFtZSddCnBhc3N3b3JkID0gVXRpbGl0aWVzLmRlY3J5cHQobGVhcERTZGljdFsncGFzc3dvcmQnXSwgbGVhcERTZGljdFsnc2FsdCddKQpob3N0ID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5ob3N0bmFtZQpwb3J0ID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5wb3J0CmRhdGFiYXNlID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5wYXRoLnJzcGxpdCgnLycsIDEpWzFdCmNvbm5lY3Rpb24gPSBteXNxbC5jb25uZWN0b3IuY29ubmVjdCh1c2VyPXVzZXJuYW1lLCBwYXNzd29yZD1wYXNzd29yZCwgaG9zdD1ob3N0LCBwb3J0PXBvcnQsIGRhdGFiYXNlPWRhdGFiYXNlKQpteWN1cnNvciA9IGNvbm5lY3Rpb24uY3Vyc29yKCkKCnF1ZXJ5MSA9ICcnJ1NFTEVDVCBjaS5pZCBBUyBjaWlkLGNpLmNpX25hbWUsdGt0LnR5cGUsIENPVU5UKCopIEFTIG5ld3ZhbHVlIEZST00gaHBlX3RpY2tldHMgdGt0IEpPSU4gY2ZtX2NvbmZpZ3VyYXRpb25faXRlbSBjaSBPTiAKdGt0LmNvbmZpZ3VyYXRpb25JdGVtPVRSSU0oU1VCU1RSSU5HX0lOREVYKGNpLmNpX25hbWUsJ18nLDEpKSAgV0hFUkUgdGt0LnN0YXRlIElOICgnT3BlbicsJ0luIFByb2dyZXNzJywnT24gSG9sZCcsJ05ldycpCkFORCB0a3QudHlwZT0nSW5jaWRlbnQnIEFORCBjaS5wcm9qZWN0X2lkPSc0JyBBTkQgY2kuY2lfbmFtZSA9ICdBZGRpc29uIE5HSVQgLyBFQ1BfSW5jaWRlbnRzJyBHUk9VUCBCWSBjaS5jaV9uYW1lLHRrdC50eXBlLGNpLmlkJycnCm15Y3Vyc29yLmV4ZWN1dGUocXVlcnkxKQpxdWVyeTFkYXRhID0gbXljdXJzb3IuZmV0Y2hhbGwoKQpxdWVyeTFkZiA9IHBkLkRhdGFGcmFtZS5mcm9tX3JlY29yZHMocXVlcnkxZGF0YSwgY29sdW1ucz1bJ2NpaWQnLCAnY2lfbmFtZScsICd0eXBlJywgJ25ld3ZhbHVlJ10pCgpxdWVyeTIgPSAnJydTRUxFQ1Qgc3ZnLiosY2ltYXAuY2lfaWQgRlJPTSBiY2Nfc3ZnX2NpX21hcHBpbmcgY2ltYXAgIEpPSU4gYmNjX3N2Z19kYXNoYm9hcmRfbWFwcGluZyBkbWFwIE9OIApjaW1hcC5zdmdfZGFzaGJvYXJkX2lkPWRtYXAuaWQgIEpPSU4gYmNjX3N2Z19lbGVtZW50cyBzdmcgT04gY2ltYXAuZWxlbWVudF9pZD1zdmcuZWxlbWVudF9pZCBBTkQgZG1hcC5zdmdfaWQ9c3ZnLnN2Z19pZApKT0lOIGNmbV9jb25maWd1cmF0aW9uX2l0ZW0gY2kgT04KY2kuaWQ9Y2ltYXAuY2lfaWQgV0hFUkUgc3ZnLnByb2plY3RfaWQ9JzQnIEFORCBjaW1hcC5wcm9qZWN0X2lkPSc0JyBBTkQgZG1hcC5wcm9qZWN0X2lkPSc0JyBBTkQgY2kuY2lfbmFtZSA9ICdBZGRpc29uIE5HSVQgLyBFQ1BfSW5jaWRlbnRzJyAnJycKbXljdXJzb3IuZXhlY3V0ZShxdWVyeTIpCnF1ZXJ5MmRhdGEgPSBteWN1cnNvci5mZXRjaGFsbCgpCnF1ZXJ5MmRmID0gcGQuRGF0YUZyYW1lLmZyb21fcmVjb3JkcyhxdWVyeTJkYXRhLCBjb2x1bW5zPVsnaWQnLCdib3JkZXJfdHJ1ZScsJ2JveGNvbG9yX3RydWUnLCdkZWZhdWx0X2JvcmRlcicsJ2RlZmF1bHRfZmlsbF9jb2xvcicsJ2RlZmF1bHRfZm9udCcsJ2RlZmF1bHRfdmlzaWJpbGl0eScsJ2VsZW1lbnRfaWQnLCdmaWxsX2NvbG9yX3RydWUnLCdmb250X3RydWUnLCdydW50aW1lX2JvcmRlcicsJ3J1bnRpbWVfYm94Y29sb3InLCdydW50aW1lX2ZpbGxfY29sb3InLCdydW50aW1lX2ZvbnQnLCdydW50aW1lX3RleHQnLCdydW50aW1lX3Zpc2liaWxpdHknLCd2aXNpYmlsaXR5X3RydWUnLCdwcm9qZWN0X2lkJywnc3ZnX2lkJywnYmFja2dyb3VuZF9jb2xvcl9zZXQnLCdiYWNrZ3JvdW5kX2NvbG9yJywnY2lfaWQnXSkKCm15Y3Vyc29yLmV4ZWN1dGUoCiAgICAnJydVUERBVEUgYmNjX3N2Z19lbGVtZW50cyBTRVQgcnVudGltZV9maWxsX2NvbG9yPTEgV0hFUkUgZWxlbWVudF9pZCBJTiAoJ3NoYXBlMzYxMDAwMy00NDMnKSAnJycpCm15Y3Vyc29yLmV4ZWN1dGUoCiAgICAnJydVUERBVEUgYmNjX3N2Z19lbGVtZW50cyBTRVQgZmlsbF9jb2xvcl90cnVlPSdncmVlbicgV0hFUkUgZWxlbWVudF9pZCBJTiAoJ3NoYXBlMzYxMDAwMy00NDMnKSAnJycpCm15Y3Vyc29yLmV4ZWN1dGUoCiAgICAnJydVUERBVEUgYmNjX3N2Z19lbGVtZW50cyBTRVQgcnVudGltZV90ZXh0PScwJyBXSEVSRSBlbGVtZW50X2lkIElOICgnc2hhcGUzNjEwMDAzLTQ0MycpICcnJykKZGF0YXNldCA9IHF1ZXJ5MWRmLm1lcmdlKHF1ZXJ5MmRmLCBsZWZ0X29uPSdjaWlkJywgcmlnaHRfb249J2NpX2lkJywgaG93PSdyaWdodCcpCmRhdGFzZXQuZmlsbG5hKHsnY2lpZCc6IGRhdGFzZXRbJ2NpX2lkJ119LCBpbnBsYWNlPVRydWUpCmRhdGFzZXQuaW5mbygpCnByaW50KCdkYXRhc2V0IGxpbmUgNTQnLCBkYXRhc2V0WyduZXd2YWx1ZSddKQpzdW1tYXRpb24gPSAwCmZvciBpbmRleCwgcm93IGluIGRhdGFzZXQuaXRlcnJvd3MoKToKICAgIGlmIG5vdCBwZC5pc25hKHJvd1snbmV3dmFsdWUnXSk6CiAgICAgICAgc3VtbWF0aW9uICs9IHJvd1snbmV3dmFsdWUnXQogICAgICAgIHByaW50KCdzdW1tYXRpb24nLCBzdW1tYXRpb24pCmRhdGFzZXRbJ3J1bnRpbWVfZmlsbF9jb2xvciddID0gMQpkYXRhc2V0WydmaWxsX2NvbG9yX3RydWUnXSA9IGRhdGFzZXRbJ25ld3ZhbHVlJ10uYXBwbHkobGFtYmRhIHg6ICdyZWQnIGlmIHggPiAwIGVsc2UgJ2dyZWVuJykKcHJpbnQoJ2RhdGFzZXRmaWxsY29sb3J0cnVlJywgZGF0YXNldFsnZmlsbF9jb2xvcl90cnVlJ10pCnJvd19saXN0ID0gW10KZm9yIGluZGV4LCByb3cgaW4gZGF0YXNldC5pdGVycm93cygpOgogICAgcm93X2RpY3QgPSByb3cudG9fZGljdCgpCnJvd19saXN0LmFwcGVuZChyb3dfZGljdCkKZm9yIGYgaW4gcm93X2xpc3Q6CiAgICBpZiBmWyduZXd2YWx1ZSddIGlzIG5vdCBOb25lOgogICAgICAgIGRhdGFzZXRbJ3J1bnRpbWVfdGV4dCddID0gc3RyKHN1bW1hdGlvbikKcHJpbnQoJ3N1bW1hdGlvbiBsaW5lIDcyJywgc3VtbWF0aW9uKQpwcmludCgnbGluZSA3MyAnLCBkYXRhc2V0WydydW50aW1lX3RleHQnXSkKIyB3ID0gZGF0YXNldC5zb3J0X3ZhbHVlcygnY2lfbmFtZScpLmdyb3VwYnkoWydjaWlkJ10pWydjaV9uYW1lJ10udHJhbnNmb3JtKCdjdW1jb3VudCcpCmRhdGFzZXRbJ2NpaWQnXSA9IGRhdGFzZXRbJ2NpaWQnXS5maWxsbmEoZGF0YXNldFsnY2lfaWQnXSkKIyBkYXRhc2V0WydmaWxsX2NvbG9yX3RydWUnXSA9IHcKZGF0YXNldCA9IGRhdGFzZXQuZHJvcChjb2x1bW5zPVsnY2lpZCcsICdjaV9uYW1lJywgJ25ld3ZhbHVlJywgJ2NpX2lkJ10pCnByaW50KCdydW50aW1lX3RleHRfdmFsdWUnLCBkYXRhc2V0WydydW50aW1lX3RleHQnXS52YWx1ZXMpCmVsZW1lbnRfaWRzID0gZGF0YXNldFsnZWxlbWVudF9pZCddLmFzdHlwZShzdHIpLnRvbGlzdCgpCnJ1bl90aW1lX3ZhbHVlcyA9IGRhdGFzZXRbJ3J1bnRpbWVfdGV4dCddLnRvbGlzdCgpCnF1ZXJ5X2VsZW1lbnRfdGV4dCA9IGYnVVBEQVRFIGJjY19zdmdfZWxlbWVudHMgU0VUIGZpbGxfY29sb3JfdHJ1ZSA9ID8sIHJ1bnRpbWVfdGV4dCA9ID8gV0hFUkUgZWxlbWVudF9pZCA9ID8nCiMgcGxhY2Vob2xkZXJzID0gJywnLmpvaW4oYCc/J2AqIGxlbihlbGVtZW50X2lkcykpCmZvciBlbGVtZW50X2lkLCBydW50aW1lX3RleHRfdmFsdWUgaW4gemlwKGVsZW1lbnRfaWRzLCBydW5fdGltZV92YWx1ZXMpOgogICAgcHJpbnQocnVudGltZV90ZXh0X3ZhbHVlLGVsZW1lbnRfaWQsJ2VuZHJlc3VsdCcpCiAgICBxdWVyeSA9IGYnJydVUERBVEUgYmNjX3N2Z19lbGVtZW50cyBTRVQgZmlsbF9jb2xvcl90cnVlID0gJ3JlZCcsIHJ1bnRpbWVfdGV4dCA9ICd7cnVudGltZV90ZXh0X3ZhbHVlfScgV0hFUkUgZWxlbWVudF9pZCA9ICd7ZWxlbWVudF9pZH0nICcnJwogICAgbXljdXJzb3IuZXhlY3V0ZShxdWVyeSkKbXljdXJzb3IuY2xvc2UoKQpjb25uZWN0aW9uLmNvbW1pdCgpCmNvbm5lY3Rpb24uY2xvc2UoKQpwcmludCgnY29tcGxldGVkJykKCgoKCg==","SRE1"
"LEONW_TS62346","LEONW_TS62346_leo1311.py","aW1wb3J0IHJlcXVlc3RzCgppbXBvcnQganNvbgoKaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyCmltcG9ydCBvcwppbXBvcnQgZGF0ZXRpbWUKaW1wb3J0IHN5cwppbXBvcnQgcmUKaW1wb3J0IHRpbWUKZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHF1b3RlX3BsdXMsIHVybHBhcnNlCmZyb20gbGVhcC51dGlscy5VdGlsaXRpZXMgaW1wb3J0IFV0aWxpdGllcwpmcm9tIHB5c3Bhcmsuc3FsIGltcG9ydCBTcGFya1Nlc3Npb24KaW1wb3J0IG15c3FsLmNvbm5lY3RvciBhcyBjb25uZWN0b3IKZnJvbSBweXNwYXJrLnNxbC5mdW5jdGlvbnMgaW1wb3J0ICoKCm9zLmVudmlyb25bJ0hUVFBfUFJPWFknXT0nJwogCm9zLmVudmlyb25bJ0hUVFBTX1BST1hZJ109JycKCiNpbnN0YW5jZV9kYXRldGltZT0nd2luZG93c19tZW1vcnlfdXNhZ2UxIG51bGwgMjAuMCcKCmxvZ2dlci5iYXNpY0NvbmZpZygKICAgIGxldmVsPWxvZ2dlci5JTkZPLAogICAgZm9ybWF0PSclKGFzY3RpbWUpcyBJTkZPICUobWVzc2FnZSlzJywKICAgIGRhdGVmbXQ9JyV5LyVtLyVkICVIOiVNOiVTJywKKQoKYXJndW1lbnRzID0gc3lzLmFyZ3YKZGljdCA9IHt9CmZvciBhcmcgaW4gYXJndW1lbnRzOgogICAgdHJ5OgogICAgICAgIGRpY3RbYXJnLnNwbGl0KCc6JylbMF1dID0gJzonLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQogICAgZXhjZXB0OgogICAgICAgIGEgPSAnZXJyb3InCiAKIApsb2dnZXIuaW5mbygnUmVhZGluZyBpbnN0YW5jZV9kYXRldGltZTonKQoKI0xFQVAgRGF0YXNvdXJjZQpsZWFwZHMgPSBkaWN0WydMRUFQRGF0YVNvdXJjZSddCmxvZ2dlci5pbmZvKCdsZWFwZHMnKQpsb2dnZXIuaW5mbyhsZWFwZHMpCmxlYXBEU2RpY3QgPWpzb24ubG9hZHMobGVhcGRzKQoKI3NhdmUgdG8gZGIKIyBjb2x1bW5MaXN0ID0gZGYuY29sdW1ucwp1c2VybmFtZSA9IGxlYXBEU2RpY3RbJ3VzZXJOYW1lJ10KcGFzc3dvcmQgPSBVdGlsaXRpZXMuZGVjcnlwdChsZWFwRFNkaWN0WydwYXNzd29yZCddLGxlYXBEU2RpY3RbJ3NhbHQnXSkKaG9zdCA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkuaG9zdG5hbWUKcG9ydCA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkucG9ydApkYXRhYmFzZSA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkucGF0aC5yc3BsaXQoJy8nLCAxKVsxXQpsb2dnZXIuaW5mbygndXNlcm5hbWUnKQpsb2dnZXIuaW5mbyh1c2VybmFtZSkKbG9nZ2VyLmluZm8oJ3Bhc3N3b3JkJykKbG9nZ2VyLmluZm8ocGFzc3dvcmQpCmNvbm5lY3Rpb24gPSBjb25uZWN0b3IuY29ubmVjdCgKICAgIHVzZXI9dXNlcm5hbWUsIHBhc3N3b3JkPXBhc3N3b3JkLCBob3N0PWhvc3QsIHBvcnQ9cG9ydCwgZGF0YWJhc2U9ZGF0YWJhc2UKKQpjdXJzb3IgPSBjb25uZWN0aW9uLmN1cnNvcigpCiAKc3ViX3F1ZXJ5PWYnU0VMRUNUIHcuZXZlbnRfaWQgRlJPTSBgZW1mX3dvcmtmbG93X3N0YXRlYCB3IFdIRVJFIHcuc2VsZWN0b3JfcGFyYW09XCd3aW5kb3dzX21lbW9yeV91c2FnZSBudWxsIDEyLTEyLTIwMjMgMDU6MzA6MjZcJyBBTkQgdy53b3JrZmxvd19zdGF0ZT1cJ0FjdGlvbmFibGVfZG9uZVwnOycKCiAgICAKICAgICMgbG9nZ2VyLmluZm8ocXVlcnkyKQogICAKY3Vyc29yLmV4ZWN1dGUoc3ViX3F1ZXJ5KQpyZXM9Y3Vyc29yLmZldGNoYWxsKCkKbG9nZ2VyLmluZm8ocmVzKQpjdXJzb3IuY2xvc2UoKQpjb25uZWN0aW9uLmNsb3NlKCkKbG9nZ2VyLmluZm8oJ0NvbXBsZXRlZCcpCgoKCgoKCgoKCgoKCg==","leo1311"
"LEOPBLSH61379","LEOPBLSH61379_leo1311.py","","leo1311"
"LEOTRGR_32549","LEOTRGR_32549_leo1311.py","IyBpbXBvcnQgcmVxdWVzdHMKIyBpbXBvcnQgb3MgCgojIGltcG9ydCBsb2dnaW5nIGFzIGxvZ2dlcgojIGxvZ2dlci5iYXNpY0NvbmZpZygKIyAgICAgbGV2ZWw9bG9nZ2VyLklORk8sCiMgICAgIGZvcm1hdD0nJShhc2N0aW1lKXMgSU5GTyAlKG1lc3NhZ2UpcycsCiMgICAgIGRhdGVmbXQ9JyV5LyVtLyVkICVIOiVNOiVTJywKIyApCiMgdXJsPSdodHRwOi8vMTAuODEuNjQuMjIzOjU1NTgvc3RhcnQnCiMgb3MuZW52aXJvblsnSFRUUF9QUk9YWSddPScnCiAKIyBvcy5lbnZpcm9uWydIVFRQU19QUk9YWSddPScnCiMgcmVzID0gcmVxdWVzdHMuZ2V0KAojICAgICAgICAgdXJsCiMgICAgICkKIyBsb2dnZXIuSU5GTygnY29tcGxldGVkJykKCmltcG9ydCByZXF1ZXN0cwppbXBvcnQgbG9nZ2luZyBhcyBsb2dnZXIKaW1wb3J0IHRpbWUKaW1wb3J0IG9zCmltcG9ydCBqc29uCgpsb2dnZXIuYmFzaWNDb25maWcobGV2ZWw9bG9nZ2VyLklORk8sIGZvcm1hdD0nJShhc2N0aW1lKXMgSU5GTyAlKG1lc3NhZ2UpcycsIGRhdGVmbXQ9JyV5LyVtLyVkICVIOiVNOiVTJykKaGVhZGVycyA9ICB7J0NvbnRlbnQtVHlwZSc6J2FwcGxpY2F0aW9uL2pzb24nfQoKYXBpX3VybD0naHR0cDovLzEwLjgxLjY0LjIyMzo1NTU4L3N0YXJ0JwoKIyBvcy5lbnZpcm9uWydIVFRQX1BST1hZJ109J2JscnByb3h5LmFkLmluZm9zeXMuY29tOjQ0MycKIAojIG9zLmVudmlyb25bJ0hUVFBTX1BST1hZJ109J2JscnByb3h5LmFkLmluZm9zeXMuY29tOjQ0MycKb3MuZW52aXJvblsnSFRUUF9QUk9YWSddPScnCiAKb3MuZW52aXJvblsnSFRUUFNfUFJPWFknXT0nJwpvcy5lbnZpcm9uWydodHRwX3Byb3h5J109JycKb3MuZW52aXJvblsnaHR0cHNfcHJveHknXT0nJwoKcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQoYXBpX3VybCx2ZXJpZnk9RmFsc2UpCmxvZ2dlci5pbmZvKCdyZXNwb25zZWVlJykKbG9nZ2VyLmluZm8ocmVzcG9uc2UpCnRpbWUuc2xlZXAoMikKCiMgYWxlcnRfcHVibGlzaGVyID0naHR0cHM6Ly9sZWFwMjo0MDA1L2FwaS9ldmVudC90cmlnZ2VyL2FsZXJ0X3B1Ymxpc2hlcl9lbWY/b3JnPWxlbzEzMTEnCmFsZXJ0X3B1Ymxpc2hlcj0naHR0cHM6Ly9sZWFwNzo0MDA2L2FwaS9ldmVudC90cmlnZ2VyL0FsZXJ0X3B1Ymxpc2hlcl9lbWY/b3JnPWxlbzEzMTEmY29yZWxpZD0mZGF0YXNvdXJjZU5hbWU9TEVBTENMQ0wxMjEzMicKCm9zLmVudmlyb25bJ0hUVFBfUFJPWFknXT0nJwogCm9zLmVudmlyb25bJ0hUVFBTX1BST1hZJ109JycKb3MuZW52aXJvblsnaHR0cF9wcm94eSddPScnCm9zLmVudmlyb25bJ2h0dHBzX3Byb3h5J109JycKZGF0YSA9Jycne30nJycKIyBxdWVyeWpzb24yPWpzb24ubG9hZHMoZGF0YSkKIyBxdWVyeWpzb24yWydib2R5J109cXVlcnlqc29uMgpyZXM9IHJlcXVlc3RzLnBvc3QoYWxlcnRfcHVibGlzaGVyLGRhdGE9ZGF0YSxoZWFkZXJzPWhlYWRlcnMsdmVyaWZ5PUZhbHNlKQpsb2dnZXIuaW5mbyhyZXMpCmxvZ2dlci5pbmZvKCdDb21wbGV0ZWQnKQoKCgoKCgoKCg==","leo1311"
"LEOTRGR_56109","LEOTRGR_56109_leo1311.py","aW1wb3J0IHJlcXVlc3RzCmltcG9ydCBvcyAKCmltcG9ydCBsb2dnaW5nIGFzIGxvZ2dlcgpsb2dnZXIuYmFzaWNDb25maWcoCiAgICBsZXZlbD1sb2dnZXIuSU5GTywKICAgIGZvcm1hdD0nJShhc2N0aW1lKXMgSU5GTyAlKG1lc3NhZ2UpcycsCiAgICBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycsCikKdXJsPSdodHRwOi8vMTAuODEuNjQuMjIzOjU1NTgvc3RvcCcKb3MuZW52aXJvblsnSFRUUF9QUk9YWSddPScnCiAKb3MuZW52aXJvblsnSFRUUFNfUFJPWFknXT0nJwpyZXMgPSByZXF1ZXN0cy5wb3N0KAogICAgICAgIHVybAogICAgKQpsb2dnZXIuSU5GTygnY29tcGxldGVkJykKCg==","leo1311"
"LEOTST2936928","LEOTST2936928_leo1311.py","ZnJvbSBweXNwYXJrLnNxbCBpbXBvcnQgU3BhcmtTZXNzaW9uCmltcG9ydCByZXF1ZXN0cwppbXBvcnQgc3lzCmltcG9ydCBvcwppbXBvcnQgbXlzcWwuY29ubmVjdG9yCmZyb20gcHlzcGFyay5zcWwuZnVuY3Rpb25zIGltcG9ydCAqCmltcG9ydCBqc29uCmltcG9ydCBkYXRldGltZQpmcm9tIHVybGxpYi5wYXJzZSBpbXBvcnQgcXVvdGVfcGx1cywgdXJscGFyc2UKZnJvbSBsZWFwLnV0aWxzLlV0aWxpdGllcyBpbXBvcnQgVXRpbGl0aWVzCmltcG9ydCBsb2dnaW5nIGFzIGxvZ2dlcgoKCmxvZ2dlci5iYXNpY0NvbmZpZyhsZXZlbD1sb2dnZXIuSU5GTyxmb3JtYXQ9JyUoYXNjdGltZSlzIElORk8gJShtZXNzYWdlKXMnLCBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycpCgphcmd1bWVudHMgPXN5cy5hcmd2CmRpY3Q9e30KZm9yIGFyZyBpbiBhcmd1bWVudHM6CiAgICAgdHJ5OgogICAgICAgICBkaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICgnOicpLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQogICAgIGV4Y2VwdDoKICAgICAgICAgYT0nZXJyb3InCiAgICAgICAgCiNMRUFQIERhdGFzb3VyY2UKbGVhcGRzID0gZGljdFsnTEVBUERhdGFTb3VyY2UnXQpsZWFwRFNkaWN0ID1qc29uLmxvYWRzKGxlYXBkcykKCiNzYXZlIHRvIGRiCmNvbHVtbkxpc3QgPSBkZi5jb2x1bW5zCnVzZXJuYW1lID0gbGVhcERTZGljdFsndXNlck5hbWUnXQpwYXNzd29yZCA9IFV0aWxpdGllcy5kZWNyeXB0KGxlYXBEU2RpY3RbJ3Bhc3N3b3JkJ10sbGVhcERTZGljdFsnc2FsdCddKQpob3N0ID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5ob3N0bmFtZQpwb3J0ID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5wb3J0CmRhdGFiYXNlID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5wYXRoLnJzcGxpdCgnLycsIDEpWzFdCmxvZ2dlci5pbmZvKCd1c2VybmFtZScpCmxvZ2dlci5pbmZvKHVzZXJuYW1lKQpsb2dnZXIuaW5mbygnY29tcGxldGVkJykK","leo1311"
"LEOCLSR_10888","LEOCLSR_10888_leo1311.py","aW1wb3J0IGJhc2U2NAoKaW1wb3J0IG15c3FsLmNvbm5lY3RvciBhcyBjb25uZWN0b3IKCmltcG9ydCByZXF1ZXN0cwoKaW1wb3J0IGpzb24KCmltcG9ydCBsb2dnaW5nIGFzIGxvZ2dlcgoKaW1wb3J0IHJlCgppbXBvcnQgc3lzCgppbXBvcnQgb3MKaW1wb3J0IGRhdGV0aW1lCgoKb3MuZW52aXJvblsnSFRUUF9QUk9YWSddPSdibHJwcm94eS5hZC5pbmZvc3lzLmNvbTo0NDMnCiAKb3MuZW52aXJvblsnSFRUUFNfUFJPWFknXT0nYmxycHJveHkuYWQuaW5mb3N5cy5jb206NDQzJwoKCnVzZXJuYW1lID0gJ2xlYXBhZG0nCnBhc3N3b3JkID0gJ0YxKWd7dHlDJwpob3N0ID0gJzEwLjgyLjEyMS4xNTUnCnBvcnQgPSAzMzA2CmRhdGFiYXNlID0gJ2xlYXBxdHonCgoKCmNvbm5lY3Rpb24gPSBjb25uZWN0b3IuY29ubmVjdCgKICAgIHVzZXI9dXNlcm5hbWUsIHBhc3N3b3JkPXBhc3N3b3JkLCBob3N0PWhvc3QsIHBvcnQ9cG9ydCwgZGF0YWJhc2U9ZGF0YWJhc2UKKQoKCgpsb2dnZXIuYmFzaWNDb25maWcoCiAgICBsZXZlbD1sb2dnZXIuSU5GTywKICAgIGZvcm1hdD0nJShhc2N0aW1lKXMgSU5GTyAlKG1lc3NhZ2UpcycsCiAgICBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycsCikKIAphcmd1bWVudHMgPSBzeXMuYXJndgpteV9kaWN0ID0ge30KZm9yIGFyZyBpbiBhcmd1bWVudHM6CiAgICB0cnk6CiAgICAgICAgbXlfZGljdFthcmcuc3BsaXQoJzonKVswXV0gPSAnOicuam9pbihhcmcuc3BsaXQoJzonKVsxOl0pCiAgICBleGNlcHQ6CiAgICAgICAgYSA9ICdlcnJvcicKIAogCmxvZ2dlci5pbmZvKCdSZWFkaW5nIGluc3RhbmNlX2RhdGV0aW1lOicpCmxvZ2dlci5pbmZvKG15X2RpY3RbJ2luc3RhbmNlX2RhdGV0aW1lJ10pCmluc3RhbmNlX2RhdGV0aW1lPW15X2RpY3RbJ2luc3RhbmNlX2RhdGV0aW1lJ10KCgoKCmVtZl9kYiA9IGNvbm5lY3Rvci5jb25uZWN0KAogICAgdXNlcj11c2VybmFtZSwgcGFzc3dvcmQ9cGFzc3dvcmQsIGhvc3Q9aG9zdCwgcG9ydD1wb3J0LCBkYXRhYmFzZT1kYXRhYmFzZQopCmN1cnNvciA9IGVtZl9kYi5jdXJzb3IoKQp0cnk6CiBxdWVyeSA9IGYnU0VMRUNUICogRlJPTSBgZW1mX2V2ZW50YCBXSEVSRSBzZWxlY3Rvcl9wYXJhbSA9IFwne2luc3RhbmNlX2RhdGV0aW1lfVwnOycKIGN1cnNvci5leGVjdXRlKHF1ZXJ5KQogcmVzdWx0cyA9IGN1cnNvci5mZXRjaGFsbCgpCiBpZihsZW4ocmVzdWx0cykhPTApOgogICAgbG9nZ2VyLmluZm8oJ2NvbmRpdGlvbiBmYWxzZScpCiAgICBhY3Rpb25fZmxhZz0nTm8nICAgICAKICAgIHF1ZXJ5MiA9IGYnVVBEQVRFIGBlbWZfZXZlbnRgIFNFVCBhY3Rpb25hYmxlID0gXCd7YWN0aW9uX2ZsYWd9XCcgV0hFUkUgc2VsZWN0b3JfcGFyYW0gPSBcJ3tpbnN0YW5jZV9kYXRldGltZX1cJzsnCiAgICBjdXJzb3IuZXhlY3V0ZShxdWVyeTIpCiBlbWZfZGIuY29tbWl0KCkKZXhjZXB0IGNvbm5lY3Rvci5lcnJvcnMuT3BlcmF0aW9uYWxFcnJvciBhcyBlOgogICAgIyBIYW5kbGUgdGhlIHRpbWVvdXQgZXhjZXB0aW9uCiAgICAgIGxvZ2dlci5pbmZvKCdNeVNRTCBjb25uZWN0aW9uIHRpbWVvdXQ6IHt9Jy5mb3JtYXQoZSkpCiAKZmluYWxseToKICAgICMgQ2xvc2UgdGhlIGRhdGFiYXNlIGNvbm5lY3Rpb24KICAgICAgZW1mX2RiLmNsb3NlKCkKbG9nZ2VyLmluZm8oJ0NvbXBsZXRlZCcpCg==","leo1311"
"LEOPBLSH70643","LEOPBLSH70643_leo1311.py","","leo1311"
"LEOTST_M35555","LEOTST_M35555_leo1311.py","aW1wb3J0IHN5cwppbXBvcnQganNvbgppbXBvcnQgb3MKaW1wb3J0IHJlcXVlc3RzCmltcG9ydCBkYXRldGltZQojIGltcG9ydCBweW1vbmdvIAppbXBvcnQgbG9nZ2luZyBhcyBsb2dnZXIKaW1wb3J0IGJhc2U2NAppbXBvcnQgcGFuZGFzIGFzIHBkCmltcG9ydCBza2xlYXJuCmZyb20gc2tsZWFybi5lbnNlbWJsZSBpbXBvcnQgSXNvbGF0aW9uRm9yZXN0CmltcG9ydCBwaWNrbGUKaW1wb3J0IHRpbWUKaW1wb3J0IHJhbmRvbQpmcm9tIGRhdGV0aW1lIGltcG9ydCAgdGltZWRlbHRhCgpsb2dnZXIuYmFzaWNDb25maWcobGV2ZWw9bG9nZ2VyLklORk8sIGZvcm1hdD0nJShhc2N0aW1lKXMgSU5GTyAlKG1lc3NhZ2UpcycsIGRhdGVmbXQ9JyV5LyVtLyVkICVIOiVNOiVTJykKCgoKbmV3X3JlcyA9IHt9CgoKCmRlZiB0cmFpbl9tb2RlbChtb2RlbCxqc29ubWV0cmljKToKICAgIGN1cnJlbnRfdGltZSA9IGRhdGV0aW1lLmRhdGV0aW1lLnV0Y25vdygpCgogICAgb25lX2RheV9hZ28gPSBjdXJyZW50X3RpbWUgLSBkYXRldGltZS50aW1lZGVsdGEoZGF5cz0xKQogICAgdHdvX2RheXNfYWdvID0gY3VycmVudF90aW1lIC0gZGF0ZXRpbWUudGltZWRlbHRhKGRheXM9MikKICAgIHN0YXJ0ID0gdHdvX2RheXNfYWdvLmlzb2Zvcm1hdCgpKyAnWicKICAgIGVuZCA9IG9uZV9kYXlfYWdvLmlzb2Zvcm1hdCgpKyAnWicKCiAgICAjIGxvZ2dlci5pbmZvKHN0YXJ0KQogICAgIyBsb2dnZXIuaW5mbyhlbmQpCgogICAgIyBHZXQgdGhlIFByb21ldGhldXMgbWV0cmljcwogICAjIHByb21ldGhldXNfYXBpPWYnaHR0cDovL2N2cmljdGxwdG0yMTo5MDkwL2FwaS92MS9xdWVyeV9yYW5nZT9xdWVyeT1sYWJlbF9yZXBsYWNlKCUwQSUyMCUyMGxhYmVsX3JlcGxhY2UoJTBBJTIwJTIwbGFiZWxfcmVwbGFjZSgxMDAtYXZnKHJhdGUod2luZG93c19jcHVfdGltZV90b3RhbCU3Qm1vZGUlM0QnaWRsZSclN0QlNUIxbSU1RCkpJTIwKiUyMDEwMCUyQydfX25hbWVfXyclMkMnd2luZG93c19tZW1vcnlfdXNhZ2UnJTJDJ19fbmFtZV9fJyUyQycnKSUyQydpbnN0YW5jZSclMkMnbnVsbCclMkMnaW5zdGFuY2UnJTJDJyclMEEpJTBBJTJDJ2pvYiclMkMnbnVsbCclMkMnam9iJyUyQycnJTBBKSZzdGFydD17c3RhcnR9JmVuZD17ZW5kfSZzdGVwPTEwcycKICAgIyBwcm9tZXRoZXVzX2FwaT1mJ2h0dHA6Ly9jdnJpY3RscHRtMjE6OTA5MC9hcGkvdjEvcXVlcnlfcmFuZ2U/cXVlcnk9bGFiZWxfcmVwbGFjZSglMEElMjAlMjBsYWJlbF9yZXBsYWNlKCUwQSUyMCUyMGxhYmVsX3JlcGxhY2UoMTAwLWF2ZyhyYXRlKHdpbmRvd3NfY3B1X3RpbWVfdG90YWwlN0Jtb2RlJTNEJ2lkbGUnJTdEJTVCMW0lNUQpKSUyMColMjAxMDAlMkMnX19uYW1lX18nJTJDJ3dpbmRvd3NfbWVtb3J5X3VzYWdlJyUyQydfX25hbWVfXyclMkMnJyklMkMnaW5zdGFuY2UnJTJDJ251bGwnJTJDJ2luc3RhbmNlJyUyQycnJTBBKSUwQSUyQydqb2InJTJDJ251bGwnJTJDJ2pvYiclMkMnJyUwQSkmc3RhcnQ9e3N0YXJ0fSZlbmQ9e2VuZH0mc3RlcD0xMHMnCiAgICBwcm9tZXRoZXVzX2FwaT1mJ2h0dHA6Ly9jdnJpY3RscHRtMjE6OTA5MC9hcGkvdjEvcXVlcnlfcmFuZ2U/cXVlcnk9bGFiZWxfcmVwbGFjZSglMEElMjAlMjBsYWJlbF9yZXBsYWNlKCUwQSUyMCUyMGxhYmVsX3JlcGxhY2UoMTAwLWF2ZyhyYXRlKHdpbmRvd3NfY3B1X3RpbWVfdG90YWwlN0Jtb2RlJTNEXCdpZGxlXCclN0QlNUIxbSU1RCkpJTIwKiUyMDEwMCUyQ1wnX19uYW1lX19cJyUyQ1wnd2luZG93c19tZW1vcnlfdXNhZ2VcJyUyQ1wnX19uYW1lX19cJyUyQ1wnXCcpJTJDXCdpbnN0YW5jZVwnJTJDXCdudWxsXCclMkNcJ2luc3RhbmNlXCclMkNcJ1wnJTBBKSUwQSUyQ1wnam9iXCclMkNcJ251bGxcJyUyQ1wnam9iXCclMkNcJ1wnJTBBKSZzdGFydD17c3RhcnR9JmVuZD17ZW5kfSZzdGVwPTEwcycKICAgIyBwcm9tZXRoZXVzX2FwaSA9IGYnaHR0cDovL2N2cmljdGxwdG0yMTo5MDkwL2FwaS92MS9xdWVyeV9yYW5nZT9xdWVyeT1sYWJlbF9yZXBsYWNlKHswQX0lMjAlMjBsYWJlbF9yZXBsYWNlKHswQX0lMjAlMjBsYWJlbF9yZXBsYWNlKDEwMC1hdmcocmF0ZSh3aW5kb3dzX2NwdV90aW1lX3RvdGFse21vZGU9J2lkbGUnfVsxbV0pKSUyMColMjAxMDAlMkMnX19uYW1lX18nJTJDJ3dpbmRvd3NfbWVtb3J5X3VzYWdlJyUyQydfX25hbWVfXyclMkMnJyklMkMnaW5zdGFuY2UnJTJDJ251bGwnJTJDJ2luc3RhbmNlJyUyQycnezBBfSUyQydqb2InJTJDJ251bGwnJTJDJ2pvYiclMkMnJ3swQX0pJnN0YXJ0PXtzdGFydH0mZW5kPXtlbmR9JnN0ZXA9MTBzJwogICAgbG9nZ2VyLmluZm8ocHJvbWV0aGV1c19hcGkpCiAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldChwcm9tZXRoZXVzX2FwaSkKCiAgICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQocHJvbWV0aGV1c19hcGkpCiAgICBlbHNlOgogICAgICAgIHJlc3BvbnNlID0gJ05vIGRhdGEgYXZhaWxhYmxlJwoKICAgIGpzb25fZGF0YSA9IGpzb24ubG9hZHMocmVzcG9uc2UuY29udGVudCkKICAgIGRhdGEgPSBqc29uX2RhdGFbJ2RhdGEnXQogICAgcmVzdWx0PWRhdGFbJ3Jlc3VsdCddCgogICAgZm9yIGl0ZW0gaW4gcmVzdWx0OgogICAgICAgIGlmKGl0ZW1bJ21ldHJpYyddPT1qc29ubWV0cmljKToKICAgICAgICAgICAgbW9kZWwuZml0KGl0ZW1bJ3ZhbHVlcyddKQogICAgcmV0dXJuIG1vZGVsCgoKCiMgUHJveHkKb3MuZW52aXJvblsnSFRUUF9QUk9YWSddPScnCm9zLmVudmlyb25bJ0hUVFBTX1BST1hZJ109JycKCgoKY3VycmVudF90aW1lID0gZGF0ZXRpbWUuZGF0ZXRpbWUudXRjbm93KCkKI3N0YXJ0ID0gZGF0ZXRpbWUuZGF0ZXRpbWUoY3VycmVudF90aW1lLnllYXIsIGN1cnJlbnRfdGltZS5tb250aCwgY3VycmVudF90aW1lLmRheSwgY3VycmVudF90aW1lLmhvdXIsIGN1cnJlbnRfdGltZS5taW51dGUsIGN1cnJlbnRfdGltZS5zZWNvbmQsIHR6aW5mbyA9IE5vbmUpCnRvZGF5RGF0ZSA9IGN1cnJlbnRfdGltZS5zdHJmdGltZSgnJVktJW0tJWQgJUg6JU0nKQojZW5kID0gY3VycmVudF90aW1lLmlzb2Zvcm1hdCgpICsgJ1onCnR3b19taW5fYWdvID0gY3VycmVudF90aW1lIC0gZGF0ZXRpbWUudGltZWRlbHRhKG1pbnV0ZXM9MikKZW5kID0gdHdvX21pbl9hZ28uaXNvZm9ybWF0KCkrICdaJwpwcmludChlbmQpCgojZW5kIHRpbWUgZm9yIHVybAp0ZW5fbWluX2FnbyA9IGN1cnJlbnRfdGltZSAtIGRhdGV0aW1lLnRpbWVkZWx0YShtaW51dGVzPTUpCiNlbmRfdGltZSA9IHRlbl9taW5fYWdvLnN0cmZ0aW1lKCclWS0lbS0lZCAlSDolTTolUycpCnN0YXJ0ID0gdGVuX21pbl9hZ28uaXNvZm9ybWF0KCkrICdaJwojcHJpbnQodHlwZSh0ZW5fbWluX2FnbykpCnByaW50KHN0YXJ0KQoKIyBHZXQgdGhlIFByb21ldGhldXMgbWV0cmljcwojIHByb21ldGhldXNfYXBpID0gZidodHRwOi8vdmljdHNlY3N0MjY6OTA5MC9hcGkvdjEvcXVlcnlfcmFuZ2U/cXVlcnk9cHJvY2Vzc19jcHVfdXNhZ2Umc3RhcnQ9e3llc3RlcmRheURhdGV9VDAwOjAwOjAwWiZlbmQ9e3RvZGF5RGF0ZX1UMDU6MDA6MDAuMDBaJnN0ZXA9MTBzJwpwcm9tZXRoZXVzX2FwaT1mJ2h0dHA6Ly9jdnJpY3RscHRtMjE6OTA5MC9hcGkvdjEvcXVlcnlfcmFuZ2U/cXVlcnk9bGFiZWxfcmVwbGFjZSglMEElMjAlMjBsYWJlbF9yZXBsYWNlKCUwQSUyMCUyMGxhYmVsX3JlcGxhY2UoMTAwLWF2ZyhyYXRlKHdpbmRvd3NfY3B1X3RpbWVfdG90YWwlN0Jtb2RlJTNEXCdpZGxlXCclN0QlNUIxbSU1RCkpJTIwKiUyMDEwMCUyQ1wnX19uYW1lX19cJyUyQ1wnd2luZG93c19tZW1vcnlfdXNhZ2VcJyUyQ1wnX19uYW1lX19cJyUyQ1wnXCcpJTJDXCdpbnN0YW5jZVwnJTJDXCdudWxsXCclMkNcJ2luc3RhbmNlXCclMkNcJ1wnJTBBKSUwQSUyQ1wnam9iXCclMkNcJ251bGxcJyUyQ1wnam9iXCclMkNcJ1wnJTBBKSZzdGFydD17c3RhcnR9JmVuZD17ZW5kfSZzdGVwPTEwcycKbG9nZ2VyLmluZm8ocHJvbWV0aGV1c19hcGkpCnJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KHByb21ldGhldXNfYXBpKQpsb2dnZXIuaW5mbygnbG9nIHJlc3BvbmUnKQojIGxvZ2dlci5pbmZvKHJlc3BvbnNlLmNvbnRlbnQpCmlmIHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoKICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KHByb21ldGhldXNfYXBpKQplbHNlOgogICAgcmVzcG9uc2UgPSAnTm8gZGF0YSBhdmFpbGFibGUnCgpqc29uX2RhdGEgPSBqc29uLmxvYWRzKHJlc3BvbnNlLmNvbnRlbnQpCmRhdGEgPSBqc29uX2RhdGFbJ2RhdGEnXQpyZXN1bHQ9ZGF0YVsncmVzdWx0J10KCgojY29kZSB0byBjcmVhdGUgYXJ0aWZpY2FsIGFsZXJ0cwojIHRpbWVzdGFtcHMgPSBbY3VycmVudF90aW1lLnRpbWVzdGFtcCgpIC0gcmFuZG9tLnVuaWZvcm0oaSwgMCkgZm9yIGkgaW4gcmFuZ2UoMjApXQpjdXJyZW50X3RpbWUgPSBkYXRldGltZS5kYXRldGltZS5ub3coKQpzdGFydF90aW1lID0gY3VycmVudF90aW1lIC0gdGltZWRlbHRhKG1pbnV0ZXM9NCkKZ2FwID0gdGltZWRlbHRhKHNlY29uZHM9MTApCgojIENhbGN1bGF0ZSBzdGFydGluZyB0aW1lIGZvciB0aGUgbGFzdCAxMCBtaW51dGVzCnN0YXJ0X3RpbWUgPSBjdXJyZW50X3RpbWUgLSB0aW1lZGVsdGEobWludXRlcz0xMCkKCiMgR2VuZXJhdGUgMTAgdGltZXN0YW1wcyB3aXRoIDMwLXNlY29uZCBnYXAgd2l0aGluIHRoZSBsYXN0IDEwIG1pbnV0ZXMKdGltZXN0YW1wcyA9IFsKICAgIChzdGFydF90aW1lICsgaSAqIGdhcCkudGltZXN0YW1wKCkgCiAgICBmb3IgaSBpbiByYW5nZSgxMCkKXQp2YWx1ZXMgPSBbcmFuZG9tLnJhbmRpbnQoNTEsIDkwKSBmb3IgXyBpbiByYW5nZSgxMCldICAjIHJhbmRvbSB2YWx1ZXMgYmV0d2VlbiA1MSBhbmQgMTAwCgojIGNyZWF0ZWRWYWwxPWxpc3QoemlwKHRpbWVzdGFtcHMsIHZhbHVlcykpCmNyZWF0ZWRWYWwxID0gbGlzdCh6aXAodGltZXN0YW1wcywgW2YnJyd7dn0nJycgZm9yIHYgaW4gdmFsdWVzXSkpCmNyZWF0ZWRWYWwgPSBbbGlzdChpdGVtKSBmb3IgaXRlbSBpbiBjcmVhdGVkVmFsMV0KcmVzdWx0WzBdWyd2YWx1ZXMnXT1yZXN1bHRbMF1bJ3ZhbHVlcyddK2NyZWF0ZWRWYWwKCmxvZ2dlci5pbmZvKCdhcnRpZmljaWFsJykKIyBsb2dnZXIuaW5mbyhyZXN1bHRbMF0pCgoKCiMgQ29ubmVjdCB0byB0aGUgTW9uZ29EQiBkYXRhYmFzZQojIGNsaWVudCA9IHB5bW9uZ28uTW9uZ29DbGllbnQoJzEwLjgyLjEyMy4xOScsIDI3MDE3LCB1c2VybmFtZT0nbGVhcGFkbScsIHBhc3N3b3JkPSczQFRDSyZeUycpCgojIENyZWF0ZSBhIGNvbGxlY3Rpb24gdG8gc3RvcmUgdGhlIGRhdGEKIyBkYiA9IGNsaWVudFsnYWRtaW4nXQojIGNvbGxlY3Rpb24gPSBkYlsncHJvbWV0aGV1c0RhdGEnXQoKI3B1Ymxpc2ggZXZlbnQgbWV0YWRhdGEKIyBhcGlfdXJsID0gJ2h0dHA6Ly9sZWFwMjo1NTU1L3B1Ymxpc2hFdmVudCcKYXBpX3VybD0naHR0cHM6Ly9sZWFwNzo0MDA1L2FwaS9ldmVudC90cmlnZ2VyL1JhYmJpdG1xX2VtZj9vcmc9bGVvMTMxMScKaGVhZGVycyA9ICB7J0NvbnRlbnQtVHlwZSc6J2FwcGxpY2F0aW9uL2pzb24nfQoKY291bnQgPTEKZm9yIGl0ZW0gaW4gcmVzdWx0OgogICAganNvbm1ldHJpYz1pdGVtWydtZXRyaWMnXQogICAgdmFsdWVzMT1pdGVtWyd2YWx1ZXMnXQogICAgI3ZhbHVlcz12YWx1ZXMxWzotM10KICAgIHZhbHVlcz12YWx1ZXMxCiAgICBsb2dnZXIuaW5mbygndmFsdWUtLScpCiAgICMgbG9nZ2VyLmluZm8odmFsdWVzKQogICAgdmFsdWVEVE8gPSBbXQogICAgbW9kZWw9SXNvbGF0aW9uRm9yZXN0KGNvbnRhbWluYXRpb249MC4wMSkKICAgIG1vZGVsID0gdHJhaW5fbW9kZWwobW9kZWwsanNvbm1ldHJpYykKICAgIGZpbGVuYW1lID0gJ2ZpbmFsaXplZF9tb2RlbCcrc3RyKGNvdW50KSsnLnNhdicKICAgIGNvdW50PWNvdW50KzEKICAgIHBpY2tsZS5kdW1wKG1vZGVsLCBvcGVuKGZpbGVuYW1lLCAnd2InKSkKICAgICNtb2RlbC5maXQodmFsdWVzKQoKICAgIGxvYWRlZF9tb2RlbCA9IHBpY2tsZS5sb2FkKG9wZW4oZmlsZW5hbWUsICdyYicpKQogICAgZGF0YT17fQogICAgZGF0YVsnYW5vbWFseSddPXBkLlNlcmllcyhtb2RlbC5wcmVkaWN0KHZhbHVlcykpLmFwcGx5KGxhbWJkYSB4Oid5ZXMnIGlmIHg9PS0xIGVsc2UgJ25vJykKICAgIGRhdGFbJ2Fub21hbHlfc2NvcmVzJ10gPSBtb2RlbC5kZWNpc2lvbl9mdW5jdGlvbih2YWx1ZXMpCiAgICAjIGxvZ2dlci5pbmZvKGRhdGFbJ2Fub21hbHknXSkKICAgICMgbG9nZ2VyLmluZm8oZGF0YVsnYW5vbWFseV9zY29yZXMnXSkKICAgIGZvciAoaXRlbTIsYW5vbWFseSxhbm9tYWx5X3Njb3JlcykgaW4gemlwKHZhbHVlcyxkYXRhWydhbm9tYWx5J10sZGF0YVsnYW5vbWFseV9zY29yZXMnXSk6CiAgICAgICAgdmFsdWVfZHRvID0gewogICAgICAgICAgICAndGltZXN0YW1wJyA6IGl0ZW0yWzBdLAogICAgICAgICAgICAndmFsdWUnIDogaXRlbTJbMV0sCiAgICAgICAgICAgICdhbm9tYWx5Jzphbm9tYWx5LAogICAgICAgICAgICAnYW5vbWFseV9zY29yZXMnOmFub21hbHlfc2NvcmVzCiAgICAgICAgfQogICAgICAgIAogICAgICAgIGlmKGFub21hbHk9PSd5ZXMnKToKICAgICAgICAjaWYoZmxvYXQoaXRlbTJbMV0pPjUpOgogICAgICAgICNhbm9tYWx5PT0neWVzJwogICAgICAgICAgICBfX25hbWVfXz1qc29ubWV0cmljWydfX25hbWVfXyddCiAgICAgICAgICAgIGluc3RhbmNlPWpzb25tZXRyaWNbJ2luc3RhbmNlJ10KICAgICAgICAgICAgam9iPWpzb25tZXRyaWNbJ2pvYiddCiAgICAgICAgICAgIHRpbWVzdGFtcD1pdGVtMlswXQogICAgICAgICAgICBkYXRlX3RpbWUgPSBkYXRldGltZS5kYXRldGltZS5mcm9tdGltZXN0YW1wKHRpbWVzdGFtcCkKICAgICAgICAgICAgZm9ybWF0dGVkX2RhdGVfdGltZSA9IGRhdGVfdGltZS5zdHJmdGltZSgnJWQtJW0tJVkgJUg6JU06JVMnKQogICAgICAgICAgICBpbnN0YW5jZV9kYXRlPWYne19fbmFtZV9ffSB7aW5zdGFuY2V9IHtmb3JtYXR0ZWRfZGF0ZV90aW1lfScKCiAgICAgICAgICAgCiAgICAgICAgICAgIGFsZXJ0anNvbiA9IHt9CiAgICAgICAgICAgIGFsZXJ0anNvblsnaW5zdGFuY2VfZGF0ZXRpbWUnXT1pbnN0YW5jZV9kYXRlCiAgICAgICAgICAgIGFsZXJ0anNvblsnc3RhdHVzJ109J2ZpcmluZycKICAgICAgICAgICAgbGFiZWxzPXt9CiAgICAgICAgICAgIGxhYmVsc1snaW5zdGFuY2UnXSA9IGluc3RhbmNlCiAgICAgICAgICAgIGxhYmVsc1snYWxlcnRuYW1lJ109ICBfX25hbWVfXwogICAgICAgICAgICBsYWJlbHNbJ2pvYiddID0gam9iCiAgICAgICAgICAgIGFsZXJ0anNvblsnbGFiZWxzJ10gPSBsYWJlbHMKICAgICAgICAgICAgYWxlcnRqc29uWydkZXNjcmlwdGlvbiddPSdBbm9tYWx5IGRldGVjdGVkIGZvciBXaW5kb3dzIHByb2Nlc3NfY3B1X3VzYWdlIGF0IG1ldHJpYyB2YWx1ZS0gJytzdHIoaXRlbTJbMV0gKydhdCB0aW1lc3RhbXAgJytzdHIoaXRlbTJbMF0pKQogICAgICAgICAgICBhbGVydGpzb25bJ21ldHJpY192YWx1ZSddPWZsb2F0KGl0ZW0yWzFdKQogICAgICAgICAgICBhbGVydGpzb25bJ2FjdGlvbmFibGUnXT0nVHJ1ZScKICAgICAgICAgICAgaWYoZmxvYXQoaXRlbTJbMV0pPDUwKToKICAgICAgICAgICAgICBhbGVydGpzb25bJ2FjdGlvbmFibGUnXT0nRmFsc2UnCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgaWYoZmxvYXQoaXRlbTJbMV0pPjUwKToKICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKCd0aHJlc2hvbGQgYnJlYWNoZWQnKQoKICAgICAgICAgICAgZGF0YSA9Jycne30nJycKICAgICAgICAgICAgCiAgICAgICAgICAgIHF1ZXJ5anNvbiA9IGpzb24ubG9hZHMoZGF0YSkKICAgICAgICAgICAgcXVlcnlqc29uWydldmVudElkJ10gPSdldmVudCcrc3RyKHN0cihkYXRldGltZS5kYXRldGltZS5ub3coKS50aW1lc3RhbXAoKSkucmVwbGFjZSgnLicsICcnKSkKICAgICAgICAgICAgcXVlcnlqc29uWydldmVudFR5cGVOYW1lJ10gPSdBY3Rpb25hYmxlX2NoZWNrX2V2ZW50JwogICAgICAgICAgICBxdWVyeWpzb25bJ2NvbnRleHQnXT1hbGVydGpzb24KICAgICAgICAgICAgcXVlcnlqc29uMj1qc29uLmxvYWRzKGRhdGEpCiAgICAgICAgICAgIHF1ZXJ5anNvbjJbJ2JvZHknXT1xdWVyeWpzb24KICAgICAgICAgICAgbG9nZ2VyLmluZm8oJ2NhbGxpbmcgcGlwZWxpbmUnKQogICAgICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoYXBpX3VybCwgZGF0YT1qc29uLmR1bXBzKHF1ZXJ5anNvbjIpLCBoZWFkZXJzPWhlYWRlcnMsdmVyaWZ5PUZhbHNlKQogICAgICAgICAgICBsb2dnZXIuaW5mbyhyZXNwb25zZS5yYWlzZV9mb3Jfc3RhdHVzKCkpCiAgICAgICAgICAgICNwdWJsaXNoX21lc3NhZ2UoaW5zdGFuY2VfZGF0ZSkKICAgICAgICAgICAgI3RpbWUuc2xlZXAoMTApCgogICAgICAgIHZhbHVlRFRPLmFwcGVuZCh2YWx1ZV9kdG8pCgogICAgX19uYW1lX189anNvbm1ldHJpY1snX19uYW1lX18nXQogICAgaW5zdGFuY2U9anNvbm1ldHJpY1snaW5zdGFuY2UnXQogICAgam9iPWpzb25tZXRyaWNbJ2pvYiddCiAgICB0aW1lc3RhbXA9dmFsdWVzWzBdWzBdCgogICAgZGF0ZV90aW1lID0gZGF0ZXRpbWUuZGF0ZXRpbWUuZnJvbXRpbWVzdGFtcCh0aW1lc3RhbXApCiAgICBmb3JtYXR0ZWRfZGF0ZV90aW1lID0gZGF0ZV90aW1lLnN0cmZ0aW1lKCclWS0lbS0lZCcpCiAgICBtb25nb2lkPWYne2luc3RhbmNlfXx7X19uYW1lX199fHtqb2J9fHt0b2RheURhdGV9JwogICAgZG9jdW1lbnQgPSB7CiAgICAgICAgJ19pZCcgOiBtb25nb2lkLAogICAgICAgICdtZXRyaWMnIDoganNvbm1ldHJpYywKICAgICAgICAndmFsdWVEVE8nOiB2YWx1ZURUTwogICAgfQogICAgIyBJbnNlcnQgdGhlIEpTT04gZGF0YSBpbnRvIHRoZSBjb2xsZWN0aW9uCiAgICAjY29sbGVjdGlvbi5pbnNlcnRfb25lKGRvY3VtZW50KQogICAKICAgIyBjb2xsZWN0aW9uLmluc2VydF9vbmUoZG9jdW1lbnQpCgojIENsb3NlIHRoZSBjb25uZWN0aW9uIHRvIHRoZSBNb25nb0RCIGRhdGFiYXNlCiMgY2xpZW50LmNsb3NlKCkKCmxvZ2dlci5pbmZvKCdDb21wbGV0ZWQnKQoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoK","leo1311"
"LEOSR_DT76385","LEOSR_DT76385_leo1311.py","aW1wb3J0IHN5cwppbXBvcnQganNvbgppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IGRhdGV0aW1lCmltcG9ydCBweW1vbmdvIAppbXBvcnQgbG9nZ2luZyBhcyBsb2dnZXIKaW1wb3J0IGJhc2U2NAppbXBvcnQgcGFuZGFzIGFzIHBkCmltcG9ydCBza2xlYXJuCmZyb20gc2tsZWFybi5lbnNlbWJsZSBpbXBvcnQgSXNvbGF0aW9uRm9yZXN0CmltcG9ydCBwaWNrbGUKaW1wb3J0IG15c3FsLmNvbm5lY3RvciBhcyBjb25uZWN0b3IKaW1wb3J0IG9zCmltcG9ydCB0aW1lCgoKb3MuZW52aXJvblsnSFRUUF9QUk9YWSddPScnCm9zLmVudmlyb25bJ0hUVFBTX1BST1hZJ109JycKCgoKbG9nZ2VyLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dlci5JTkZPLCBmb3JtYXQ9JyUoYXNjdGltZSlzIElORk8gJShtZXNzYWdlKXMnLCBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycpCgp1c2VybmFtZSA9ICdsZWFwYWRtJwpwYXNzd29yZCA9ICdGMSlne3R5QycKaG9zdCA9ICcxMC44Mi4xMjEuMTU1Jwpwb3J0ID0gMzMwNgpkYXRhYmFzZSA9ICdsZWFwcXR6JwoKIyB0aW1lLnNsZWVwKDMwKQoKCmNvbm5lY3Rpb24xID0gY29ubmVjdG9yLmNvbm5lY3QoCiAgICB1c2VyPXVzZXJuYW1lLCBwYXNzd29yZD1wYXNzd29yZCwgaG9zdD1ob3N0LCBwb3J0PXBvcnQsIGRhdGFiYXNlPWRhdGFiYXNlCikKY3Vyc29yID0gY29ubmVjdGlvbjEuY3Vyc29yKCkKCnF1ZXJ5ID0gZidVUERBVEUgc3JlX2FwcF9hdmFpbGFiaWxpdHkgQVMgcyBTRVQgcy5hdmFpbGFiaWxpdHlfZGF0ZSA9IENPTkNBVCggIEVYVFJBQ1QoWUVBUiBGUk9NIENVUlJFTlRfVElNRVNUQU1QKCkpLCBcJy1cJywgRVhUUkFDVChNT05USCBGUk9NIENVUlJFTlRfVElNRVNUQU1QKCkpLFwnLVwnLCBFWFRSQUNUKERBWSBGUk9NIHMuYXZhaWxhYmlsaXR5X2RhdGUpKScKY3Vyc29yLmV4ZWN1dGUocXVlcnkpCmNvbm5lY3Rpb24xLmNvbW1pdCgpCnF1ZXJ5MSA9IGYnVVBEQVRFIHNyZV9wcm9iZV9ydW5fYXBwIEFzIHMgU0VUIHMucnVuX2RhdGUgPSBDT05DQVQoRVhUUkFDVChZRUFSIEZST00gQ1VSUkVOVF9USU1FU1RBTVAoKSksIFwnLVwnLEVYVFJBQ1QoTU9OVEggRlJPTSBDVVJSRU5UX1RJTUVTVEFNUCgpKSwgXCctXCcsRVhUUkFDVChEQVkgRlJPTSBzLnJ1bl9kYXRlKSknCmN1cnNvci5leGVjdXRlKHF1ZXJ5KQpjb25uZWN0aW9uMS5jb21taXQoKQpjb25uZWN0aW9uMS5jbG9zZSgpCmxvZ2dlci5pbmZvKCdjb21wbGV0ZWQnKQoK","leo1311"
"LEOALRT_72951","LEOALRT_72951_leo1311.py","aW1wb3J0IHN5cwppbXBvcnQganNvbgppbXBvcnQgb3MKaW1wb3J0IHJlcXVlc3RzCmltcG9ydCBkYXRldGltZQppbXBvcnQgcHltb25nbyAKaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyCmltcG9ydCBiYXNlNjQKaW1wb3J0IHBhbmRhcyBhcyBwZAppbXBvcnQgc2tsZWFybgpmcm9tIHNrbGVhcm4uZW5zZW1ibGUgaW1wb3J0IElzb2xhdGlvbkZvcmVzdAppbXBvcnQgcGlja2xlCmltcG9ydCB0aW1lCmltcG9ydCByYW5kb20KZnJvbSByYW5kb20gaW1wb3J0IHVuaWZvcm0KZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUsIHRpbWVkZWx0YQppbXBvcnQgdGltZQpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZSwgdGltZWRlbHRhCmZyb20gcmFuZG9tIGltcG9ydCB1bmlmb3JtCgpsb2dnZXIuYmFzaWNDb25maWcobGV2ZWw9bG9nZ2VyLklORk8sIGZvcm1hdD0nJShhc2N0aW1lKXMgSU5GTyAlKG1lc3NhZ2UpcycsIGRhdGVmbXQ9JyV5LyVtLyVkICVIOiVNOiVTJykKCnRpbWUuc2xlZXAoMTApCgoKCiMgT25lIG1pbnV0ZSBhZ28gZnJvbSBub3cKIyBvbmVfbWludXRlX2FnbyA9IGRhdGV0aW1lLmRhdGV0aW1lLm5vdygpIC0gZGF0ZXRpbWUudGltZWRlbHRhKG1pbnV0ZXM9MSkKCgoKCiMgRGVmaW5lIGN1cnJlbnQgdGltZSwgcGFzdCAzIG1pbnV0ZXMsIGFuZCAyIG1pbnV0ZXMKY3VycmVudF90aW1lID0gZGF0ZXRpbWUubm93KCkKc3RhcnRfdGltZSA9IGN1cnJlbnRfdGltZSAtIHRpbWVkZWx0YShtaW51dGVzPTQpCmdhcCA9IHRpbWVkZWx0YShzZWNvbmRzPTEwKQoKIyBDYWxjdWxhdGUgc3RhcnRpbmcgdGltZSBmb3IgdGhlIGxhc3QgMTAgbWludXRlcwpzdGFydF90aW1lID0gY3VycmVudF90aW1lIC0gdGltZWRlbHRhKG1pbnV0ZXM9MTApCgojIEdlbmVyYXRlIDEwIHRpbWVzdGFtcHMgd2l0aCAzMC1zZWNvbmQgZ2FwIHdpdGhpbiB0aGUgbGFzdCAxMCBtaW51dGVzCnRpbWVzdGFtcHMgPSBbCiAgICAoc3RhcnRfdGltZSArIGkgKiBnYXApLnRpbWVzdGFtcCgpIAogICAgZm9yIGkgaW4gcmFuZ2UoMTApCl0KCmxvZ2dlci5pbmZvKHRpbWVzdGFtcHMpCgpmb3IgdGltZSBpbiB0aW1lc3RhbXBzOgogICAgZGF0ZV90aW1lID0gZGF0ZXRpbWUuZnJvbXRpbWVzdGFtcCh0aW1lKQogICAgbG9nZ2VyLmluZm8oZGF0ZV90aW1lKQojIGN1cnJlbnRfdGltZSA9IGRhdGV0aW1lLmRhdGV0aW1lLm5vdygpCgojIGxhc3RfMjBfc2Vjb25kcyA9IGN1cnJlbnRfdGltZSAtIGRhdGV0aW1lLnRpbWVkZWx0YShzZWNvbmRzPTIwKQoKIyAjIEdlbmVyYXRlIHRpbWVzdGFtcHMgYW5kIHZhbHVlcyBmb3IgbGFzdCAyMCBzZWNvbmRzCiMgI3RpbWVzdGFtcHMgPSBbY3VycmVudF90aW1lLnRpbWVzdGFtcCgpIC0gcmFuZG9tLnVuaWZvcm0oaSwgMCkgZm9yIGkgaW4gcmFuZ2UoMjApXQoKIyBjdXJyZW50X3RpbWUgPSBkYXRldGltZS5kYXRldGltZS5ub3coKQoKIyAjIERlZmluZSBmaXZlIG1pbnV0ZXMgYW5kIHR3byBtaW51dGVzIGluIHNlY29uZHMKIyBmaXZlX21pbnV0ZXMgPSA1ICogNjAgICMgNSBtaW51dGVzIGluIHNlY29uZHMKIyB0d29fbWludXRlcyA9IDIgKiA2MCAgIyAyIG1pbnV0ZXMgaW4gc2Vjb25kcwoKIyAjIERlZmluZSB0aGUgYWxsb3dlZCB0aW1lIHJhbmdlIChwYXN0IDUgbWludXRlcyBleGNsdWRpbmcgcGFzdCAyIG1pbnV0ZXMpCiMgbWluX3RpbWUgPSBjdXJyZW50X3RpbWUgLSBkYXRldGltZS50aW1lZGVsdGEoc2Vjb25kcz1maXZlX21pbnV0ZXMgLSB0d29fbWludXRlcykKIyBtYXhfdGltZSA9IGN1cnJlbnRfdGltZSAtIGRhdGV0aW1lLnRpbWVkZWx0YShzZWNvbmRzPXR3b19taW51dGVzKQoKIyBHZW5lcmF0ZSAyMCB0aW1lc3RhbXBzIHdpdGhpbiB0aGUgYWxsb3dlZCByYW5nZQojIHRpbWVzdGFtcHMgPSBbCiMgICAgIGN1cnJlbnRfdGltZSAtIGRhdGV0aW1lLnRpbWVkZWx0YShzZWNvbmRzPXVuaWZvcm0oaSwgMCkpCiMgICAgIGZvciBpIGluIHJhbmdlKDIwKQojICAgICBpZiBtaW5fdGltZSA8PSBjdXJyZW50X3RpbWUgLSBkYXRldGltZS50aW1lZGVsdGEoc2Vjb25kcz11bmlmb3JtKGksIDApKSA8PSBtYXhfdGltZQojIF0KIyBsb2dnZXIuaW5mbygndGltZXN0YW1wcycpCiMgbG9nZ2VyLmluZm8odGltZXN0YW1wcykKIyB2YWx1ZXMgPSBbcmFuZG9tLnVuaWZvcm0oNDAsIDkwKSBmb3IgXyBpbiByYW5nZSgyMCldCgoKIyBkYXRhMSA9IHsKIyAgICAgJ3N0YXR1cyc6ICdzdWNjZXNzJywKIyAgICAgJ2RhdGEnOiB7CiMgICAgICAgICAncmVzdWx0VHlwZSc6ICdtYXRyaXgnLAojICAgICAgICAgJ3Jlc3VsdCc6IFsKIyAgICAgICAgICAgICB7CiMgICAgICAgICAgICAgICAgICdtZXRyaWMnOiB7J19fbmFtZV9fJzogJ3dpbmRvd3NfbWVtb3J5X3VzYWdlJywgJ2luc3RhbmNlJzogJ251bGwnLCAnam9iJzogJ251bGwnfSwKIyAgICAgICAgICAgICAgICAgJ3ZhbHVlcyc6IGxpc3QoemlwKHRpbWVzdGFtcHMsIHZhbHVlcykpLAojICAgICAgICAgICAgIH0KIyAgICAgICAgIF0sCiMgICAgIH0sCiMgfQoKCiMgcHJvbWV0aGV1c19hcGk9ZidodHRwOi8vY3ZyaWN0bHB0bTIxOjkwOTAvYXBpL3YxL3F1ZXJ5X3JhbmdlP3F1ZXJ5PWxhYmVsX3JlcGxhY2UoJTBBJTIwJTIwbGFiZWxfcmVwbGFjZSglMEElMjAlMjBsYWJlbF9yZXBsYWNlKDEwMC1hdmcocmF0ZSh3aW5kb3dzX2NwdV90aW1lX3RvdGFsJTdCbW9kZSUzRFwnaWRsZVwnJTdEJTVCMW0lNUQpKSUyMColMjAxMDAlMkNcJ19fbmFtZV9fXCclMkNcJ3dpbmRvd3NfbWVtb3J5X3VzYWdlXCclMkNcJ19fbmFtZV9fXCclMkNcJ1wnKSUyQ1wnaW5zdGFuY2VcJyUyQ1wnbnVsbFwnJTJDXCdpbnN0YW5jZVwnJTJDXCdcJyUwQSklMEElMkNcJ2pvYlwnJTJDXCdudWxsXCclMkNcJ2pvYlwnJTJDXCdcJyUwQSkmc3RhcnQ9MjAyMy0xMi0xNFQxMDoxODozNC41MzUyNDlaJmVuZD0yMDIzLTEyLTE0VDEwOjIwOjM0LjUzNTI0OVomc3RlcD0xMHMnCiMgICAjIHByb21ldGhldXNfYXBpID0gZidodHRwOi8vY3ZyaWN0bHB0bTIxOjkwOTAvYXBpL3YxL3F1ZXJ5X3JhbmdlP3F1ZXJ5PWxhYmVsX3JlcGxhY2UoezBBfSUyMCUyMGxhYmVsX3JlcGxhY2UoezBBfSUyMCUyMGxhYmVsX3JlcGxhY2UoMTAwLWF2ZyhyYXRlKHdpbmRvd3NfY3B1X3RpbWVfdG90YWx7bW9kZT0naWRsZSd9WzFtXSkpJTIwKiUyMDEwMCUyQydfX25hbWVfXyclMkMnd2luZG93c19tZW1vcnlfdXNhZ2UnJTJDJ19fbmFtZV9fJyUyQycnKSUyQydpbnN0YW5jZSclMkMnbnVsbCclMkMnaW5zdGFuY2UnJTJDJyd7MEF9JTJDJ2pvYiclMkMnbnVsbCclMkMnam9iJyUyQycnezBBfSkmc3RhcnQ9e3N0YXJ0fSZlbmQ9e2VuZH0mc3RlcD0xMHMnCiMgI2xvZ2dlci5pbmZvKHByb21ldGhldXNfYXBpKSAgIAojIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KHByb21ldGhldXNfYXBpKQoKIyBqc29uX2RhdGEgPSBqc29uLmxvYWRzKHJlc3BvbnNlLmNvbnRlbnQpCiMgI2xvZ2dlci5pbmZvKGpzb25fZGF0YSkKIyBkYXRhID0ganNvbl9kYXRhWydkYXRhJ10KIyBsb2dnZXIuaW5mbyhkYXRhKQoKIyB0aW1lc3RhbXBzID0gW2N1cnJlbnRfdGltZS50aW1lc3RhbXAoKSAtIHJhbmRvbS51bmlmb3JtKGksIDApIGZvciBpIGluIHJhbmdlKDIwKV0KIyB2YWx1ZXMgPSBbcmFuZG9tLnJhbmRpbnQoNTEsIDkwKSBmb3IgXyBpbiByYW5nZSgyMCldICAjIHJhbmRvbSB2YWx1ZXMgYmV0d2VlbiA1MSBhbmQgMTAwCgojIGNyZWF0ZWRWYWwxPWxpc3QoemlwKHRpbWVzdGFtcHMsIHZhbHVlcykpCiMgY3JlYXRlZFZhbDEgPSBsaXN0KHppcCh0aW1lc3RhbXBzLCBbZicnJ3t2fScnJyBmb3IgdiBpbiB2YWx1ZXNdKSkKIyAjIGYnJ3tkYXRhX3BvaW50WzFdfScnCiMgbG9nZ2VyLmluZm8oJ2NyZWF0ZWRWYWwnKQoKIyBjcmVhdGVkVmFsID0gW2xpc3QoaXRlbSkgZm9yIGl0ZW0gaW4gY3JlYXRlZFZhbDFdCiMgIyBDb21iaW5lIGV4aXN0aW5nIGRhdGEgYW5kIGxhc3QgMjAgc2Vjb25kcyBkYXRhCiMgI2xvZ2dlci5pbmZvKGRhdGFbJ3Jlc3VsdCddKQojICMgY29tYmluZWRfZGF0YSA9IGRhdGFbJ3Jlc3VsdCddWzBdCiMgIyBjb21iaW5lZF90aW1lc3RhbXBzID0gdGltZXN0YW1wcyArIGNvbWJpbmVkX2RhdGFbJ3ZhbHVlcyddWzo6MV0gICMgZXh0cmFjdCBleGlzdGluZyB0aW1lc3RhbXBzCiMgIyBjb21iaW5lZF92YWx1ZXMgPSB2YWx1ZXMgKyBjb21iaW5lZF9kYXRhWyd2YWx1ZXMnXVsxOjoyXSAgIyBleHRyYWN0IGV4aXN0aW5nIHZhbHVlcwoKIyBsb2dnZXIuaW5mbyhjcmVhdGVkVmFsKQojICNsb2dnZXIuaW5mbyhjb21iaW5lZF92YWx1ZXMpCiMgIyBTb3J0IGRhdGEgY2hyb25vbG9naWNhbGx5CiMgIyBjb21iaW5lZF9kYXRhWyd2YWx1ZXMnXSA9IGxpc3QoemlwKHNvcnRlZChjb21iaW5lZF90aW1lc3RhbXBzKSwgc29ydGVkKGNvbWJpbmVkX3ZhbHVlcykpKQoKIyAjIFVwZGF0ZSB0aGUgb3JpZ2luYWwgZGF0YSBzdHJ1Y3R1cmUKCiMgcmVzdWx0PWRhdGFbJ3Jlc3VsdCddCiMgbG9nZ2VyLmluZm8oJ3J3cy0tLS0tLScpCiMgbG9nZ2VyLmluZm8ocmVzdWx0KQojIGxvZ2dlci5pbmZvKCd2YWx1ZXNzLS0tLScpCiMgbG9nZ2VyLmluZm8ocmVzdWx0WzBdWyd2YWx1ZXMnXSkKIyByZXN1bHRbMF1bJ3ZhbHVlcyddPXJlc3VsdFswXVsndmFsdWVzJ10rY3JlYXRlZFZhbAojICMgZGF0YVsncmVzdWx0J11bMF0gPSBkYXRhWydyZXN1bHQnXVswXStjcmVhdGVkVmFsCgojICMgUHJpbnQgdGhlIHVwZGF0ZWQgZGF0YQojIGxvZ2dlci5pbmZvKCdkYXRhLS0tLS0tLS0nKQojICNsb2dnZXIuaW5mbyhyZXN1bHRbMF1bJ3ZhbHVlcyddKQoKIyBsb2dnZXIuaW5mbyhkYXRhKSAgIApsb2dnZXIuaW5mbygnQ29tcGxldGVkJykKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg==","leo1311"
"LEORBTMQ17118","LEORBTMQ17118_leo1311.py","aW1wb3J0IHN5cwppbXBvcnQganNvbgppbXBvcnQgb3MKaW1wb3J0IHJlcXVlc3RzCmltcG9ydCBkYXRldGltZQojIGltcG9ydCBweW1vbmdvIAppbXBvcnQgbG9nZ2luZyBhcyBsb2dnZXIKaW1wb3J0IGJhc2U2NAppbXBvcnQgcGFuZGFzIGFzIHBkCmltcG9ydCBza2xlYXJuCmZyb20gc2tsZWFybi5lbnNlbWJsZSBpbXBvcnQgSXNvbGF0aW9uRm9yZXN0CmltcG9ydCBwaWNrbGUKaW1wb3J0IHN5cwoKCmxvZ2dlci5iYXNpY0NvbmZpZyhsZXZlbD1sb2dnZXIuSU5GTywgZm9ybWF0PSclKGFzY3RpbWUpcyBJTkZPICUobWVzc2FnZSlzJywgZGF0ZWZtdD0nJXkvJW0vJWQgJUg6JU06JVMnKQoKCgpvcy5lbnZpcm9uWydIVFRQX1BST1hZJ109JycKIApvcy5lbnZpcm9uWydIVFRQU19QUk9YWSddPScnCm9zLmVudmlyb25bJ2h0dHBfcHJveHknXT0nJwpvcy5lbnZpcm9uWydodHRwc19wcm94eSddPScnCmFyZ3VtZW50cyA9IHN5cy5hcmd2CgpteV9kaWN0ID0ge30KZm9yIGFyZyBpbiBhcmd1bWVudHM6CiAgICB0cnk6CiAgICAgICAgbXlfZGljdFthcmcuc3BsaXQoJzonKVswXV0gPSAnOicuam9pbihhcmcuc3BsaXQoJzonKVsxOl0pCiAgICBleGNlcHQ6CiAgICAgICAgYSA9ICdlcnJvcicKIApsb2dnZXIuaW5mbygncmVhZGluZyBkYXRhJykKZGF0YT1teV9kaWN0Wydib2R5J10KCmxvZ2dlci5pbmZvKGRhdGEpCgoKClJBQkJJVE1RX0hPU1QgPSAndmljdGxwZmN6LTA1JwpSQUJCSVRNUV9QT1JUID0gMTU2NzIKUkFCQklUTVFfVVNFUk5BTUUgPSAnZ3Vlc3QnClJBQkJJVE1RX1BBU1NXT1JEID0gJ2d1ZXN0JwpSQUJCSVRNUV9WSVJUVUFMX0hPU1QgPSAnLycKUVVFVUVfTkFNRSA9ICdFdmVudFByb2Nlc3NvcjA2LkV2ZW50UHJvY2Vzc29yUXVldWUwNicKCm1lc3NhZ2U9J2hlbGxvX3Rlc3QnCgp1cmwgPSAnaHR0cDovL3tSQUJCSVRNUV9IT1NUfTp7UkFCQklUTVFfUE9SVH0vYXBpL2V4Y2hhbmdlcy8lMkYvYW1xLmRlZmF1bHQvcHVibGlzaCcuZm9ybWF0KFJBQkJJVE1RX0hPU1Q9UkFCQklUTVFfSE9TVCxSQUJCSVRNUV9QT1JUPVJBQkJJVE1RX1BPUlQpCmxvZ2dlci5pbmZvKHVybCkKZW5jb2RlZF91c2VybmFtZV9hbmRfcGFzc3dvcmQgPSBiYXNlNjQuYjY0ZW5jb2RlKChSQUJCSVRNUV9VU0VSTkFNRSArICc6JyArIFJBQkJJVE1RX1BBU1NXT1JEKS5lbmNvZGUoKSkuZGVjb2RlKCkgCiMgbG9nZ2VyLmluZm8oZW5jb2RlZF91c2VybmFtZV9hbmRfcGFzc3dvcmQpCmhlYWRlcnMgPSB7J0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJywgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ30KIyBoZWFkZXJzID0geydBdXRob3JpemF0aW9uJzogZidCYXNpYyB7ZW5jb2RlZF91c2VybmFtZV9hbmRfcGFzc3dvcmR9JywgJ0NvbnRlbnQtVHlwZSc6J2FwcGxpY2F0aW9uL2pzb24nIH0KIyBkYXRhID0gewojICd2aG9zdCc6ICcvJywKIyAnbmFtZSc6ICdhbXEuZGVmYXVsdCcsCiMgJ3Byb3BlcnRpZXMnOiB7CiMgICAgICAgICAgICAgJ2RlbGl2ZXJ5X21vZGUnOiAxLAojICAgICAgICAgICAgICdoZWFkZXJzJzoge30KIyAgICAgICAgICAgICB9LAojICdyb3V0aW5nX2tleSc6ICdwYXJhbV9xdWV1ZScsCiMgJ2RlbGl2ZXJ5X21vZGUnOiAnMScsCiMgJ3BheWxvYWQnOiAnbWVzc2FnZTEyMycsCiMgJ3BheWxvYWRfZW5jb2RpbmcnOiAnc3RyaW5nJywKIyAnaGVhZGVycyc6IHt9LAojICdwcm9wcyc6IHt9CiMgfQoKZGF0YT17CgogICAgJ3Zob3N0JzogJy8nLAonbmFtZSc6ICdhbXEuZGVmYXVsdCcsCidwcm9wZXJ0aWVzJzogewogICAgICAgICAgICAnZGVsaXZlcnlfbW9kZSc6IDEsCiAgICAgICAgICAgICdoZWFkZXJzJzoge30KICAgICAgICAgICAgfSwKCidyb3V0aW5nX2tleSc6ICdFdmVudFByb2Nlc3NvcjA2LkV2ZW50UHJvY2Vzc29yUXVldWUwNicsCidkZWxpdmVyeV9tb2RlJzogJzEnLAoncGF5bG9hZCc6IGRhdGEsCidwYXlsb2FkX2VuY29kaW5nJzogJ3N0cmluZycsCidoZWFkZXJzJzoge30sCidwcm9wcyc6IHt9Cgp9CiAgICAjZGF0YTIgPSBqc29uLmxvYWRzKGRhdGEpCnJlc3BvbnNlID0gcmVxdWVzdHMucG9zdCh1cmwsYXV0aD0oJ2d1ZXN0JywgJ2d1ZXN0JyksIGhlYWRlcnM9aGVhZGVycywgZGF0YT1qc29uLmR1bXBzKGRhdGEpKQoKbG9nZ2VyLmluZm8ocmVzcG9uc2UuanNvbikKbG9nZ2VyLmluZm8ocmVzcG9uc2UudGV4dCkKbG9nZ2VyLmluZm8oJ0NvbXBsZXRlZCcpCgoKCgoKCgoKCgoK","leo1311"
"LEOSNW_N53872","LEOSNW_N53872_leo1311.py","","leo1311"
"LEOACTNB19304","LEOACTNB19304_leo1311.py","aW1wb3J0IHN5cwppbXBvcnQganNvbgppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IGRhdGV0aW1lCmltcG9ydCBweW1vbmdvIAppbXBvcnQgbG9nZ2luZyBhcyBsb2dnZXIKaW1wb3J0IGJhc2U2NAppbXBvcnQgcGFuZGFzIGFzIHBkCmltcG9ydCBza2xlYXJuCmZyb20gc2tsZWFybi5lbnNlbWJsZSBpbXBvcnQgSXNvbGF0aW9uRm9yZXN0CmltcG9ydCBwaWNrbGUKaW1wb3J0IG15c3FsLmNvbm5lY3RvciBhcyBjb25uZWN0b3IKaW1wb3J0IG9zCmltcG9ydCB0aW1lCmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCBxdW90ZV9wbHVzLCB1cmxwYXJzZQojZnJvbSBsZWFwLnV0aWxzLlV0aWxpdGllcyBpbXBvcnQgVXRpbGl0aWVzCiNmcm9tIHV0aWxzIGltcG9ydCBVdGlsaXRpZXMKCm9zLmVudmlyb25bJ0hUVFBfUFJPWFknXT0nJwpvcy5lbnZpcm9uWydIVFRQU19QUk9YWSddPScnCm9zLmVudmlyb25bJ2h0dHBfcHJveHknXT0nJwpvcy5lbnZpcm9uWydodHRwc19wcm94eSddPScnCgoKCmxvZ2dlci5iYXNpY0NvbmZpZyhsZXZlbD1sb2dnZXIuSU5GTywgZm9ybWF0PSclKGFzY3RpbWUpcyBJTkZPICUobWVzc2FnZSlzJywgZGF0ZWZtdD0nJXkvJW0vJWQgJUg6JU06JVMnKQoKYXJndW1lbnRzID0gc3lzLmFyZ3YKbXlfZGljdCA9IHt9CmZvciBhcmcgaW4gYXJndW1lbnRzOgogICAgdHJ5OgogICAgICAgIG15X2RpY3RbYXJnLnNwbGl0KCc6JylbMF1dID0gJzonLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQogICAgZXhjZXB0OgogICAgICAgIGEgPSAnZXJyb3InCgoKbG9nZ2VyLmluZm8oJ1JlYWRpbmcgaW5zdGFuY2VfZGF0ZXRpbWU6JykKbG9nZ2VyLmluZm8obXlfZGljdFsnaW5zdGFuY2VfZGF0ZXRpbWUnXSkKaW5zdGFuY2VfZGF0ZXRpbWU9bXlfZGljdFsnaW5zdGFuY2VfZGF0ZXRpbWUnXQpsb2dnZXIuaW5mbygnUmVhZGluZyBtZXRyaWNfdmFsdWU6JykKI2xvZ2dlci5pbmZvKG15X2RpY3RbJ21ldHJpY192YWx1ZSddKQptZXRyaWNfdmFsdWU9ZmxvYXQobXlfZGljdFsnbWV0cmljX3ZhbHVlJ10pCmxvZ2dlci5pbmZvKHN0cihtZXRyaWNfdmFsdWUpKQoKI0xFQVAgRGF0YXNvdXJjZQpsZWFwZHMgPSBteV9kaWN0WydMRUFQRGF0YVNvdXJjZSddCmxvZ2dlci5pbmZvKCdsZWFwZHMnKQpsb2dnZXIuaW5mbyhsZWFwZHMpCmxlYXBEU2RpY3QgPWpzb24ubG9hZHMobGVhcGRzKQoKI3NhdmUgdG8gZGIKIyBjb2x1bW5MaXN0ID0gZGYuY29sdW1ucwojIHVzZXJuYW1lID0gbGVhcERTZGljdFsndXNlck5hbWUnXQojIHBhc3N3b3JkID0gVXRpbGl0aWVzLmRlY3J5cHQobGVhcERTZGljdFsncGFzc3dvcmQnXSxsZWFwRFNkaWN0WydzYWx0J10pCiMgaG9zdCA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkuaG9zdG5hbWUKIyBwb3J0ID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5wb3J0CiMgZGF0YWJhc2UgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLnBhdGgucnNwbGl0KCcvJywgMSlbMV0KCgoKCiMgdXNlcm5hbWUgPSAnbGVhcGFkbScKIyBwYXNzd29yZCA9ICdGMSlne3R5QycKIyBob3N0ID0gJzEwLjgyLjEyMS4xNTUnCiMgcG9ydCA9IDMzMDYKIyBkYXRhYmFzZSA9ICdsZWFwcXR6JwoKdXNlcm5hbWUgPSAnc3JlaW50JwpwYXNzd29yZCA9ICc1ZF5GWnN2bScKaG9zdCA9ICcxMC44Mi4xMjIuOTQnCnBvcnQgPSAzMzA2CmRhdGFiYXNlID0gJ3NyZWludCcKIyB0aW1lLnNsZWVwKDMwKQoKCmVtZl9kYiA9IGNvbm5lY3Rvci5jb25uZWN0KAogICAgdXNlcj11c2VybmFtZSwgcGFzc3dvcmQ9cGFzc3dvcmQsIGhvc3Q9aG9zdCwgcG9ydD1wb3J0LCBkYXRhYmFzZT1kYXRhYmFzZQopCgoKCiMgdHJ5OgojICBxdWVyeSA9IGYnU0VMRUNUICogRlJPTSBgZW1mX2V2ZW50YCBXSEVSRSBzZWxlY3Rvcl9wYXJhbSA9IFwne2luc3RhbmNlX2RhdGV0aW1lfVwnOycKIyAgY3Vyc29yLmV4ZWN1dGUocXVlcnkpCiMgIHJlc3VsdHMgPSBjdXJzb3IuZmV0Y2hhbGwoKQojICBpZihsZW4ocmVzdWx0cykhPTApOgojICAgICBsb2dnZXIuaW5mbygnY29uZGl0aW9uIHRydWUnKQojICAgICBhY3Rpb25fZmxhZz0nWUVTJyAgICAgCiMgICAgIHF1ZXJ5MiA9IGYnVVBEQVRFIGBlbWZfZXZlbnRgIFNFVCBhY3Rpb25hYmxlID0gXCd7YWN0aW9uX2ZsYWd9XCcgV0hFUkUgc2VsZWN0b3JfcGFyYW0gPSBcJ3tpbnN0YW5jZV9kYXRldGltZX1cJzsnCiMgICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5MikKIyAgZW1mX2RiLmNvbW1pdCgpCiMgZXhjZXB0IGNvbm5lY3Rvci5lcnJvcnMuT3BlcmF0aW9uYWxFcnJvciBhcyBlOgojICAgICAjIEhhbmRsZSB0aGUgdGltZW91dCBleGNlcHRpb24KIyAgICAgICBsb2dnZXIuaW5mbygnTXlTUUwgY29ubmVjdGlvbiB0aW1lb3V0OiB7fScuZm9ybWF0KGUpKQogCiMgZmluYWxseToKIyAgICAgIyBDbG9zZSB0aGUgZGF0YWJhc2UgY29ubmVjdGlvbgojICAgICAgIGVtZl9kYi5jbG9zZSgpCgoKCmFwaV91cmwgPSAnaHR0cHM6Ly9sZWFwNzo0MDA2L2FwaS9ldmVudC90cmlnZ2VyL1JhYmJpdG1xX2VtZj9vcmc9bGVvMTMxMSZjb3JlbGlkPSZkYXRhc291cmNlTmFtZT1MRUFMQ0xDTDEyMTMyJwpoZWFkZXJzID0gIHsnQ29udGVudC1UeXBlJzonYXBwbGljYXRpb24vanNvbid9CgphbGVydGpzb24gPSB7fQphbGVydGpzb25bJ2luc3RhbmNlX2RhdGV0aW1lJ109aW5zdGFuY2VfZGF0ZXRpbWUKYWxlcnRqc29uWydtZXRyaWNfdmFsdWUnXT1tZXRyaWNfdmFsdWUKCmRhdGEgPScnJ3t9JycnCnF1ZXJ5anNvbiA9IGpzb24ubG9hZHMoZGF0YSkKcXVlcnlqc29uWydldmVudElkJ10gPSdldmVudCcrc3RyKHN0cihkYXRldGltZS5kYXRldGltZS5ub3coKS50aW1lc3RhbXAoKSkucmVwbGFjZSgnLicsICcnKSkKcXVlcnlqc29uWydldmVudFR5cGVOYW1lJ10gPSdUaWNrZXRpbmdfYW5kX2RlZHVwbGljYXRlX2V2ZW50X2NlJwpxdWVyeWpzb25bJ2NvbnRleHQnXT1hbGVydGpzb24KbG9nZ2VyLmluZm8ocXVlcnlqc29uKQpxdWVyeWpzb24yPWpzb24ubG9hZHMoZGF0YSkKcXVlcnlqc29uMlsnYm9keSddPXF1ZXJ5anNvbgpyZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoYXBpX3VybCwgZGF0YT1qc29uLmR1bXBzKHF1ZXJ5anNvbjIpLCBoZWFkZXJzPWhlYWRlcnMsdmVyaWZ5PUZhbHNlKQpsb2dnZXIuaW5mbyhyZXNwb25zZS5yYWlzZV9mb3Jfc3RhdHVzKCkpCgoKbG9nZ2VyLmluZm8oJ0NvbXBsZXRlZCcpCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoK","leo1311"
"LEORSLTN93134","LEORSLTN93134_leo1311.py","aW1wb3J0IHJlcXVlc3RzCgppbXBvcnQganNvbgoKaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyCmltcG9ydCBvcwppbXBvcnQgZGF0ZXRpbWUKaW1wb3J0IHN5cwppbXBvcnQgcmUKaW1wb3J0IHRpbWUKaW1wb3J0IG15c3FsLmNvbm5lY3RvciBhcyBjb25uZWN0b3IKZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHF1b3RlX3BsdXMsIHVybHBhcnNlCiNmcm9tIGxlYXAudXRpbHMuVXRpbGl0aWVzIGltcG9ydCBVdGlsaXRpZXMKZnJvbSBweXNwYXJrLnNxbCBpbXBvcnQgU3BhcmtTZXNzaW9uCgpvcy5lbnZpcm9uWydIVFRQX1BST1hZJ109JycKIApvcy5lbnZpcm9uWydIVFRQU19QUk9YWSddPScnCm9zLmVudmlyb25bJ2h0dHBfcHJveHknXT0nJwpvcy5lbnZpcm9uWydodHRwc19wcm94eSddPScnCiNpbnN0YW5jZV9kYXRldGltZT0nd2luZG93c19tZW1vcnlfdXNhZ2UxIG51bGwgMjAuMCcKCmxvZ2dlci5iYXNpY0NvbmZpZygKICAgIGxldmVsPWxvZ2dlci5JTkZPLAogICAgZm9ybWF0PSclKGFzY3RpbWUpcyBJTkZPICUobWVzc2FnZSlzJywKICAgIGRhdGVmbXQ9JyV5LyVtLyVkICVIOiVNOiVTJywKKQoKYXJndW1lbnRzID0gc3lzLmFyZ3YKbXlfZGljdCA9IHt9CmZvciBhcmcgaW4gYXJndW1lbnRzOgogICAgdHJ5OgogICAgICAgIG15X2RpY3RbYXJnLnNwbGl0KCc6JylbMF1dID0gJzonLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQogICAgZXhjZXB0OgogICAgICAgIGEgPSAnZXJyb3InCiAKIApsb2dnZXIuaW5mbygnUmVhZGluZyBpbnN0YW5jZV9kYXRldGltZTonKQpsb2dnZXIuaW5mbyhteV9kaWN0WydpbnN0YW5jZV9kYXRldGltZSddKQppbnN0YW5jZV9kYXRldGltZT1teV9kaWN0WydpbnN0YW5jZV9kYXRldGltZSddCnNwbGl0X3N0cmluZyA9IHJlLnNwbGl0KHInICcsIGluc3RhbmNlX2RhdGV0aW1lKQojaW5zdGFuY2VfZGF0ZXRpbWVfZW49c3BsaXRfc3RyaW5nWzBdK3NwbGl0X3N0cmluZ1sxXStzdHIoc3RyKGRhdGV0aW1lLmRhdGV0aW1lLm5vdygpLnRpbWVzdGFtcCgpKS5yZXBsYWNlKCcuJywgJycpKQpsb2dnZXIuaW5mbygnc3BsaXQgc3RyaW5nIDEnK3NwbGl0X3N0cmluZ1sxXSkKaW5zdGFuY2VfZGF0ZXRpbWVfZW49c3BsaXRfc3RyaW5nWzBdKyAnICcrc3BsaXRfc3RyaW5nWzFdKyAnICcrc3BsaXRfc3RyaW5nWzJdCgojTEVBUCBEYXRhc291cmNlCiMgbGVhcGRzID0gbXlfZGljdFsnTEVBUERhdGFTb3VyY2UnXQojIGxvZ2dlci5pbmZvKCdsZWFwZHMnKQojIGxvZ2dlci5pbmZvKGxlYXBkcykKIyBsZWFwRFNkaWN0ID1qc29uLmxvYWRzKGxlYXBkcykKCiNzYXZlIHRvIGRiCiMgY29sdW1uTGlzdCA9IGRmLmNvbHVtbnMKIyB1c2VybmFtZSA9IGxlYXBEU2RpY3RbJ3VzZXJOYW1lJ10KIyBwYXNzd29yZCA9IFV0aWxpdGllcy5kZWNyeXB0KGxlYXBEU2RpY3RbJ3Bhc3N3b3JkJ10sbGVhcERTZGljdFsnc2FsdCddKQojIGhvc3QgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLmhvc3RuYW1lCiMgcG9ydCA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkucG9ydAojIGRhdGFiYXNlID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5wYXRoLnJzcGxpdCgnLycsIDEpWzFdCgojIHVzZXJuYW1lID0gJ2xlYXBhZG0nCiMgcGFzc3dvcmQgPSAnRjEpZ3t0eUMnCiMgaG9zdCA9ICcxMC44Mi4xMjEuMTU1JwojIHBvcnQgPSAzMzA2CiMgZGF0YWJhc2UgPSAnbGVhcHF0eicKCnVzZXJuYW1lID0gJ3NyZWludCcKcGFzc3dvcmQgPSAnNWReRlpzdm0nCmhvc3QgPSAnMTAuODIuMTIyLjk0Jwpwb3J0ID0gMzMwNgpkYXRhYmFzZSA9ICdzcmVpbnQnCgoKCiN1cmwgPSAnaHR0cHM6Ly9sZWFwNzo0MDA1L2FwaS93b3JrZmxvdy1wYXJhbXN0cmlnZ2VyL0VtZkNwdVVzYWdlU3RvcC9hZG1pbi9sZW8xMzExL0xlbzEzMTEnCnVybD0naHR0cDovLzEwLjgxLjY0LjIyMzo1NTU4L3N0b3AnCiNoZWFkZXJzID0geydBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsICdIb3N0JzogJzxjYWxjdWxhdGVkIHdoZW4gcmVxdWVzdCBpcyBzZW50PicsICdBdXRob3JpemF0aW9uJzogJ0JlYXJlciBleUpoYkdjaU9pSlNVekkxTmlJc0luUjVjQ0lnT2lBaVNsZFVJaXdpYTJsa0lpQTZJQ0pNZFdONldqQjRhMmxwVldsQ2FrOVZMWGx2Y0cxU01EQTNUbTVGWW5aS2FuZERZVnBSTlhZMWNHRnpJbjAuZXlKbGVIQWlPakUzTURFeU5UVXpPREVzSW1saGRDSTZNVGN3TVRJME9UazRNU3dpWVhWMGFGOTBhVzFsSWpveE56QXhNalE1TmpBNUxDSnFkR2tpT2lJeE1qWTBaamszTUMwd04ySmhMVFEwWkdRdE9XVXlOeTB6TWpjNFlqYzBORE0xTVdZaUxDSnBjM01pT2lKb2RIUndjem92TDNacFkzUnpaV056ZEMweU5UbzRORFF6TDNKbFlXeHRjeTlNUlVGUUlpd2lZWFZrSWpvaVlXTmpiM1Z1ZENJc0luTjFZaUk2SW1ZNlpUUTNNelpqTkRZdE5qbG1OQzAwTWpWaExUbGtOekl0WVdReU1XSTBPRFJoWVRnMk9uWnBhMkZ6TG1kMWNIUmhNVGdpTENKMGVYQWlPaUpDWldGeVpYSWlMQ0poZW5BaU9pSnNaV0Z3TXpBaUxDSnViMjVqWlNJNkltVkVXbmRrTTNBdFlrWlNSMDFIU2xSVGJVNXVUVmhhY1dFeWNHNU5hemx3V2tjNVExUkhPVU5QUjJ4dVpFaGtNRnBzV2xaaVZsSXdZVVZhUWlJc0luTmxjM05wYjI1ZmMzUmhkR1VpT2lJM09UazNOMlptTVMwNVpqZ3pMVFJrWW1FdFlqRmpaUzA0TUdNNE1UWmhZalE0TkRjaUxDSmhZM0lpT2lJd0lpd2lZV3hzYjNkbFpDMXZjbWxuYVc1eklqcGJJaW9pTENJeE1qY3VNQzR3TGpFaVhTd2ljbVZoYkcxZllXTmpaWE56SWpwN0luSnZiR1Z6SWpwYkltUmxabUYxYkhRdGNtOXNaWE10YkdWaGNDSXNJbTltWm14cGJtVmZZV05qWlhOeklpd2lkVzFoWDJGMWRHaHZjbWw2WVhScGIyNGlYWDBzSW5KbGMyOTFjbU5sWDJGalkyVnpjeUk2ZXlKaFkyTnZkVzUwSWpwN0luSnZiR1Z6SWpwYkltMWhibUZuWlMxaFkyTnZkVzUwSWl3aWJXRnVZV2RsTFdGalkyOTFiblF0YkdsdWEzTWlMQ0oyYVdWM0xYQnliMlpwYkdVaVhYMTlMQ0p6WTI5d1pTSTZJbTl3Wlc1cFpDQmxiV0ZwYkNCd2NtOW1hV3hsSWl3aWMybGtJam9pTnprNU56ZG1aakV0T1dZNE15MDBaR0poTFdJeFkyVXRPREJqT0RFMllXSTBPRFEzSWl3aVpXMWhhV3hmZG1WeWFXWnBaV1FpT21aaGJITmxMQ0p1WVcxbElqb2lWbWxyWVhNZ1IzVndkR0VpTENKd2NtVm1aWEp5WldSZmRYTmxjbTVoYldVaU9pSjJhV3RoY3k1bmRYQjBZVEU0SWl3aVoybDJaVzVmYm1GdFpTSTZJbFpwYTJGeklpd2labUZ0YVd4NVgyNWhiV1VpT2lKSGRYQjBZU0lzSW1WdFlXbHNJam9pZG1scllYTXVaM1Z3ZEdFeE9FQnBibVp2YzNsekxtTnZiU0o5LmhsV2NsaTNLbmF5bVR5YmtVSFo1UE11WmV2WW01dFp5YUtveEdNR1lGOG5COEU2VjRjanNIVXNzME1CVUZjUjhQd0paSG11cFpoWmtKNWZDOWFJU3FzSE9fbl9ITjNxd1NTWXp1NFV6dkpzMlBSSF9haVpjY0JGZ0NvZ3FpcTZXT2JlRWRZZjJxMk5MX0VMdVRSSkdVXzNvZHlZYW11cHhFak5GRVZUQmFaMldTZWhUNzhyeWJ0TkRBa3d3SmpXLVRodkNWejAxa1FCSXFDWENMNHF1V2hndGN4cHhfM24zMlZYVHR4VmZBdXJkN0xjZUdXbHBxTXhaRHkzX3EyR0Z0ZHNjaTZrRWRfLTJ1WEMzaVhpUVhqSVg2eVpjSGpORFREUHQzVjNkdFRCM3hibFMtNVNjbXNxZ1ZMeW1BYW5COTRhU19xWXY5bWwwZ09lNjlBV0YwZycsJ1Byb2plY3QnOicyJywnUHJvamVjdE5hbWUnOiAnbGVvMTMxMScsICdDb25uZWN0aW9uJzogJ2tlZXAtYWxpdmUnLCAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLCAnQ29va2llJzogJ2Nvb2tpZWNvbnNlbnRfc3RhdHVzPWRpc21pc3M7IFhTUkYtVE9LRU49YTBlMjc5ZmQtYmNmYi00M2ZlLWJkZTAtZTQyNWQ0ZTAxMTJiOyBKU0VTU0lPTklEPTg3QUU1MEE1QjQ0NDFFMjhBMTI0NjM5MkQ0MzdFNjQ4JywgJ09yaWdpbic6ICdodHRwczovL2xlYXA3OjQwMDUnLCAnUmVmZXJlcic6ICdodHRwczovL2xlYXA3OjQwMDUvJywgJ1NlYy1GZXRjaC1EZXN0JzogJ2VtcHR5JywgJ1NlYy1GZXRjaC1Nb2RlJzogJ2NvcnMnLCAnU2VjLUZldGNoLVNpdGUnOiAnc2FtZS1vcmlnaW4nLCAnVXNlci1BZ2VudCc6ICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTE5LjAuMC4wIFNhZmFyaS81MzcuMzYgRWRnLzExOS4wLjAuMCcsICdYLVJlcXVlc3RlZC1XaXRoJzogJ0xlYXAnLCAnWC1YU1JGLVRPS0VOJzogJ2EwZTI3OWZkLWJjZmItNDNmZS1iZGUwLWU0MjVkNGUwMTEyYicsICdyb2xlSWQnOiAnMScsICdyb2xlTmFtZSc6ICdQcm9qZWN0IE1hbmFnZXInLCAnc2VjLWNoLXVhJzogJ1wnTWljcm9zb2Z0IEVkZ2VcJzt2PVwnMTE5XCcsIFwnQ2hyb21pdW1cJzt2PVwnMTE5XCcsIFwnTm90P0FfQnJhbmRcJzt2PVwnMjRcJycsICdzZWMtY2gtdWEtbW9iaWxlJzogJz8wJywgJ3NlYy1jaC11YS1wbGF0Zm9ybSc6ICdcJ1dpbmRvd3NcJyd9CiNkYXRhPXsKIyAgICAnb2JzZXJ2ZSc6J3Jlc3BvbnNlJwojfQoKcmVzID0gcmVxdWVzdHMucG9zdCgKICAgICAgICMgdXJsLGhlYWRlcnMsIHZlcmlmeSA9IGZhbHNlCiAgICAgICB1cmwKICAgICkKCmxvZ2dlci5pbmZvKCdyZXNwb25zZSBzdG9wIGFwaScpCmxvZ2dlci5pbmZvKHJlcy5zdGF0dXNfY29kZSkKY29ubmVjdGlvbiA9IGNvbm5lY3Rvci5jb25uZWN0KAogICAgdXNlcj11c2VybmFtZSwgcGFzc3dvcmQ9cGFzc3dvcmQsIGhvc3Q9aG9zdCwgcG9ydD1wb3J0LCBkYXRhYmFzZT1kYXRhYmFzZQopCmN1cnNvciA9IGNvbm5lY3Rpb24uY3Vyc29yKCkKdGltZS5zbGVlcCgzMCkKb3MuZW52aXJvblsnSFRUUFNfUFJPWFknXT0nYmxycHJveHkuYWQuaW5mb3N5cy5jb206NDQzJwpvcy5lbnZpcm9uWydIVFRQX1BST1hZJ109J2JscnByb3h5LmFkLmluZm9zeXMuY29tOjQ0MycKb3MuZW52aXJvblsnaHR0cF9wcm94eSddPSdibHJwcm94eS5hZC5pbmZvc3lzLmNvbTo0NDMnCm9zLmVudmlyb25bJ2h0dHBzX3Byb3h5J109J2JscnByb3h5LmFkLmluZm9zeXMuY29tOjQ0MycKCnVybCA9ICdodHRwczovL2luZm9zeXNxM2RldjEuc2VydmljZS1ub3cuY29tL2FwaS9ub3cvdGFibGUvaW5jaWRlbnQ/c3lzcGFybV9xdWVyeT1zaG9ydF9kZXNjcmlwdGlvbkNPTlRBSU5TJytpbnN0YW5jZV9kYXRldGltZV9lbisnJnN0YXRlPTInCmxvZ2dlci5pbmZvKCd1cmwnK3VybCkKCmhlYWRlcnMgPSB7J0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJywgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ30KcmVzID0gcmVxdWVzdHMuZ2V0KAogICAgICAgIHVybCwKICAgICAgICBhdXRoPSgnSUNTUF9pY2FwX3VzZXInLCAncXdlcjEyMzQnKSwKICAgICAgICBoZWFkZXJzPWhlYWRlcnMKICAgICkKcmVzcG9uc2U9cmVzLmpzb24oKQpyZXN1bHQgPSByZXNwb25zZVsncmVzdWx0J10Kc3lzX2lkPXJlc3VsdFswXVsnc3lzX2lkJ10KaXRzbV9udW1iZXI9cmVzdWx0WzBdWydudW1iZXInXQp1cmwgPSAnaHR0cHM6Ly9pbmZvc3lzcTNkZXYxLnNlcnZpY2Utbm93LmNvbS9hcGkvbm93L3RhYmxlL2luY2lkZW50Lycrc3lzX2lkCgpoZWFkZXJzID0geydBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbid9CgpwYXlsb2FkID0geydzdGF0ZSc6ICdSZXNvbHZlZCcsCiAgICAgICAgICAgICd3b3JrX25vdGVzJzogICdUaGUgcmVzb2x1dGlvbiB3b3JrZmxvdyBpcyB0cmlnZ2VyZWQnCiAgICAgICAgICAgIH0KCnJlcyA9IHJlcXVlc3RzLnB1dCgKICAgICAgICB1cmwsCiAgICAgICAgYXV0aD0oJ0lDU1BfaWNhcF91c2VyJywgJ3F3ZXIxMjM0JyksCiAgICAgICAgaGVhZGVycz1oZWFkZXJzLAogICAgICAgIGRhdGE9anNvbi5kdW1wcyhwYXlsb2FkKSwKICAgICkKCm9zLmVudmlyb25bJ0hUVFBfUFJPWFknXT0nJwogCm9zLmVudmlyb25bJ0hUVFBTX1BST1hZJ109JycKb3MuZW52aXJvblsnaHR0cF9wcm94eSddPScnCm9zLmVudmlyb25bJ2h0dHBzX3Byb3h5J109JycKCnRyeToKICAgIAogICAgIHN1YnF1ZXJ5PWYnU0VMRUNUIGUuaWQgRlJPTSBlbWZfZXZlbnQgZSBXSEVSRSBlLml0c21fbnVtYmVyPSBcJ3tpdHNtX251bWJlcn1cJyBBTkQgZS5hY3Rpb25hYmxlIExJS0UgXCclWUVTJVwnOycKICAgICBjdXJzb3IgPSBjb25uZWN0aW9uLmN1cnNvcigpCiAgICAKICAgICMgbG9nZ2VyLmluZm8oY3Vyc29yKQogICAgIGN1cnNvci5leGVjdXRlKAogICAgICBzdWJxdWVyeQogICAgICkKICAgICByZXNwb25zZT1jdXJzb3IuZmV0Y2hhbGwoKQogICAgIGlkPXJlc3BvbnNlWzBdWzBdCiAgICAgcXVlcnkgPSBmJ1VQREFURSBgZW1mX2V2ZW50YCBlIFNFVCBlLnJlc29sdXRpb25fdHJpZ2dlcmVkPVwnWWVzXCcgV0hFUkUgZS5pZD17aWR9OycKICAgICBjdXJzb3IuZXhlY3V0ZShxdWVyeSkKICAgICBjb25uZWN0aW9uLmNvbW1pdCgpCiAgICAgbG9nZ2VyLmluZm8oJ3Jlc3BvbnNlMScpCiAgICAgbG9nZ2VyLmluZm8ocmVzcG9uc2UpCiAgICAgbG9nZ2VyLmluZm8oJ3VwZGF0ZSBxdWVyeSBleGVjdXRlZCcpCiAgICAjIGxvZ2dlci5pbmZvKHJlc3BvbnNlKQogICAgIAogICAgCmV4Y2VwdCBjb25uZWN0b3IuZXJyb3JzLk9wZXJhdGlvbmFsRXJyb3IgYXMgZToKICAgICMgSGFuZGxlIHRoZSB0aW1lb3V0IGV4Y2VwdGlvbgogICAgICBsb2dnZXIuaW5mbygnTXlTUUwgY29ubmVjdGlvbiB0aW1lb3V0OiB7fScuZm9ybWF0KGUpKQogCmZpbmFsbHk6CiAgICAjIENsb3NlIHRoZSBkYXRhYmFzZSBjb25uZWN0aW9uCiAgICAgIGNvbm5lY3Rpb24uY2xvc2UoKQoKCmN1cnJlbnRfdGltZSA9IGRhdGV0aW1lLmRhdGV0aW1lLnV0Y25vdygpCiMgc3RhcnQ9Y3VycmVudF90aW1lIC0gZGF0ZXRpbWUudGltZWRlbHRhKG1pbnV0ZXM9MTApCiMgZW5kPWN1cnJlbnRfdGltZQpvbmVfbWluX2FnbyA9IGN1cnJlbnRfdGltZSAtIGRhdGV0aW1lLnRpbWVkZWx0YShtaW51dGVzPTEpCnR3b19taW5fYWdvID0gY3VycmVudF90aW1lIC0gZGF0ZXRpbWUudGltZWRlbHRhKG1pbnV0ZXM9MikKCiN0d29fZGF5c19hZ28gPSBjdXJyZW50X3RpbWUgLSBkYXRldGltZS50aW1lZGVsdGEoKQpzdGFydCA9IHR3b19taW5fYWdvLmlzb2Zvcm1hdCgpKyAnWicKZW5kID0gb25lX21pbl9hZ28uaXNvZm9ybWF0KCkrICdaJwpwcmludCgnc3RhcnQgJykKcHJpbnQoc3RhcnQpCnByaW50KCdlbmQgJykKcHJpbnQoZW5kKQojcHJvbWV0aGV1c19hcGk9ZidodHRwOi8vY3ZyaWN0bHB0bTIxOjkwOTAvYXBpL3YxL3F1ZXJ5X3JhbmdlP3F1ZXJ5PWxhYmVsX3JlcGxhY2UoJTBBJTIwJTIwbGFiZWxfcmVwbGFjZSglMEElMjAlMjBsYWJlbF9yZXBsYWNlKDEwMC1hdmcocmF0ZSh3aW5kb3dzX2NwdV90aW1lX3RvdGFsJTdCbW9kZSUzRCdpZGxlJyU3RCU1QjFtJTVEKSklMjAqJTIwMTAwJTJDJ19fbmFtZV9fJyUyQyd3aW5kb3dzX21lbW9yeV91c2FnZSclMkMnX19uYW1lX18nJTJDJycpJTJDJ2luc3RhbmNlJyUyQydudWxsJyUyQydpbnN0YW5jZSclMkMnJyUwQSklMEElMkMnam9iJyUyQydudWxsJyUyQydqb2InJTJDJyclMEEpJnN0YXJ0PXtzdGFydH0mZW5kPXtlbmR9JnN0ZXA9MTBzJwpwcm9tZXRoZXVzX2FwaT1mJ2h0dHA6Ly9jdnJpY3RscHRtMjE6OTA5MC9hcGkvdjEvcXVlcnlfcmFuZ2U/cXVlcnk9bGFiZWxfcmVwbGFjZSglMEElMjAlMjBsYWJlbF9yZXBsYWNlKCUwQSUyMCUyMGxhYmVsX3JlcGxhY2UoMTAwLWF2ZyhyYXRlKHdpbmRvd3NfY3B1X3RpbWVfdG90YWwlN0Jtb2RlJTNEXCdpZGxlXCclN0QlNUIxbSU1RCkpJTIwKiUyMDEwMCUyQ1wnX19uYW1lX19cJyUyQ1wnd2luZG93c19tZW1vcnlfdXNhZ2VcJyUyQ1wnX19uYW1lX19cJyUyQ1wnXCcpJTJDXCdpbnN0YW5jZVwnJTJDXCdudWxsXCclMkNcJ2luc3RhbmNlXCclMkNcJ1wnJTBBKSUwQSUyQ1wnam9iXCclMkNcJ251bGxcJyUyQ1wnam9iXCclMkNcJ1wnJTBBKSZzdGFydD17c3RhcnR9JmVuZD17ZW5kfSZzdGVwPTEwcycKcHJpbnQocHJvbWV0aGV1c19hcGkpCnJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KHByb21ldGhldXNfYXBpKQoKaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwOgogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KHByb21ldGhldXNfYXBpKQplbHNlOgogICAgICAgIHByaW50KHJlc3BvbnNlKQogICAgICAgIHJlc3BvbnNlID0gJ05vIGRhdGEgYXZhaWxhYmxlJwoKIyBtZXRyaWNfZGF0YT1yZXNwb25zZS5qc29uKCkKanNvbl9kYXRhID0ganNvbi5sb2FkcyhyZXNwb25zZS5jb250ZW50KQpkYXRhID0ganNvbl9kYXRhWydkYXRhJ10KcmVzdWx0PWRhdGFbJ3Jlc3VsdCddCnZhbHVlcz1yZXN1bHRbMF1bJ3ZhbHVlcyddCmZvciBpdGVtIGluIHZhbHVlczoKIHByaW50KGl0ZW1bMV0pCiBpZihmbG9hdChpdGVtWzFdKTw4MCk6CiAgICAgICBmbGFnPSd0cnVlJwogZWxzZToKICAgICAgIGZsYWc9J2ZhbHNlJwogICAgICAgYnJlYWsKaWYgZmxhZyA9PSAndHJ1ZSc6CiAgICAjIHVybCA9ICdodHRwczovL2luZm9zeXNxM2RldjEuc2VydmljZS1ub3cuY29tL2FwaS9ub3cvdGFibGUvaW5jaWRlbnQ/c3lzcGFybV9xdWVyeT1zaG9ydF9kZXNjcmlwdGlvbkNPTlRBSU5TJytpbnN0YW5jZV9kYXRldGltZV9lbisnJnN0YXRlPTInCiAgICAjIGxvZ2dlci5pbmZvKCd1cmwnK3VybCkKCiAgICAjIGhlYWRlcnMgPSB7J0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJywgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ30KCiAgICAjIHJlcyA9IHJlcXVlc3RzLmdldCgKICAgICMgICAgIHVybCwKICAgICMgICAgIGF1dGg9KCdJQ1NQX2ljYXBfdXNlcicsICdxd2VyMTIzNCcpLAogICAgIyAgICAgaGVhZGVycz1oZWFkZXJzCiAgICAjICkKICAgICMgcmVzcG9uc2U9cmVzLmpzb24oKQogICAgIyByZXN1bHQgPSByZXNwb25zZVsncmVzdWx0J10KICAgICMgc3lzX2lkPXJlc3VsdFswXVsnc3lzX2lkJ10KICAgICMgbG9nZ2VyLmluZm8oJ3N5c0lkJytzeXNfaWQpCiAgICAjIGxvZ2dlci5pbmZvKCdzdGF0dXNfY29kZSAyMDAnKQogICAgIyB1cmwgPSAnaHR0cHM6Ly9pbmZvc3lzcTNkZXYxLnNlcnZpY2Utbm93LmNvbS9hcGkvbm93L3RhYmxlL2luY2lkZW50Lycrc3lzX2lkCgogICAgIyBoZWFkZXJzID0geydBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbid9CgogICAgIyBkYXRhPXsKICAgICMgICAgICd3b3JrX25vdGVzJzogJ1RoZSBpc3N1ZSBpcyByZXNvbHZlZCcsCiAgICAjICAgICAnc3RhdGUnOiAnQ2xvc2VkJwogICAgIyB9CgogICAgIyAjcGF5bG9hZCA9IHsnc3RhdGUnOiAnQ2xvc2VkJ30KCiAgICAjIHJlcyA9IHJlcXVlc3RzLnB1dCgKICAgICMgICAgIHVybCwKICAgICMgICAgIGF1dGg9KCdJQ1NQX2ljYXBfdXNlcicsICdxd2VyMTIzNCcpLAogICAgIyAgICAgaGVhZGVycz1oZWFkZXJzLAogICAgIyAgICAganNvbj1kYXRhCiAgICAjICkgIAogICAgYXBpX3VybCA9ICdodHRwczovL2xlYXA3OjQwMDYvYXBpL2V2ZW50L3RyaWdnZXIvUmFiYml0bXFfZW1mP29yZz1sZW8xMzExJmNvcmVsaWQ9JmRhdGFzb3VyY2VOYW1lPUxFQUxDTENMMTIxMzInCiAgICBoZWFkZXJzID0gIHsnQ29udGVudC1UeXBlJzonYXBwbGljYXRpb24vanNvbid9CiAgICBhbGVydGpzb24gPSB7fQogICAgYWxlcnRqc29uWydpbnN0YW5jZV9kYXRldGltZSddPWluc3RhbmNlX2RhdGV0aW1lCiAgICBhbGVydGpzb25bJ2FjdGlvbmVkX3Vwb24nXT0ndHJ1ZScKICAgIGRhdGEgPScnJ3t9JycnCiAgICBxdWVyeWpzb24gPSBqc29uLmxvYWRzKGRhdGEpCiAgICBxdWVyeWpzb25bJ2V2ZW50SWQnXSA9J2V2ZW50JytzdHIoc3RyKGRhdGV0aW1lLmRhdGV0aW1lLm5vdygpLnRpbWVzdGFtcCgpKS5yZXBsYWNlKCcuJywgJycpKQogICAgcXVlcnlqc29uWydldmVudFR5cGVOYW1lJ10gPSdDbG9zdXJlX2V2ZW50X2NlJwogICAgcXVlcnlqc29uWydjb250ZXh0J109YWxlcnRqc29uCiAgICBxdWVyeWpzb24yPWpzb24ubG9hZHMoZGF0YSkKICAgIHF1ZXJ5anNvbjJbJ2JvZHknXT1xdWVyeWpzb24KICAgIHJlc3BvbnNlID0gcmVxdWVzdHMucG9zdChhcGlfdXJsLCBkYXRhPWpzb24uZHVtcHMocXVlcnlqc29uMiksIGhlYWRlcnM9aGVhZGVycywgdmVyaWZ5PUZhbHNlKQogICAgbG9nZ2VyLmluZm8ocmVzcG9uc2UucmFpc2VfZm9yX3N0YXR1cygpKQplbHNlOgogcHJpbnQoJ3RocmVzaG9sZCBicmVhY2hlZCcpCgp0aW1lLnNsZWVwKDMwKQpsb2dnZXIuaW5mbygnQ29tcGxldGVkJykKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg==","leo1311"
"LEOCLSR_51410","LEOCLSR_51410_leo1311.py","aW1wb3J0IGJhc2U2NAoKaW1wb3J0IG15c3FsLmNvbm5lY3RvciBhcyBjb25uZWN0b3IKCmltcG9ydCByZXF1ZXN0cwppbXBvcnQgc3lzCmltcG9ydCBqc29uCmltcG9ydCByZQppbXBvcnQgbG9nZ2luZyBhcyBsb2dnZXIKaW1wb3J0IGRhdGV0aW1lCmltcG9ydCBvcyAKaW1wb3J0IHRpbWUKZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHF1b3RlX3BsdXMsIHVybHBhcnNlCiNmcm9tIGxlYXAudXRpbHMuVXRpbGl0aWVzIGltcG9ydCBVdGlsaXRpZXMKZnJvbSBweXNwYXJrLnNxbCBpbXBvcnQgU3BhcmtTZXNzaW9uCgpvcy5lbnZpcm9uWydIVFRQX1BST1hZJ109JycKb3MuZW52aXJvblsnSFRUUFNfUFJPWFknXT0nJwpvcy5lbnZpcm9uWydodHRwX3Byb3h5J109JycKb3MuZW52aXJvblsnaHR0cHNfcHJveHknXT0nJwoKbG9nZ2VyLmJhc2ljQ29uZmlnKAogICAgbGV2ZWw9bG9nZ2VyLklORk8sCiAgICBmb3JtYXQ9JyUoYXNjdGltZSlzIElORk8gJShtZXNzYWdlKXMnLAogICAgZGF0ZWZtdD0nJXkvJW0vJWQgJUg6JU06JVMnLAopCgp0aHJlc2hvbGQ9ODAKCiMgdXNlcm5hbWUgPSAnbGVhcGFkbScKIyBwYXNzd29yZCA9ICdGMSlne3R5QycKIyBob3N0ID0gJzEwLjgyLjEyMS4xNTUnCiMgcG9ydCA9IDMzMDYKIyBkYXRhYmFzZSA9ICdsZWFwcXR6JwoKCgphcmd1bWVudHMgPSBzeXMuYXJndgpteV9kaWN0ID0ge30KZm9yIGFyZyBpbiBhcmd1bWVudHM6CiAgICB0cnk6CiAgICAgICAgbXlfZGljdFthcmcuc3BsaXQoJzonKVswXV0gPSAnOicuam9pbihhcmcuc3BsaXQoJzonKVsxOl0pCiAgICBleGNlcHQ6CiAgICAgICAgYSA9ICdlcnJvcicKIAogCmxvZ2dlci5pbmZvKCdSZWFkaW5nIGluc3RhbmNlX2RhdGV0aW1lOicpCiNMRUFQIERhdGFzb3VyY2UKbGVhcGRzID0gbXlfZGljdFsnTEVBUERhdGFTb3VyY2UnXQpsb2dnZXIuaW5mbygnbGVhcGRzJykKbG9nZ2VyLmluZm8obGVhcGRzKQpsZWFwRFNkaWN0ID1qc29uLmxvYWRzKGxlYXBkcykKCiNzYXZlIHRvIGRiCiMgY29sdW1uTGlzdCA9IGRmLmNvbHVtbnMKIyB1c2VybmFtZSA9IGxlYXBEU2RpY3RbJ3VzZXJOYW1lJ10KIyBwYXNzd29yZCA9IFV0aWxpdGllcy5kZWNyeXB0KGxlYXBEU2RpY3RbJ3Bhc3N3b3JkJ10sbGVhcERTZGljdFsnc2FsdCddKQojIGhvc3QgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLmhvc3RuYW1lCiMgcG9ydCA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkucG9ydAojIGRhdGFiYXNlID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5wYXRoLnJzcGxpdCgnLycsIDEpWzFdCnVzZXJuYW1lID0gJ3NyZWludCcKcGFzc3dvcmQgPSAnNWReRlpzdm0nCmhvc3QgPSAnMTAuODIuMTIyLjk0Jwpwb3J0ID0gMzMwNgpkYXRhYmFzZSA9ICdzcmVpbnQnCgpjb25uZWN0aW9uID0gY29ubmVjdG9yLmNvbm5lY3QoCiAgICB1c2VyPXVzZXJuYW1lLCBwYXNzd29yZD1wYXNzd29yZCwgaG9zdD1ob3N0LCBwb3J0PXBvcnQsIGRhdGFiYXNlPWRhdGFiYXNlCikKY3Vyc29yID0gY29ubmVjdGlvbi5jdXJzb3IoKQoKCnRpbWUuc2xlZXAoMzApCmxvZ2dlci5pbmZvKG15X2RpY3RbJ2luc3RhbmNlX2RhdGV0aW1lJ10pCmluc3RhbmNlX2RhdGV0aW1lPW15X2RpY3RbJ2luc3RhbmNlX2RhdGV0aW1lJ10Kc3BsaXRfc3RyaW5nID0gcmUuc3BsaXQocicgJywgaW5zdGFuY2VfZGF0ZXRpbWUpCiNpbnN0YW5jZV9kYXRldGltZV9lbj1zcGxpdF9zdHJpbmdbMF0rc3BsaXRfc3RyaW5nWzFdK3N0cihzdHIoZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkudGltZXN0YW1wKCkpLnJlcGxhY2UoJy4nLCAnJykpCmluc3RhbmNlX2RhdGV0aW1lX2VuPXNwbGl0X3N0cmluZ1swXSsgJyAnK3NwbGl0X3N0cmluZ1sxXSsnICcrc3BsaXRfc3RyaW5nWzJdCmZsYWc6YW55CmFjdGlvbmVkX3Vwb249bXlfZGljdFsnYWN0aW9uZWRfdXBvbiddCiNpbnN0YW5jZV9kYXRldGltZV9lbj0nd2luZG93c19tZW1vcnlfdXNhZ2UxIG51bGwgMjAuMCcKCgoKY3VycmVudF90aW1lID0gZGF0ZXRpbWUuZGF0ZXRpbWUudXRjbm93KCkKIyBzdGFydD1jdXJyZW50X3RpbWUgLSBkYXRldGltZS50aW1lZGVsdGEobWludXRlcz0xMCkKIyBlbmQ9Y3VycmVudF90aW1lCm9uZV9taW5fYWdvID0gY3VycmVudF90aW1lIC0gZGF0ZXRpbWUudGltZWRlbHRhKG1pbnV0ZXM9MSkKdHdvX21pbl9hZ28gPSBjdXJyZW50X3RpbWUgLSBkYXRldGltZS50aW1lZGVsdGEobWludXRlcz0yKQoKI3R3b19kYXlzX2FnbyA9IGN1cnJlbnRfdGltZSAtIGRhdGV0aW1lLnRpbWVkZWx0YSgpCnN0YXJ0ID0gdHdvX21pbl9hZ28uaXNvZm9ybWF0KCkrICdaJwplbmQgPSBvbmVfbWluX2Fnby5pc29mb3JtYXQoKSsgJ1onCnByaW50KCdzdGFydCAnKQpwcmludChzdGFydCkKcHJpbnQoJ2VuZCAnKQpwcmludChlbmQpCnByb21ldGhldXNfYXBpPWYnaHR0cDovL2N2cmljdGxwdG0yMTo5MDkwL2FwaS92MS9xdWVyeV9yYW5nZT9xdWVyeT1sYWJlbF9yZXBsYWNlKCUwQSUyMCUyMGxhYmVsX3JlcGxhY2UoJTBBJTIwJTIwbGFiZWxfcmVwbGFjZSgxMDAtYXZnKHJhdGUod2luZG93c19jcHVfdGltZV90b3RhbCU3Qm1vZGUlM0RcJ2lkbGVcJyU3RCU1QjFtJTVEKSklMjAqJTIwMTAwJTJDXCdfX25hbWVfX1wnJTJDXCd3aW5kb3dzX21lbW9yeV91c2FnZVwnJTJDXCdfX25hbWVfX1wnJTJDXCdcJyklMkNcJ2luc3RhbmNlXCclMkNcJ251bGxcJyUyQ1wnaW5zdGFuY2VcJyUyQ1wnXCclMEEpJTBBJTJDXCdqb2JcJyUyQ1wnbnVsbFwnJTJDXCdqb2JcJyUyQ1wnXCclMEEpJnN0YXJ0PXtzdGFydH0mZW5kPXtlbmR9JnN0ZXA9MTBzJwpwcmludChwcm9tZXRoZXVzX2FwaSkKcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQocHJvbWV0aGV1c19hcGkpCgojIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoKIyAgICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KHByb21ldGhldXNfYXBpKQojIGVsc2U6CiMgICAgICAgICBwcmludChyZXNwb25zZSkKIyAgICAgICAgIHJlc3BvbnNlID0gJ05vIGRhdGEgYXZhaWxhYmxlJwoKIyBtZXRyaWNfZGF0YT1yZXNwb25zZS5qc29uKCkKanNvbl9kYXRhID0ganNvbi5sb2FkcyhyZXNwb25zZS5jb250ZW50KQpkYXRhID0ganNvbl9kYXRhWydkYXRhJ10KcmVzdWx0PWRhdGFbJ3Jlc3VsdCddCnZhbHVlcz1yZXN1bHRbMF1bJ3ZhbHVlcyddCmZvciBpdGVtIGluIHZhbHVlczoKIGlmKGZsb2F0KGl0ZW1bMV0pPHRocmVzaG9sZCk6CiAgICAgICBmbGFnPSd0cnVlJwogZWxzZToKICAgICAgIGZsYWc9J2ZhbHNlJwogICAgICAgYnJlYWsKCm9zLmVudmlyb25bJ0hUVFBfUFJPWFknXT0nYmxycHJveHkuYWQuaW5mb3N5cy5jb206NDQzJwpvcy5lbnZpcm9uWydIVFRQU19QUk9YWSddPSdibHJwcm94eS5hZC5pbmZvc3lzLmNvbTo0NDMnCm9zLmVudmlyb25bJ2h0dHBfcHJveHknXT0nYmxycHJveHkuYWQuaW5mb3N5cy5jb206NDQzJwpvcy5lbnZpcm9uWydodHRwc19wcm94eSddPSdibHJwcm94eS5hZC5pbmZvc3lzLmNvbTo0NDMnCiAgIAppZiBmbGFnID09ICd0cnVlJzoKIHVybCA9ICdodHRwczovL2luZm9zeXNxM2RldjEuc2VydmljZS1ub3cuY29tL2FwaS9ub3cvdGFibGUvaW5jaWRlbnQ/c3lzcGFybV9xdWVyeT1zaG9ydF9kZXNjcmlwdGlvbkNPTlRBSU5TJytpbnN0YW5jZV9kYXRldGltZV9lbisnJnN0YXRlPTYnCiBsb2dnZXIuaW5mbygndXJsJyt1cmwpCgogaGVhZGVycyA9IHsnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLCAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nfQoKIHJlcyA9IHJlcXVlc3RzLmdldCgKICAgICAgICB1cmwsCiAgICAgICAgYXV0aD0oJ0lDU1BfaWNhcF91c2VyJywgJ3F3ZXIxMjM0JyksCiAgICAgICAgaGVhZGVycz1oZWFkZXJzCiAgICApCiByZXNwb25zZT1yZXMuanNvbigpCiByZXN1bHQgPSByZXNwb25zZVsncmVzdWx0J10KIGxvZ2dlci5pbmZvKCdyZXN1bHQtLS0tLS0tLScpCiBsb2dnZXIuaW5mbyhyZXN1bHQpCiBpZihsZW4ocmVzdWx0KT4wKTogCiAgc3lzX2lkPXJlc3VsdFswXVsnc3lzX2lkJ10KICBpdHNtX251bWJlcj1yZXN1bHRbMF1bJ251bWJlciddCiAgbG9nZ2VyLmluZm8oJ3N5c0lkJytzeXNfaWQpCiAgbG9nZ2VyLmluZm8oJ3N0YXR1c19jb2RlIDIwMCcpCiAgdXJsID0gJ2h0dHBzOi8vaW5mb3N5c3EzZGV2MS5zZXJ2aWNlLW5vdy5jb20vYXBpL25vdy90YWJsZS9pbmNpZGVudC8nK3N5c19pZAoKICBoZWFkZXJzID0geydBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbid9CiAgaWYoYWN0aW9uZWRfdXBvbiA9PSd0cnVlJyk6CiAgICAgZGF0YT17CiAgICAgICAgJ3dvcmtfbm90ZXMnOiAnVGhlIGlzc3VlIGlzIHJlc29sdmVkIGJ5IHRyaWdnZXJpbmcgdGhlIHJlc29sdXRpb24gd29ya2Zsb3cnLAogICAgICAgICdzdGF0ZSc6ICdDbG9zZWQnCiAgICAgIH0KICBlbGlmKGFjdGlvbmVkX3Vwb24gPT0nZmFsc2UnKToKICAgICAgZGF0YT17CiAgICAgICAgJ3dvcmtfbm90ZXMnOiAnRHVwbGljYXRlIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCcsCiAgICAgICAgICdzdGF0ZSc6ICdDbG9zZWQnCiAgICAgfSAgCgogICAgI3BheWxvYWQgPSB7J3N0YXRlJzogJ0Nsb3NlZCd9CgogIHJlcyA9IHJlcXVlc3RzLnB1dCgKICAgICAgICB1cmwsCiAgICAgICAgYXV0aD0oJ0lDU1BfaWNhcF91c2VyJywgJ3F3ZXIxMjM0JyksCiAgICAgICAgaGVhZGVycz1oZWFkZXJzLAogICAgICAgIGpzb249ZGF0YQogICAgKSAgCiAgbG9nZ2VyLmluZm8odXJsKQogIGxvZ2dlci5pbmZvKCdyZXNwb25zZSBjb2RlLS0nKQogIGxvZ2dlci5pbmZvKHJlcy5zdGF0dXNfY29kZSkKIAogIHRyeToKICAgICBxdWVyeSA9IGYnVVBEQVRFIGBlbWZfZXZlbnRgIGUgU0VUIGUuaXRzbV9zdGF0dXM9XCdDbG9zZWRcJyBXSEVSRSBlLml0c21fbnVtYmVyPVwne2l0c21fbnVtYmVyfVwnOycKICAgICBjdXJzb3IgPSBjb25uZWN0aW9uLmN1cnNvcigpCiAgICAjIGxvZ2dlci5pbmZvKGN1cnNvcikKICAgICByZXNwb25zZSA9IGN1cnNvci5leGVjdXRlKAogICAgICAgcXVlcnkKICAgICApCiAgICAgbG9nZ2VyLmluZm8oJ3VwZGF0ZSBxdWVyeSBleGVjdXRlZCcpCiAgICAjIGxvZ2dlci5pbmZvKHJlc3BvbnNlKQogICAgIGNvbm5lY3Rpb24uY29tbWl0KCkKICAgIAogIGV4Y2VwdCBjb25uZWN0b3IuZXJyb3JzLk9wZXJhdGlvbmFsRXJyb3IgYXMgZToKICAgICMgSGFuZGxlIHRoZSB0aW1lb3V0IGV4Y2VwdGlvbgogICAgICBsb2dnZXIuaW5mbygnTXlTUUwgY29ubmVjdGlvbiB0aW1lb3V0OiB7fScuZm9ybWF0KGUpKQogCiAgZmluYWxseToKICAgICMgQ2xvc2UgdGhlIGRhdGFiYXNlIGNvbm5lY3Rpb24KICAgICAgY29ubmVjdGlvbi5jbG9zZSgpCmlmIGZsYWc9PSAnZmFsc2UnOgogICAgbG9nZ2VyLmluZm8oJ3N0aWxsIHRoZSBtZXRyaWMgdmFsdWVzIGFyZSBiZXlvbmQgdGhyZXNob2xkJykKIApsb2dnZXIuaW5mbygnQ29tcGxldGVkJykKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoK","leo1311"
"LEOCLSR_30823","LEOCLSR_30823_leo1311.py","aW1wb3J0IGJhc2U2NAoKaW1wb3J0IG15c3FsLmNvbm5lY3RvciBhcyBjb25uZWN0b3IKCmltcG9ydCByZXF1ZXN0cwoKaW1wb3J0IGpzb24KCmltcG9ydCBsb2dnaW5nIGFzIGxvZ2dlcgoKaW1wb3J0IHJlCgppbXBvcnQgc3lzCgppbXBvcnQgb3MKaW1wb3J0IGRhdGV0aW1lCgoKb3MuZW52aXJvblsnSFRUUF9QUk9YWSddPSdibHJwcm94eS5hZC5pbmZvc3lzLmNvbTo0NDMnCiAKb3MuZW52aXJvblsnSFRUUFNfUFJPWFknXT0nYmxycHJveHkuYWQuaW5mb3N5cy5jb206NDQzJwpvcy5lbnZpcm9uWydodHRwX3Byb3h5J109J2JscnByb3h5LmFkLmluZm9zeXMuY29tOjQ0MycKb3MuZW52aXJvblsnaHR0cHNfcHJveHknXT0nYmxycHJveHkuYWQuaW5mb3N5cy5jb206NDQzJwoKdXNlcm5hbWUgPSAnbGVhcGFkbScKcGFzc3dvcmQgPSAnRjEpZ3t0eUMnCmhvc3QgPSAnMTAuODIuMTIxLjE1NScKcG9ydCA9IDMzMDYKZGF0YWJhc2UgPSAnbGVhcHF0eicKCgoKY29ubmVjdGlvbiA9IGNvbm5lY3Rvci5jb25uZWN0KAogICAgdXNlcj11c2VybmFtZSwgcGFzc3dvcmQ9cGFzc3dvcmQsIGhvc3Q9aG9zdCwgcG9ydD1wb3J0LCBkYXRhYmFzZT1kYXRhYmFzZQopCgoKCmxvZ2dlci5iYXNpY0NvbmZpZygKICAgIGxldmVsPWxvZ2dlci5JTkZPLAogICAgZm9ybWF0PSclKGFzY3RpbWUpcyBJTkZPICUobWVzc2FnZSlzJywKICAgIGRhdGVmbXQ9JyV5LyVtLyVkICVIOiVNOiVTJywKKQogCmFyZ3VtZW50cyA9IHN5cy5hcmd2Cm15X2RpY3QgPSB7fQpmb3IgYXJnIGluIGFyZ3VtZW50czoKICAgIHRyeToKICAgICAgICBteV9kaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICc6Jy5qb2luKGFyZy5zcGxpdCgnOicpWzE6XSkKICAgIGV4Y2VwdDoKICAgICAgICBhID0gJ2Vycm9yJwogCiAKbG9nZ2VyLmluZm8oJ1JlYWRpbmcgaW5zdGFuY2VfZGF0ZXRpbWU6JykKbG9nZ2VyLmluZm8obXlfZGljdFsnaW5zdGFuY2VfZGF0ZXRpbWUnXSkKaW5zdGFuY2VfZGF0ZXRpbWU9bXlfZGljdFsnaW5zdGFuY2VfZGF0ZXRpbWUnXQoKCgoKZW1mX2RiID0gY29ubmVjdG9yLmNvbm5lY3QoCiAgICB1c2VyPXVzZXJuYW1lLCBwYXNzd29yZD1wYXNzd29yZCwgaG9zdD1ob3N0LCBwb3J0PXBvcnQsIGRhdGFiYXNlPWRhdGFiYXNlCikKY3Vyc29yID0gZW1mX2RiLmN1cnNvcigpCnRyeToKIHF1ZXJ5ID0gZidTRUxFQ1QgKiBGUk9NIGBlbWZfZXZlbnRgIFdIRVJFIHNlbGVjdG9yX3BhcmFtID0gXCd7aW5zdGFuY2VfZGF0ZXRpbWV9XCc7JwogY3Vyc29yLmV4ZWN1dGUocXVlcnkpCiByZXN1bHRzID0gY3Vyc29yLmZldGNoYWxsKCkKIGlmKGxlbihyZXN1bHRzKSE9MCk6CiAgICBsb2dnZXIuaW5mbygnY29uZGl0aW9uIGZhbHNlJykKICAgIGFjdGlvbl9mbGFnPSdObycgICAgIAogICAgcXVlcnkyID0gZidVUERBVEUgYGVtZl9ldmVudGAgU0VUIGFjdGlvbmFibGUgPSBcJ3thY3Rpb25fZmxhZ31cJyBXSEVSRSBzZWxlY3Rvcl9wYXJhbSA9IFwne2luc3RhbmNlX2RhdGV0aW1lfVwnOycKICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5MikKIGVtZl9kYi5jb21taXQoKQpleGNlcHQgY29ubmVjdG9yLmVycm9ycy5PcGVyYXRpb25hbEVycm9yIGFzIGU6CiAgICAjIEhhbmRsZSB0aGUgdGltZW91dCBleGNlcHRpb24KICAgICAgbG9nZ2VyLmluZm8oJ015U1FMIGNvbm5lY3Rpb24gdGltZW91dDoge30nLmZvcm1hdChlKSkKIApmaW5hbGx5OgogICAgIyBDbG9zZSB0aGUgZGF0YWJhc2UgY29ubmVjdGlvbgogICAgICBlbWZfZGIuY2xvc2UoKQpsb2dnZXIuaW5mbygnQ29tcGxldGVkJykKCgo=","leo1311"
"LEOALRT_45377","LEOALRT_45377_leo1311.py","","leo1311"
"LEOTRGRR63308","LEOTRGRR63308_leo1311.py","aW1wb3J0IHJlcXVlc3RzCmltcG9ydCBsb2dnaW5nIGFzIGxvZ2dlcgppbXBvcnQgdGltZQoKbG9nZ2VyLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dlci5JTkZPLCBmb3JtYXQ9JyUoYXNjdGltZSlzIElORk8gJShtZXNzYWdlKXMnLCBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycpCgphcGlfdXJsPSJodHRwOi8vMTAuODEuNjQuMjIzOjU1NTgvc3RhcnQiCgpyZXNwb25zZSA9IHJlcXVlc3RzLmdldChhcGlfdXJsKQpsb2dnZXIuaW5mbygicmVzcG9uc2VlZSIpCmxvZ2dlci5pbmZvKHJlc3BvbnNlKQp0aW1lLnNsZWVwKDEpCgphbGVydF9wdWJsaXNoZXIgPSJodHRwczovL2xlYXAyOjQwMDYvYXBpL2V2ZW50L3RyaWdnZXIvYWxlcnRfcHVibGlzaGVyX2VtZj9vcmc9bGVvMTMxMSIKcmVzPSByZXF1ZXN0cy5wb3N0KGFsZXJ0X3B1Ymxpc2hlcikKbG9nZ2VyLmluZm8oJ0NvbXBsZXRlZCcpCgoKCg==","leo1311"
"SREHPCLR65771","SREHPCLR65771_SRE1.py","aW1wb3J0IHBhbmRhcyBhcyBwZA0KaW1wb3J0IG15c3FsLmNvbm5lY3Rvcg0KaW1wb3J0IGpzb24NCmltcG9ydCBzeXMNCmZyb20gbGVhcC51dGlscy5VdGlsaXRpZXMgaW1wb3J0IFV0aWxpdGllcw0KZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHF1b3RlX3BsdXMsIHVybHBhcnNlDQppbXBvcnQgbG9nZ2luZw0KDQpsb2dnaW5nLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dpbmcuSU5GTykNCmFyZ3VtZW50cyA9IHN5cy5hcmd2DQpkaWN0ID0ge30NCmZvciBhcmcgaW4gYXJndW1lbnRzOg0KICAgIHRyeToNCiAgICAgICAgZGljdFthcmcuc3BsaXQoJzonKVswXV0gPSAoJzonKS5qb2luKGFyZy5zcGxpdCgnOicpWzE6XSkNCiAgICBleGNlcHQ6DQogICAgICAgIGEgPSAnZXJyb3InDQpwcmludChkaWN0KQ0KbGVhcGRzID0gZGljdFsnbGVhcGRzJ10NCmxlYXBEU2RpY3QgPSBqc29uLmxvYWRzKGxlYXBkcykNCnVzZXJuYW1lID0gbGVhcERTZGljdFsndXNlck5hbWUnXQ0KcGFzc3dvcmQgPSBVdGlsaXRpZXMuZGVjcnlwdChsZWFwRFNkaWN0WydwYXNzd29yZCddLCBsZWFwRFNkaWN0WydzYWx0J10pDQpob3N0ID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5ob3N0bmFtZQ0KcG9ydCA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkucG9ydA0KZGF0YWJhc2UgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLnBhdGgucnNwbGl0KCcvJywgMSlbMV0NCmNvbm5lY3Rpb24gPSBteXNxbC5jb25uZWN0b3IuY29ubmVjdCh1c2VyPXVzZXJuYW1lLCBwYXNzd29yZD1wYXNzd29yZCwgaG9zdD1ob3N0LCBwb3J0PXBvcnQsIGRhdGFiYXNlPWRhdGFiYXNlKQ0KbXljdXJzb3IgPSBjb25uZWN0aW9uLmN1cnNvcigpDQoNCnF1ZXJ5MSA9ICcnJ1NFTEVDVCBjaS5pZCBBUyBjaWlkLGNpLmNpX25hbWUsdGt0LnR5cGUsIENPVU5UKCopIEFTIG5ld3ZhbHVlIEZST00gaHBlX3RpY2tldHMgdGt0IEpPSU4gY2ZtX2NvbmZpZ3VyYXRpb25faXRlbSBjaSBPTg0KdGt0LmNvbmZpZ3VyYXRpb25JdGVtPVRSSU0oU1VCU1RSSU5HX0lOREVYKGNpLmNpX25hbWUsJ18nLDEpKSAgV0hFUkUgdGt0LnN0YXRlIElOICgnT3BlbicsJ0luIFByb2dyZXNzJywnT24gSG9sZCcsJ05ldycpDQpBTkQgdGt0LnR5cGU9J0FsZXJ0JyBBTkQgY2kucHJvamVjdF9pZD0nNCcgQU5EIGNpLmNpX25hbWUgPSAnQWRkaXNvbiBOR0lUIC8gRUNQX0FsZXJ0cycgR1JPVVAgQlkgY2kuY2lfbmFtZSx0a3QudHlwZSxjaS5pZCcnJw0KbXljdXJzb3IuZXhlY3V0ZShxdWVyeTEpDQpxdWVyeTFkYXRhID0gbXljdXJzb3IuZmV0Y2hhbGwoKQ0KcXVlcnkxZGYgPSBwZC5EYXRhRnJhbWUuZnJvbV9yZWNvcmRzKHF1ZXJ5MWRhdGEsIGNvbHVtbnM9WydjaWlkJywgJ2NpX25hbWUnLCAndHlwZScsICduZXd2YWx1ZSddKQ0KDQpxdWVyeTIgPSAnJydTRUxFQ1Qgc3ZnLiosY2ltYXAuY2lfaWQgRlJPTSBiY2Nfc3ZnX2NpX21hcHBpbmcgY2ltYXAgIEpPSU4gYmNjX3N2Z19kYXNoYm9hcmRfbWFwcGluZyBkbWFwIE9ODQpjaW1hcC5zdmdfZGFzaGJvYXJkX2lkPWRtYXAuaWQgIEpPSU4gYmNjX3N2Z19lbGVtZW50cyBzdmcgT04gY2ltYXAuZWxlbWVudF9pZD1zdmcuZWxlbWVudF9pZCBBTkQgZG1hcC5zdmdfaWQ9c3ZnLnN2Z19pZA0KSk9JTiBjZm1fY29uZmlndXJhdGlvbl9pdGVtIGNpIE9ODQpjaS5pZD1jaW1hcC5jaV9pZCBXSEVSRSBzdmcucHJvamVjdF9pZD0nNCcgQU5EIGNpbWFwLnByb2plY3RfaWQ9JzQnIEFORCBkbWFwLnByb2plY3RfaWQ9JzQnIEFORCBjaS5jaV9uYW1lID0gJ0FkZGlzb24gTkdJVCAvIEVDUF9BbGVydHMnICcnJw0KbXljdXJzb3IuZXhlY3V0ZShxdWVyeTIpDQpxdWVyeTJkYXRhID0gbXljdXJzb3IuZmV0Y2hhbGwoKQ0KcXVlcnkyZGYgPSBwZC5EYXRhRnJhbWUuZnJvbV9yZWNvcmRzKHF1ZXJ5MmRhdGEsIGNvbHVtbnM9WydpZCcsJ2JvcmRlcl90cnVlJywnYm94Y29sb3JfdHJ1ZScsJ2RlZmF1bHRfYm9yZGVyJywnZGVmYXVsdF9maWxsX2NvbG9yJywnZGVmYXVsdF9mb250JywnZGVmYXVsdF92aXNpYmlsaXR5JywnZWxlbWVudF9pZCcsJ2ZpbGxfY29sb3JfdHJ1ZScsJ2ZvbnRfdHJ1ZScsJ3J1bnRpbWVfYm9yZGVyJywncnVudGltZV9ib3hjb2xvcicsJ3J1bnRpbWVfZmlsbF9jb2xvcicsJ3J1bnRpbWVfZm9udCcsJ3J1bnRpbWVfdGV4dCcsJ3J1bnRpbWVfdmlzaWJpbGl0eScsJ3Zpc2liaWxpdHlfdHJ1ZScsJ3Byb2plY3RfaWQnLCdzdmdfaWQnLCdiYWNrZ3JvdW5kX2NvbG9yX3NldCcsJ2JhY2tncm91bmRfY29sb3InLCdjaV9pZCddKQ0KDQpteWN1cnNvci5leGVjdXRlKA0KICAgICcnJ1VQREFURSBiY2Nfc3ZnX2VsZW1lbnRzIFNFVCBydW50aW1lX2ZpbGxfY29sb3I9MSBXSEVSRSBlbGVtZW50X2lkIElOICgnc2hhcGUzNjEwMDAyLTQ0MCcsJ3NoYXBlMzItODknKSAnJycpDQpteWN1cnNvci5leGVjdXRlKA0KICAgICcnJ1VQREFURSBiY2Nfc3ZnX2VsZW1lbnRzIFNFVCBmaWxsX2NvbG9yX3RydWU9J2dyZWVuJyBXSEVSRSBlbGVtZW50X2lkIElOICgnc2hhcGUzNjEwMDAyLTQ0MCcsJ3NoYXBlMzItODknKSAnJycpDQpteWN1cnNvci5leGVjdXRlKA0KICAgICcnJ1VQREFURSBiY2Nfc3ZnX2VsZW1lbnRzIFNFVCBydW50aW1lX3RleHQ9JzAnIFdIRVJFIGVsZW1lbnRfaWQgSU4gKCdzaGFwZTM2MTAwMDItNDQwJywnc2hhcGUzMi04OScpICcnJykNCmRhdGFzZXQgPSBxdWVyeTFkZi5tZXJnZShxdWVyeTJkZiwgbGVmdF9vbj0nY2lpZCcsIHJpZ2h0X29uPSdjaV9pZCcsIGhvdz0ncmlnaHQnKQ0KZGF0YXNldC5maWxsbmEoeydjaWlkJzogZGF0YXNldFsnY2lfaWQnXX0sIGlucGxhY2U9VHJ1ZSkNCmRhdGFzZXQuaW5mbygpDQpwcmludCgnZGF0YXNldCBsaW5lIDU0JywgZGF0YXNldFsnbmV3dmFsdWUnXSkNCnN1bW1hdGlvbiA9IDANCmZvciBpbmRleCwgcm93IGluIGRhdGFzZXQuaXRlcnJvd3MoKToNCiAgICBpZiBub3QgcGQuaXNuYShyb3dbJ25ld3ZhbHVlJ10pOg0KICAgICAgICBzdW1tYXRpb24gKz0gcm93WyduZXd2YWx1ZSddDQogICAgICAgIHByaW50KCdzdW1tYXRpb24nLCBzdW1tYXRpb24pDQpkYXRhc2V0WydydW50aW1lX2ZpbGxfY29sb3InXSA9IDENCmRhdGFzZXRbJ2ZpbGxfY29sb3JfdHJ1ZSddID0gZGF0YXNldFsnbmV3dmFsdWUnXS5hcHBseShsYW1iZGEgeDogJ3JlZCcgaWYgeCA+IDAgZWxzZSAnZ3JlZW4nKQ0KcHJpbnQoJ2RhdGFzZXRmaWxsY29sb3J0cnVlJywgZGF0YXNldFsnZmlsbF9jb2xvcl90cnVlJ10pDQpyb3dfbGlzdCA9IFtdDQpmb3IgaW5kZXgsIHJvdyBpbiBkYXRhc2V0Lml0ZXJyb3dzKCk6DQogICAgcm93X2RpY3QgPSByb3cudG9fZGljdCgpDQpyb3dfbGlzdC5hcHBlbmQocm93X2RpY3QpDQpmb3IgZiBpbiByb3dfbGlzdDoNCiAgICBpZiBmWyduZXd2YWx1ZSddIGlzIG5vdCBOb25lOg0KICAgICAgICBkYXRhc2V0WydydW50aW1lX3RleHQnXSA9IHN0cihzdW1tYXRpb24gLy8gMikNCnByaW50KCdzdW1tYXRpb24gbGluZSA3MicsIHN1bW1hdGlvbikNCnByaW50KCdsaW5lIDczICcsIGRhdGFzZXRbJ3J1bnRpbWVfdGV4dCddKQ0KIyB3ID0gZGF0YXNldC5zb3J0X3ZhbHVlcygnY2lfbmFtZScpLmdyb3VwYnkoWydjaWlkJ10pWydjaV9uYW1lJ10udHJhbnNmb3JtKCdjdW1jb3VudCcpDQpkYXRhc2V0WydjaWlkJ10gPSBkYXRhc2V0WydjaWlkJ10uZmlsbG5hKGRhdGFzZXRbJ2NpX2lkJ10pDQojIGRhdGFzZXRbJ2ZpbGxfY29sb3JfdHJ1ZSddID0gdw0KZGF0YXNldCA9IGRhdGFzZXQuZHJvcChjb2x1bW5zPVsnY2lpZCcsICdjaV9uYW1lJywgJ25ld3ZhbHVlJywgJ2NpX2lkJ10pDQpwcmludCgncnVudGltZV90ZXh0X3ZhbHVlJywgZGF0YXNldFsncnVudGltZV90ZXh0J10udmFsdWVzKQ0KZWxlbWVudF9pZHMgPSBkYXRhc2V0WydlbGVtZW50X2lkJ10uYXN0eXBlKHN0cikudG9saXN0KCkNCnJ1bl90aW1lX3ZhbHVlcyA9IGRhdGFzZXRbJ3J1bnRpbWVfdGV4dCddLnRvbGlzdCgpDQpxdWVyeV9lbGVtZW50X3RleHQgPSBmJ1VQREFURSBiY2Nfc3ZnX2VsZW1lbnRzIFNFVCBmaWxsX2NvbG9yX3RydWUgPSA/LCBydW50aW1lX3RleHQgPSA/IFdIRVJFIGVsZW1lbnRfaWQgPSA/Jw0KIyBwbGFjZWhvbGRlcnMgPSAnLCcuam9pbihgJz8nYCogbGVuKGVsZW1lbnRfaWRzKSkNCmZvciBlbGVtZW50X2lkLCBydW50aW1lX3RleHRfdmFsdWUgaW4gemlwKGVsZW1lbnRfaWRzLCBydW5fdGltZV92YWx1ZXMpOg0KICAgIHByaW50KHJ1bnRpbWVfdGV4dF92YWx1ZSxlbGVtZW50X2lkLCdlbmRyZXN1bHQnKQ0KICAgIHF1ZXJ5ID0gZicnJ1VQREFURSBiY2Nfc3ZnX2VsZW1lbnRzIFNFVCBmaWxsX2NvbG9yX3RydWUgPSAncmVkJywgcnVudGltZV90ZXh0ID0gJ3tydW50aW1lX3RleHRfdmFsdWV9JyBXSEVSRSBlbGVtZW50X2lkID0gJ3tlbGVtZW50X2lkfScgJycnDQogICAgbXljdXJzb3IuZXhlY3V0ZShxdWVyeSkNCm15Y3Vyc29yLmNsb3NlKCkNCmNvbm5lY3Rpb24uY29tbWl0KCkNCmNvbm5lY3Rpb24uY2xvc2UoKQ0KcHJpbnQoJ2NvbXBsZXRlZCcp","SRE1"
"SREINCDN54820","SREINCDN54820_SRE1.py","aW1wb3J0IHBhbmRhcyBhcyBwZA0KaW1wb3J0IG15c3FsLmNvbm5lY3Rvcg0KaW1wb3J0IGpzb24NCmltcG9ydCBzeXMNCmZyb20gbGVhcC51dGlscy5VdGlsaXRpZXMgaW1wb3J0IFV0aWxpdGllcw0KZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHF1b3RlX3BsdXMsIHVybHBhcnNlDQppbXBvcnQgbG9nZ2luZw0KDQpsb2dnaW5nLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dpbmcuSU5GTykNCmFyZ3VtZW50cyA9IHN5cy5hcmd2DQpkaWN0ID0ge30NCmZvciBhcmcgaW4gYXJndW1lbnRzOg0KICAgIHRyeToNCiAgICAgICAgZGljdFthcmcuc3BsaXQoJzonKVswXV0gPSAoJzonKS5qb2luKGFyZy5zcGxpdCgnOicpWzE6XSkNCiAgICBleGNlcHQ6DQogICAgICAgIGEgPSAnZXJyb3InDQpwcmludChkaWN0KQ0KbGVhcGRzID0gZGljdFsnbGVhcGRzJ10NCmxlYXBEU2RpY3QgPSBqc29uLmxvYWRzKGxlYXBkcykNCnVzZXJuYW1lID0gbGVhcERTZGljdFsndXNlck5hbWUnXQ0KcGFzc3dvcmQgPSBVdGlsaXRpZXMuZGVjcnlwdChsZWFwRFNkaWN0WydwYXNzd29yZCddLCBsZWFwRFNkaWN0WydzYWx0J10pDQpob3N0ID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5ob3N0bmFtZQ0KcG9ydCA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkucG9ydA0KZGF0YWJhc2UgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLnBhdGgucnNwbGl0KCcvJywgMSlbMV0NCmNvbm5lY3Rpb24gPSBteXNxbC5jb25uZWN0b3IuY29ubmVjdCh1c2VyPXVzZXJuYW1lLCBwYXNzd29yZD1wYXNzd29yZCwgaG9zdD1ob3N0LCBwb3J0PXBvcnQsIGRhdGFiYXNlPWRhdGFiYXNlKQ0KbXljdXJzb3IgPSBjb25uZWN0aW9uLmN1cnNvcigpDQoNCnF1ZXJ5MSA9ICcnJ1NFTEVDVCBjaS5pZCBBUyBjaWlkLGNpLmNpX25hbWUsdGt0LnR5cGUsIENPVU5UKCopIEFTIG5ld3ZhbHVlIEZST00gaHBlX3RpY2tldHMgdGt0IEpPSU4gY2ZtX2NvbmZpZ3VyYXRpb25faXRlbSBjaSBPTg0KdGt0LmNvbmZpZ3VyYXRpb25JdGVtPVRSSU0oU1VCU1RSSU5HX0lOREVYKGNpLmNpX25hbWUsJ18nLDEpKSAgV0hFUkUgdGt0LnN0YXRlIElOICgnT3BlbicsJ0luIFByb2dyZXNzJywnT24gSG9sZCcsJ05ldycpDQpBTkQgdGt0LnR5cGU9J0luY2lkZW50JyBBTkQgY2kucHJvamVjdF9pZD0nNCcgQU5EIGNpLmNpX25hbWUgPSAnQWRkaXNvbiBOR0lUIC8gRUNQX0luY2lkZW50cycgR1JPVVAgQlkgY2kuY2lfbmFtZSx0a3QudHlwZSxjaS5pZCcnJw0KbXljdXJzb3IuZXhlY3V0ZShxdWVyeTEpDQpxdWVyeTFkYXRhID0gbXljdXJzb3IuZmV0Y2hhbGwoKQ0KcXVlcnkxZGYgPSBwZC5EYXRhRnJhbWUuZnJvbV9yZWNvcmRzKHF1ZXJ5MWRhdGEsIGNvbHVtbnM9WydjaWlkJywgJ2NpX25hbWUnLCAndHlwZScsICduZXd2YWx1ZSddKQ0KDQpxdWVyeTIgPSAnJydTRUxFQ1Qgc3ZnLiosY2ltYXAuY2lfaWQgRlJPTSBiY2Nfc3ZnX2NpX21hcHBpbmcgY2ltYXAgIEpPSU4gYmNjX3N2Z19kYXNoYm9hcmRfbWFwcGluZyBkbWFwIE9ODQpjaW1hcC5zdmdfZGFzaGJvYXJkX2lkPWRtYXAuaWQgIEpPSU4gYmNjX3N2Z19lbGVtZW50cyBzdmcgT04gY2ltYXAuZWxlbWVudF9pZD1zdmcuZWxlbWVudF9pZCBBTkQgZG1hcC5zdmdfaWQ9c3ZnLnN2Z19pZA0KSk9JTiBjZm1fY29uZmlndXJhdGlvbl9pdGVtIGNpIE9ODQpjaS5pZD1jaW1hcC5jaV9pZCBXSEVSRSBzdmcucHJvamVjdF9pZD0nNCcgQU5EIGNpbWFwLnByb2plY3RfaWQ9JzQnIEFORCBkbWFwLnByb2plY3RfaWQ9JzQnIEFORCBjaS5jaV9uYW1lID0gJ0FkZGlzb24gTkdJVCAvIEVDUF9JbmNpZGVudHMnICcnJw0KbXljdXJzb3IuZXhlY3V0ZShxdWVyeTIpDQpxdWVyeTJkYXRhID0gbXljdXJzb3IuZmV0Y2hhbGwoKQ0KcXVlcnkyZGYgPSBwZC5EYXRhRnJhbWUuZnJvbV9yZWNvcmRzKHF1ZXJ5MmRhdGEsIGNvbHVtbnM9WydpZCcsJ2JvcmRlcl90cnVlJywnYm94Y29sb3JfdHJ1ZScsJ2RlZmF1bHRfYm9yZGVyJywnZGVmYXVsdF9maWxsX2NvbG9yJywnZGVmYXVsdF9mb250JywnZGVmYXVsdF92aXNpYmlsaXR5JywnZWxlbWVudF9pZCcsJ2ZpbGxfY29sb3JfdHJ1ZScsJ2ZvbnRfdHJ1ZScsJ3J1bnRpbWVfYm9yZGVyJywncnVudGltZV9ib3hjb2xvcicsJ3J1bnRpbWVfZmlsbF9jb2xvcicsJ3J1bnRpbWVfZm9udCcsJ3J1bnRpbWVfdGV4dCcsJ3J1bnRpbWVfdmlzaWJpbGl0eScsJ3Zpc2liaWxpdHlfdHJ1ZScsJ3Byb2plY3RfaWQnLCdzdmdfaWQnLCdiYWNrZ3JvdW5kX2NvbG9yX3NldCcsJ2JhY2tncm91bmRfY29sb3InLCdjaV9pZCddKQ0KDQpteWN1cnNvci5leGVjdXRlKA0KICAgICcnJ1VQREFURSBiY2Nfc3ZnX2VsZW1lbnRzIFNFVCBydW50aW1lX2ZpbGxfY29sb3I9MSBXSEVSRSBlbGVtZW50X2lkIElOICgnc2hhcGUzNjEwMDAyLTQ0MCcsJ3NoYXBlMzItODknKSAnJycpDQpteWN1cnNvci5leGVjdXRlKA0KICAgICcnJ1VQREFURSBiY2Nfc3ZnX2VsZW1lbnRzIFNFVCBmaWxsX2NvbG9yX3RydWU9J2dyZWVuJyBXSEVSRSBlbGVtZW50X2lkIElOICgnc2hhcGUzNjEwMDAyLTQ0MCcsJ3NoYXBlMzItODknKSAnJycpDQpteWN1cnNvci5leGVjdXRlKA0KICAgICcnJ1VQREFURSBiY2Nfc3ZnX2VsZW1lbnRzIFNFVCBydW50aW1lX3RleHQ9JzAnIFdIRVJFIGVsZW1lbnRfaWQgSU4gKCdzaGFwZTM2MTAwMDItNDQwJywnc2hhcGUzMi04OScpICcnJykNCmRhdGFzZXQgPSBxdWVyeTFkZi5tZXJnZShxdWVyeTJkZiwgbGVmdF9vbj0nY2lpZCcsIHJpZ2h0X29uPSdjaV9pZCcsIGhvdz0ncmlnaHQnKQ0KZGF0YXNldC5maWxsbmEoeydjaWlkJzogZGF0YXNldFsnY2lfaWQnXX0sIGlucGxhY2U9VHJ1ZSkNCmRhdGFzZXQuaW5mbygpDQpwcmludCgnZGF0YXNldCBsaW5lIDU0JywgZGF0YXNldFsnbmV3dmFsdWUnXSkNCnN1bW1hdGlvbiA9IDANCmZvciBpbmRleCwgcm93IGluIGRhdGFzZXQuaXRlcnJvd3MoKToNCiAgICBpZiBub3QgcGQuaXNuYShyb3dbJ25ld3ZhbHVlJ10pOg0KICAgICAgICBzdW1tYXRpb24gKz0gcm93WyduZXd2YWx1ZSddDQogICAgICAgIHByaW50KCdzdW1tYXRpb24nLCBzdW1tYXRpb24pDQpkYXRhc2V0WydydW50aW1lX2ZpbGxfY29sb3InXSA9IDENCmRhdGFzZXRbJ2ZpbGxfY29sb3JfdHJ1ZSddID0gZGF0YXNldFsnbmV3dmFsdWUnXS5hcHBseShsYW1iZGEgeDogJ3JlZCcgaWYgeCA+IDAgZWxzZSAnZ3JlZW4nKQ0KcHJpbnQoJ2RhdGFzZXRmaWxsY29sb3J0cnVlJywgZGF0YXNldFsnZmlsbF9jb2xvcl90cnVlJ10pDQpyb3dfbGlzdCA9IFtdDQpmb3IgaW5kZXgsIHJvdyBpbiBkYXRhc2V0Lml0ZXJyb3dzKCk6DQogICAgcm93X2RpY3QgPSByb3cudG9fZGljdCgpDQpyb3dfbGlzdC5hcHBlbmQocm93X2RpY3QpDQpmb3IgZiBpbiByb3dfbGlzdDoNCiAgICBpZiBmWyduZXd2YWx1ZSddIGlzIG5vdCBOb25lOg0KICAgICAgICBkYXRhc2V0WydydW50aW1lX3RleHQnXSA9IHN0cihzdW1tYXRpb24pDQpwcmludCgnc3VtbWF0aW9uIGxpbmUgNzInLCBzdW1tYXRpb24pDQpwcmludCgnbGluZSA3MyAnLCBkYXRhc2V0WydydW50aW1lX3RleHQnXSkNCiMgdyA9IGRhdGFzZXQuc29ydF92YWx1ZXMoJ2NpX25hbWUnKS5ncm91cGJ5KFsnY2lpZCddKVsnY2lfbmFtZSddLnRyYW5zZm9ybSgnY3VtY291bnQnKQ0KZGF0YXNldFsnY2lpZCddID0gZGF0YXNldFsnY2lpZCddLmZpbGxuYShkYXRhc2V0WydjaV9pZCddKQ0KIyBkYXRhc2V0WydmaWxsX2NvbG9yX3RydWUnXSA9IHcNCmRhdGFzZXQgPSBkYXRhc2V0LmRyb3AoY29sdW1ucz1bJ2NpaWQnLCAnY2lfbmFtZScsICduZXd2YWx1ZScsICdjaV9pZCddKQ0KcHJpbnQoJ3J1bnRpbWVfdGV4dF92YWx1ZScsIGRhdGFzZXRbJ3J1bnRpbWVfdGV4dCddLnZhbHVlcykNCmVsZW1lbnRfaWRzID0gZGF0YXNldFsnZWxlbWVudF9pZCddLmFzdHlwZShzdHIpLnRvbGlzdCgpDQpydW5fdGltZV92YWx1ZXMgPSBkYXRhc2V0WydydW50aW1lX3RleHQnXS50b2xpc3QoKQ0KcXVlcnlfZWxlbWVudF90ZXh0ID0gZidVUERBVEUgYmNjX3N2Z19lbGVtZW50cyBTRVQgZmlsbF9jb2xvcl90cnVlID0gPywgcnVudGltZV90ZXh0ID0gPyBXSEVSRSBlbGVtZW50X2lkID0gPycNCiMgcGxhY2Vob2xkZXJzID0gJywnLmpvaW4oYCc/J2AqIGxlbihlbGVtZW50X2lkcykpDQpmb3IgZWxlbWVudF9pZCwgcnVudGltZV90ZXh0X3ZhbHVlIGluIHppcChlbGVtZW50X2lkcywgcnVuX3RpbWVfdmFsdWVzKToNCiAgICBwcmludChydW50aW1lX3RleHRfdmFsdWUsZWxlbWVudF9pZCwnZW5kcmVzdWx0JykNCiAgICBxdWVyeSA9IGYnJydVUERBVEUgYmNjX3N2Z19lbGVtZW50cyBTRVQgZmlsbF9jb2xvcl90cnVlID0gJ3JlZCcsIHJ1bnRpbWVfdGV4dCA9ICd7cnVudGltZV90ZXh0X3ZhbHVlfScgV0hFUkUgZWxlbWVudF9pZCA9ICd7ZWxlbWVudF9pZH0nICcnJw0KICAgIG15Y3Vyc29yLmV4ZWN1dGUocXVlcnkpDQpteWN1cnNvci5jbG9zZSgpDQpjb25uZWN0aW9uLmNvbW1pdCgpDQpjb25uZWN0aW9uLmNsb3NlKCkNCnByaW50KCdjb21wbGV0ZWQnKQ==","SRE1"
"LEOTST_P77628","LEOTST_P77628_leo1311.py","aW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyCmltcG9ydCByZXF1ZXN0cwppbXBvcnQgb3MKCiMgUHJveHkKIyBvcy5lbnZpcm9uWydIVFRQX1BST1hZJ109JycKIyBvcy5lbnZpcm9uWydIVFRQU19QUk9YWSddPScnCm9zLmVudmlyb25bJ2h0dHBfcHJveHknXT0nJwpvcy5lbnZpcm9uWydodHRwc19wcm94eSddPScnCiMgSFRUUF9QUk9YWT0naHR0cDovL2JscnByb3h5LmFkLmluZm9zeXMuY29tOjgwJwojIEhUVFBTX1BST1hZPSdodHRwOi8vYmxycHJveHkuYWQuaW5mb3N5cy5jb206ODAnCiMgaHR0cF9wcm94eT0naHR0cDovL2JscnByb3h5LmFkLmluZm9zeXMuY29tOjgwJwojIGh0dHBzX3Byb3h5PSdodHRwOi8vYmxycHJveHkuYWQuaW5mb3N5cy5jb206ODAnCgpodHRwc19wcm94eT0nJwpodHRwX3Byb3h5PScnCkhUVFBTX1BST1hZPScnCkhUVFBfUFJPWFk9JycKCiMgb3MuZW52aXJvblsnSFRUUF9QUk9YWSddPSdibHJwcm94eS5hZC5pbmZvc3lzLmNvbTo0NDMnCiAKIyBvcy5lbnZpcm9uWydIVFRQU19QUk9YWSddPSdibHJwcm94eS5hZC5pbmZvc3lzLmNvbTo0NDMnCgpsb2dnZXIuYmFzaWNDb25maWcobGV2ZWw9bG9nZ2VyLklORk8sIGZvcm1hdD0nJShhc2N0aW1lKXMgSU5GTyAlKG1lc3NhZ2UpcycsIGRhdGVmbXQ9JyV5LyVtLyVkICVIOiVNOiVTJykKbG9nZ2VyLmluZm8oInRlc3QiKQpwcm9tZXRoZXVzX2FwaT1mJ2h0dHA6Ly9jdnJpY3RscHRtMjE6OTA5MC9hcGkvdjEvcXVlcnlfcmFuZ2U/cXVlcnk9bGFiZWxfcmVwbGFjZSglMEElMjAlMjBsYWJlbF9yZXBsYWNlKCUwQSUyMCUyMGxhYmVsX3JlcGxhY2UoMTAwLWF2ZyhyYXRlKHdpbmRvd3NfY3B1X3RpbWVfdG90YWwlN0Jtb2RlJTNEJTI3aWRsZSUyNyU3RCU1QjFtJTVEKSklMjAqJTIwMTAwJTJDJTI3X19uYW1lX18lMjclMkMlMjd3aW5kb3dzX21lbW9yeV91c2FnZSUyNyUyQyUyN19fbmFtZV9fJTI3JTJDJTI3JTI3KSUyQyUyN2luc3RhbmNlJTI3JTJDJTI3bnVsbCUyNyUyQyUyN2luc3RhbmNlJTI3JTJDJTI3JTI3JTBBKSUwQSUyQyUyN2pvYiUyNyUyQyUyN251bGwlMjclMkMlMjdqb2IlMjclMkMlMjclMjclMEEpJnN0YXJ0PTIwMjMtMTEtMjNUMDQ6MzY6MjYuMzUyNzUwWiZlbmQ9MjAyMy0xMS0yM1QwNDozNzoyNi4zNTI3NTBaJnN0ZXA9MTBzJwpsb2dnZXIuaW5mbyhwcm9tZXRoZXVzX2FwaSkKbG9nZ2VyLmluZm8oInByb21ldGhldXMgY2FsbCIpCnJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KHByb21ldGhldXNfYXBpKQpsb2dnZXIuaW5mbygiQ29tcGxldGVkIikKCgoK","leo1311"
"LEOMNL_R68866","LEOMNL_R68866_leo1311.py","aW1wb3J0IHJlcXVlc3RzCgppbXBvcnQganNvbgoKaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyCmltcG9ydCBvcwppbXBvcnQgZGF0ZXRpbWUKaW1wb3J0IHN5cwppbXBvcnQgcmUKaW1wb3J0IHRpbWUKaW1wb3J0IG15c3FsLmNvbm5lY3RvciBhcyBjb25uZWN0b3IKZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHF1b3RlX3BsdXMsIHVybHBhcnNlCiMgZnJvbSBsZWFwLnV0aWxzLlV0aWxpdGllcyBpbXBvcnQgVXRpbGl0aWVzCmZyb20gcHlzcGFyay5zcWwgaW1wb3J0IFNwYXJrU2Vzc2lvbgoKb3MuZW52aXJvblsnSFRUUF9QUk9YWSddPScnCiAKb3MuZW52aXJvblsnSFRUUFNfUFJPWFknXT0nJwpvcy5lbnZpcm9uWydodHRwX3Byb3h5J109JycKb3MuZW52aXJvblsnaHR0cHNfcHJveHknXT0nJwoKI2luc3RhbmNlX2RhdGV0aW1lPSd3aW5kb3dzX21lbW9yeV91c2FnZTEgbnVsbCAyMC4wJwoKbG9nZ2VyLmJhc2ljQ29uZmlnKAogICAgbGV2ZWw9bG9nZ2VyLklORk8sCiAgICBmb3JtYXQ9JyUoYXNjdGltZSlzIElORk8gJShtZXNzYWdlKXMnLAogICAgZGF0ZWZtdD0nJXkvJW0vJWQgJUg6JU06JVMnLAopCgphcmd1bWVudHMgPSBzeXMuYXJndgpteV9kaWN0ID0ge30KZm9yIGFyZyBpbiBhcmd1bWVudHM6CiAgICB0cnk6CiAgICAgICAgbXlfZGljdFthcmcuc3BsaXQoJzonKVswXV0gPSAnOicuam9pbihhcmcuc3BsaXQoJzonKVsxOl0pCiAgICBleGNlcHQ6CiAgICAgICAgYSA9ICdlcnJvcicKCnVybD0naHR0cDovLzEwLjgxLjY0LjIyMzo1NTU4L3N0b3AnCgpyZXMgPSByZXF1ZXN0cy5wb3N0KAogICAgICAgIyB1cmwsaGVhZGVycywgdmVyaWZ5ID0gZmFsc2UKICAgICAgIHVybAogICAgKQpsb2dnZXIuaW5mbyhyZXMpCgpzcWxfcXVlcnk9J1NFTEVDVCBlLnNlbGVjdG9yX3BhcmFtLGUuc3RyX3BhcmFtcyBGUk9NIGVtZl9ldmVudCBlIEpPSU4gZW1mX3dvcmtmbG93IHcgT04gdy5zZWxlY3Rvcl9wYXJhbSA9IGUuc2VsZWN0b3JfcGFyYW0gV0hFUkUgZS5pdHNtX3N0YXR1cyA9IFwnSW4gUHJvZ3Jlc3NcJyBBTkQgZS5hY3Rpb25hYmxlID0gXCdZZXNcJyBBTkQgZS5jcmVhdGVfdGltZSA+PSBDVVJEQVRFKCkgQU5EIHcuc3RhdGUgPVwnVGlja2V0aW5nX2FuZF9kZWR1cGxpY2F0ZV9kb25lXCcnCgoKIyBzcWxfcXVlcnk9J1NFTEVDVCBlLnNlbGVjdG9yX3BhcmFtLGUuc3RyX3BhcmFtcyBGUk9NIGVtZl9ldmVudCBlIEpPSU4gZW1mX3dvcmtmbG93IHcgT04gdy5zZWxlY3Rvcl9wYXJhbSA9IGUuc2VsZWN0b3JfcGFyYW0gV0hFUkUgZS5pdHNtX3N0YXR1cyA9IFwnSW4gUHJvZ3Jlc3NcJyBBTkQgZS5hY3Rpb25hYmxlID0gXCdZZXNcJyBBTkQgZS5jcmVhdGVfdGltZSA+PSBcJzIwMjQtMDEtMTEgMDY6MDE6NTRcJyBBTkQgdy5zdGF0ZSA9XCdUaWNrZXRpbmdfYW5kX2RlZHVwbGljYXRlX2RvbmVcJycKI0xFQVAgRGF0YXNvdXJjZQojIGxlYXBkcyA9IG15X2RpY3RbJ0xFQVBEYXRhU291cmNlJ10KIyBsb2dnZXIuaW5mbygnbGVhcGRzJykKIyBsb2dnZXIuaW5mbyhsZWFwZHMpCiMgbGVhcERTZGljdCA9anNvbi5sb2FkcyhsZWFwZHMpCgojIHVzZXJuYW1lID0gbGVhcERTZGljdFsndXNlck5hbWUnXQojIHBhc3N3b3JkID0gVXRpbGl0aWVzLmRlY3J5cHQobGVhcERTZGljdFsncGFzc3dvcmQnXSxsZWFwRFNkaWN0WydzYWx0J10pCiMgaG9zdCA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkuaG9zdG5hbWUKIyBwb3J0ID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5wb3J0CiMgZGF0YWJhc2UgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLnBhdGgucnNwbGl0KCcvJywgMSlbMV0KdXNlcm5hbWU9InNyZWludCIKcGFzc3dvcmQ9IjVkXkZac3ZtIgpob3N0PSIxMC44Mi4xMjIuOTQiCnBvcnQgPSAzMzA2CmRhdGFiYXNlID0gJ3NyZWludCcKCgpjb25uZWN0aW9uID0gY29ubmVjdG9yLmNvbm5lY3QoCiAgICB1c2VyPXVzZXJuYW1lLCBwYXNzd29yZD1wYXNzd29yZCwgaG9zdD1ob3N0LCBwb3J0PXBvcnQsIGRhdGFiYXNlPWRhdGFiYXNlCikKY3Vyc29yID0gY29ubmVjdGlvbi5jdXJzb3IoKQppbnN0YW5jZV9kYXRldGltZV9lbj0nJwptZXRyaWNfdmFsdWU9MAp0cnk6CiAgICBsb2dnZXIuaW5mbyhzcWxfcXVlcnkpCiAgICBjdXJzb3IuZXhlY3V0ZShzcWxfcXVlcnkpCiAgICByZXM9Y3Vyc29yLmZldGNoYWxsKCk7CiAgICBsb2dnZXIuaW5mbygncmVzdWx0IG9mIHN1YnF1ZXJ5JykKICAgIGxvZ2dlci5pbmZvKHJlcykKICAgIGluc3RhbmNlX2RhdGV0aW1lPXJlc1swXVswXQogICAgc3BsaXRfc3RyaW5nID0gcmUuc3BsaXQocicgJywgaW5zdGFuY2VfZGF0ZXRpbWUpCiAgICAgI2luc3RhbmNlX2RhdGV0aW1lX2VuPXNwbGl0X3N0cmluZ1swXStzcGxpdF9zdHJpbmdbMV0rc3RyKHN0cihkYXRldGltZS5kYXRldGltZS5ub3coKS50aW1lc3RhbXAoKSkucmVwbGFjZSgnLicsICcnKSkKICAgIGxvZ2dlci5pbmZvKCdzcGxpdCBzdHJpbmcgMScrc3BsaXRfc3RyaW5nWzFdKQogICAgaW5zdGFuY2VfZGF0ZXRpbWVfZW49c3BsaXRfc3RyaW5nWzBdKyAnICcrc3BsaXRfc3RyaW5nWzFdKyAnICcrc3BsaXRfc3RyaW5nWzJdCiAgICBzdHJfcGFyYW09anNvbi5sb2FkcyhyZXNbMF1bMV0pCiAgICBtZXRyaWNfdmFsdWU9c3RyX3BhcmFtWydtZXRyaWNfdmFsdWUnXQogICAgbG9nZ2VyLmluZm8obWV0cmljX3ZhbHVlKQpleGNlcHQgY29ubmVjdG9yLmVycm9ycy5PcGVyYXRpb25hbEVycm9yIGFzIGU6CiAgICAjIEhhbmRsZSB0aGUgdGltZW91dCBleGNlcHRpb24KICAgIGxvZ2dlci5pbmZvKCdNeVNRTCBjb25uZWN0aW9uIHRpbWVvdXQ6IHt9Jy5mb3JtYXQoZSkpCiAKZmluYWxseToKICAgICMgQ2xvc2UgdGhlIGRhdGFiYXNlIGNvbm5lY3Rpb24KICAgIGN1cnNvci5jbG9zZSgpCiAgICBjb25uZWN0aW9uLmNsb3NlKCkKCgojIG9zLmVudmlyb25bJ0hUVFBTX1BST1hZJ109J2JscnByb3h5LmFkLmluZm9zeXMuY29tOjQ0MycKIyBvcy5lbnZpcm9uWydIVFRQX1BST1hZJ109J2JscnByb3h5LmFkLmluZm9zeXMuY29tOjQ0MycKIyBvcy5lbnZpcm9uWydodHRwX3Byb3h5J109J2JscnByb3h5LmFkLmluZm9zeXMuY29tOjQ0MycKIyBvcy5lbnZpcm9uWydodHRwc19wcm94eSddPSdibHJwcm94eS5hZC5pbmZvc3lzLmNvbTo0NDMnCgojIHVybCA9ICdodHRwczovL2luZm9zeXNxM2RldjEuc2VydmljZS1ub3cuY29tL2FwaS9ub3cvdGFibGUvaW5jaWRlbnQ/c3lzcGFybV9xdWVyeT1zaG9ydF9kZXNjcmlwdGlvbkNPTlRBSU5TJytpbnN0YW5jZV9kYXRldGltZV9lbisnJnN0YXRlPTInCiMgbG9nZ2VyLmluZm8oJ3VybCcrdXJsKQoKIyBoZWFkZXJzID0geydBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbid9CiMgcmVzID0gcmVxdWVzdHMuZ2V0KAojICAgICAgICAgdXJsLAojICAgICAgICAgYXV0aD0oJ0lDU1BfaWNhcF91c2VyJywgJ3F3ZXIxMjM0JyksCiMgICAgICAgICBoZWFkZXJzPWhlYWRlcnMKIyAgICAgKQojIHJlc3BvbnNlPXJlcy5qc29uKCkKIyByZXN1bHQgPSByZXNwb25zZVsncmVzdWx0J10KIyBzeXNfaWQ9cmVzdWx0WzBdWydzeXNfaWQnXQojIGl0c21fbnVtYmVyPXJlc3VsdFswXVsnbnVtYmVyJ10KIyB1cmwgPSAnaHR0cHM6Ly9pbmZvc3lzcTNkZXYxLnNlcnZpY2Utbm93LmNvbS9hcGkvbm93L3RhYmxlL2luY2lkZW50Lycrc3lzX2lkCgojIGhlYWRlcnMgPSB7J0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJywgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ30KCiMgcGF5bG9hZCA9IHsnc3RhdGUnOiAnUmVzb2x2ZWQnLAojICAgICAgICAgICAgICd3b3JrX25vdGVzJzogICdUaGUgcmVzb2x1dGlvbiB3b3JrZmxvdyBpcyB0cmlnZ2VyZWQnCiMgICAgICAgICAgICAgfQoKIyByZXMgPSByZXF1ZXN0cy5wdXQoCiMgICAgICAgICB1cmwsCiMgICAgICAgICBhdXRoPSgnSUNTUF9pY2FwX3VzZXInLCAncXdlcjEyMzQnKSwKIyAgICAgICAgIGhlYWRlcnM9aGVhZGVycywKIyAgICAgICAgIGRhdGE9anNvbi5kdW1wcyhwYXlsb2FkKSwKIyAgICAgKQoKCgojIG9zLmVudmlyb25bJ0hUVFBfUFJPWFknXT0nJwogCiMgb3MuZW52aXJvblsnSFRUUFNfUFJPWFknXT0nJwojIG9zLmVudmlyb25bJ2h0dHBfcHJveHknXT0nJwojIG9zLmVudmlyb25bJ2h0dHBzX3Byb3h5J109JycKCiMgdHJ5OgogICAgCiMgICAgICBzdWJxdWVyeT1mJ1NFTEVDVCBlLmlkIEZST00gZW1mX2V2ZW50IGUgV0hFUkUgZS5pdHNtX251bWJlcj0gXCd7aXRzbV9udW1iZXJ9XCcgQU5EIGUuYWN0aW9uYWJsZSBMSUtFIFwnJVlFUyVcJzsnCiMgICAgICBjdXJzb3IgPSBjb25uZWN0aW9uLmN1cnNvcigpCiAgICAKICAgICMgbG9nZ2VyLmluZm8oY3Vyc29yKQojICAgICAgY3Vyc29yLmV4ZWN1dGUoCiMgICAgICAgc3VicXVlcnkKIyAgICAgICkKIyAgICAgIHJlc3BvbnNlPWN1cnNvci5mZXRjaGFsbCgpCiMgICAgICBpZD1yZXNwb25zZVswXVswXQojICAgICAgcXVlcnkgPSBmJ1VQREFURSBgZW1mX2V2ZW50YCBlIFNFVCBlLnJlc29sdXRpb25fdHJpZ2dlcmVkPVwnWWVzXCcgV0hFUkUgZS5pZD17aWR9OycKIyAgICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5KQojICAgICAgY29ubmVjdGlvbi5jb21taXQoKQojICAgICAgbG9nZ2VyLmluZm8oJ3Jlc3BvbnNlMScpCiMgICAgICBsb2dnZXIuaW5mbyhyZXNwb25zZSkKIyAgICAgIGxvZ2dlci5pbmZvKCd1cGRhdGUgcXVlcnkgZXhlY3V0ZWQnKQogICAgIAojIGV4Y2VwdCBjb25uZWN0b3IuZXJyb3JzLk9wZXJhdGlvbmFsRXJyb3IgYXMgZToKIyAgICAgIyBIYW5kbGUgdGhlIHRpbWVvdXQgZXhjZXB0aW9uCiMgICAgICAgbG9nZ2VyLmluZm8oJ015U1FMIGNvbm5lY3Rpb24gdGltZW91dDoge30nLmZvcm1hdChlKSkKIAojIGZpbmFsbHk6CiMgICAgICMgQ2xvc2UgdGhlIGRhdGFiYXNlIGNvbm5lY3Rpb24KIyAgICAgICBjb25uZWN0aW9uLmNsb3NlKCkKCgphcGlfdXJsID0gJ2h0dHBzOi8vbGVhcDc6NDAwNi9hcGkvZXZlbnQvdHJpZ2dlci9SYWJiaXRtcV9lbWY/b3JnPWxlbzEzMTEmY29yZWxpZD0mZGF0YXNvdXJjZU5hbWU9TEVBTENMQ0wxMjEzMicKaGVhZGVycyA9ICB7J0NvbnRlbnQtVHlwZSc6J2FwcGxpY2F0aW9uL2pzb24nfQoKb3MuZW52aXJvblsnSFRUUF9QUk9YWSddPScnCm9zLmVudmlyb25bJ0hUVFBTX1BST1hZJ109JycKb3MuZW52aXJvblsnaHR0cF9wcm94eSddPScnCm9zLmVudmlyb25bJ2h0dHBzX3Byb3h5J109JycKCmFsZXJ0anNvbiA9IHt9CmFsZXJ0anNvblsnaW5zdGFuY2VfZGF0ZXRpbWUnXT1pbnN0YW5jZV9kYXRldGltZQphbGVydGpzb25bJ21ldHJpY192YWx1ZSddPW1ldHJpY192YWx1ZQogICAgCmRhdGEgPScnJ3t9JycnCnF1ZXJ5anNvbiA9IGpzb24ubG9hZHMoZGF0YSkKcXVlcnlqc29uWydldmVudElkJ10gPSdldmVudCcrc3RyKHN0cihkYXRldGltZS5kYXRldGltZS5ub3coKS50aW1lc3RhbXAoKSkucmVwbGFjZSgnLicsICcnKSkKcXVlcnlqc29uWydldmVudFR5cGVOYW1lJ10gPSdSZXNvbHV0aW9uX2V2ZW50X2NlJwpxdWVyeWpzb25bJ2NvbnRleHQnXT1hbGVydGpzb24KcXVlcnlqc29uMj1qc29uLmxvYWRzKGRhdGEpCnF1ZXJ5anNvbjJbJ2JvZHknXT1xdWVyeWpzb24KICAgICMgbG9nZ2VyLmluZm8ocXVlcnlqc29uKQpyZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoYXBpX3VybCwgZGF0YT1qc29uLmR1bXBzKHF1ZXJ5anNvbjIpLCBoZWFkZXJzPWhlYWRlcnMsdmVyaWZ5PUZhbHNlKQpsb2dnZXIuaW5mbyhyZXNwb25zZSkKCmxvZ2dlci5pbmZvKCdDb21wbGV0ZWQnKQoKCgoKCgoKCg==","leo1311"
"LEOTST_D18131","LEOTST_D18131_leo1311.py","","leo1311"
"LEOCRLTN84463","LEOCRLTN84463_leo1311.py","aW1wb3J0IHJlcXVlc3RzCmltcG9ydCBqc29uCmltcG9ydCBsb2dnaW5nIGFzIGxvZ2dlcgppbXBvcnQgb3MKaW1wb3J0IGRhdGV0aW1lCmltcG9ydCBzeXMKaW1wb3J0IHJlCmltcG9ydCB0aW1lCmltcG9ydCBteXNxbC5jb25uZWN0b3IgYXMgY29ubmVjdG9yCmltcG9ydCB1dWlkCgoKI1NldHRpbmcgTm9wcm94eQojb3MuZW52aXJvblsnSFRUUF9QUk9YWSddPScnCiNvcy5lbnZpcm9uWydIVFRQU19QUk9YWSddPScnCiNvcy5lbnZpcm9uWydodHRwX3Byb3h5J109JycKI29zLmVudmlyb25bJ2h0dHBzX3Byb3h5J109JycKb3MuZW52aXJvblsnSFRUUF9QUk9YWSddPSdibHJwcm94eS5hZC5pbmZvc3lzLmNvbTo0NDMnCiAKb3MuZW52aXJvblsnSFRUUFNfUFJPWFknXT0nYmxycHJveHkuYWQuaW5mb3N5cy5jb206NDQzJwoKCgojaW5zdGFuY2VfZGF0ZXRpbWU9J3dpbmRvd3NfbWVtb3J5X3VzYWdlMSBudWxsIDIwLjAnCmxvZ2dlci5iYXNpY0NvbmZpZygKICAgIGxldmVsPWxvZ2dlci5JTkZPLAogICAgZm9ybWF0PSclKGFzY3RpbWUpcyBJTkZPICUobWVzc2FnZSlzJywKICAgIGRhdGVmbXQ9JyV5LyVtLyVkICVIOiVNOiVTJywKKQoKCiNEQiBkZXRhaWxzCnVzZXJuYW1lPSJzcmVpbnQiCnBhc3N3b3JkPSI1ZF5GWnN2bSIKaG9zdD0iMTAuODIuMTIyLjk0Igpwb3J0ID0gMzMwNgpkYXRhYmFzZSA9ICdzcmVpbnQnCgoKI1NOT1cgZGV0YWlscwpzbm93X3VybCA9J2h0dHBzOi8vaW5mb3N5c3EzZGV2MS5zZXJ2aWNlLW5vdy5jb20vJwpzbm93X3VzZXIgPSAnSUNTUF9pY2FwX3VzZXInCnNub3dfcGFzcyA9ICdxd2VyMTIzNCcKCgoKCgp0cnk6CiAgICBjb25uZWN0aW9uID0gY29ubmVjdG9yLmNvbm5lY3QoCiAgICAgICAgdXNlcj11c2VybmFtZSwgcGFzc3dvcmQ9cGFzc3dvcmQsIGhvc3Q9aG9zdCwgcG9ydD1wb3J0LCBkYXRhYmFzZT1kYXRhYmFzZQogICAgKQogICAgY3Vyc29yID0gY29ubmVjdGlvbi5jdXJzb3IoKQogICAgcXVlcnk9ZidTRUxFQ1QgZS5pZCAsIGUuZXZlbnRfaWQgRlJPTSBgZW1mX3dvcmtmbG93X3N0YXRlYCBlIFdIRVJFIGUud29ya2Zsb3dfc3RhdGU9XCdBY3Rpb25hYmxlX2RvbmVcJzsnCiAgICAKICAgIGxvZ2dlci5pbmZvKCdxdWVyeScpCiAgICBsb2dnZXIuaW5mbyhxdWVyeSkKICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5KQogICAgYWN0aW9uYWJsZT1jdXJzb3IuZmV0Y2hhbGwoKTsKICAgIGxvZ2dlci5pbmZvKCdyZXN1bHQgb2Ygc3VicXVlcnknKQogICAgbG9nZ2VyLmluZm8oYWN0aW9uYWJsZSkKICAgIGxvZ2dlci5pbmZvKHR5cGUoYWN0aW9uYWJsZSkpCiAgICBsb2dnZXIuaW5mbyhsZW4oYWN0aW9uYWJsZSkpCiAgCmV4Y2VwdCBjb25uZWN0b3IuZXJyb3JzLk9wZXJhdGlvbmFsRXJyb3IgYXMgZToKICAgICMgSGFuZGxpbmcgdGhlIHRpbWVvdXQgZXhjZXB0aW9uCiAgICBsb2dnZXIuaW5mbygnTXlTUUwgY29ubmVjdGlvbiB0aW1lb3V0OiB7fScuZm9ybWF0KGUpKQoKZmluYWxseToKICAgICMgQ2xvc2UgdGhlIGRhdGFiYXNlIGNvbm5lY3Rpb24KICAgIGN1cnNvci5jbG9zZSgpCiAgICBjb25uZWN0aW9uLmNsb3NlKCkKCmZvciBpIGluIHJhbmdlKGxlbihhY3Rpb25hYmxlKSk6CiAgICAjZ2V0IGV2ZW50X2lkCiAgICBldmVudF9pZD1hY3Rpb25hYmxlW2ldWzFdCiAgICAjZ2V0IHN0cl9wYXJhbQogICAgdHJ5OgogICAgICAgIGNvbm5lY3Rpb24gPSBjb25uZWN0b3IuY29ubmVjdCgKICAgICAgICAgICAgdXNlcj11c2VybmFtZSwgcGFzc3dvcmQ9cGFzc3dvcmQsIGhvc3Q9aG9zdCwgcG9ydD1wb3J0LCBkYXRhYmFzZT1kYXRhYmFzZQogICAgICAgICkKICAgICAgICBjdXJzb3IgPSBjb25uZWN0aW9uLmN1cnNvcigpCiAgICAgICAgcXVlcnk9ZidTRUxFQ1QgZS5zdHJfcGFyYW1zIEZST00gYGVtZl9ldmVudGAgZSB3aGVyZSBpZD1cJ3tldmVudF9pZH1cJzsnCiAgICAgICAgbG9nZ2VyLmluZm8oJ3F1ZXJ5JykKICAgICAgICBsb2dnZXIuaW5mbyhxdWVyeSkKICAgICAgICBjdXJzb3IuZXhlY3V0ZShxdWVyeSkKICAgICAgICBzdHJfcGFyYW1zPWN1cnNvci5mZXRjaGFsbCgpCiAgICAgICAganNvbl9zdHI9c3RyX3BhcmFtc1swXVswXQogICAgICAgIGpzb25fZGF0YSA9IGpzb24ubG9hZHMoanNvbl9zdHIpCiAgICAgICAgbG9nZ2VyLmluZm8oImpzb24gOiIgKQogICAgICAgIGxvZ2dlci5pbmZvKGpzb25fZGF0YSkgICAgCiAgICAgICAgaWYgImNpX25hbWUiIGluIGpzb25fZGF0YSBhbmQgbGVuKGpzb25fZGF0YVsiY2lfbmFtZSJdKT4wOgogICAgICAgICAgICBjaV9uYW1lPWpzb25fZGF0YVsiY2lfbmFtZSJdCiAgICAgICAgICAgIGxvZ2dlci5pbmZvKCJoYXZlIGNpIikKICAgICAgICBlbHNlOgogICAgICAgICAgICBxdWVyeTI9ZidTRUxFQ1QgYWZmZWN0ZWRfY2lfbmFtZSBGUk9NIGluc3RhbmNlX3RvX2NpX25hbWUgV0hFUkUgaW5zdGFuY2VfbmFtZT1cJ3tqc29uX2RhdGFbImluc3RhbmNlIl19XCc7JwogICAgICAgICAgICBsb2dnZXIuaW5mbygncXVlcnknKQogICAgICAgICAgICBsb2dnZXIuaW5mbyhxdWVyeTIpCiAgICAgICAgICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5MikKICAgICAgICAgICAgcmVzPWN1cnNvci5mZXRjaGFsbCgpOwogICAgICAgICAgICBsb2dnZXIuaW5mbygncmVzdWx0IG9mIHN1YnF1ZXJ5JykKICAgICAgICAgICAgbG9nZ2VyLmluZm8ocmVzKQogICAgICAgICAgICBjaV9uYW1lPXJlc1swXVswXQogICAgICAgICAgICBsb2dnZXIuaW5mbygiUG9zc2libGUgY2lfbmFtZSA6ICIrY2lfbmFtZSkKICAgICAgICB1cmwgPSBzbm93X3VybCsnL2FwaS9ub3cvdGFibGUvaW5jaWRlbnQ/Y21kYl9jaT0nK2NpX25hbWUrJyZzeXNwYXJtX3F1ZXJ5PXN0YXRlIT03JwogICAgICAgIGxvZ2dlci5pbmZvKCd1cmwnK3VybCkKCiAgICAgICAgaGVhZGVycyA9IHsnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLCAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nfQogICAgICAgIGxvZ2dlci5pbmZvKCdTbm93IENhbGwgJykKICAgICAgICByZXMgPSByZXF1ZXN0cy5nZXQoCiAgICAgICAgICAgIHVybCwKICAgICAgICAgICAgYXV0aD0oc25vd191c2VyLCBzbm93X3Bhc3MpLAogICAgICAgICAgICBoZWFkZXJzPWhlYWRlcnMKICAgICAgICApCiAgICAgICAgbG9nZ2VyLmluZm8oJ3Nub3dfY2FsbCBtYWRlJykKICAgICAgICByZXNwb25zZT1yZXMuanNvbigpCiAgICAgICAgcmVzdWx0ID0gcmVzcG9uc2VbJ3Jlc3VsdCddCgoKICAgICAgICBpZihsZW4ocmVzdWx0KT09MCk6CiAgICAgICAgICAgIGxvZ2dlci5pbmZvKCdObyBPcGVuIHRpY2tldCBmb3VuZCcpCiAgICAgICAgICAgIHVybCA9IHNub3dfdXJsKycvYXBpL25vdy90YWJsZS9pbmNpZGVudD9zeXNwYXJtX2Rpc3BsYXlfdmFsdWU9dHJ1ZScgICNwb3N0CiAgICAgICAgICAgIGhlYWRlcnMgPSB7J0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJywgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ30KICAgICAgICAgICAgZGVzY3JpcHRpb249J2luc3RhbmNlIDogJyArIGpzb25fZGF0YVsiaW5zdGFuY2UiXSArICcgY2lfbmFtZSA6ICcgK2NpX25hbWUKICAgICAgICAgICAgcGF5bG9hZCA9IHsnc2hvcnRfZGVzY3JpcHRpb24nOiBkZXNjcmlwdGlvbiwKICAgICAgICAgICAgICAgICAgICAgICAgJ2NtZGJfY2knOiBjaV9uYW1lCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBsb2dnZXIuaW5mbyhwYXlsb2FkKQogICAgICAgICAgICBsb2dnZXIuaW5mbygnc25vd19jYWxsJykKICAgICAgICAgICAgcmVzID0gcmVxdWVzdHMucG9zdCgKICAgICAgICAgICAgICAgIHVybCwKICAgICAgICAgICAgICAgIGF1dGg9KHNub3dfdXNlciwgc25vd19wYXNzKSwKICAgICAgICAgICAgICAgIGhlYWRlcnM9aGVhZGVycywKICAgICAgICAgICAgICAgIGRhdGE9anNvbi5kdW1wcyhwYXlsb2FkKSwKICAgICAgICAgICAgKQogICAgICAgICAgICBsb2dnZXIuaW5mbygnc25vdyBjYWxsIG1hZGUnKQogICAgICAgICAgICAjIGxvZ2dlci5pbmZvKHJlcykKICAgICAgICAgICAgbWVzc2FnZSA9IHJlcy5qc29uKCkKICAgICAgICAgICAgaW5jaWRlbnROdW0gPSBtZXNzYWdlWydyZXN1bHQnXVsnbnVtYmVyJ10KICAgICAgICAgICAgc3RhdHVzID0gbWVzc2FnZVsncmVzdWx0J11bJ3N0YXRlJ10KCiAgICAgICAgZWxpZihsZW4ocmVzdWx0KT4wKToKICAgICAgICAgICAgc3lzX2lkPXJlc3VsdFswXVsnc3lzX2lkJ10KICAgICAgICAgICAgaXRzbV9udW1iZXI9cmVzdWx0WzBdWydudW1iZXInXQogICAgICAgICAgICBsb2dnZXIuaW5mbygnc3lzSWQnK3N5c19pZCkKICAgICAgICAgICAgbG9nZ2VyLmluZm8oJ3N0YXR1c19jb2RlIDIwMCcpCiAgICAgICAgICAgIHVybCA9IHNub3dfdXJsKycvYXBpL25vdy90YWJsZS9pbmNpZGVudC8nK3N5c19pZAoKICAgICAgICAgICAgaGVhZGVycyA9IHsnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLCAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nfQoKICAgICAgICAgICAgZGF0YT17CiAgICAgICAgICAgICAgICAnd29ya19ub3Rlcyc6ICdEdXBsaWNhdGUgYWxlcnQgd2l0aCBkZXRhaWxzICcranNvbl9kYXRhWyJpbnN0YW5jZSJdKycgZ290IGNyZWF0ZWQgYXQgICcranNvbl9kYXRhWyJkYXRlX3RpbWUiXSsnIHdpdGggY2kgbmFtZSAnICsgY2lfbmFtZQogICAgICAgICAgICB9CgogICAgICAgICAgICAjcGF5bG9hZCA9IHsnc3RhdGUnOiAnQ2xvc2VkJ30KICAgICAgICAgICAgbG9nZ2VyLmluZm8oJ3Nub3cgY2FsbCcpCiAgICAgICAgICAgIHJlcyA9IHJlcXVlc3RzLnB1dCgKICAgICAgICAgICAgICAgIHVybCwKICAgICAgICAgICAgICAgIGF1dGg9KHNub3dfdXNlciwgc25vd19wYXNzKSwKICAgICAgICAgICAgICAgIGhlYWRlcnM9aGVhZGVycywKICAgICAgICAgICAgICAgIGpzb249ZGF0YQogICAgICAgICAgICApCiAgICAgICAgICAgIGxvZ2dlci5pbmZvKCdzbm93X2NhbGwgbWFkZScpCgogICAgZXhjZXB0IGNvbm5lY3Rvci5lcnJvcnMuT3BlcmF0aW9uYWxFcnJvciBhcyBlOgogICAgICAgICMgSGFuZGxpbmcgdGhlIHRpbWVvdXQgZXhjZXB0aW9uCiAgICAgICAgbG9nZ2VyLmluZm8oJ015U1FMIGNvbm5lY3Rpb24gdGltZW91dDoge30nLmZvcm1hdChlKSkKICAgIGZpbmFsbHk6CiAgICAgICAgIyBDbG9zZSB0aGUgZGF0YWJhc2UgY29ubmVjdGlvbgogICAgICAgIGN1cnNvci5jbG9zZSgpCiAgICAgICAgY29ubmVjdGlvbi5jbG9zZSgpIAoKCgoKbG9nZ2VyLmluZm8oJ2NvbXBsZXRlZCcpCgoKCg==","leo1311"
"LEOALRT_39674","LEOALRT_39674_leo1311.py","aW1wb3J0IHN5cwppbXBvcnQganNvbgppbXBvcnQgb3MKaW1wb3J0IHJlcXVlc3RzCmltcG9ydCBkYXRldGltZQojIGltcG9ydCBweW1vbmdvIAppbXBvcnQgbG9nZ2luZyBhcyBsb2dnZXIKaW1wb3J0IGJhc2U2NAppbXBvcnQgcGFuZGFzIGFzIHBkCmltcG9ydCBza2xlYXJuCmZyb20gc2tsZWFybi5lbnNlbWJsZSBpbXBvcnQgSXNvbGF0aW9uRm9yZXN0CmltcG9ydCBwaWNrbGUKaW1wb3J0IHRpbWUKaW1wb3J0IHJhbmRvbQpmcm9tIGRhdGV0aW1lIGltcG9ydCAgdGltZWRlbHRhCgpsb2dnZXIuYmFzaWNDb25maWcobGV2ZWw9bG9nZ2VyLklORk8sIGZvcm1hdD0nJShhc2N0aW1lKXMgSU5GTyAlKG1lc3NhZ2UpcycsIGRhdGVmbXQ9JyV5LyVtLyVkICVIOiVNOiVTJykKCgoKbmV3X3JlcyA9IHt9CgoKCmRlZiB0cmFpbl9tb2RlbChtb2RlbCxqc29ubWV0cmljKToKICAgIGN1cnJlbnRfdGltZSA9IGRhdGV0aW1lLmRhdGV0aW1lLnV0Y25vdygpCgogICAgb25lX2RheV9hZ28gPSBjdXJyZW50X3RpbWUgLSBkYXRldGltZS50aW1lZGVsdGEoZGF5cz0xKQogICAgdHdvX2RheXNfYWdvID0gY3VycmVudF90aW1lIC0gZGF0ZXRpbWUudGltZWRlbHRhKGRheXM9MikKICAgIHN0YXJ0ID0gdHdvX2RheXNfYWdvLmlzb2Zvcm1hdCgpKyAnWicKICAgIGVuZCA9IG9uZV9kYXlfYWdvLmlzb2Zvcm1hdCgpKyAnWicKCiAgICAjIGxvZ2dlci5pbmZvKHN0YXJ0KQogICAgIyBsb2dnZXIuaW5mbyhlbmQpCgogICAgIyBHZXQgdGhlIFByb21ldGhldXMgbWV0cmljcwogICAjIHByb21ldGhldXNfYXBpPWYnaHR0cDovL2N2cmljdGxwdG0yMTo5MDkwL2FwaS92MS9xdWVyeV9yYW5nZT9xdWVyeT1sYWJlbF9yZXBsYWNlKCUwQSUyMCUyMGxhYmVsX3JlcGxhY2UoJTBBJTIwJTIwbGFiZWxfcmVwbGFjZSgxMDAtYXZnKHJhdGUod2luZG93c19jcHVfdGltZV90b3RhbCU3Qm1vZGUlM0QnaWRsZSclN0QlNUIxbSU1RCkpJTIwKiUyMDEwMCUyQydfX25hbWVfXyclMkMnd2luZG93c19tZW1vcnlfdXNhZ2UnJTJDJ19fbmFtZV9fJyUyQycnKSUyQydpbnN0YW5jZSclMkMnbnVsbCclMkMnaW5zdGFuY2UnJTJDJyclMEEpJTBBJTJDJ2pvYiclMkMnbnVsbCclMkMnam9iJyUyQycnJTBBKSZzdGFydD17c3RhcnR9JmVuZD17ZW5kfSZzdGVwPTEwcycKICAgIyBwcm9tZXRoZXVzX2FwaT1mJ2h0dHA6Ly9jdnJpY3RscHRtMjE6OTA5MC9hcGkvdjEvcXVlcnlfcmFuZ2U/cXVlcnk9bGFiZWxfcmVwbGFjZSglMEElMjAlMjBsYWJlbF9yZXBsYWNlKCUwQSUyMCUyMGxhYmVsX3JlcGxhY2UoMTAwLWF2ZyhyYXRlKHdpbmRvd3NfY3B1X3RpbWVfdG90YWwlN0Jtb2RlJTNEJ2lkbGUnJTdEJTVCMW0lNUQpKSUyMColMjAxMDAlMkMnX19uYW1lX18nJTJDJ3dpbmRvd3NfbWVtb3J5X3VzYWdlJyUyQydfX25hbWVfXyclMkMnJyklMkMnaW5zdGFuY2UnJTJDJ251bGwnJTJDJ2luc3RhbmNlJyUyQycnJTBBKSUwQSUyQydqb2InJTJDJ251bGwnJTJDJ2pvYiclMkMnJyUwQSkmc3RhcnQ9e3N0YXJ0fSZlbmQ9e2VuZH0mc3RlcD0xMHMnCiAgICBwcm9tZXRoZXVzX2FwaT1mJ2h0dHA6Ly9jdnJpY3RscHRtMjE6OTA5MC9hcGkvdjEvcXVlcnlfcmFuZ2U/cXVlcnk9bGFiZWxfcmVwbGFjZSglMEElMjAlMjBsYWJlbF9yZXBsYWNlKCUwQSUyMCUyMGxhYmVsX3JlcGxhY2UoMTAwLWF2ZyhyYXRlKHdpbmRvd3NfY3B1X3RpbWVfdG90YWwlN0Jtb2RlJTNEXCdpZGxlXCclN0QlNUIxbSU1RCkpJTIwKiUyMDEwMCUyQ1wnX19uYW1lX19cJyUyQ1wnd2luZG93c19tZW1vcnlfdXNhZ2VcJyUyQ1wnX19uYW1lX19cJyUyQ1wnXCcpJTJDXCdpbnN0YW5jZVwnJTJDXCdudWxsXCclMkNcJ2luc3RhbmNlXCclMkNcJ1wnJTBBKSUwQSUyQ1wnam9iXCclMkNcJ251bGxcJyUyQ1wnam9iXCclMkNcJ1wnJTBBKSZzdGFydD17c3RhcnR9JmVuZD17ZW5kfSZzdGVwPTEwcycKICAgIyBwcm9tZXRoZXVzX2FwaSA9IGYnaHR0cDovL2N2cmljdGxwdG0yMTo5MDkwL2FwaS92MS9xdWVyeV9yYW5nZT9xdWVyeT1sYWJlbF9yZXBsYWNlKHswQX0lMjAlMjBsYWJlbF9yZXBsYWNlKHswQX0lMjAlMjBsYWJlbF9yZXBsYWNlKDEwMC1hdmcocmF0ZSh3aW5kb3dzX2NwdV90aW1lX3RvdGFse21vZGU9J2lkbGUnfVsxbV0pKSUyMColMjAxMDAlMkMnX19uYW1lX18nJTJDJ3dpbmRvd3NfbWVtb3J5X3VzYWdlJyUyQydfX25hbWVfXyclMkMnJyklMkMnaW5zdGFuY2UnJTJDJ251bGwnJTJDJ2luc3RhbmNlJyUyQycnezBBfSUyQydqb2InJTJDJ251bGwnJTJDJ2pvYiclMkMnJ3swQX0pJnN0YXJ0PXtzdGFydH0mZW5kPXtlbmR9JnN0ZXA9MTBzJwogICAgbG9nZ2VyLmluZm8oInByaW50aW5nIGxvZyIpCiAgICAjIGxvZ2dlci5pbmZvKHByb21ldGhldXNfYXBpKQogICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQocHJvbWV0aGV1c19hcGkpCgogICAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwOgogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KHByb21ldGhldXNfYXBpKQogICAgZWxzZToKICAgICAgICByZXNwb25zZSA9ICdObyBkYXRhIGF2YWlsYWJsZScKCiAgICBqc29uX2RhdGEgPSBqc29uLmxvYWRzKHJlc3BvbnNlLmNvbnRlbnQpCiAgICBkYXRhID0ganNvbl9kYXRhWydkYXRhJ10KICAgIHJlc3VsdD1kYXRhWydyZXN1bHQnXQoKICAgIGZvciBpdGVtIGluIHJlc3VsdDoKICAgICAgICBpZihpdGVtWydtZXRyaWMnXT09anNvbm1ldHJpYyk6CiAgICAgICAgICAgIG1vZGVsLmZpdChpdGVtWyd2YWx1ZXMnXSkKICAgIHJldHVybiBtb2RlbAoKCgojIFByb3h5Cm9zLmVudmlyb25bJ0hUVFBfUFJPWFknXT0nJwpvcy5lbnZpcm9uWydIVFRQU19QUk9YWSddPScnCm9zLmVudmlyb25bJ2h0dHBfcHJveHknXT0nJwpvcy5lbnZpcm9uWydodHRwc19wcm94eSddPScnCgoKIyBvcy5lbnZpcm9uWydIVFRQX1BST1hZJ109J2JscnByb3h5LmFkLmluZm9zeXMuY29tOjQ0MycKIAojIG9zLmVudmlyb25bJ0hUVFBTX1BST1hZJ109J2JscnByb3h5LmFkLmluZm9zeXMuY29tOjQ0MycKCgpjdXJyZW50X3RpbWUgPSBkYXRldGltZS5kYXRldGltZS51dGNub3coKQojc3RhcnQgPSBkYXRldGltZS5kYXRldGltZShjdXJyZW50X3RpbWUueWVhciwgY3VycmVudF90aW1lLm1vbnRoLCBjdXJyZW50X3RpbWUuZGF5LCBjdXJyZW50X3RpbWUuaG91ciwgY3VycmVudF90aW1lLm1pbnV0ZSwgY3VycmVudF90aW1lLnNlY29uZCwgdHppbmZvID0gTm9uZSkKdG9kYXlEYXRlID0gY3VycmVudF90aW1lLnN0cmZ0aW1lKCclWS0lbS0lZCAlSDolTScpCiNlbmQgPSBjdXJyZW50X3RpbWUuaXNvZm9ybWF0KCkgKyAnWicKdHdvX21pbl9hZ28gPSBjdXJyZW50X3RpbWUgLSBkYXRldGltZS50aW1lZGVsdGEobWludXRlcz0yKQplbmQgPSB0d29fbWluX2Fnby5pc29mb3JtYXQoKSsgJ1onCnByaW50KGVuZCkKCiNlbmQgdGltZSBmb3IgdXJsCnRlbl9taW5fYWdvID0gY3VycmVudF90aW1lIC0gZGF0ZXRpbWUudGltZWRlbHRhKG1pbnV0ZXM9NSkKI2VuZF90aW1lID0gdGVuX21pbl9hZ28uc3RyZnRpbWUoJyVZLSVtLSVkICVIOiVNOiVTJykKc3RhcnQgPSB0ZW5fbWluX2Fnby5pc29mb3JtYXQoKSsgJ1onCiNwcmludCh0eXBlKHRlbl9taW5fYWdvKSkKbG9nZ2VyLmluZm8oInN0cmFydGVkIikKCiMgR2V0IHRoZSBQcm9tZXRoZXVzIG1ldHJpY3MKIyBwcm9tZXRoZXVzX2FwaSA9IGYnaHR0cDovL3ZpY3RzZWNzdDI2OjkwOTAvYXBpL3YxL3F1ZXJ5X3JhbmdlP3F1ZXJ5PXByb2Nlc3NfY3B1X3VzYWdlJnN0YXJ0PXt5ZXN0ZXJkYXlEYXRlfVQwMDowMDowMFomZW5kPXt0b2RheURhdGV9VDA1OjAwOjAwLjAwWiZzdGVwPTEwcycKcHJvbWV0aGV1c19hcGk9ZidodHRwOi8vY3ZyaWN0bHB0bTIxOjkwOTAvYXBpL3YxL3F1ZXJ5X3JhbmdlP3F1ZXJ5PWxhYmVsX3JlcGxhY2UoJTBBJTIwJTIwbGFiZWxfcmVwbGFjZSglMEElMjAlMjBsYWJlbF9yZXBsYWNlKDEwMC1hdmcocmF0ZSh3aW5kb3dzX2NwdV90aW1lX3RvdGFsJTdCbW9kZSUzRFwnaWRsZVwnJTdEJTVCMW0lNUQpKSUyMColMjAxMDAlMkNcJ19fbmFtZV9fXCclMkNcJ3dpbmRvd3NfbWVtb3J5X3VzYWdlXCclMkNcJ19fbmFtZV9fXCclMkNcJ1wnKSUyQ1wnaW5zdGFuY2VcJyUyQ1wnbnVsbFwnJTJDXCdpbnN0YW5jZVwnJTJDXCdcJyUwQSklMEElMkNcJ2pvYlwnJTJDXCdudWxsXCclMkNcJ2pvYlwnJTJDXCdcJyUwQSkmc3RhcnQ9e3N0YXJ0fSZlbmQ9e2VuZH0mc3RlcD0xMHMnCmxvZ2dlci5pbmZvKHByb21ldGhldXNfYXBpKQojIGxvZ2dlci5pbmZvKCJwcm9tZXRoZXVzIGNhbGwiKQojIG9zLmVudmlyb25bJ0hUVFBfUFJPWFknXT0nYmxycHJveHkuYWQuaW5mb3N5cy5jb206NDQzJwogCiMgb3MuZW52aXJvblsnSFRUUFNfUFJPWFknXT0nYmxycHJveHkuYWQuaW5mb3N5cy5jb206NDQzJwojIG9zLmVudmlyb25bJ2h0dHBfcHJveHknXT0nYmxycHJveHkuYWQuaW5mb3N5cy5jb206NDQzJwogCiMgb3MuZW52aXJvblsnaHR0cHNfcHJveHknXT0nYmxycHJveHkuYWQuaW5mb3N5cy5jb206NDQzJwoKcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQocHJvbWV0aGV1c19hcGkpCiMgbG9nZ2VyLmluZm8oJ2xvZyByZXNwb25lJykKIyBsb2dnZXIuaW5mbyhyZXNwb25zZS5jb250ZW50KQppZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldChwcm9tZXRoZXVzX2FwaSkKZWxzZToKICAgIHJlc3BvbnNlID0gJ05vIGRhdGEgYXZhaWxhYmxlJwoKanNvbl9kYXRhID0ganNvbi5sb2FkcyhyZXNwb25zZS5jb250ZW50KQpkYXRhID0ganNvbl9kYXRhWydkYXRhJ10KcmVzdWx0PWRhdGFbJ3Jlc3VsdCddCgoKI2NvZGUgdG8gY3JlYXRlIGFydGlmaWNhbCBhbGVydHMKIyB0aW1lc3RhbXBzID0gW2N1cnJlbnRfdGltZS50aW1lc3RhbXAoKSAtIHJhbmRvbS51bmlmb3JtKGksIDApIGZvciBpIGluIHJhbmdlKDIwKV0KY3VycmVudF90aW1lID0gZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkKc3RhcnRfdGltZSA9IGN1cnJlbnRfdGltZSAtIHRpbWVkZWx0YShtaW51dGVzPTQpCmdhcCA9IHRpbWVkZWx0YShzZWNvbmRzPTEwKQoKIyBDYWxjdWxhdGUgc3RhcnRpbmcgdGltZSBmb3IgdGhlIGxhc3QgMTAgbWludXRlcwpzdGFydF90aW1lID0gY3VycmVudF90aW1lIC0gdGltZWRlbHRhKG1pbnV0ZXM9MTApCgojIEdlbmVyYXRlIDEwIHRpbWVzdGFtcHMgd2l0aCAzMC1zZWNvbmQgZ2FwIHdpdGhpbiB0aGUgbGFzdCAxMCBtaW51dGVzCnRpbWVzdGFtcHMgPSBbCiAgICAoc3RhcnRfdGltZSArIGkgKiBnYXApLnRpbWVzdGFtcCgpIAogICAgZm9yIGkgaW4gcmFuZ2UoMTApCl0KdmFsdWVzID0gW3JhbmRvbS5yYW5kaW50KDUxLCA5MCkgZm9yIF8gaW4gcmFuZ2UoMTApXSAgIyByYW5kb20gdmFsdWVzIGJldHdlZW4gNTEgYW5kIDEwMAoKIyBjcmVhdGVkVmFsMT1saXN0KHppcCh0aW1lc3RhbXBzLCB2YWx1ZXMpKQpjcmVhdGVkVmFsMSA9IGxpc3QoemlwKHRpbWVzdGFtcHMsIFtmJycne3Z9JycnIGZvciB2IGluIHZhbHVlc10pKQpjcmVhdGVkVmFsID0gW2xpc3QoaXRlbSkgZm9yIGl0ZW0gaW4gY3JlYXRlZFZhbDFdCnJlc3VsdFswXVsndmFsdWVzJ109cmVzdWx0WzBdWyd2YWx1ZXMnXStjcmVhdGVkVmFsCgojIGxvZ2dlci5pbmZvKCdhcnRpZmljaWFsJykKIyBsb2dnZXIuaW5mbyhyZXN1bHRbMF0pCgoKCiMgQ29ubmVjdCB0byB0aGUgTW9uZ29EQiBkYXRhYmFzZQojIGNsaWVudCA9IHB5bW9uZ28uTW9uZ29DbGllbnQoJzEwLjgyLjEyMy4xOScsIDI3MDE3LCB1c2VybmFtZT0nbGVhcGFkbScsIHBhc3N3b3JkPSczQFRDSyZeUycpIAoKIyBDcmVhdGUgYSBjb2xsZWN0aW9uIHRvIHN0b3JlIHRoZSBkYXRhCiMgZGIgPSBjbGllbnRbJ2FkbWluJ10gIAojIGNvbGxlY3Rpb24gPSBkYlsncHJvbWV0aGV1c0RhdGEnXSAgIAoKI3B1Ymxpc2ggZXZlbnQgbWV0YWRhdGEKIyBhcGlfdXJsID0gJ2h0dHA6Ly9sZWFwMjo1NTU1L3B1Ymxpc2hFdmVudCcKIyBhcGlfdXJsPSdodHRwczovL2xlYXAyOjQwMDYvYXBpL2V2ZW50L3RyaWdnZXIvUmFiYml0bXFfZW1mP29yZz1sZW8xMzExJwphcGlfdXJsPSdodHRwczovL2xlYXA3OjQwMDYvYXBpL2V2ZW50L3RyaWdnZXIvcmFiYml0bXFfZW1mP29yZz1sZW8xMzExJmNvcmVsaWQ9JmRhdGFzb3VyY2VOYW1lPUxFQUxDTENMMTIxMzInCmhlYWRlcnMgPSAgeydDb250ZW50LVR5cGUnOidhcHBsaWNhdGlvbi9qc29uJ30KCmNvdW50ID0xCmZvciBpdGVtIGluIHJlc3VsdDoKICAgIGpzb25tZXRyaWM9aXRlbVsnbWV0cmljJ10KICAgIHZhbHVlczE9aXRlbVsndmFsdWVzJ10KICAgICN2YWx1ZXM9dmFsdWVzMVs6LTNdCiAgICB2YWx1ZXM9dmFsdWVzMQogICAgIyBsb2dnZXIuaW5mbygndmFsdWUtLScpCiAgICMgbG9nZ2VyLmluZm8odmFsdWVzKQogICAgdmFsdWVEVE8gPSBbXQogICAgbW9kZWw9SXNvbGF0aW9uRm9yZXN0KGNvbnRhbWluYXRpb249MC4wMSkKICAgIG1vZGVsID0gdHJhaW5fbW9kZWwobW9kZWwsanNvbm1ldHJpYykKICAgIGZpbGVuYW1lID0gJ2ZpbmFsaXplZF9tb2RlbCcrc3RyKGNvdW50KSsnLnNhdicKICAgIGNvdW50PWNvdW50KzEKICAgIHBpY2tsZS5kdW1wKG1vZGVsLCBvcGVuKGZpbGVuYW1lLCAnd2InKSkKICAgICNtb2RlbC5maXQodmFsdWVzKQoKICAgIGxvYWRlZF9tb2RlbCA9IHBpY2tsZS5sb2FkKG9wZW4oZmlsZW5hbWUsICdyYicpKQogICAgZGF0YT17fQogICAgZGF0YVsnYW5vbWFseSddPXBkLlNlcmllcyhtb2RlbC5wcmVkaWN0KHZhbHVlcykpLmFwcGx5KGxhbWJkYSB4Oid5ZXMnIGlmIHg9PS0xIGVsc2UgJ25vJykKICAgIGRhdGFbJ2Fub21hbHlfc2NvcmVzJ10gPSBtb2RlbC5kZWNpc2lvbl9mdW5jdGlvbih2YWx1ZXMpCiAgICAjIGxvZ2dlci5pbmZvKGRhdGFbJ2Fub21hbHknXSkKICAgICMgbG9nZ2VyLmluZm8oZGF0YVsnYW5vbWFseV9zY29yZXMnXSkKICAgIGZvciAoaXRlbTIsYW5vbWFseSxhbm9tYWx5X3Njb3JlcykgaW4gemlwKHZhbHVlcyxkYXRhWydhbm9tYWx5J10sZGF0YVsnYW5vbWFseV9zY29yZXMnXSk6CiAgICAgICAgdmFsdWVfZHRvID0gewogICAgICAgICAgICAndGltZXN0YW1wJyA6IGl0ZW0yWzBdLAogICAgICAgICAgICAndmFsdWUnIDogaXRlbTJbMV0sCiAgICAgICAgICAgICdhbm9tYWx5Jzphbm9tYWx5LAogICAgICAgICAgICAnYW5vbWFseV9zY29yZXMnOmFub21hbHlfc2NvcmVzCiAgICAgICAgfQogICAgICAgIAogICAgICAgIGlmKGFub21hbHk9PSd5ZXMnKToKICAgICAgICAjaWYoZmxvYXQoaXRlbTJbMV0pPjUpOgogICAgICAgICNhbm9tYWx5PT0neWVzJwogICAgICAgICAgICBfX25hbWVfXz1qc29ubWV0cmljWydfX25hbWVfXyddCiAgICAgICAgICAgIGluc3RhbmNlPWpzb25tZXRyaWNbJ2luc3RhbmNlJ10KICAgICAgICAgICAgam9iPWpzb25tZXRyaWNbJ2pvYiddCiAgICAgICAgICAgIHRpbWVzdGFtcD1pdGVtMlswXQogICAgICAgICAgICBkYXRlX3RpbWUgPSBkYXRldGltZS5kYXRldGltZS5mcm9tdGltZXN0YW1wKHRpbWVzdGFtcCkKICAgICAgICAgICAgZm9ybWF0dGVkX2RhdGVfdGltZSA9IGRhdGVfdGltZS5zdHJmdGltZSgnJWQtJW0tJVkgJUg6JU06JVMnKQogICAgICAgICAgICBpbnN0YW5jZV9kYXRlPWYne19fbmFtZV9ffSB7aW5zdGFuY2V9IHtmb3JtYXR0ZWRfZGF0ZV90aW1lfScKCiAgICAgICAgICAgCiAgICAgICAgICAgIGFsZXJ0anNvbiA9IHt9CiAgICAgICAgICAgIGFsZXJ0anNvblsnaW5zdGFuY2VfZGF0ZXRpbWUnXT1pbnN0YW5jZV9kYXRlCiAgICAgICAgICAgIGFsZXJ0anNvblsnc3RhdHVzJ109J2ZpcmluZycKICAgICAgICAgICAgbGFiZWxzPXt9CiAgICAgICAgICAgIGxhYmVsc1snaW5zdGFuY2UnXSA9IGluc3RhbmNlCiAgICAgICAgICAgIGxhYmVsc1snYWxlcnRuYW1lJ109ICBfX25hbWVfXwogICAgICAgICAgICBsYWJlbHNbJ2pvYiddID0gam9iCiAgICAgICAgICAgIGFsZXJ0anNvblsnbGFiZWxzJ10gPSBsYWJlbHMKICAgICAgICAgICAgYWxlcnRqc29uWydkZXNjcmlwdGlvbiddPSdBbm9tYWx5IGRldGVjdGVkIGZvciBXaW5kb3dzIHByb2Nlc3NfY3B1X3VzYWdlIGF0IG1ldHJpYyB2YWx1ZS0gJytzdHIoaXRlbTJbMV0gKydhdCB0aW1lc3RhbXAgJytzdHIoaXRlbTJbMF0pKQogICAgICAgICAgICBhbGVydGpzb25bJ21ldHJpY192YWx1ZSddPWZsb2F0KGl0ZW0yWzFdKQogICAgICAgICAgICBhbGVydGpzb25bJ2FjdGlvbmFibGUnXT0nVHJ1ZScKICAgICAgICAgICAgaWYoZmxvYXQoaXRlbTJbMV0pPDUwKToKICAgICAgICAgICAgICBhbGVydGpzb25bJ2FjdGlvbmFibGUnXT0nRmFsc2UnCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgaWYoZmxvYXQoaXRlbTJbMV0pPjUwKToKICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKCd0aHJlc2hvbGQgYnJlYWNoZWQnKQoKICAgICAgICAgICAgZGF0YSA9Jycne30nJycKICAgICAgICAgICAgCiAgICAgICAgICAgIHF1ZXJ5anNvbiA9IGpzb24ubG9hZHMoZGF0YSkKICAgICAgICAgICAgcXVlcnlqc29uWydldmVudElkJ10gPSdldmVudCcrc3RyKHN0cihkYXRldGltZS5kYXRldGltZS5ub3coKS50aW1lc3RhbXAoKSkucmVwbGFjZSgnLicsICcnKSkKICAgICAgICAgICAgcXVlcnlqc29uWydldmVudFR5cGVOYW1lJ10gPSdBY3Rpb25hYmxlX2NoZWNrX2V2ZW50X2NlJwogICAgICAgICAgICBxdWVyeWpzb25bJ2NvbnRleHQnXT1hbGVydGpzb24KICAgICAgICAgICAgcXVlcnlqc29uMj1qc29uLmxvYWRzKGRhdGEpCiAgICAgICAgICAgIHF1ZXJ5anNvbjJbJ2JvZHknXT1xdWVyeWpzb24KICAgICAgICAgICAgbG9nZ2VyLmluZm8ocXVlcnlqc29uMikKICAgICAgICAgICAgbG9nZ2VyLmluZm8oJ2NhbGxpbmcgcGlwZWxpbmUnKQogICAgICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoYXBpX3VybCwgZGF0YT1qc29uLmR1bXBzKHF1ZXJ5anNvbjIpLCBoZWFkZXJzPWhlYWRlcnMsdmVyaWZ5PUZhbHNlKQogICAgICAgICAgICBsb2dnZXIuaW5mbyhyZXNwb25zZS5yYWlzZV9mb3Jfc3RhdHVzKCkpCiAgICAgICAgICAgICNwdWJsaXNoX21lc3NhZ2UoaW5zdGFuY2VfZGF0ZSkKICAgICAgICAgICAgI3RpbWUuc2xlZXAoMTApCgogICAgICAgIHZhbHVlRFRPLmFwcGVuZCh2YWx1ZV9kdG8pCgogICAgX19uYW1lX189anNvbm1ldHJpY1snX19uYW1lX18nXQogICAgaW5zdGFuY2U9anNvbm1ldHJpY1snaW5zdGFuY2UnXQogICAgam9iPWpzb25tZXRyaWNbJ2pvYiddCiAgICB0aW1lc3RhbXA9dmFsdWVzWzBdWzBdCgogICAgZGF0ZV90aW1lID0gZGF0ZXRpbWUuZGF0ZXRpbWUuZnJvbXRpbWVzdGFtcCh0aW1lc3RhbXApCiAgICBmb3JtYXR0ZWRfZGF0ZV90aW1lID0gZGF0ZV90aW1lLnN0cmZ0aW1lKCclWS0lbS0lZCcpCiAgICBtb25nb2lkPWYne2luc3RhbmNlfXx7X19uYW1lX199fHtqb2J9fHt0b2RheURhdGV9JwogICAgZG9jdW1lbnQgPSB7CiAgICAgICAgJ19pZCcgOiBtb25nb2lkLAogICAgICAgICdtZXRyaWMnIDoganNvbm1ldHJpYywKICAgICAgICAndmFsdWVEVE8nOiB2YWx1ZURUTwogICAgfQogICAgIyBJbnNlcnQgdGhlIEpTT04gZGF0YSBpbnRvIHRoZSBjb2xsZWN0aW9uCiAgICAjY29sbGVjdGlvbi5pbnNlcnRfb25lKGRvY3VtZW50KQogICAKICAgIyBjb2xsZWN0aW9uLmluc2VydF9vbmUoZG9jdW1lbnQpCgojIENsb3NlIHRoZSBjb25uZWN0aW9uIHRvIHRoZSBNb25nb0RCIGRhdGFiYXNlCmNsaWVudC5jbG9zZSgpCgpsb2dnZXIuaW5mbygnQ29tcGxldGVkJykKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgo=","leo1311"
"LEOEVNT_26978","LEOEVNT_26978_leo1311.py","","leo1311"
"LEOANMLY29579","LEOANMLY29579_leo1311.py","aW1wb3J0IHN5cwppbXBvcnQganNvbgppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IGRhdGV0aW1lCiMgaW1wb3J0IHB5bW9uZ28gCmltcG9ydCBsb2dnaW5nIGFzIGxvZ2dlcgppbXBvcnQgYmFzZTY0CmltcG9ydCBwYW5kYXMgYXMgcGQKIyBpbXBvcnQgc2tsZWFybgojIGZyb20gc2tsZWFybi5lbnNlbWJsZSBpbXBvcnQgSXNvbGF0aW9uRm9yZXN0CiMgaW1wb3J0IHBpY2tsZQppbXBvcnQgbXlzcWwuY29ubmVjdG9yIGFzIGNvbm5lY3RvcgppbXBvcnQgb3MKaW1wb3J0IHRpbWUKIyBmcm9tIHVybGxpYi5wYXJzZSBpbXBvcnQgcXVvdGVfcGx1cywgdXJscGFyc2UKI2Zyb20gbGVhcC51dGlscy5VdGlsaXRpZXMgaW1wb3J0IFV0aWxpdGllcwojZnJvbSB1dGlscyBpbXBvcnQgVXRpbGl0aWVzCgpvcy5lbnZpcm9uWydIVFRQX1BST1hZJ109JycKb3MuZW52aXJvblsnSFRUUFNfUFJPWFknXT0nJwpvcy5lbnZpcm9uWydodHRwX3Byb3h5J109JycKb3MuZW52aXJvblsnaHR0cHNfcHJveHknXT0nJwoKCgpsb2dnZXIuYmFzaWNDb25maWcobGV2ZWw9bG9nZ2VyLklORk8sIGZvcm1hdD0nJShhc2N0aW1lKXMgSU5GTyAlKG1lc3NhZ2UpcycsIGRhdGVmbXQ9JyV5LyVtLyVkICVIOiVNOiVTJykKCmFyZ3VtZW50cyA9IHN5cy5hcmd2Cm15X2RpY3QgPSB7fQpmb3IgYXJnIGluIGFyZ3VtZW50czoKICAgIHRyeToKICAgICAgICBteV9kaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICc6Jy5qb2luKGFyZy5zcGxpdCgnOicpWzE6XSkKICAgIGV4Y2VwdDoKICAgICAgICBhID0gJ2Vycm9yJwoKCmxvZ2dlci5pbmZvKCdSZWFkaW5nIGFyZ3VtZW50czonKQojbG9nZ2VyLmluZm8obXlfZGljdFsnaW5zdGFuY2UnXSkKaW5zdGFuY2U9bXlfZGljdFsnaW5zdGFuY2UnXQpjaV9uYW1lPW15X2RpY3RbJ2NpX25hbWUnXQptZXRyaWM9bXlfZGljdFsnbWV0cmljJ10KbWV0cmljX3ZhbHVlPWZsb2F0KG15X2RpY3RbJ21ldHJpY192YWx1ZSddKQojbG9nZ2VyLmluZm8oc3RyKG1ldHJpY192YWx1ZSkpCmRhdGVfdGltZT1teV9kaWN0WydkYXRlX3RpbWUnXQpkZXNjcmlwdGlvbj1teV9kaWN0WydkZXNjcmlwdGlvbiddCmFsZXJ0X21lc3NhZ2U9bXlfZGljdFsnYWxlcnRfbWVzc2FnZSddCmVycm9yX21lc3NhZ2U9bXlfZGljdFsnZXJyb3JfbWVzc2FnZSddCmNhdXNlPW15X2RpY3RbJ2NhdXNlJ10KaXRzbV9udW1iZXI9bXlfZGljdFsnaXRzbV9udW1iZXInXQppdHNtX3N5c3RlbT1teV9kaWN0WydpdHNtX3N5c3RlbSddCml0c21fbGluaz1teV9kaWN0WydpdHNtX2xpbmsnXQp3b3JrZmxvd19wYXJhbT1teV9kaWN0Wyd3b3JrZmxvd19wYXJhbSddCgoKCiNMRUFQIERhdGFzb3VyY2UKbGVhcGRzID0gbXlfZGljdFsnTEVBUERhdGFTb3VyY2UnXQpsb2dnZXIuaW5mbygnbGVhcGRzJykKbG9nZ2VyLmluZm8obGVhcGRzKQpsZWFwRFNkaWN0ID1qc29uLmxvYWRzKGxlYXBkcykKCiNzYXZlIHRvIGRiCiMgY29sdW1uTGlzdCA9IGRmLmNvbHVtbnMKIyB1c2VybmFtZSA9IGxlYXBEU2RpY3RbJ3VzZXJOYW1lJ10KIyBwYXNzd29yZCA9IFV0aWxpdGllcy5kZWNyeXB0KGxlYXBEU2RpY3RbJ3Bhc3N3b3JkJ10sbGVhcERTZGljdFsnc2FsdCddKQojIGhvc3QgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLmhvc3RuYW1lCiMgcG9ydCA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkucG9ydAojIGRhdGFiYXNlID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5wYXRoLnJzcGxpdCgnLycsIDEpWzFdCgoKCgojIHVzZXJuYW1lID0gJ2xlYXBhZG0nCiMgcGFzc3dvcmQgPSAnRjEpZ3t0eUMnCiMgaG9zdCA9ICcxMC44Mi4xMjEuMTU1JwojIHBvcnQgPSAzMzA2CiMgZGF0YWJhc2UgPSAnbGVhcHF0eicKCnVzZXJuYW1lID0gJ3NyZWludCcKcGFzc3dvcmQgPSAnNWReRlpzdm0nCmhvc3QgPSAnMTAuODIuMTIyLjk0Jwpwb3J0ID0gMzMwNgpkYXRhYmFzZSA9ICdzcmVpbnQnCiMgdGltZS5zbGVlcCgzMCkKCgplbWZfZGIgPSBjb25uZWN0b3IuY29ubmVjdCgKICAgIHVzZXI9dXNlcm5hbWUsIHBhc3N3b3JkPXBhc3N3b3JkLCBob3N0PWhvc3QsIHBvcnQ9cG9ydCwgZGF0YWJhc2U9ZGF0YWJhc2UKKQoKCiMgI0FOT01BTFkgREVURUNUSU9OCgojIE1PREVMX0VORFBPSU5UPSJodHRwOi8vMTAuODEuNzQuMjQyOjUwMDEvaW52b2NhdGlvbnMiCiMgaGVhZGVycyA9ICB7J0NvbnRlbnQtVHlwZSc6J2FwcGxpY2F0aW9uL2pzb24nfQojIHByZWRpY3Rpb24gPSByZXF1ZXN0cy5wb3N0KHVybD1NT0RFTF9FTkRQT0lOVCwgZGF0YXt9LCBoZWFkZXJzPWhlYWRlcnMpCiMgcHJlZGljdGlvbiA9IGpzb24ubG9hZHMocHJlZGljdGlvbi5jb250ZW50LmRlY29kZSgndXRmLTgnKSkKIyBpc0Fub21hbHkgPSBwcmVkaWN0aW9uLmFwcGx5KGxhbWJkYSB4Oid5ZXMnIGlmIHg9PS0xIGVsc2UgJ25vJykKIyAjYW5vbWFseVNjb3JlcyA9IHByZWRpY3Rpb24uZGVjaXNpb25fZnVuY3Rpb24oZGF0YVtbJ3ZhbHVlJ11dKQoKCgojICNUSFJFU0hPTEQgQ0hFQ2sKIyBUSFJFU0hPTEQ9NDUKIyBpc0FjdGlvbmFibGU9J25vJwojIGlmIChtZXRyaWNfdmFsdWU+VEhSRVNIT0xEIGFuZCBpc0Fub21hbHk9J3llcycpOgppc0FjdGlvbmFibGU9J1llcycKCgoKCmFwaV91cmwgPSAnaHR0cHM6Ly9sZWFwNzo0MDA2L2FwaS9ldmVudC90cmlnZ2VyL1JhYmJpdG1xX2VtZj9vcmc9bGVvMTMxMSZjb3JlbGlkPSZkYXRhc291cmNlTmFtZT1MRUFMQ0xDTDEyMTMyJwpoZWFkZXJzID0gIHsnQ29udGVudC1UeXBlJzonYXBwbGljYXRpb24vanNvbid9CgphbGVydGpzb24gPSB7fQphbGVydGpzb25bJ2luc3RhbmNlJ109aW5zdGFuY2UKYWxlcnRqc29uWydjaV9uYW1lJ109Y2lfbmFtZQphbGVydGpzb25bJ21ldHJpYyddPW1ldHJpYwphbGVydGpzb25bJ21ldHJpY192YWx1ZSddPW1ldHJpY192YWx1ZQphbGVydGpzb25bJ2RhdGVfdGltZSddPWRhdGVfdGltZQphbGVydGpzb25bJ2Rlc2NyaXB0aW9uJ109ZGVzY3JpcHRpb24KYWxlcnRqc29uWydhbGVydF9tZXNzYWdlJ109YWxlcnRfbWVzc2FnZQphbGVydGpzb25bJ2Vycm9yX21lc3NhZ2UnXT1lcnJvcl9tZXNzYWdlCmFsZXJ0anNvblsnY2F1c2UnXT1jYXVzZQphbGVydGpzb25bJ2l0c21fbnVtYmVyJ109aXRzbV9udW1iZXIKYWxlcnRqc29uWydpdHNtX3N5c3RlbSddPWl0c21fc3lzdGVtCmFsZXJ0anNvblsnaXRzbV9saW5rJ109aXRzbV9saW5rCmFsZXJ0anNvblsnaXNBY3Rpb25hYmxlJ109aXNBY3Rpb25hYmxlCmFsZXJ0anNvblsnd29ya2Zsb3dfcGFyYW0nXT13b3JrZmxvd19wYXJhbQpkYXRhID0nJyd7fScnJwpxdWVyeWpzb24gPSBqc29uLmxvYWRzKGRhdGEpCnF1ZXJ5anNvblsnZXZlbnRJZCddID0nZXZlbnQnK3N0cihzdHIoZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkudGltZXN0YW1wKCkpLnJlcGxhY2UoJy4nLCAnJykpCnF1ZXJ5anNvblsnZXZlbnRUeXBlTmFtZSddID0nQWN0aW9uYWJsZSBjaGVjaycKcXVlcnlqc29uWydjb250ZXh0J109YWxlcnRqc29uCmxvZ2dlci5pbmZvKHF1ZXJ5anNvbikKcXVlcnlqc29uMj1qc29uLmxvYWRzKGRhdGEpCnF1ZXJ5anNvbjJbJ2JvZHknXT1xdWVyeWpzb24KcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KGFwaV91cmwsIGRhdGE9anNvbi5kdW1wcyhxdWVyeWpzb24yKSwgaGVhZGVycz1oZWFkZXJzLHZlcmlmeT1GYWxzZSkKbG9nZ2VyLmluZm8ocmVzcG9uc2UucmFpc2VfZm9yX3N0YXR1cygpKQoKCmxvZ2dlci5pbmZvKCdDb21wbGV0ZWQnKQoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgo=","leo1311"
"LEOTRNSL50186","LEOTRNSL50186_leo1311.py","aW1wb3J0IHN5cwppbXBvcnQganNvbgppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IGRhdGV0aW1lCmltcG9ydCBweW1vbmdvIAppbXBvcnQgbG9nZ2luZyBhcyBsb2dnZXIKaW1wb3J0IGJhc2U2NAppbXBvcnQgcGFuZGFzIGFzIHBkCmltcG9ydCBza2xlYXJuCmZyb20gc2tsZWFybi5lbnNlbWJsZSBpbXBvcnQgSXNvbGF0aW9uRm9yZXN0CmltcG9ydCBwaWNrbGUKaW1wb3J0IG15c3FsLmNvbm5lY3RvciBhcyBjb25uZWN0b3IKaW1wb3J0IG9zCmltcG9ydCB0aW1lCmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCBxdW90ZV9wbHVzLCB1cmxwYXJzZQppbXBvcnQgbWxmbG93CiNmcm9tIGxlYXAudXRpbHMuVXRpbGl0aWVzIGltcG9ydCBVdGlsaXRpZXMKI2Zyb20gdXRpbHMgaW1wb3J0IFV0aWxpdGllcwoKb3MuZW52aXJvblsnSFRUUF9QUk9YWSddPScnCm9zLmVudmlyb25bJ0hUVFBTX1BST1hZJ109JycKb3MuZW52aXJvblsnaHR0cF9wcm94eSddPScnCm9zLmVudmlyb25bJ2h0dHBzX3Byb3h5J109JycKCgoKbG9nZ2VyLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dlci5JTkZPLCBmb3JtYXQ9JyUoYXNjdGltZSlzIElORk8gJShtZXNzYWdlKXMnLCBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycpCgphcmd1bWVudHMgPSBzeXMuYXJndgpteV9kaWN0ID0ge30KZm9yIGFyZyBpbiBhcmd1bWVudHM6CiAgICB0cnk6CiAgICAgICAgbXlfZGljdFthcmcuc3BsaXQoJzonKVswXV0gPSAnOicuam9pbihhcmcuc3BsaXQoJzonKVsxOl0pCiAgICBleGNlcHQ6CiAgICAgICAgYSA9ICdlcnJvcicKCgoKCgpkZWYgdHJhaW5fbW9kZWwobW9kZWwsanNvbm1ldHJpYyk6CiAgICBjdXJyZW50X3RpbWUgPSBkYXRldGltZS5kYXRldGltZS51dGNub3coKQogICAgb25lX2RheV9hZ28gPSBjdXJyZW50X3RpbWUgLSBkYXRldGltZS50aW1lZGVsdGEoZGF5cz0xKQogICAgb25lX21vbnRoX2FnbyA9IGN1cnJlbnRfdGltZSAtIGRhdGV0aW1lLnRpbWVkZWx0YShkYXlzPTMpCiAgICBzdGFydCA9IG9uZV9tb250aF9hZ28uaXNvZm9ybWF0KCkrICdaJwogICAgZW5kID0gb25lX2RheV9hZ28uaXNvZm9ybWF0KCkrICdaJwoKICAgICMgbG9nZ2VyLmluZm8oc3RhcnQpCiAgICAjIGxvZ2dlci5pbmZvKGVuZCkKCiAgICAjIEdldCB0aGUgUHJvbWV0aGV1cyBtZXRyaWNzCiAgICMgcHJvbWV0aGV1c19hcGk9ZidodHRwOi8vY3ZyaWN0bHB0bTIxOjkwOTAvYXBpL3YxL3F1ZXJ5X3JhbmdlP3F1ZXJ5PWxhYmVsX3JlcGxhY2UoJTBBJTIwJTIwbGFiZWxfcmVwbGFjZSglMEElMjAlMjBsYWJlbF9yZXBsYWNlKDEwMC1hdmcocmF0ZSh3aW5kb3dzX2NwdV90aW1lX3RvdGFsJTdCbW9kZSUzRCdpZGxlJyU3RCU1QjFtJTVEKSklMjAqJTIwMTAwJTJDJ19fbmFtZV9fJyUyQyd3aW5kb3dzX21lbW9yeV91c2FnZSclMkMnX19uYW1lX18nJTJDJycpJTJDJ2luc3RhbmNlJyUyQydudWxsJyUyQydpbnN0YW5jZSclMkMnJyUwQSklMEElMkMnam9iJyUyQydudWxsJyUyQydqb2InJTJDJyclMEEpJnN0YXJ0PXtzdGFydH0mZW5kPXtlbmR9JnN0ZXA9MTBzJwogICAjIHByb21ldGhldXNfYXBpPWYnaHR0cDovL2N2cmljdGxwdG0yMTo5MDkwL2FwaS92MS9xdWVyeV9yYW5nZT9xdWVyeT1sYWJlbF9yZXBsYWNlKCUwQSUyMCUyMGxhYmVsX3JlcGxhY2UoJTBBJTIwJTIwbGFiZWxfcmVwbGFjZSgxMDAtYXZnKHJhdGUod2luZG93c19jcHVfdGltZV90b3RhbCU3Qm1vZGUlM0QnaWRsZSclN0QlNUIxbSU1RCkpJTIwKiUyMDEwMCUyQydfX25hbWVfXyclMkMnd2luZG93c19tZW1vcnlfdXNhZ2UnJTJDJ19fbmFtZV9fJyUyQycnKSUyQydpbnN0YW5jZSclMkMnbnVsbCclMkMnaW5zdGFuY2UnJTJDJyclMEEpJTBBJTJDJ2pvYiclMkMnbnVsbCclMkMnam9iJyUyQycnJTBBKSZzdGFydD17c3RhcnR9JmVuZD17ZW5kfSZzdGVwPTEwcycKICAgIHByb21ldGhldXNfYXBpPWYnaHR0cDovL2N2cmljdGxwdG0yMTo5MDkwL2FwaS92MS9xdWVyeV9yYW5nZT9xdWVyeT1sYWJlbF9yZXBsYWNlKCUwQSUyMCUyMGxhYmVsX3JlcGxhY2UoJTBBJTIwJTIwbGFiZWxfcmVwbGFjZSgxMDAtYXZnKHJhdGUod2luZG93c19jcHVfdGltZV90b3RhbCU3Qm1vZGUlM0RcJ2lkbGVcJyU3RCU1QjFtJTVEKSklMjAqJTIwMTAwJTJDXCdfX25hbWVfX1wnJTJDXCd3aW5kb3dzX21lbW9yeV91c2FnZVwnJTJDXCdfX25hbWVfX1wnJTJDXCdcJyklMkNcJ2luc3RhbmNlXCclMkNcJ251bGxcJyUyQ1wnaW5zdGFuY2VcJyUyQ1wnXCclMEEpJTBBJTJDXCdqb2JcJyUyQ1wnbnVsbFwnJTJDXCdqb2JcJyUyQ1wnXCclMEEpJnN0YXJ0PXtzdGFydH0mZW5kPXtlbmR9JnN0ZXA9MTBzJwogICAjIHByb21ldGhldXNfYXBpID0gZidodHRwOi8vY3ZyaWN0bHB0bTIxOjkwOTAvYXBpL3YxL3F1ZXJ5X3JhbmdlP3F1ZXJ5PWxhYmVsX3JlcGxhY2UoezBBfSUyMCUyMGxhYmVsX3JlcGxhY2UoezBBfSUyMCUyMGxhYmVsX3JlcGxhY2UoMTAwLWF2ZyhyYXRlKHdpbmRvd3NfY3B1X3RpbWVfdG90YWx7bW9kZT0naWRsZSd9WzFtXSkpJTIwKiUyMDEwMCUyQydfX25hbWVfXyclMkMnd2luZG93c19tZW1vcnlfdXNhZ2UnJTJDJ19fbmFtZV9fJyUyQycnKSUyQydpbnN0YW5jZSclMkMnbnVsbCclMkMnaW5zdGFuY2UnJTJDJyd7MEF9JTJDJ2pvYiclMkMnbnVsbCclMkMnam9iJyUyQycnezBBfSkmc3RhcnQ9e3N0YXJ0fSZlbmQ9e2VuZH0mc3RlcD0xMHMnCiAgICBsb2dnZXIuaW5mbygicHJpbnRpbmcgbG9nIikKICAgICMgbG9nZ2VyLmluZm8ocHJvbWV0aGV1c19hcGkpCiAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldChwcm9tZXRoZXVzX2FwaSkKCiAgICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQocHJvbWV0aGV1c19hcGkpCiAgICBlbHNlOgogICAgICAgIHJlc3BvbnNlID0gJ05vIGRhdGEgYXZhaWxhYmxlJwoKICAgIGpzb25fZGF0YSA9IGpzb24ubG9hZHMocmVzcG9uc2UuY29udGVudCkKICAgIGRhdGEgPSBqc29uX2RhdGFbJ2RhdGEnXQogICAgcmVzdWx0PWRhdGFbJ3Jlc3VsdCddCgogICAgZm9yIGl0ZW0gaW4gcmVzdWx0OgogICAgICAgIGlmKGl0ZW1bJ21ldHJpYyddPT1qc29ubWV0cmljKToKICAgICAgICAgICAgbW9kZWwuZml0KGl0ZW1bJ3ZhbHVlcyddKQogICAgcmV0dXJuIG1vZGVsCgoKbWxmbG93LnNldF90cmFja2luZ191cmkoJ2h0dHA6Ly8xMC44MS43NC4yNDI6NTAwMS8nKQptb2RlbD1Jc29sYXRpb25Gb3Jlc3QoY29udGFtaW5hdGlvbj0wLjAxKQptb2RlbCA9IHRyYWluX21vZGVsKG1vZGVsLGpzb25tZXRyaWMpCm1sZmxvdy5sb2dfbW9kZWwobW9kZWwsICJtb2RlbCIsIHNpZ25hdHVyZT1TSUdOQVRVUkUpCgo=","leo1311"
"LEOEVNT_29428","LEOEVNT_29428_leo1311.py","aW1wb3J0IHJlcXVlc3RzCmltcG9ydCBqc29uCmltcG9ydCByYW5kb20KaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyCmltcG9ydCBvcwppbXBvcnQgZGF0ZXRpbWUKaW1wb3J0IHN5cwppbXBvcnQgcmUKaW1wb3J0IHRpbWUKaW1wb3J0IG15c3FsLmNvbm5lY3RvciBhcyBjb25uZWN0b3IKaW1wb3J0IHV1aWQKCmxvZ2dlci5iYXNpY0NvbmZpZygKICAgIGxldmVsPWxvZ2dlci5JTkZPLAogICAgZm9ybWF0PSclKGFzY3RpbWUpcyBJTkZPICUobWVzc2FnZSlzJywKICAgIGRhdGVmbXQ9JyV5LyVtLyVkICVIOiVNOiVTJywKKQoKYXBpX3VybD0naHR0cHM6Ly9sZWFwNzo0MDA2L2FwaS9ldmVudC90cmlnZ2VyL3JhYmJpdG1xX2VtZj9vcmc9bGVvMTMxMSZjb3JlbGlkPSZkYXRhc291cmNlTmFtZT1MRUFMQ0xDTDEyMTMyJwpoZWFkZXJzID0gIHsnQ29udGVudC1UeXBlJzonYXBwbGljYXRpb24vanNvbid9CgojU2V0dGluZyBOb3Byb3h5CiNvcy5lbnZpcm9uWydIVFRQX1BST1hZJ109JycKI29zLmVudmlyb25bJ0hUVFBTX1BST1hZJ109JycKI29zLmVudmlyb25bJ2h0dHBfcHJveHknXT0nJwojb3MuZW52aXJvblsnaHR0cHNfcHJveHknXT0nJwpvcy5lbnZpcm9uWydIVFRQX1BST1hZJ109J2JscnByb3h5LmFkLmluZm9zeXMuY29tOjQ0MycKIApvcy5lbnZpcm9uWydIVFRQU19QUk9YWSddPSdibHJwcm94eS5hZC5pbmZvc3lzLmNvbTo0NDMnCgppbnN0YW5jZT1bImxlYXAzLXN2LWluc3RhbmNlMSIsImxlYXAzLXVpLWluc3RhbmNlMSIsImxlYXAxLXN2LWluc3RhbmNlMSIsImxlYXAxLXVpLWluc3RhbmNlMSIsImxlYXAyLXN2LWluc3RhbmNlMSIsImxlYXAyLXVpLWluc3RhbmNlMSJdCmNpX25hbWU9WyJFTUYiLCJEQlMiLCJMRUFQIENvbW1vbiBBcHAiLCJMRUFQIEZpbGUgU2VydmVyIiwiTEVBUCBKb2IgRXhlY3V0b3IiLCJDSVAiLCJDQVMiXQoKIyBwcm9jZXNzX2NwdV91c2FnZSwKIyBzcHJpbmdfc2VjdXJpdHlfaHR0cF91bnNlY3VyZWRfcmVxdWVzdHNfYWN0aXZlX3NlY29uZHMKIyBzcHJpbmdfc2VjdXJpdHlfZmlsdGVyY2hhaW5zX3NlY29uZHNfY291bnQKIyBqdm1fZ2NfbWVtb3J5X2FsbG9jYXRlZF9ieXRlc190b3RhbAoKY2lfbWV0cmljTWFwPXsKICAgICJFTUYiOlsicHJvY2Vzc19jcHVfdXNhZ2UiLCJodHRwX3NlcnZlcl9yZXF1ZXN0c19zZWNvbmRzX2NvdW50IiwianZtX2djX21lbW9yeV9hbGxvY2F0ZWRfYnl0ZXNfdG90YWwiXSwKICAgICJEQlMiOlsicHJvY2Vzc19jcHVfdXNhZ2UiLCJodHRwX3NlcnZlcl9yZXF1ZXN0c19zZWNvbmRzX2NvdW50IiwianZtX2djX21lbW9yeV9hbGxvY2F0ZWRfYnl0ZXNfdG90YWwiXSwKICAgICJMRUFQIENvbW1vbiBBcHAiOlsicHJvY2Vzc19jcHVfdXNhZ2UiLCJodHRwX3NlcnZlcl9yZXF1ZXN0c19zZWNvbmRzX2NvdW50IiwianZtX2djX21lbW9yeV9hbGxvY2F0ZWRfYnl0ZXNfdG90YWwiXSwKICAgICJMRUFQIEZpbGUgU2VydmVyIjpbInByb2Nlc3NfY3B1X3VzYWdlIiwiaHR0cF9zZXJ2ZXJfcmVxdWVzdHNfc2Vjb25kc19jb3VudCIsImp2bV9nY19tZW1vcnlfYWxsb2NhdGVkX2J5dGVzX3RvdGFsIl0sCiAgICAiTEVBUCBKb2IgRXhlY3V0b3IiOlsicHJvY2Vzc19jcHVfdXNhZ2UiLCJodHRwX3NlcnZlcl9yZXF1ZXN0c19zZWNvbmRzX2NvdW50IiwianZtX2djX21lbW9yeV9hbGxvY2F0ZWRfYnl0ZXNfdG90YWwiXSwKICAgICJDSVAiOlsicHJvY2Vzc19jcHVfdXNhZ2UiLCJodHRwX3NlcnZlcl9yZXF1ZXN0c19zZWNvbmRzX2NvdW50IiwianZtX2djX21lbW9yeV9hbGxvY2F0ZWRfYnl0ZXNfdG90YWwiXSwKICAgICJDQVMiOlsicHJvY2Vzc19jcHVfdXNhZ2UiLCJodHRwX3NlcnZlcl9yZXF1ZXN0c19zZWNvbmRzX2NvdW50IiwianZtX2djX21lbW9yeV9hbGxvY2F0ZWRfYnl0ZXNfdG90YWwiXSwKfQoKYWxlcnRfbWVzc2FnZT1bIkVycm9yIDEiLCAiRXJyb3IgMiIsICJFcnJvciAzIiwgIkVycm9yIDQiXQptZXRyaWNzID0gWyJtZXRyaWMgMSIsICJtZXRyaWMgMiIsICJtZXRyaWMgMyIsICJtZXRyaWMgNCJdCm1ldHJpY19WYWx1ZT1bNTAsNjAsNzAsODAsOTAsNjUsNTUsNzUsNzUsOTVdCgphbGVydF9FdmVudHM9W10KCmZvciBpIGluIHJhbmdlKDIpOgogICAgaW5zdGFuY2VfaW5kZXggPSByYW5kb20ucmFuZGludCgwLGxlbihpbnN0YW5jZSktMSkKICAgIGNpX25hbWVfaW5kZXggPSByYW5kb20ucmFuZGludCgwLGxlbihjaV9uYW1lKS0xKQogICAgYWxlcnRfbWVzc2FnZV9pbmRleCA9IHJhbmRvbS5yYW5kaW50KDAsbGVuKGFsZXJ0X21lc3NhZ2UpLTEpCiAgICBtZXRyaWNzX2luZGV4ID0gcmFuZG9tLnJhbmRpbnQoMCxsZW4obWV0cmljcyktMSkKICAgIG1ldHJpY19WYWx1ZV9pbmRleCA9IHJhbmRvbS5yYW5kaW50KDAsbGVuKG1ldHJpY19WYWx1ZSktMSkKICAgIAogICAgaW5zdGFuY2VfdmFsdWU9aW5zdGFuY2VbaW5zdGFuY2VfaW5kZXhdCiAgICBjaV9uYW1lX3ZhbHVlPWNpX25hbWVbY2lfbmFtZV9pbmRleF0KICAgIG1ldHJpY3NfbmFtZT0gcmFuZG9tLmNob2ljZShjaV9tZXRyaWNNYXBbY2lfbmFtZV92YWx1ZV0pCiAgICBhbGVydF9tZXNzYWdlX3ZhbHVlPWFsZXJ0X21lc3NhZ2VbYWxlcnRfbWVzc2FnZV9pbmRleF0KICAgICMgbWV0cmljc19uYW1lPW1ldHJpY3NbbWV0cmljc19pbmRleF0KICAgIG1ldHJpY192YWx1ZT1tZXRyaWNfVmFsdWVbbWV0cmljX1ZhbHVlX2luZGV4XQogICAgbm93ID0gZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkKICAgIHN0YXJ0X3RpbWU9IG5vdyAtIGRhdGV0aW1lLnRpbWVkZWx0YShtaW51dGVzPTUpCiAgICBlbmRfdGltZT1ub3cKICAgIAogICAgc3RhcnRfdHM9IHN0YXJ0X3RpbWUudGltZXN0YW1wKCkKICAgIGVuZF90cz0gZW5kX3RpbWUudGltZXN0YW1wKCkKICAgIAogICAgcmFuZG9tX3RzPSByYW5kb20udW5pZm9ybShzdGFydF90cywgZW5kX3RzKQogICAgCiAgICByYW5kb21fZHQgPSBkYXRldGltZS5kYXRldGltZS5mcm9tdGltZXN0YW1wKHJhbmRvbV90cykKICAgIGZvcm1hdCA9ICIlWS0lbS0lZCAlSDolTTolUyIKICAgIGRhdGVUaW1lVmFsdWU9cmFuZG9tX2R0LnN0cmZ0aW1lKGZvcm1hdCkKICAgIGxvZ2dlci5pbmZvKGRhdGVUaW1lVmFsdWUpCiAgICB3b3JrZmxvd19wYXJhbVZhbHVlPWluc3RhbmNlX3ZhbHVlKyIgIiArIGNpX25hbWVfdmFsdWUgKyIgIisgZGF0ZVRpbWVWYWx1ZQogICAgYWxlcnRfZXZlbnQgPXsKICAgICAgICAiaW5zdGFuY2UiOiBpbnN0YW5jZV92YWx1ZSwKICAgICAgICAiY2lfbmFtZSI6IGNpX25hbWVfdmFsdWUsCiAgICAgICAgImRhdGVfdGltZSI6IGRhdGVUaW1lVmFsdWUsCiAgICAgICAgImFsZXJ0X21lc3NhZ2UiOiAibWV0cmljIGlzIGJyZWFjaGluZyB0aGUgdGhyZXNob2xkIGxpbWl0IiwKICAgICAgICAiZXJyb3JfbWVzc2FnZSI6ICIiLAogICAgICAgICJtZXRyaWMiOiBtZXRyaWNzX25hbWUsCiAgICAgICAgIm1ldHJpY192YWx1ZSI6IG1ldHJpY192YWx1ZSwKICAgICAgICAiaXRzbV9udW1iZXIiOiAiIiwKICAgICAgICAiaXRzbV9zeXN0ZW0iOiAiU2VydmljZSBOb3ciLAogICAgICAgICJpdHNtX2xpbmsiOiAiIiwKICAgICAgICAiY2F1c2UiOiIiLAogICAgICAgICJ3b3JrZmxvd19wYXJhbSI6IHdvcmtmbG93X3BhcmFtVmFsdWUsCiAgICAgICAgImRlc2NyaXB0aW9uIjoiIgogICAgICAgIH0KICAgICMgYWxlcnRfRXZlbnRzLmFwcGVuZChhbGVydF9ldmVudCkKICAgIAoKIyBsb2dnZXIuaW5mbyhhbGVydF9FdmVudHMpCiMgYWxlcnRqc29uID0ge30KIyAgICAgICAgICAgICBhbGVydGpzb25bJ2luc3RhbmNlX2RhdGV0aW1lJ109aW5zdGFuY2VfZGF0ZQojICAgICAgICAgICAgIGFsZXJ0anNvblsnc3RhdHVzJ109J2ZpcmluZycKIyAgICAgICAgICAgICBsYWJlbHM9e30KIyAgICAgICAgICAgICBsYWJlbHNbJ2luc3RhbmNlJ10gPSBpbnN0YW5jZQojICAgICAgICAgICAgIGxhYmVsc1snYWxlcnRuYW1lJ109ICBfX25hbWVfXwojICAgICAgICAgICAgIGxhYmVsc1snam9iJ10gPSBqb2IKIyAgICAgICAgICAgICBhbGVydGpzb25bJ2xhYmVscyddID0gbGFiZWxzCiMgICAgICAgICAgICAgYWxlcnRqc29uWydkZXNjcmlwdGlvbiddPSdBbm9tYWx5IGRldGVjdGVkIGZvciBXaW5kb3dzIHByb2Nlc3NfY3B1X3VzYWdlIGF0IG1ldHJpYyB2YWx1ZS0gJytzdHIoaXRlbTJbMV0gKydhdCB0aW1lc3RhbXAgJytzdHIoaXRlbTJbMF0pKQojICAgICAgICAgICAgIGFsZXJ0anNvblsnbWV0cmljX3ZhbHVlJ109ZmxvYXQoaXRlbTJbMV0pCiMgICAgICAgICAgICAgYWxlcnRqc29uWydhY3Rpb25hYmxlJ109J1RydWUnCiMgICAgICAgICAgICAgaWYoZmxvYXQoaXRlbTJbMV0pPDUwKToKIyAgICAgICAgICAgICAgIGFsZXJ0anNvblsnYWN0aW9uYWJsZSddPSdGYWxzZScKICAgICAgICAgICAgCiAgICAgICAgICAgIAojICAgICAgICAgICAgIGlmKGZsb2F0KGl0ZW0yWzFdKT41MCk6CiMgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKCd0aHJlc2hvbGQgYnJlYWNoZWQnKQoKICAgIGRhdGEgPScnJ3t9JycnCiAgICAgICAgICAgIAogICAgcXVlcnlqc29uID0ganNvbi5sb2FkcyhkYXRhKQogICAgcXVlcnlqc29uWydldmVudElkJ10gPSdldmVudCcrc3RyKHN0cihkYXRldGltZS5kYXRldGltZS5ub3coKS50aW1lc3RhbXAoKSkucmVwbGFjZSgnLicsICcnKSkKICAgIHF1ZXJ5anNvblsnZXZlbnRUeXBlTmFtZSddID0nUmVjZWl2ZUV2ZW50JwogICAgcXVlcnlqc29uWydjb250ZXh0J109YWxlcnRfZXZlbnQKICAgIHF1ZXJ5anNvbjI9anNvbi5sb2FkcyhkYXRhKQogICAgcXVlcnlqc29uMlsnYm9keSddPXF1ZXJ5anNvbgogICAgbG9nZ2VyLmluZm8ocXVlcnlqc29uMikKICAgIGxvZ2dlci5pbmZvKCdjYWxsaW5nIHBpcGVsaW5lJykKCgogICAgb3MuZW52aXJvblsnSFRUUF9QUk9YWSddPScnCiAgICBvcy5lbnZpcm9uWydIVFRQU19QUk9YWSddPScnCiAgICBvcy5lbnZpcm9uWydodHRwX3Byb3h5J109JycKICAgIG9zLmVudmlyb25bJ2h0dHBzX3Byb3h5J109JycKCiAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoYXBpX3VybCwgZGF0YT1qc29uLmR1bXBzKHF1ZXJ5anNvbjIpLCBoZWFkZXJzPWhlYWRlcnMsdmVyaWZ5PUZhbHNlKQogICAgbG9nZ2VyLmluZm8ocmVzcG9uc2UucmFpc2VfZm9yX3N0YXR1cygpKQpsb2dnZXIuaW5mbygiY29tcGxldGVkIikKCgoKCgo=","leo1311"
"LEOSNWTS90860","LEOSNWTS90860_leo1311.py","","leo1311"
"LEOITSMR86704","LEOITSMR86704_leo1311.py","aW1wb3J0IHJlcXVlc3RzCgppbXBvcnQganNvbgoKaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyCmltcG9ydCBvcwppbXBvcnQgZGF0ZXRpbWUKaW1wb3J0IHN5cwppbXBvcnQgcmUKaW1wb3J0IHRpbWUKaW1wb3J0IG15c3FsLmNvbm5lY3RvciBhcyBjb25uZWN0b3IKZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHF1b3RlX3BsdXMsIHVybHBhcnNlCmZyb20gbGVhcC51dGlscy5VdGlsaXRpZXMgaW1wb3J0IFV0aWxpdGllcwpmcm9tIHB5c3Bhcmsuc3FsIGltcG9ydCBTcGFya1Nlc3Npb24KCm9zLmVudmlyb25bJ0hUVFBfUFJPWFknXT0nJwogCm9zLmVudmlyb25bJ0hUVFBTX1BST1hZJ109JycKCiNpbnN0YW5jZV9kYXRldGltZT0nd2luZG93c19tZW1vcnlfdXNhZ2UxIG51bGwgMjAuMCcKCmxvZ2dlci5iYXNpY0NvbmZpZygKICAgIGxldmVsPWxvZ2dlci5JTkZPLAogICAgZm9ybWF0PSclKGFzY3RpbWUpcyBJTkZPICUobWVzc2FnZSlzJywKICAgIGRhdGVmbXQ9JyV5LyVtLyVkICVIOiVNOiVTJywKKQoKYXJndW1lbnRzID0gc3lzLmFyZ3YKbXlfZGljdCA9IHt9CmZvciBhcmcgaW4gYXJndW1lbnRzOgogICAgdHJ5OgogICAgICAgIG15X2RpY3RbYXJnLnNwbGl0KCc6JylbMF1dID0gJzonLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQogICAgZXhjZXB0OgogICAgICAgIGEgPSAnZXJyb3InCiAKIApsb2dnZXIuaW5mbygnUmVhZGluZyBpbnN0YW5jZV9kYXRldGltZTonKQpsb2dnZXIuaW5mbyhteV9kaWN0WydpbnN0YW5jZV9kYXRldGltZSddKQppbnN0YW5jZV9kYXRldGltZT1teV9kaWN0WydpbnN0YW5jZV9kYXRldGltZSdd","leo1311"
"LEOACTNB43073","LEOACTNB43073_leo1311.py","aW1wb3J0IHN5cwppbXBvcnQganNvbgppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IGRhdGV0aW1lCiMgaW1wb3J0IHB5bW9uZ28gCmltcG9ydCBsb2dnaW5nIGFzIGxvZ2dlcgppbXBvcnQgYmFzZTY0CiMgaW1wb3J0IHBhbmRhcyBhcyBwZAojIGltcG9ydCBza2xlYXJuCiMgZnJvbSBza2xlYXJuLmVuc2VtYmxlIGltcG9ydCBJc29sYXRpb25Gb3Jlc3QKIyBpbXBvcnQgcGlja2xlCmltcG9ydCBteXNxbC5jb25uZWN0b3IgYXMgY29ubmVjdG9yCmltcG9ydCBvcwppbXBvcnQgdGltZQojIGZyb20gdXJsbGliLnBhcnNlIGltcG9ydCBxdW90ZV9wbHVzLCB1cmxwYXJzZQojZnJvbSBsZWFwLnV0aWxzLlV0aWxpdGllcyBpbXBvcnQgVXRpbGl0aWVzCiNmcm9tIHV0aWxzIGltcG9ydCBVdGlsaXRpZXMKCm9zLmVudmlyb25bJ0hUVFBfUFJPWFknXT0nJwpvcy5lbnZpcm9uWydIVFRQU19QUk9YWSddPScnCm9zLmVudmlyb25bJ2h0dHBfcHJveHknXT0nJwpvcy5lbnZpcm9uWydodHRwc19wcm94eSddPScnCgphcGlfdXJsID0gJ2h0dHBzOi8vbGVhcDc6NDAwNi9hcGkvZXZlbnQvdHJpZ2dlci9SYWJiaXRtcV9lbWY/b3JnPWxlbzEzMTEmY29yZWxpZD0mZGF0YXNvdXJjZU5hbWU9TEVBTENMQ0wxMjEzMicKaGVhZGVycyA9ICB7J0NvbnRlbnQtVHlwZSc6J2FwcGxpY2F0aW9uL2pzb24nfQoKbG9nZ2VyLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dlci5JTkZPLCBmb3JtYXQ9JyUoYXNjdGltZSlzIElORk8gJShtZXNzYWdlKXMnLCBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycpCgphcmd1bWVudHMgPSBzeXMuYXJndgpteV9kaWN0ID0ge30KZm9yIGFyZyBpbiBhcmd1bWVudHM6CiAgICB0cnk6CiAgICAgICAgbXlfZGljdFthcmcuc3BsaXQoJzonKVswXV0gPSAnOicuam9pbihhcmcuc3BsaXQoJzonKVsxOl0pCiAgICBleGNlcHQ6CiAgICAgICAgYSA9ICdlcnJvcicKCmFsZXJ0anNvbj1teV9kaWN0CgpkYXRhID0nJyd7fScnJwpxdWVyeWpzb24gPSBqc29uLmxvYWRzKGRhdGEpCnF1ZXJ5anNvblsnZXZlbnRJZCddID0nZXZlbnQnK3N0cihzdHIoZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkudGltZXN0YW1wKCkpLnJlcGxhY2UoJy4nLCAnJykpCnF1ZXJ5anNvblsnZXZlbnRUeXBlTmFtZSddID0nRGVkdXBsaWNhdGUgZXZlbnQnCnF1ZXJ5anNvblsnY29udGV4dCddPWFsZXJ0anNvbgpsb2dnZXIuaW5mbyhxdWVyeWpzb24pCnF1ZXJ5anNvbjI9anNvbi5sb2FkcyhkYXRhKQpxdWVyeWpzb24yWydib2R5J109cXVlcnlqc29uCnJlc3BvbnNlID0gcmVxdWVzdHMucG9zdChhcGlfdXJsLCBkYXRhPWpzb24uZHVtcHMocXVlcnlqc29uMiksIGhlYWRlcnM9aGVhZGVycyx2ZXJpZnk9RmFsc2UpCmxvZ2dlci5pbmZvKHJlc3BvbnNlLnJhaXNlX2Zvcl9zdGF0dXMoKSkK","leo1311"
