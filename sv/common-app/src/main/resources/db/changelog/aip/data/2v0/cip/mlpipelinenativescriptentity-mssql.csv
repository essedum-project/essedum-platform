cname,filename,filescript,organization
ACMKYPHR40814,ACMKYPHR40814_leo1311.py,aW1wb3J0IHB5b2RiYwppbXBvcnQgbG9nZ2luZwppbXBvcnQgc3lzCmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCBxdW90ZV9wbHVzLCB1cmxwYXJzZQpmcm9tIGxlYXAudXRpbHMuVXRpbGl0aWVzIGltcG9ydCBVdGlsaXRpZXMKZnJvbSBza2xlYXJuLmZlYXR1cmVfZXh0cmFjdGlvbi50ZXh0IGltcG9ydCBUZmlkZlZlY3Rvcml6ZXIKaW1wb3J0IG51bXB5IGFzIG5wCmltcG9ydCB0aW1laXQKaW1wb3J0IGpzb24KaW1wb3J0IHJlCgpsb2dnaW5nLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dpbmcuSU5GTywgZm9ybWF0PSclKGFzY3RpbWUpcyBJTkZPICUobWVzc2FnZSlzJywgZGF0ZWZtdD0nJXkvJW0vJWQgJUg6JU06JVMnKQoKYXJndW1lbnRzID0gc3lzLmFyZ3YKCmRpY3QgPSB7fQpmb3IgYXJnIGluIGFyZ3VtZW50czoKICAgIHRyeToKICAgICAgICBkaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICgnOicpLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQogICAgZXhjZXB0OgogICAgICAgIGEgPSAnZXJyb3InCgoKZGVmIGdldFNpbWlsYXIoc2VudGVuY2VzLCBrZXl3b3Jkcyk6CiAgICBjb3JwdXMgPSBzZW50ZW5jZXMgKyBrZXl3b3JkcwogICAga2V5d29yZHN0YXJ0SW5kZXggPSBsZW4oc2VudGVuY2VzKQogICAgdGZpZGZDb3JwdXMgPSBUZmlkZlZlY3Rvcml6ZXIobWluX2RmPTEsIHN0b3Bfd29yZHM9J2VuZ2xpc2gnKS5maXRfdHJhbnNmb3JtKGNvcnB1cykKICAgIHBhaXJ3aXNlX3NpbWlsYXJpdHkgPSB0ZmlkZkNvcnB1cyAqIHRmaWRmQ29ycHVzLlQKICAgIGFyciA9IHBhaXJ3aXNlX3NpbWlsYXJpdHkudG9hcnJheSgpCiAgICBucC5maWxsX2RpYWdvbmFsKGFyciwgbnAubmFuKQogICAgcmVzdWx0cyA9IHt9CiAgICBmb3IgcyBpbiBzZW50ZW5jZXM6CiAgICAgICAgaW5wdXRfaWR4ID0gc2VudGVuY2VzLmluZGV4KHMpCiAgICAgICAgcmVzdWx0X2lkeCA9IG5wLm5hbmFyZ21heChhcnJbaW5wdXRfaWR4XVtrZXl3b3Jkc3RhcnRJbmRleDpdKQogICAgICAgIG1hdGNoID0gYXJyW2lucHV0X2lkeF1ba2V5d29yZHN0YXJ0SW5kZXggKyByZXN1bHRfaWR4XQogICAgICAgIHIgPSBrZXl3b3Jkc1tyZXN1bHRfaWR4XQogICAgICAgIGlmIG1hdGNoID4gMDoKICAgICAgICAgICAgcmVzdWx0c1tzXSA9IHIgKyAnOicgKyBzdHIobWF0Y2gpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmVzdWx0c1tzXSA9ICdOTyBNQVRDSDowJwogICAgcmV0dXJuIHJlc3VsdHMKCgpsZWFwZHMgPSBkaWN0WydMRUFQRFMnXQpsZWFwRFNkaWN0ID0ganNvbi5sb2FkcyhsZWFwZHMpCgp1c2VybmFtZSA9IGxlYXBEU2RpY3RbJ3VzZXJOYW1lJ10KcGFzc3dvcmQgPSBVdGlsaXRpZXMuZGVjcnlwdChsZWFwRFNkaWN0WydwYXNzd29yZCddLGxlYXBEU2RpY3RbJ3NhbHQnXSkKc2VydmVyID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5uZXRsb2Muc3BsaXQoJzsnLCAxKVswXQpyZWdleCA9ICdeKCgyNVswLTVdfDJbMC00XVswLTldfDFbMC05XVswLTldfFsxLTldP1swLTldKVwuKXszfSgyNVswLTVdfDJbMC00XVswLTldfDFbMC05XVswLTldfFsxLTldP1swLTldKSQnCgppZihyZS5zZWFyY2gocmVnZXgsIHNlcnZlci5zcGxpdCgnOicpWzBdKSk6CiAgICBzZXJ2ZXI9c2VydmVyLnJlcGxhY2UoJzonLCcsJykKCmRhdGFiYXNlID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5uZXRsb2Muc3BsaXQoJzsnLCAxKVsxXS5zcGxpdCgnPScsMSlbMV0KY29ubmVjdGlvblN0cmluZyA9ICdEUklWRVI9ezB9O1NFUlZFUj17MX07ICcgXAogICAgICAgICAgICAgICAgICAgICAgICAgICAnREFUQUJBU0U9ezJ9O1VJRD17M307UFdEPXs0fScuZm9ybWF0KAogICAgICAgICAgICAnT0RCQyBEcml2ZXIgMTcgZm9yIFNRTCBTRVJWRVInLCBzZXJ2ZXIsIGRhdGFiYXNlLCB1c2VybmFtZSwgcGFzc3dvcmQpCmNueCA9IHB5b2RiYy5jb25uZWN0KGNvbm5lY3Rpb25TdHJpbmcpCm15Y3Vyc29yID0gY254LmN1cnNvcigpClRhYmxlTmFtZSA9IGRpY3RbJ1RhYmxlTmFtZSddCkVBU0VNYXBwaW5nID0gZGljdFsnRWFzZU1hcHBpbmcnXQpzcWwgPSAnJydTRUxFQ1QgRElTVElOQ1QgVFJJTShDQVNUKGV4dHJhY3RlZF9waHJhc2UgQVMgQ0hBUikpIEFTIGV4dHJhY3RlZF9waHJhc2UgZnJvbSB7MH0gd2hlcmUgZXh0cmFjdGVkX3BocmFzZSBpcyBub3QgbnVsbCBhbmQgQ0FTVChleHRyYWN0ZWRfcGhyYXNlIGFzIGNoYXIpIDw+ICcnICAnJycuZm9ybWF0KFRhYmxlTmFtZSkKbXljdXJzb3IuZXhlY3V0ZShzcWwpCnJlc3VsdHMgPSBteWN1cnNvci5mZXRjaGFsbCgpCm15Y3Vyc29yLmNsb3NlKCkKcGhyYXNlcyA9IFtdCmZvciBpdGVtIGluIHJlc3VsdHM6CiAgICBwaHJhc2VzLmFwcGVuZChpdGVtWzBdKQoKbXljdXJzb3IyID0gY254LmN1cnNvcigpCnNxbCA9ICcnJ1NFTEVDVCBESVNUSU5DVCBLZXlfV29yZCBmcm9tIHswfScnJy5mb3JtYXQoRUFTRU1hcHBpbmcpCm15Y3Vyc29yMi5leGVjdXRlKHNxbCkKcmVzdWx0cyA9IG15Y3Vyc29yMi5mZXRjaGFsbCgpCmtleXdvcmRzID0gW10KZm9yIGl0ZW0gaW4gcmVzdWx0czoKICAgIGtleXdvcmRzLmFwcGVuZChpdGVtWzBdKQpteWN1cnNvcjIuY2xvc2UoKQoKY254LmNsb3NlKCkKCgpkZWYgZ2V0RUFTRSh0dXApOgogICAgdHJ5OgogICAgICAgIHJlc3VsdHMgPSBnZXRTaW1pbGFyKHR1cFswXSwgdHVwWzFdKQogICAgICAgIFRhYmxlTmFtZSA9IGRpY3RbJ1RhYmxlTmFtZSddCiAgICAgICAgcXVlcnkgPSAnJydVcGRhdGUgezB9IHNldCBtYXBwZWRfcGhyYXNlID0gPyAsIG1hcHBlZF9waHJhc2VfY29uZmlkZW5uY2UgPSA/ICB3aGVyZSBUUklNKENBU1QoZXh0cmFjdGVkX3BocmFzZSBBUyBDSEFSKSkgPSA/ICcnJy5mb3JtYXQoVGFibGVOYW1lKQogICAgICAgIGlucHV0ZGF0YSA9IFtdCiAgICAgICAgZm9yIHBhdHRlcm4gaW4gcmVzdWx0cy5rZXlzKCk6CiAgICAgICAgICAgIGt3ID0gcmVzdWx0c1twYXR0ZXJuXS5zcGxpdCgnOicpWzBdCiAgICAgICAgICAgIHNjb3JlID0gcmVzdWx0c1twYXR0ZXJuXS5zcGxpdCgnOicpWy0xXQogICAgICAgICAgICBpZiBrdyAhPSAnTk8gTUFUQ0gnOgogICAgICAgICAgICAgICAgaW5wdXRkYXRhLmFwcGVuZCgoa3csIHNjb3JlLCBwYXR0ZXJuKSkKICAgICAgICAKICAgICAgICBjb25uZWN0aW9uU3RyaW5nID0gJ0RSSVZFUj17MH07U0VSVkVSPXsxfTsgJyBcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICdEQVRBQkFTRT17Mn07VUlEPXszfTtQV0Q9ezR9Jy5mb3JtYXQoCiAgICAgICAgICAgICdPREJDIERyaXZlciAxNyBmb3IgU1FMIFNFUlZFUicsIHR1cFs0XSwgdHVwWzVdLCB0dXBbMl0sIHR1cFszXSkKICAgICAgICBjbnggPSBweW9kYmMuY29ubmVjdChjb25uZWN0aW9uU3RyaW5nLCBhdXRvY29tbWl0PVRydWUpCiAgICAgICAgbXljdXJzb3IgPSBjbnguY3Vyc29yKCkKICAgICAgICByZXMgPSBteWN1cnNvci5leGVjdXRlbWFueShxdWVyeSwgaW5wdXRkYXRhKQogICAgICAgIGNueC5jb21taXQoKQogICAgICAgIG15Y3Vyc29yLmNsb3NlKCkKICAgICAgICBjbnguY2xvc2UoKQogICAgICAgIHJldHVybiBUcnVlCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGV4OgogICAgICAgIGxvZ2dpbmcud2FybmluZyhleCkKICAgICAgICByZXR1cm4gRmFsc2UKCgpmcm9tIG11bHRpcHJvY2Vzc2luZy5kdW1teSBpbXBvcnQgUG9vbCBhcyBUaHJlYWRQb29sCgphdXhfdmFsID0gW10KdG90YWxsZW4gPSBsZW4ocGhyYXNlcykKbG9nZ2luZy5pbmZvKCdUb3RhbCBSZWNvcmRzOiB7MH0nLmZvcm1hdCh0b3RhbGxlbikpCnN0YXJ0ID0gMApzdGVwID0gMTAwMApmb3IgaSBpbiByYW5nZShzdGFydCwgdG90YWxsZW4sIHN0ZXApOgogICAgc3RvcCA9IGkgKyBzdGVwCiAgICBpZiAoc3RvcCA+IHRvdGFsbGVuKToKICAgICAgICBzdG9wID0gdG90YWxsZW4KICAgIHRyeToKICAgICAgICBhdXhfdmFsLmFwcGVuZCgocGhyYXNlc1tpOnN0b3BdLCBrZXl3b3JkcywgdXNlcm5hbWUsIHBhc3N3b3JkLCBzZXJ2ZXIsIGRhdGFiYXNlKSkKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBsb2dnaW5nLmluZm8oZSkKCnBvb2wgPSBUaHJlYWRQb29sKDQpCmxvZ2dpbmcuaW5mbyhsZW4oYXV4X3ZhbCkpCmxvZ2dpbmcuaW5mbygnU3RhcnRpbmcgUHJvY2VzcycpCgptYXBkYXRhID0gcG9vbC5tYXAoZ2V0RUFTRSwgYXV4X3ZhbCkKCmxvZ2dpbmcuaW5mbygnQ29tcGxldGVkJykKCgoKCgoKCgo=,leo1311