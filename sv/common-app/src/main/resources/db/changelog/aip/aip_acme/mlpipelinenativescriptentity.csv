cname,filename,filescript,organization
AnomalyDetection,AnomalyDetection_Core.py,JycnDQpUaGUgc2NyaXB0IHByaW50cyBvdXQgYWxsIHJlY29yZHMgdGhhdCBoYXZlIGFuIGFibm9ybWFsbHkgaGlnaCBhbm9tYWx5DQpzY29yZS4NCicnJw0KaW1wb3J0IG9zDQppbXBvcnQgc2h1dGlsDQppbXBvcnQgY3N2DQppbXBvcnQgZGF0ZXRpbWUNCmltcG9ydCBsb2dnaW5nDQpmcm9tIGNvbGxlY3Rpb25zIGltcG9ydCBPcmRlcmVkRGljdA0KaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyDQppbXBvcnQgcHN1dGlsDQppbXBvcnQgc3lzDQppbXBvcnQgdGltZQ0KZnJvbSBudXBpYy5mcmFtZXdvcmtzLm9wZi5tb2RlbF9mYWN0b3J5IGltcG9ydCBNb2RlbEZhY3RvcnkNCmltcG9ydCBteXNxbC5jb25uZWN0b3INCg0KbG9nZ2VyLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dlci5JTkZPLCBmb3JtYXQ9JyUoYXNjdGltZSlzIElORk8gJShtZXNzYWdlKXMnLCBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycpDQphcmd1bWVudHMgPSBzeXMuYXJndg0KDQpfQU5PTUFMWV9USFJFU0hPTEQgPSAwLjgNCiMgbWluaW11bSBtZXRyaWMgdmFsdWUgb2YgaW5wdXQNCl9JTlBVVF9NSU4gPSAwDQojIG1heGltdW0gbWV0cmljIHZhbHVlIG9mIGlucHV0DQpfSU5QVVRfTUFYID0gMTAwDQpNT0RFTF9QQVJBTVMgPSB7DQogICAgJ2luZmVyZW5jZUFyZ3MnOiB7DQogICAgICAgICdwcmVkaWN0aW9uU3RlcHMnOiBbMV0sDQogICAgICAgICdwcmVkaWN0ZWRGaWVsZCc6ICd2YWx1ZScsDQogICAgICAgICdpbnB1dFByZWRpY3RlZEZpZWxkJzogJ2F1dG8nDQogICAgfSwNCiAgICAnYWdncmVnYXRpb25JbmZvJzogew0KICAgICAgICAnc2Vjb25kcyc6IDAsDQogICAgICAgICdmaWVsZHMnOiBbXSwNCiAgICAgICAgJ21vbnRocyc6IDAsDQogICAgICAgICdkYXlzJzogMCwNCiAgICAgICAgJ3llYXJzJzogMCwNCiAgICAgICAgJ2hvdXJzJzogMCwNCiAgICAgICAgJ21pY3Jvc2Vjb25kcyc6IDAsDQogICAgICAgICd3ZWVrcyc6IDAsDQogICAgICAgICdtaW51dGVzJzogMCwNCiAgICAgICAgJ21pbGxpc2Vjb25kcyc6IDANCiAgICB9LA0KICAgICdtb2RlbCc6ICdIVE1QcmVkaWN0aW9uJywNCiAgICAndmVyc2lvbic6IDEsDQogICAgJ3ByZWRpY3RBaGVhZFRpbWUnOiBOb25lLA0KICAgICdtb2RlbFBhcmFtcyc6IHsNCiAgICAgICAgJ2luZmVyZW5jZVR5cGUnOiAnVGVtcG9yYWxBbm9tYWx5JywNCiAgICAgICAgJ3NlbnNvclBhcmFtcyc6IHsNCiAgICAgICAgICAgICdlbmNvZGVycyc6IHsNCiAgICAgICAgICAgICAgICAndGltZXN0YW1wX3RpbWVPZkRheSc6IHsNCiAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnRGF0ZUVuY29kZXInLA0KICAgICAgICAgICAgICAgICAgICAndGltZU9mRGF5JzogWw0KICAgICAgICAgICAgICAgICAgICAgICAgMjEsDQogICAgICAgICAgICAgICAgICAgICAgICA5LjQ5DQogICAgICAgICAgICAgICAgICAgIF0sDQogICAgICAgICAgICAgICAgICAgICdmaWVsZG5hbWUnOiAndGltZXN0YW1wJywNCiAgICAgICAgICAgICAgICAgICAgJ25hbWUnOiAndGltZXN0YW1wJw0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgJ3RpbWVzdGFtcF9kYXlPZldlZWsnOiBOb25lLA0KICAgICAgICAgICAgICAgICd0aW1lc3RhbXBfd2Vla2VuZCc6IE5vbmUsDQogICAgICAgICAgICAgICAgJ3ZhbHVlJzogew0KICAgICAgICAgICAgICAgICAgICAnbmFtZSc6ICd2YWx1ZScsDQogICAgICAgICAgICAgICAgICAgICdmaWVsZG5hbWUnOiAndmFsdWUnLA0KICAgICAgICAgICAgICAgICAgICAnc2VlZCc6IDQyLA0KICAgICAgICAgICAgICAgICAgICAnbnVtQnVja2V0cyc6IDEzMCwNCiAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnUmFuZG9tRGlzdHJpYnV0ZWRTY2FsYXJFbmNvZGVyJw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICAnc2Vuc29yQXV0b1Jlc2V0JzogTm9uZSwNCiAgICAgICAgICAgICd2ZXJib3NpdHknOiAwDQogICAgICAgIH0sDQogICAgICAgICdzcEVuYWJsZSc6IFRydWUsDQogICAgICAgICdzcFBhcmFtcyc6IHsNCiAgICAgICAgICAgICdzcGF0aWFsSW1wJzogJ2NwcCcsDQogICAgICAgICAgICAncG90ZW50aWFsUGN0JzogMC44LA0KICAgICAgICAgICAgJ2NvbHVtbkNvdW50JzogMjA0OCwNCiAgICAgICAgICAgICdnbG9iYWxJbmhpYml0aW9uJzogMSwNCiAgICAgICAgICAgICdpbnB1dFdpZHRoJzogMCwNCiAgICAgICAgICAgICdib29zdFN0cmVuZ3RoJzogMC4wLA0KICAgICAgICAgICAgJ251bUFjdGl2ZUNvbHVtbnNQZXJJbmhBcmVhJzogNDAsDQogICAgICAgICAgICAnc2VlZCc6IDE5NTYsDQogICAgICAgICAgICAnc3BWZXJib3NpdHknOiAwLA0KICAgICAgICAgICAgJ3NwYXRpYWxJbXAnOiAnY3BwJywNCiAgICAgICAgICAgICdzeW5QZXJtQWN0aXZlSW5jJzogMC4wMDMsDQogICAgICAgICAgICAnc3luUGVybUNvbm5lY3RlZCc6IDAuMiwNCiAgICAgICAgICAgICdzeW5QZXJtSW5hY3RpdmVEZWMnOiAwLjAwMDUNCiAgICAgICAgfSwNCiAgICAgICAgJ3RyYWluU1BOZXRPbmx5SWZSZXF1ZXN0ZWQnOiBGYWxzZSwNCiAgICAgICAgJ3RtRW5hYmxlJzogVHJ1ZSwNCiAgICAgICAgJ3RtUGFyYW1zJzogew0KICAgICAgICAgICAgJ2FjdGl2YXRpb25UaHJlc2hvbGQnOiAxMywNCiAgICAgICAgICAgICdjZWxsc1BlckNvbHVtbic6IDMyLA0KICAgICAgICAgICAgJ2NvbHVtbkNvdW50JzogMjA0OCwNCiAgICAgICAgICAgICdnbG9iYWxEZWNheSc6IDAuMCwNCiAgICAgICAgICAgICdpbml0aWFsUGVybSc6IDAuMjEsDQogICAgICAgICAgICAnaW5wdXRXaWR0aCc6IDIwNDgsDQogICAgICAgICAgICAnbWF4QWdlJzogMCwNCiAgICAgICAgICAgICdtYXhTZWdtZW50c1BlckNlbGwnOiAxMjgsDQogICAgICAgICAgICAnbWF4U3luYXBzZXNQZXJTZWdtZW50JzogMzIsDQogICAgICAgICAgICAnbWluVGhyZXNob2xkJzogMTAsDQogICAgICAgICAgICAnbmV3U3luYXBzZUNvdW50JzogMjAsDQogICAgICAgICAgICAnb3V0cHV0VHlwZSc6ICdub3JtYWwnLA0KICAgICAgICAgICAgJ3BhbUxlbmd0aCc6IDMsDQogICAgICAgICAgICAncGVybWFuZW5jZURlYyc6IDAuMSwNCiAgICAgICAgICAgICdwZXJtYW5lbmNlSW5jJzogMC4xLA0KICAgICAgICAgICAgJ3NlZWQnOiAxOTYwLA0KICAgICAgICAgICAgJ3RlbXBvcmFsSW1wJzogJ2NwcCcsDQogICAgICAgICAgICAndmVyYm9zaXR5JzogMA0KICAgICAgICB9LA0KICAgICAgICAnY2xFbmFibGUnOiBGYWxzZSwNCiAgICAgICAgJ2NsUGFyYW1zJzogew0KICAgICAgICAgICAgJ2FscGhhJzogMC4wMzU4Mjg5MzM2MTIxNTc5OTgsDQogICAgICAgICAgICAncmVnaW9uTmFtZSc6ICdTRFJDbGFzc2lmaWVyUmVnaW9uJywNCiAgICAgICAgICAgICdzdGVwcyc6ICcxJywNCiAgICAgICAgICAgICd2ZXJib3NpdHknOiAwDQogICAgICAgIH0sDQogICAgICAgICdhbm9tYWx5UGFyYW1zJzogew0KICAgICAgICAgICAgJ2Fub21hbHlDYWNoZVJlY29yZHMnOiBOb25lLA0KICAgICAgICAgICAgJ2F1dG9EZXRlY3RUaHJlc2hvbGQnOiBOb25lLA0KICAgICAgICAgICAgJ2F1dG9EZXRlY3RXYWl0UmVjb3Jkcyc6IDUwMzANCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KDQpkZWYgX3NldFJhbmRvbUVuY29kZXJSZXNvbHV0aW9uKG1pblJlc29sdXRpb249MC4wMDEpOg0KICAgICcnJw0KICAgIEdpdmVuIG1vZGVsIHBhcmFtcywgZmlndXJlIG91dCB0aGUgY29ycmVjdCByZXNvbHV0aW9uIGZvciB0aGUNCiAgICBSYW5kb21EaXN0cmlidXRlZCBlbmNvZGVyLiBNb2RpZmllcyBwYXJhbXMgaW4gcGxhY2UuDQogICAgJycnDQogICAgZW5jb2RlciA9ICgNCiAgICAgICAgTU9ERUxfUEFSQU1TWydtb2RlbFBhcmFtcyddWydzZW5zb3JQYXJhbXMnXVsnZW5jb2RlcnMnXVsndmFsdWUnXQ0KICAgICkNCg0KICAgIGlmIGVuY29kZXJbJ3R5cGUnXSA9PSAnUmFuZG9tRGlzdHJpYnV0ZWRTY2FsYXJFbmNvZGVyJzoNCiAgICAgICAgcmFuZ2VQYWRkaW5nID0gYWJzKF9JTlBVVF9NQVggLSBfSU5QVVRfTUlOKSAqIDAuMg0KICAgICAgICBtaW5WYWx1ZSA9IF9JTlBVVF9NSU4gLSByYW5nZVBhZGRpbmcNCiAgICAgICAgbWF4VmFsdWUgPSBfSU5QVVRfTUFYICsgcmFuZ2VQYWRkaW5nDQogICAgICAgIHJlc29sdXRpb24gPSBtYXgobWluUmVzb2x1dGlvbiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAobWF4VmFsdWUgLSBtaW5WYWx1ZSkgLyBlbmNvZGVyLnBvcCgnbnVtQnVja2V0cycpDQogICAgICAgICAgICAgICAgICAgICAgICAgKQ0KICAgICAgICBlbmNvZGVyWydyZXNvbHV0aW9uJ10gPSByZXNvbHV0aW9uDQoNCg0KZGVmIGNyZWF0ZU1vZGVsKCk6DQogICAgX3NldFJhbmRvbUVuY29kZXJSZXNvbHV0aW9uKCkNCiAgICAjIHJldHVybiBNb2RlbEZhY3RvcnkuY3JlYXRlKG1vZGVsX3BhcmFtcy5NT0RFTF9QQVJBTVMpDQoNCg0KZGVmIHJ1bkFub21hbHlEZXRlY3Rpb24oKToNCg0KICAgIGdsb2JhbCBtYXRyaWNlc3R5cGUNCg0KICAgIHByaW50KCdTdGFydGluZyBQaXBlbGluZScpDQoNCiAgICBtb2RlbCA9IGNyZWF0ZU1vZGVsKCkNCiAgICBsb2dnZXIuaW5mbygnTWV0cmljOjogVGltZXN0YW1wIDo6IFZhbHVlIDo6IEFub21hbHlTY29yeSA6OiBJc0Fub21hbHknKQ0KICAgIHRyeToNCiAgICAgIGxvZ2dlci5pbmZvKCdDcmVhdGluZyBNb2RlbCcpDQogICAgICBtb2RlbCA9IE1vZGVsRmFjdG9yeS5jcmVhdGUoTU9ERUxfUEFSQU1TKQ0KICAgICAgd2hpbGUoVHJ1ZSk6DQogICAgICAgICAgDQogICAgICAgIGxzdCA9IFtdDQogICAgICAgIG1vZGVsLmVuYWJsZUluZmVyZW5jZSh7J3ByZWRpY3RlZEZpZWxkJzogJ3ZhbHVlJ30pDQogICAgICAgIG1vZGVsSW5wdXQgPSBPcmRlcmVkRGljdCgpDQogICAgICAgIG1vZGVsSW5wdXRbJ3RpbWVzdGFtcCddID0gZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkNCiAgICAgICAgbW9kZWxJbnB1dFsndmFsdWUnXSA9IHBzdXRpbC5jcHVfcGVyY2VudChpbnRlcnZhbD1Ob25lKQ0KICAgICAgICANCiAgICAgICAgcmVzdWx0ID0gbW9kZWwucnVuKG1vZGVsSW5wdXQpDQogICAgICAgIGFub21hbHlTY29yZSA9IHJlc3VsdC5pbmZlcmVuY2VzWydhbm9tYWx5U2NvcmUnXQ0KICAgICAgIA0KICAgICAgICBsc3QuYXBwZW5kKChtb2RlbElucHV0Wyd0aW1lc3RhbXAnXSwgbW9kZWxJbnB1dFsndmFsdWUnXSwgZmxvYXQoYW5vbWFseVNjb3JlKSkpDQogICAgICAgIGlzQW5vbWFseSA9MA0KICAgICAgICBpZiBhbm9tYWx5U2NvcmUgPiBfQU5PTUFMWV9USFJFU0hPTEQ6DQogICAgICAgICAgICBpc0Fub21hbHkgPTENCiAgICAgICAgICAgIA0KICAgICAgICBsb2dnZXIuaW5mbygnY3B1X3BlcmNlbnQ6OiB7MH0gOjogezF9JSA6OiB7Mn0gOjogezN9Jy5mb3JtYXQobW9kZWxJbnB1dFsndGltZXN0YW1wJ10sbW9kZWxJbnB1dFsndmFsdWUnXSxmbG9hdChhbm9tYWx5U2NvcmUpLGlzQW5vbWFseSkpDQogICAgICAgIHRpbWUuc2xlZXAoMjApDQogICAgZXhjZXB0Og0KICAgICAgICBsb2dnZXIuZXJyb3IoJ0Vycm9yJykNCiAgICAgICAgDQoNCg0KaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoNCiAgICBsb2dnaW5nLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dpbmcuSU5GTykNCiAgICBydW5Bbm9tYWx5RGV0ZWN0aW9uKCkNCiAgICBpZiBjbnguaXNfY29ubmVjdGVkKCk6DQogICAgICAgIGNueC5jbG9zZSgpDQoNCg0KDQoNCg0KDQoNCg0KDQo=,leo1311
SNOW_Get_Metadata_API,SNOW_Get_Metadata_API_Acme.py,,leo1311
SNOW_Get_API,SNOW_Get_API_Acme.py,,leo1311
SNOW_Create_API,SNOW_Create_API_Acme.py,,leo1311
SNOW_Update_API,SNOW_Update_API_Acme.py,,leo1311
ACMKYPHR40814,ACMKYPHR40814_Acme.py,aW1wb3J0IG15c3FsLmNvbm5lY3Rvcg0KaW1wb3J0IGxvZ2dpbmcNCmltcG9ydCBzeXMNCmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCBxdW90ZV9wbHVzLCB1cmxwYXJzZQ0KZnJvbSBsZWFwLnV0aWxzLlV0aWxpdGllcyBpbXBvcnQgVXRpbGl0aWVzDQpmcm9tIHNrbGVhcm4uZmVhdHVyZV9leHRyYWN0aW9uLnRleHQgaW1wb3J0IFRmaWRmVmVjdG9yaXplcg0KaW1wb3J0IG51bXB5IGFzIG5wDQppbXBvcnQgdGltZWl0DQppbXBvcnQganNvbg0KDQpsb2dnaW5nLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dpbmcuSU5GTywgZm9ybWF0PSclKGFzY3RpbWUpcyBJTkZPICUobWVzc2FnZSlzJywgZGF0ZWZtdD0nJXkvJW0vJWQgJUg6JU06JVMnKQ0KDQphcmd1bWVudHMgPSBzeXMuYXJndg0KDQpkaWN0ID0ge30NCmZvciBhcmcgaW4gYXJndW1lbnRzOg0KICAgIHRyeToNCiAgICAgICAgZGljdFthcmcuc3BsaXQoJzonKVswXV0gPSAoJzonKS5qb2luKGFyZy5zcGxpdCgnOicpWzE6XSkNCiAgICBleGNlcHQ6DQogICAgICAgIGEgPSAnZXJyb3InDQoNCg0KZGVmIGdldFNpbWlsYXIoc2VudGVuY2VzLCBrZXl3b3Jkcyk6DQogICAgY29ycHVzID0gc2VudGVuY2VzICsga2V5d29yZHMNCiAgICBrZXl3b3Jkc3RhcnRJbmRleCA9IGxlbihzZW50ZW5jZXMpDQogICAgdGZpZGZDb3JwdXMgPSBUZmlkZlZlY3Rvcml6ZXIobWluX2RmPTEsIHN0b3Bfd29yZHM9J2VuZ2xpc2gnKS5maXRfdHJhbnNmb3JtKGNvcnB1cykNCiAgICBwYWlyd2lzZV9zaW1pbGFyaXR5ID0gdGZpZGZDb3JwdXMgKiB0ZmlkZkNvcnB1cy5UDQogICAgYXJyID0gcGFpcndpc2Vfc2ltaWxhcml0eS50b2FycmF5KCkNCiAgICBucC5maWxsX2RpYWdvbmFsKGFyciwgbnAubmFuKQ0KICAgIHJlc3VsdHMgPSB7fQ0KICAgIGZvciBzIGluIHNlbnRlbmNlczoNCiAgICAgICAgaW5wdXRfaWR4ID0gc2VudGVuY2VzLmluZGV4KHMpDQogICAgICAgIHJlc3VsdF9pZHggPSBucC5uYW5hcmdtYXgoYXJyW2lucHV0X2lkeF1ba2V5d29yZHN0YXJ0SW5kZXg6XSkNCiAgICAgICAgbWF0Y2ggPSBhcnJbaW5wdXRfaWR4XVtrZXl3b3Jkc3RhcnRJbmRleCArIHJlc3VsdF9pZHhdDQogICAgICAgIHIgPSBrZXl3b3Jkc1tyZXN1bHRfaWR4XQ0KICAgICAgICBpZiBtYXRjaCA+IDA6DQogICAgICAgICAgICByZXN1bHRzW3NdID0gciArICc6JyArIHN0cihtYXRjaCkNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJlc3VsdHNbc10gPSAnTk8gTUFUQ0g6MCcNCiAgICByZXR1cm4gcmVzdWx0cw0KDQoNCmxlYXBkcyA9IGRpY3RbJ0xFQVBEUyddDQpsZWFwRFNkaWN0ID0ganNvbi5sb2FkcyhsZWFwZHMpDQoNCnVzZXJuYW1lID0gbGVhcERTZGljdFsndXNlck5hbWUnXQ0KcGFzc3dvcmQgPSBVdGlsaXRpZXMuZGVjcnlwdChsZWFwRFNkaWN0WydwYXNzd29yZCddLCBsZWFwRFNkaWN0WydzYWx0J10pDQpob3N0ID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5ob3N0bmFtZQ0KcG9ydCA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkucG9ydA0KZGF0YWJhc2UgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLnBhdGgucnNwbGl0KCcvJywgMSlbMV0NCmNueCA9IG15c3FsLmNvbm5lY3Rvci5jb25uZWN0KHVzZXI9dXNlcm5hbWUsIHBhc3N3b3JkPXBhc3N3b3JkLCBob3N0PWhvc3QsIHBvcnQ9cG9ydCwgZGF0YWJhc2U9ZGF0YWJhc2UpDQpteWN1cnNvciA9IGNueC5jdXJzb3IoKQ0KVGFibGVOYW1lID0gZGljdFsnVGFibGVOYW1lJ10NCnNxbCA9ICcnJ1NFTEVDVCBESVNUSU5DVCBUUklNKGV4dHJhY3RlZF9waHJhc2UpIGZyb20gezB9IHdoZXJlIGV4dHJhY3RlZF9waHJhc2UgaXMgbm90IG51bGwgYW5kIGV4dHJhY3RlZF9waHJhc2UgPD4gJycgICcnJy5mb3JtYXQoVGFibGVOYW1lKQ0KbXljdXJzb3IuZXhlY3V0ZShzcWwpDQpyZXN1bHRzID0gbXljdXJzb3IuZmV0Y2hhbGwoKQ0KbXljdXJzb3IuY2xvc2UoKQ0KcGhyYXNlcyA9IFtdDQpmb3IgaXRlbSBpbiByZXN1bHRzOg0KICAgIHBocmFzZXMuYXBwZW5kKGl0ZW1bMF0pDQoNCm15Y3Vyc29yMiA9IGNueC5jdXJzb3IoKQ0Kc3FsID0gJ1NFTEVDVCBESVNUSU5DVCBLZXlfV29yZCBmcm9tIEVBU0VNYXBwaW5nJw0KbXljdXJzb3IyLmV4ZWN1dGUoc3FsKQ0KcmVzdWx0cyA9IG15Y3Vyc29yMi5mZXRjaGFsbCgpDQprZXl3b3JkcyA9IFtdDQpmb3IgaXRlbSBpbiByZXN1bHRzOg0KICAgIGtleXdvcmRzLmFwcGVuZChpdGVtWzBdKQ0KbXljdXJzb3IyLmNsb3NlKCkNCg0KY254LmNsb3NlKCkNCg0KDQpkZWYgZ2V0RUFTRSh0dXApOg0KICAgIHRyeToNCiAgICAgICAgcmVzdWx0cyA9IGdldFNpbWlsYXIodHVwWzBdLCB0dXBbMV0pDQogICAgICAgIFRhYmxlTmFtZSA9IGRpY3RbJ1RhYmxlTmFtZSddDQogICAgICAgIHF1ZXJ5ID0gJycnVXBkYXRlIHswfSBzZXQgbWFwcGVkX3BocmFzZSA9ICVzICwgbWFwcGVkX3BocmFzZV9jb25maWRlbm5jZSA9JXMgIHdoZXJlIFRSSU0oZXh0cmFjdGVkX3BocmFzZSkgPSAlcyAnJycuZm9ybWF0KFRhYmxlTmFtZSkNCiAgICAgICAgaW5wdXRkYXRhID0gW10NCiAgICAgICAgZm9yIHBhdHRlcm4gaW4gcmVzdWx0cy5rZXlzKCk6DQogICAgICAgICAgICBrdyA9IHJlc3VsdHNbcGF0dGVybl0uc3BsaXQoJzonKVswXQ0KICAgICAgICAgICAgc2NvcmUgPSByZXN1bHRzW3BhdHRlcm5dLnNwbGl0KCc6JylbLTFdDQogICAgICAgICAgICBpZiBrdyAhPSAnTk8gTUFUQ0gnOg0KICAgICAgICAgICAgICAgIGlucHV0ZGF0YS5hcHBlbmQoKGt3LCBzY29yZSwgcGF0dGVybikpDQogICAgICAgIGNueCA9IG15c3FsLmNvbm5lY3Rvci5jb25uZWN0KHVzZXI9dHVwWzJdLCBwYXNzd29yZD10dXBbM10sIGhvc3Q9dHVwWzRdLCBwb3J0PXR1cFs1XSwgZGF0YWJhc2U9dHVwWzZdKQ0KICAgICAgICBteWN1cnNvciA9IGNueC5jdXJzb3IoKQ0KICAgICAgICByZXMgPSBteWN1cnNvci5leGVjdXRlbWFueShxdWVyeSwgaW5wdXRkYXRhKQ0KICAgICAgICBjbnguY29tbWl0KCkNCiAgICAgICAgbXljdXJzb3IuY2xvc2UoKQ0KICAgICAgICBjbnguY2xvc2UoKQ0KICAgICAgICByZXR1cm4gVHJ1ZQ0KICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZXg6DQogICAgICAgIGxvZ2dpbmcud2FybmluZyhleCkNCiAgICAgICAgcmV0dXJuIEZhbHNlDQoNCg0KZnJvbSBtdWx0aXByb2Nlc3NpbmcuZHVtbXkgaW1wb3J0IFBvb2wgYXMgVGhyZWFkUG9vbA0KDQphdXhfdmFsID0gW10NCnRvdGFsbGVuID0gbGVuKHBocmFzZXMpDQpsb2dnaW5nLmluZm8oJ1RvdGFsIFJlY29yZHM6IHswfScuZm9ybWF0KHRvdGFsbGVuKSkNCnN0YXJ0ID0gMA0Kc3RlcCA9IDEwMDANCmZvciBpIGluIHJhbmdlKHN0YXJ0LCB0b3RhbGxlbiwgc3RlcCk6DQogICAgc3RvcCA9IGkgKyBzdGVwDQogICAgaWYgKHN0b3AgPiB0b3RhbGxlbik6DQogICAgICAgIHN0b3AgPSB0b3RhbGxlbg0KICAgIHRyeToNCiAgICAgICAgYXV4X3ZhbC5hcHBlbmQoKHBocmFzZXNbaTpzdG9wXSwga2V5d29yZHMsIHVzZXJuYW1lLCBwYXNzd29yZCwgaG9zdCwgcG9ydCwgZGF0YWJhc2UpKQ0KICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgbG9nZ2luZy5pbmZvKGUpDQoNCnBvb2wgPSBUaHJlYWRQb29sKDQpDQpsb2dnaW5nLmluZm8obGVuKGF1eF92YWwpKQ0KbG9nZ2luZy5pbmZvKCdTdGFydGluZyBQcm9jZXNzJykNCg0KbWFwZGF0YSA9IHBvb2wubWFwKGdldEVBU0UsIGF1eF92YWwpDQoNCmxvZ2dpbmcuaW5mbygnQ29tcGxldGVkJykNCg0KDQoNCg==,leo1311
ACMGNRCN39596,ACMGNRCN39596_Acme.py,,leo1311
ACMLP_CR65949,ACMLP_CR65949_Acme.py,aW1wb3J0IHN5cw0KaW1wb3J0IG9zDQppbXBvcnQgbXlzcWwuY29ubmVjdG9yDQppbXBvcnQganNvbg0KZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUNCmZyb20gbGVhcC51dGlscy5VdGlsaXRpZXMgaW1wb3J0IFV0aWxpdGllcw0KaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyDQpmcm9tIGRhdGV0aW1lIGltcG9ydCB0aW1lem9uZQ0KZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHF1b3RlX3BsdXMsIHVybHBhcnNlDQoNCmxvZ2dlci5iYXNpY0NvbmZpZyhsZXZlbD1sb2dnZXIuSU5GTyxmb3JtYXQ9JyUoYXNjdGltZSlzIElORk8gJShtZXNzYWdlKXMnLCBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycpDQoNCmFyZ3VtZW50cyA9c3lzLmFyZ3YNCmRpY3Q9e30NCmZvciBhcmcgaW4gYXJndW1lbnRzOg0KICAgIHRyeToNCiAgICAgICAgZGljdFthcmcuc3BsaXQoJzonKVswXV0gPSAoJzonKS5qb2luKGFyZy5zcGxpdCgnOicpWzE6XSkNCiAgICBleGNlcHQ6DQogICAgICAgIGE9J2Vycm9yJw0KDQoNCmljbVBheWxvYWQgPSBqc29uLmxvYWRzKGRpY3RbJ2luY2lkZW50UGF5bG9hZCddKQ0KDQppY21QYXlsb2FkTWFwcGluZyA9IHsnbnVtYmVyJzonbnVtYmVyJywnc2hvcnRkZXNjcmlwdGlvbic6J3Nob3J0ZGVzY3JpcHRpb24nLCdwcmlvcml0eS5kaXNwbGF5VmFsdWUnOidwcmlvcml0eScsJ3N0YXRlLmRpc3BsYXlWYWx1ZSc6J3N0YXRlJywNCiAgICAgICAgICAgICAgICAgICAgICAgICdkZXNjcmlwdGlvbic6J2Rlc2NyaXB0aW9uJywnY2F0ZWdvcnkuZGlzcGxheVZhbHVlJzonY2F0ZWdvcnknLCdpbXBhY3QuZGlzcGxheVZhbHVlJzonaW1wYWN0JywNCiAgICAgICAgICAgICAgICAgICAgICAgICdhc3NpZ25tZW50Z3JvdXAuZGlzcGxheVZhbHVlJzonYXNzaWdubWVudGdyb3VwJywnY29uZmlndXJhdGlvbml0ZW0uZGlzcGxheVZhbHVlJzonY29uZmlndXJhdGlvbkl0ZW0nLCdhc3NpZ25lZHRvLmRpc3BsYXlWYWx1ZSc6J2Fzc2lnbmVkdG8nLA0KICAgICAgICAgICAgICAgICAgICAgICAgJ3NvcCc6J3NvcCcsJ3Jlc29sdXRpb25TdGVwc0NsdXN0ZXJOYW1lJzond29ya2Zsb3cnLCAnY2FsbGVyLmRpc3BsYXlWYWx1ZSc6J2NhbGxlcid9DQojbWFwQ29sdW1ucw0KZm91bmRDb2x1bW5zID0gW10NCnJvdyA9IHt9DQpmb3Iga2V5IGluIGljbVBheWxvYWRNYXBwaW5nLmtleXMoKToNCiAgICBqdiA9IGljbVBheWxvYWQNCiAgICBpY21Db2x1bW4gPSBrZXkuc3BsaXQoJy4nKQ0KICAgIGZvciBpdGVtIGluIGljbUNvbHVtbjoNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAganYgPSBqdltpdGVtXQ0KICAgICAgICAgICAgcm93W2ljbVBheWxvYWRNYXBwaW5nW2tleV1dID0ganYNCiAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgYT0nTm8gbWFwcGluZycNCg0Kcm93WydudW1iZXInXSA9ICdJTkN7MH0nLmZvcm1hdChpbnQoZGF0ZXRpbWUubm93KCkucmVwbGFjZSh0emluZm89dGltZXpvbmUudXRjKS50aW1lc3RhbXAoKSkpDQpyb3dbJ3NvdXJjZSddID0gJ0xFQVAnDQpyb3dbJ3R5cGUnXSA9IGRpY3RbJ3RpY2tldFR5cGUnXQ0Kcm93WydsYXN0VXBkYXRlZCddPWRhdGV0aW1lLm5vdygpDQpyb3dbJ29wZW5lZERhdGUnXT1kYXRldGltZS5ub3coKQ0Kcm93Wyd1cGRhdGVkRGF0ZSddPWRhdGV0aW1lLm5vdygpDQpyb3dbJ2NyZWF0ZWREYXRlJ109ZGF0ZXRpbWUubm93KCkNCnJvd1snY3JlYXRlZGJ5J10gPSAnYWRtaW4nDQoNCiNMRUFQIERhdGFzb3VyY2UNCmxlYXBEU2RpY3QgPSBqc29uLmxvYWRzKGRpY3RbJ0xFQVBEYXRhU291cmNlJ10pDQoNCiMgI3NhdmUgdG8gZGINCmNvbHVtbkxpc3QgPSByb3cua2V5cygpDQp1c2VybmFtZSA9IGxlYXBEU2RpY3RbJ3VzZXJOYW1lJ10NCnBhc3N3b3JkID0gVXRpbGl0aWVzLmRlY3J5cHQobGVhcERTZGljdFsncGFzc3dvcmQnXSxsZWFwRFNkaWN0WydzYWx0J10pDQpob3N0ID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5ob3N0bmFtZQ0KcG9ydCA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkucG9ydA0KZGF0YWJhc2UgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLnBhdGgucnNwbGl0KCcvJywgMSlbMV0NCg0KY254PW15c3FsLmNvbm5lY3Rvci5jb25uZWN0KHVzZXI9dXNlcm5hbWUsIHBhc3N3b3JkPXBhc3N3b3JkLCBob3N0PWhvc3QscG9ydD1wb3J0LCBkYXRhYmFzZT1kYXRhYmFzZSkNCm15Y3Vyc29yID0gY254LmN1cnNvcigpDQp0YWJsZW5hbWU9IGRpY3RbJ2RhdGFUYWJsZSddIA0KDQpwYXJhbXNEaWN0ID0ge30NCnZhbHVlcyA9IFtdDQpmb3Iga2V5IGluIGNvbHVtbkxpc3Q6DQogICAgdmFsdWVzLmFwcGVuZChyb3dba2V5XSkNCg0KY29sdW1ucyA9ICcsICcuam9pbignYHswfWAnLmZvcm1hdChrKSBmb3IgayBpbiBjb2x1bW5MaXN0KQ0KZHVwbGljYXRlcyA9ICcsICcuam9pbignezB9PVZBTFVFUyh7MH0pJy5mb3JtYXQoaykgZm9yIGsgaW4gcm93KQ0KcGxhY2VfaG9sZGVycyA9ICcsICcuam9pbignJXMnLmZvcm1hdChrKSBmb3IgayBpbiByb3cpDQoNCnRyeToNCiAgICBxdWVyeSA9ICdJTlNFUlQgSU5UTyB7MH0gKHsxfSkgVkFMVUVTICh7Mn0pJy5mb3JtYXQodGFibGVuYW1lLCBjb2x1bW5zLCBwbGFjZV9ob2xkZXJzKQ0KICAgIHF1ZXJ5ID0gJ3swfSBPTiBEVVBMSUNBVEUgS0VZIFVQREFURSB7MX0nLmZvcm1hdChxdWVyeSwgZHVwbGljYXRlcykNCiAgICBteWN1cnNvci5leGVjdXRlbWFueShxdWVyeSwgKHZhbHVlcywpKQ0KICAgIGNueC5jb21taXQoKQ0KICAgIHByaW50KCdJbmNpZGVudCBVcGRhdGVkIDp7MH0nLmZvcm1hdChyb3dbJ251bWJlciddKSkNCmV4Y2VwdCBFeGNlcHRpb24gYXMgZXg6DQogICAgcHJpbnQoZXgpDQoNCm15Y3Vyc29yLmNsb3NlKCkNCmNueC5jbG9zZSgpDQoNCmxvZ2dlci5pbmZvKCdDb21wbGV0ZWQnKQ==,leo1311
ACMLP_PD72695,ACMLP_PD72695_Acme.py,aW1wb3J0IHN5cwppbXBvcnQgb3MKaW1wb3J0IG15c3FsLmNvbm5lY3RvcgppbXBvcnQganNvbgpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQpmcm9tIGxlYXAudXRpbHMuVXRpbGl0aWVzIGltcG9ydCBVdGlsaXRpZXMKaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyCmZyb20gZGF0ZXRpbWUgaW1wb3J0IHRpbWV6b25lCgoKbG9nZ2VyLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dlci5JTkZPLGZvcm1hdD0nJShhc2N0aW1lKXMgSU5GTyAlKG1lc3NhZ2UpcycsIGRhdGVmbXQ9JyV5LyVtLyVkICVIOiVNOiVTJykKCmFyZ3VtZW50cyA9c3lzLmFyZ3YKZGljdD17fQpmb3IgYXJnIGluIGFyZ3VtZW50czoKICAgIHRyeToKICAgICAgICBkaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICgnOicpLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQogICAgZXhjZXB0OgogICAgICAgIGE9J2Vycm9yJwoKCmljbVBheWxvYWQgPSBqc29uLmxvYWRzKGRpY3RbJ2luY2lkZW50UGF5bG9hZCddKQoKaWNtUGF5bG9hZE1hcHBpbmcgPSB7J251bWJlcic6J251bWJlcicsJ3Nob3J0ZGVzY3JpcHRpb24nOidzaG9ydGRlc2NyaXB0aW9uJywncHJpb3JpdHkuZGlzcGxheVZhbHVlJzoncHJpb3JpdHknLCdzdGF0ZS5kaXNwbGF5VmFsdWUnOidzdGF0ZScsCiAgICAgICAgICAgICAgICAgICAgICAgICdkZXNjcmlwdGlvbic6J2Rlc2NyaXB0aW9uJywnY2F0ZWdvcnkuZGlzcGxheVZhbHVlJzonY2F0ZWdvcnknLCdpbXBhY3QuZGlzcGxheVZhbHVlJzonaW1wYWN0JywKICAgICAgICAgICAgICAgICAgICAgICAgJ2Fzc2lnbm1lbnRncm91cC5kaXNwbGF5VmFsdWUnOidhc3NpZ25tZW50Z3JvdXAnLCdjb25maWd1cmF0aW9uaXRlbS5kaXNwbGF5VmFsdWUnOidjb25maWd1cmF0aW9uSXRlbScsJ2Fzc2lnbmVkdG8uZGlzcGxheVZhbHVlJzonYXNzaWduZWR0bycsCiAgICAgICAgICAgICAgICAgICAgICAgICdzb3AnOidzb3AnLCdyZXNvbHV0aW9uU3RlcHNDbHVzdGVyTmFtZSc6J3dvcmtmbG93JywgJ2NhbGxlci5kaXNwbGF5VmFsdWUnOidjYWxsZXInfQojbWFwQ29sdW1ucwpmb3VuZENvbHVtbnMgPSBbXQpyb3cgPSB7fQpmb3Iga2V5IGluIGljbVBheWxvYWRNYXBwaW5nLmtleXMoKToKICAgIGp2ID0gaWNtUGF5bG9hZAogICAgaWNtQ29sdW1uID0ga2V5LnNwbGl0KCcuJykKICAgIGZvciBpdGVtIGluIGljbUNvbHVtbjoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGp2ID0ganZbaXRlbV0KICAgICAgICAgICAgcm93W2ljbVBheWxvYWRNYXBwaW5nW2tleV1dID0ganYKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIGE9J05vIG1hcHBpbmcnCgoKCnJvd1snc291cmNlJ10gPSAnTEVBUCcKcm93Wyd0eXBlJ10gPSBkaWN0Wyd0aWNrZXRUeXBlJ10Kcm93WydsYXN0VXBkYXRlZCddPWRhdGV0aW1lLm5vdygpCnJvd1snb3BlbmVkRGF0ZSddPWRhdGV0aW1lLm5vdygpCnJvd1sndXBkYXRlZERhdGUnXT1kYXRldGltZS5ub3coKQpyb3dbJ2NyZWF0ZWREYXRlJ109ZGF0ZXRpbWUubm93KCkKcm93WydjcmVhdGVkYnknXSA9ICdhZG1pbicKCiNMRUFQIERhdGFzb3VyY2UKbGVhcERTZGljdCA9IGpzb24ubG9hZHMoZGljdFsnTEVBUERhdGFTb3VyY2UnXSkKCiMgI3NhdmUgdG8gZGIKY29sdW1uTGlzdCA9IHJvdy5rZXlzKCkKdXNlcm5hbWUgPSBsZWFwRFNkaWN0Wyd1c2VyTmFtZSddCnBhc3N3b3JkID0gVXRpbGl0aWVzLmRlY3J5cHQobGVhcERTZGljdFsncGFzc3dvcmQnXSxsZWFwRFNkaWN0WydzYWx0J10pCmhvc3QgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLmhvc3RuYW1lCnBvcnQgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLnBvcnQKZGF0YWJhc2UgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLnBhdGgucnNwbGl0KCcvJywgMSlbMV0KCmNueD1teXNxbC5jb25uZWN0b3IuY29ubmVjdCh1c2VyPXVzZXJuYW1lLCBwYXNzd29yZD1wYXNzd29yZCwgaG9zdD1ob3N0LHBvcnQ9cG9ydCwgZGF0YWJhc2U9ZGF0YWJhc2UpCm15Y3Vyc29yID0gY254LmN1cnNvcigpCnRhYmxlbmFtZT0gZGljdFsnZGF0YVRhYmxlJ10gCgpwYXJhbXNEaWN0ID0ge30KdmFsdWVzID0gW10KZm9yIGtleSBpbiBjb2x1bW5MaXN0OgogICAgdmFsdWVzLmFwcGVuZChyb3dba2V5XSkKCmNvbHVtbnMgPSAnLCAnLmpvaW4oJ2B7MH1gJy5mb3JtYXQoaykgZm9yIGsgaW4gY29sdW1uTGlzdCkKZHVwbGljYXRlcyA9ICcsICcuam9pbignezB9PVZBTFVFUyh7MH0pJy5mb3JtYXQoaykgZm9yIGsgaW4gcm93KQpwbGFjZV9ob2xkZXJzID0gJywgJy5qb2luKCclcycuZm9ybWF0KGspIGZvciBrIGluIHJvdykKCnRyeToKICAgIHF1ZXJ5ID0gJ0lOU0VSVCBJTlRPIHswfSAoezF9KSBWQUxVRVMgKHsyfSknLmZvcm1hdCh0YWJsZW5hbWUsIGNvbHVtbnMsIHBsYWNlX2hvbGRlcnMpCiAgICBxdWVyeSA9ICd7MH0gT04gRFVQTElDQVRFIEtFWSBVUERBVEUgezF9Jy5mb3JtYXQocXVlcnksIGR1cGxpY2F0ZXMpCiAgICBteWN1cnNvci5leGVjdXRlbWFueShxdWVyeSwgKHZhbHVlcywpKQogICAgY254LmNvbW1pdCgpCiAgICBwcmludCgnSW5jaWRlbnQgVXBkYXRlZCA6ezB9Jy5mb3JtYXQocm93WydudW1iZXInXSkpCmV4Y2VwdCBFeGNlcHRpb24gYXMgZXg6CiAgICBwcmludChleCkKCm15Y3Vyc29yLmNsb3NlKCkKY254LmNsb3NlKCkKCmxvZ2dlci5pbmZvKCdDb21wbGV0ZWQnKQoKCgoKCgoKCg==,leo1311
LEOBTM_S61592,LEOBTM_S61592_leo1311.py,ZnJvbSBweXNwYXJrLnNxbCBpbXBvcnQgU3BhcmtTZXNzaW9uDQoNCmltcG9ydCByZXF1ZXN0cw0KDQppbXBvcnQgc3lzDQoNCmltcG9ydCBteXNxbC5jb25uZWN0b3INCg0KZnJvbSBweXNwYXJrLnNxbC5mdW5jdGlvbnMgaW1wb3J0ICoNCg0KZnJvbSBweXNwYXJrLnNxbC50eXBlcyBpbXBvcnQgKg0KDQppbXBvcnQganNvbg0KDQpmcm9tIHVybGxpYi5wYXJzZSBpbXBvcnQgcXVvdGVfcGx1cywgdXJscGFyc2UNCg0KZnJvbSBsZWFwLnV0aWxzLlV0aWxpdGllcyBpbXBvcnQgVXRpbGl0aWVzDQoNCmltcG9ydCBkYXRldGltZQ0KDQppbXBvcnQgbG9nZ2luZyBhcyBsb2dnZXINCg0KaW1wb3J0IHVybGxpYjMNCg0KaW1wb3J0IG9zDQoNCmltcG9ydCBtYXRoDQoNCnVybGxpYjMuZGlzYWJsZV93YXJuaW5ncygpDQoNCmxvZ2dlci5iYXNpY0NvbmZpZyhsZXZlbD1sb2dnZXIuSU5GTyxmb3JtYXQ9JyUoYXNjdGltZSlzIElORk8gJShtZXNzYWdlKXMnLCBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycpDQoNCmFyZ3VtZW50cyA9c3lzLmFyZ3YNCg0KbG9nZ2VyLmluZm8oYXJndW1lbnRzKQ0KDQpkaWN0PXt9DQoNCmZvciBhcmcgaW4gYXJndW1lbnRzOg0KDQogICAgIHRyeToNCg0KICAgICAgICAgZGljdFthcmcuc3BsaXQoJzonKVswXV0gPSAoJzonKS5qb2luKGFyZy5zcGxpdCgnOicpWzE6XSkNCg0KICAgICAgICAgDQoNCiAgICAgZXhjZXB0Og0KDQogICAgICAgICBhPSdlcnJvcicNCg0KI1NOb3cgRGF0YXNvdXJjZQ0KDQpzbm93ZHMgPSBkaWN0WydTbm93RGF0YVNvdXJjZSddDQoNCnNub3dEU2RpY3Q9anNvbi5sb2Fkcyhzbm93ZHMpDQoNCg0KDQojIFNldCB0aGUgcmVxdWVzdCBwYXJhbWV0ZXJzDQoNCnVybCA9IHNub3dEU2RpY3RbJ1VybCddDQoNCnVzZXIgPSBzbm93RFNkaWN0WydBdXRoRGV0YWlscyddWyd1c2VybmFtZSddDQoNCnB3ZCA9IFV0aWxpdGllcy5kZWNyeXB0KHNub3dEU2RpY3RbJ0F1dGhEZXRhaWxzJ11bJ3Bhc3N3b3JkJ10sIHNub3dEU2RpY3RbJ3NhbHQnXSkNCg0KYXBpID0gZGljdFsnYXBpJ10NCg0Kc25vd3RhYmxlPWRpY3RbJ3Nub3dUYWJsZSddDQoNCnRhYmxlbmFtZSA9IGRpY3RbJ2RhdGFUYWJsZSddDQoNCnBhcmFtcyA9ZGljdFsncGFyYW1zJ10NCg0KbGltaXQgPSBkaWN0WydsaW1pdCddDQoNCm9mZnNldCA9IGRpY3RbJ29mZnNldCddDQoNCmFwcGxpY2F0aW9uSWQgPSBkaWN0WydhcHBsaWNhdGlvbklkJ10NCg0KYXBwSWQgPSBpbnQoYXBwbGljYXRpb25JZCkNCg0KcmVzdWx0Q291bnQgPSBpbnQobGltaXQpDQoNCg0KDQoNCg0KZGVmIHByb2Nlc3NfcGFydGl0aW9uKGl0ZXJhdG9yKToNCg0KICBsb2dnZXIuZXJyb3IoJzAnKQ0KDQogIGNueCA9IG15c3FsLmNvbm5lY3Rvci5jb25uZWN0KHVzZXI9dXNlcm5hbWUsIHBhc3N3b3JkPXBhc3N3b3JkLCBob3N0PWhvc3QscG9ydD1wb3J0LCBkYXRhYmFzZT1kYXRhYmFzZSkNCg0KICBteWN1cnNvciA9IGNueC5jdXJzb3IoKQ0KDQogIGZvciByb3cgaW4gaXRlcmF0b3I6DQoNCiAgICB0cnk6DQoNCiAgICAgICAgbG9nZ2VyLmVycm9yKCcxJykNCg0KICAgICAgICBwYXJhbXNEaWN0ID0ge30NCg0KICAgICAgICB2YWx1ZXMgPSBbXQ0KDQogICAgICAgIGZvciBpIGluIHJhbmdlKDAsIGxlbihjb2x1bW5MaXN0KSk6DQoNCiAgICAgICAgICBwYXJhbXNEaWN0W2NvbHVtbkxpc3RbaV1dID0gcm93W2ldDQoNCiAgICAgICAgICB2YWx1ZXMuYXBwZW5kKHJvd1tpXSkNCg0KICAgICAgICBsb2dnZXIuaW5mbygnMicpICANCg0KICAgICAgICBjb2x1bW5zID0gJywgJy5qb2luKCdgezB9YCcuZm9ybWF0KGspIGZvciBrIGluIHBhcmFtc0RpY3QpDQoNCiAgICAgICAgZHVwbGljYXRlcyA9ICcsICcuam9pbignezB9PVZBTFVFUyh7MH0pJy5mb3JtYXQoaykgZm9yIGsgaW4gcGFyYW1zRGljdCkNCg0KICAgICAgICBwbGFjZV9ob2xkZXJzID0gJywgJy5qb2luKCclcycuZm9ybWF0KGspIGZvciBrIGluIHBhcmFtc0RpY3QpDQoNCiAgICAgICAgcXVlcnkgPSAnSU5TRVJUIElOVE8gezB9ICh7MX0pIFZBTFVFUyAoezJ9KScuZm9ybWF0KHRhYmxlbmFtZSwgY29sdW1ucywgcGxhY2VfaG9sZGVycykNCg0KICAgICAgICBsb2dnZXIuZXJyb3IocXVlcnkpDQoNCiAgICAgICAgcXVlcnkgPSAnezB9IE9OIERVUExJQ0FURSBLRVkgVVBEQVRFIHsxfScuZm9ybWF0KHF1ZXJ5LCBkdXBsaWNhdGVzKQ0KDQogICAgICAgIG15Y3Vyc29yLmV4ZWN1dGVtYW55KHF1ZXJ5LCAodmFsdWVzLCkpDQoNCiAgICAgICAgY254LmNvbW1pdCgpDQoNCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGV4Og0KDQogICAgICAgIGxvZ2dlci5lcnJvcihleCkNCg0KICAgICAgICBwcmludChleCkNCg0KICAgICNsb2dnZXIuaW5mbyhyb3cpDQoNCiAgbXljdXJzb3IuY2xvc2UoKQ0KDQogIGNueC5jbG9zZSgpDQoNCiAgDQoNCiAgDQoNCiMgU2V0IHByb3BlciBoZWFkZXJzDQoNCmhlYWRlcnMgPSB7J0NvbnRlbnQtVHlwZSc6J2FwcGxpY2F0aW9uL2pzb24nLCdBY2NlcHQnOidhcHBsaWNhdGlvbi9qc29uJ30NCg0KI2FkZCBmaWx0ZXIgdG8gZ2V0IHJlY29yZHMgdXBkYXRlZCBpbiBsYXN0IDI0ICBob3Vycw0KDQppZiBkaWN0WydmdWxsTG9hZCddID09ICdUcnVlJzoNCg0KICAgIGZyb21EYXRlID0gZGF0ZXRpbWUuZGF0ZXRpbWUoMjAxNywxLDEpDQoNCmVsc2U6DQoNCiAgICB0cnk6DQoNCiAgICAgICAgdGltZWRlbHRhID0gZmxvYXQoZGljdFsnVGltZURlbHRhKGhycyknXSkNCg0KICAgIGV4Y2VwdDoNCg0KICAgICAgICB0aW1lZGVsdGEgPSAxICMgZGVmYXVsdCAxIGhvdXINCg0KICAgIGxvZ2dlci5pbmZvKCdGZXRjaGluZyByZWNvcmRzIGZvciBsYXN0IHswfSBocnMnLmZvcm1hdCh0aW1lZGVsdGEpKQ0KDQogICAgZnJvbURhdGUgPSAgZGF0ZXRpbWUuZGF0ZXRpbWUudXRjbm93KCkgLSAgZGF0ZXRpbWUudGltZWRlbHRhKGhvdXJzID0gdGltZWRlbHRhKQ0KDQp0aW1lc3RhbXBQYXJhbSA9ICdzeXNfdXBkYXRlZF9vbj49Jytmcm9tRGF0ZS5zdHJmdGltZSgnJVktJW0tJWQgJUg6JU06JVMnKQ0KDQpwYXJhbXMgPSBwYXJhbXMgKyAnJnN5c3Bhcm1fcXVlcnk9JyArIHF1b3RlX3BsdXModGltZXN0YW1wUGFyYW0pDQoNCiMgRG8gdGhlIEhUVFAgcmVxdWVzdA0KDQp3aGlsZShyZXN1bHRDb3VudD09aW50KGxpbWl0KSk6DQoNCiAgICB1cmwgPSB1cmwrYXBpK3Nub3d0YWJsZSsnPycrcGFyYW1zKycmc3lzcGFybV9saW1pdD0nK3N0cihsaW1pdCkrJyZzeXNwYXJtX29mZnNldD0nK3N0cihvZmZzZXQpDQoNCiAgICBwcm94eURpY3QgPXt9DQoNCiAgICBpZiBkaWN0WydzZXRQcm94eSddID09ICdUcnVlJzoNCg0KICAgICAgICBwcm94eURpY3QgPSB7DQoNCiAgICAgICAgICAgICAgICAgICAgICAnaHR0cCcgIDogb3MuZW52aXJvblsnSFRUUF9QUk9YWSddLA0KDQogICAgICAgICAgICAgICAgICAgICAgJ2h0dHBzJyA6IG9zLmVudmlyb25bJ0hUVFBTX1BST1hZJ10gICAgICANCg0KICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgIA0KDQogICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQodXJsLCBhdXRoPSh1c2VyLCBwd2QpLCBoZWFkZXJzPWhlYWRlcnMgLHByb3hpZXM9cHJveHlEaWN0KQ0KDQogICAgbG9nZ2VyLmluZm8ocmVzcG9uc2UpDQoNCiAgICAjIENoZWNrIGZvciBIVFRQIGNvZGVzIG90aGVyIHRoYW4gMjAwDQoNCiAgICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSAhPSAyMDA6DQoNCiAgICAgICAgbG9nZ2VyLmluZm8oJ1N0YXR1czonLCByZXNwb25zZS5zdGF0dXNfY29kZSwgJ0hlYWRlcnM6JywgcmVzcG9uc2UuaGVhZGVycywgJ0Vycm9yIFJlc3BvbnNlOicscmVzcG9uc2UuanNvbigpKQ0KDQogICAgICAgIGV4aXQoKQ0KDQogICAgIyBEZWNvZGUgdGhlIEpTT04gcmVzcG9uc2UgaW50byBhIGRpY3Rpb25hcnkgYW5kIHVzZSB0aGUgZGF0YQ0KDQogICAgZGF0YSA9IHJlc3BvbnNlLmpzb24oKQ0KDQogICAgbG9nZ2VyLmluZm8oJ1JlY29yZHMgRmV0Y2hlZCB7MH0nLmZvcm1hdCggbGVuKGRhdGFbJ3Jlc3VsdCddKSkpDQoNCiAgICAjbG9nZ2VyLmluZm8oZGF0YSkNCg0KICAgIGJ0bSA9IFtdDQoNCiAgICBmb3Igcm93IGluIGRhdGFbJ3Jlc3VsdCddOg0KDQogICAgICAgIGJ0bS5hcHBlbmQoeydjYXNlX2lkJzpyb3dbJ251bWJlciddLCdjYXNlSnNvbic6c3RyKHJvdyksJ2V4dGVybmFsX2lkJzpyb3dbJ3N5c19pZCddLCdwcmlvcml0eSc6cm93Wydwcmlvcml0eSddLCdjYXRlZ29yeSc6cm93WydjYXRlZ29yeSddfSkNCg0KICAgICAgICBsb2dnZXIuZXJyb3Iocm93KQ0KDQogICAgc3BhcmsgPSBTcGFya1Nlc3Npb24uYnVpbGRlci5jb25maWcoJ3NwYXJrLnVpLnNob3dDb25zb2xlUHJvZ3Jlc3MnLCAnZmFsc2UnKS5nZXRPckNyZWF0ZSgpDQoNCiAgICBkZiA9IHNwYXJrLmNyZWF0ZURhdGFGcmFtZShidG0pDQoNCiAgICBkZiA9IGRmLndpdGhDb2x1bW4oJ3N0YXR1cycsbGl0KCdFeHRyYWN0ZWQnKSkNCg0KICAgIGRmID0gZGYud2l0aENvbHVtbignc291cmNlJyxsaXQoJ1NOT1cnKSkNCg0KICAgIGRmID0gZGYud2l0aENvbHVtbignYXBwbGljYXRpb25faWQnLGxpdChhcHBJZCkpDQoNCiAgICBjb2x1bW5MaXN0ID0gZGYuY29sdW1ucw0KDQogICAgbGVhcGRzID0gZGljdFsnTEVBUERhdGFTb3VyY2UnXQ0KDQogICAgbGVhcERTZGljdCA9anNvbi5sb2FkcyhsZWFwZHMpDQoNCiAgICANCg0KICAgIHVzZXJuYW1lID0gbGVhcERTZGljdFsndXNlck5hbWUnXQ0KDQogICAgcGFzc3dvcmQgPSBVdGlsaXRpZXMuZGVjcnlwdChsZWFwRFNkaWN0WydwYXNzd29yZCddLGxlYXBEU2RpY3RbJ3NhbHQnXSkNCg0KICAgIGhvc3QgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLmhvc3RuYW1lDQoNCiAgICBwb3J0ID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5wb3J0DQoNCiAgICBkYXRhYmFzZSA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkucGF0aC5yc3BsaXQoJy8nLCAxKVsxXQ0KDQogICAgaWYocmVzdWx0Q291bnQgPT0gMCk6DQoNCiAgICAgICAgYnJlYWs7DQoNCiAgICBkZiA9IGRmLnJlcGFydGl0aW9uKG1hdGguZmxvb3IocmVzdWx0Q291bnQvKGludChsaW1pdCkvMTApKSkNCg0KICAgIGxvZ2dlci5pbmZvKCdJbnNlcnRpbmcgUmVjb3JkcyBpbiBEQicpDQoNCiAgICBkZi5mb3JlYWNoUGFydGl0aW9uKHByb2Nlc3NfcGFydGl0aW9uKQ0KDQogICAgZGYuc2hvdygpDQoNCiAgICByZXN1bHRDb3VudCA9IGxlbihkYXRhWydyZXN1bHQnXSkNCg0KICAgIG9mZnNldCA9IG9mZnNldCArIGxpbWl0DQoNCmxvZ2dlci5pbmZvKCdDb21wbGV0ZWQnKQ0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQo=,leo1311
