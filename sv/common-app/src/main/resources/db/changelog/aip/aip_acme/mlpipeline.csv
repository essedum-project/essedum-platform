"created_by","created_date","deleted","description","job_id","json_content","lastmodifiedby","alias","lastmodifieddate","name","organization","type","version"
"admin","2021-04-05 09:47:02.150000","false","Train a classification model to predict clusters","NULL","{\"elements\":[{\"id\":\"nvSqf\",\"alias\":\"Dataset  Extractor\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"id\":39039,\"name\":\"Clusters\",\"alias\":\"Clusters\",\"description\":\"clustered Tickets with short description\",\"schema\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-21 11:03:07\",\"alias\":\"Cluster Classification\",\"id\":13,\"name\":\"ACMCLSTR30039\",\"description\":\"\",\"schemavalue\":\"[{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":1,\\\"recordcolumnname\\\":\\\"number\\\",\\\"recordcolumndisplayname\\\":\\\"number\\\",\\\"isprimarykey\\\":true,\\\"isautoincrement\\\":false,\\\"isunique\\\":true,\\\"isrequired\\\":true},{\\\"columntype\\\":\\\"varchar\\\",\\\"columnorder\\\":2,\\\"recordcolumnname\\\":\\\"clean_text\\\",\\\"recordcolumndisplayname\\\":\\\"text\\\",\\\"isprimarykey\\\":false,\\\"isautoincrement\\\":false,\\\"isunique\\\":false,\\\"isrequired\\\":true},{\\\"columntype\\\":\\\"varchar\\\",\\\"columnorder\\\":3,\\\"recordcolumnname\\\":\\\"clusterName\\\",\\\"recordcolumndisplayname\\\":\\\"clusterName\\\",\\\"isprimarykey\\\":false,\\\"isautoincrement\\\":false,\\\"isunique\\\":false,\\\"isrequired\\\":false},{\\\"columntype\\\":\\\"varchar\\\",\\\"columnorder\\\":4,\\\"recordcolumnname\\\":\\\"configurationItem\\\",\\\"recordcolumndisplayname\\\":\\\"configurationItem\\\",\\\"isprimarykey\\\":false,\\\"isautoincrement\\\":false,\\\"isunique\\\":false,\\\"isrequired\\\":false}]\",\"organization\":\"leo1311\",\"formtemplate\":\"[]\"},\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number , clean_text as text, post_ranking_cluster AS clusterName FROM @projectname_tickets_enriched WHERE post_ranking_cluster IS NOT NULL AND post_ranking_cluster <> ''\",\"Cacheable\":\"false\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"type\":\"r\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-21 11:01:56\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encnOsN7Ge7HZuvB9Z4Tobpr5LfVWGgdkxS\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"gBL2oW1CXmYVlFMotQnqjQeGevFjul91p7wutQx8N8Jj71UuoY7eMWasQ9jK5zhTCIwqod4DB9VqFlIC8n2W6w==\",\"organization\":\"leo1311\",\"dshashcode\":\"6dff27e9115bd0514b0e559d24ac28b5567259110cd168ea4378ceb12269b063\",\"activetime\":\"2021-06-21 11:01:55\",\"category\":\"SQL\"},\"backingDataset\":\"\",\"organization\":\"leo1311\",\"datasetType\":\"MYSQL\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false,\"restnode\":false},\"position_x\":\"50\",\"position_y\":\"110\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"oksqS\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]},{\"id\":\"aPhFu\",\"alias\":\"Count  Vectorizer\",\"name\":\"Count  Vectorizer\",\"classname\":\"CountVectorizerFeatureExtractorConfig\",\"category\":\"FeatureExtractorConfig\",\"attributes\":{\"inputCol\":\"clean_tokens\",\"outputCol\":\"features\",\"vocabSize\":\"1000000\"},\"position_x\":\"710\",\"position_y\":\"110\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"UkSyH\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"acJqw\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"inputCol\":\"text\",\"outputCol\":\"text\",\"vocabSize\":\"text\"},\"context\":[{\"inputCol\":\"tokens\",\"outputCol\":\"clean_tokens\",\"stopWords\":\"\"},{\"inputCol\":\"text\",\"outputCol\":\"tokens\"},{\"dataset\":{\"id\":39039,\"name\":\"Clusters\",\"alias\":\"Clusters\",\"description\":\"clustered Tickets with short description\",\"schema\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-21 11:03:07\",\"alias\":\"Cluster Classification\",\"id\":13,\"name\":\"ACMCLSTR30039\",\"description\":\"\",\"schemavalue\":\"[{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":1,\\\"recordcolumnname\\\":\\\"number\\\",\\\"recordcolumndisplayname\\\":\\\"number\\\",\\\"isprimarykey\\\":true,\\\"isautoincrement\\\":false,\\\"isunique\\\":true,\\\"isrequired\\\":true},{\\\"columntype\\\":\\\"varchar\\\",\\\"columnorder\\\":2,\\\"recordcolumnname\\\":\\\"clean_text\\\",\\\"recordcolumndisplayname\\\":\\\"text\\\",\\\"isprimarykey\\\":false,\\\"isautoincrement\\\":false,\\\"isunique\\\":false,\\\"isrequired\\\":true},{\\\"columntype\\\":\\\"varchar\\\",\\\"columnorder\\\":3,\\\"recordcolumnname\\\":\\\"clusterName\\\",\\\"recordcolumndisplayname\\\":\\\"clusterName\\\",\\\"isprimarykey\\\":false,\\\"isautoincrement\\\":false,\\\"isunique\\\":false,\\\"isrequired\\\":false},{\\\"columntype\\\":\\\"varchar\\\",\\\"columnorder\\\":4,\\\"recordcolumnname\\\":\\\"configurationItem\\\",\\\"recordcolumndisplayname\\\":\\\"configurationItem\\\",\\\"isprimarykey\\\":false,\\\"isautoincrement\\\":false,\\\"isunique\\\":false,\\\"isrequired\\\":false}]\",\"organization\":\"leo1311\",\"formtemplate\":\"[]\"},\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number , clean_text as text, post_ranking_cluster AS clusterName FROM @projectname_tickets_enriched WHERE post_ranking_cluster IS NOT NULL AND post_ranking_cluster <> ''\",\"Cacheable\":\"false\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"type\":\"r\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-21 11:01:56\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encnOsN7Ge7HZuvB9Z4Tobpr5LfVWGgdkxS\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"gBL2oW1CXmYVlFMotQnqjQeGevFjul91p7wutQx8N8Jj71UuoY7eMWasQ9jK5zhTCIwqod4DB9VqFlIC8n2W6w==\",\"organization\":\"leo1311\",\"dshashcode\":\"6dff27e9115bd0514b0e559d24ac28b5567259110cd168ea4378ceb12269b063\",\"activetime\":\"2021-06-21 11:01:55\",\"category\":\"SQL\"},\"backingDataset\":\"\",\"organization\":\"leo1311\",\"datasetType\":\"MYSQL\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false,\"restnode\":false}]},{\"id\":\"KoEyF\",\"alias\":\"Random  Forest  Classifier\",\"name\":\"Random  Forest  Classifier\",\"classname\":\"RandomForestClassifierConfig\",\"category\":\"AnalyzerConfig\",\"attributes\":{\"labelCol\":\"cluster_idx\",\"featuresCol\":\"features\",\"numTrees\":\"10\"},\"position_x\":\"60\",\"position_y\":\"240\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"PwxMg\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"UkSyH\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"labelCol\":\"text\",\"featuresCol\":\"text\",\"numTrees\":\"text\"},\"context\":[{\"inputCols\":\"clusterName\",\"outputCols\":\"cluster_idx\"},{\"inputCol\":\"clean_tokens\",\"outputCol\":\"features\",\"vocabSize\":\"1000000\"},{\"inputCol\":\"tokens\",\"outputCol\":\"clean_tokens\",\"stopWords\":\"\"},{\"inputCol\":\"text\",\"outputCol\":\"tokens\"},{\"dataset\":{\"id\":39039,\"name\":\"Clusters\",\"alias\":\"Clusters\",\"description\":\"clustered Tickets with short description\",\"schema\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-21 11:03:07\",\"alias\":\"Cluster Classification\",\"id\":13,\"name\":\"ACMCLSTR30039\",\"description\":\"\",\"schemavalue\":\"[{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":1,\\\"recordcolumnname\\\":\\\"number\\\",\\\"recordcolumndisplayname\\\":\\\"number\\\",\\\"isprimarykey\\\":true,\\\"isautoincrement\\\":false,\\\"isunique\\\":true,\\\"isrequired\\\":true},{\\\"columntype\\\":\\\"varchar\\\",\\\"columnorder\\\":2,\\\"recordcolumnname\\\":\\\"clean_text\\\",\\\"recordcolumndisplayname\\\":\\\"text\\\",\\\"isprimarykey\\\":false,\\\"isautoincrement\\\":false,\\\"isunique\\\":false,\\\"isrequired\\\":true},{\\\"columntype\\\":\\\"varchar\\\",\\\"columnorder\\\":3,\\\"recordcolumnname\\\":\\\"clusterName\\\",\\\"recordcolumndisplayname\\\":\\\"clusterName\\\",\\\"isprimarykey\\\":false,\\\"isautoincrement\\\":false,\\\"isunique\\\":false,\\\"isrequired\\\":false},{\\\"columntype\\\":\\\"varchar\\\",\\\"columnorder\\\":4,\\\"recordcolumnname\\\":\\\"configurationItem\\\",\\\"recordcolumndisplayname\\\":\\\"configurationItem\\\",\\\"isprimarykey\\\":false,\\\"isautoincrement\\\":false,\\\"isunique\\\":false,\\\"isrequired\\\":false}]\",\"organization\":\"leo1311\",\"formtemplate\":\"[]\"},\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number , clean_text as text, post_ranking_cluster AS clusterName FROM @projectname_tickets_enriched WHERE post_ranking_cluster IS NOT NULL AND post_ranking_cluster <> ''\",\"Cacheable\":\"false\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"type\":\"r\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-21 11:01:56\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encnOsN7Ge7HZuvB9Z4Tobpr5LfVWGgdkxS\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"gBL2oW1CXmYVlFMotQnqjQeGevFjul91p7wutQx8N8Jj71UuoY7eMWasQ9jK5zhTCIwqod4DB9VqFlIC8n2W6w==\",\"organization\":\"leo1311\",\"dshashcode\":\"6dff27e9115bd0514b0e559d24ac28b5567259110cd168ea4378ceb12269b063\",\"activetime\":\"2021-06-21 11:01:55\",\"category\":\"SQL\"},\"backingDataset\":\"\",\"organization\":\"leo1311\",\"datasetType\":\"MYSQL\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false,\"restnode\":false}]},{\"id\":\"PwxMg\",\"alias\":\"Model  Sink\",\"name\":\"Model  Sink\",\"classname\":\"ModelSinkConfig\",\"category\":\"BaseConfig\",\"attributes\":{\"modelName\":\"IIAClusterClassification\"},\"position_x\":\"330\",\"position_y\":\"240\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"KoEyF\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"kOIVY\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"modelName\":\"text\"},\"context\":[{\"labelCol\":\"cluster_idx\",\"featuresCol\":\"features\",\"numTrees\":\"10\"},{\"inputCols\":\"clusterName\",\"outputCols\":\"cluster_idx\"},{\"inputCol\":\"clean_tokens\",\"outputCol\":\"features\",\"vocabSize\":\"1000000\"},{\"inputCol\":\"tokens\",\"outputCol\":\"clean_tokens\",\"stopWords\":\"\"},{\"inputCol\":\"text\",\"outputCol\":\"tokens\"},{\"dataset\":{\"id\":39039,\"name\":\"Clusters\",\"alias\":\"Clusters\",\"description\":\"clustered Tickets with short description\",\"schema\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-21 11:03:07\",\"alias\":\"Cluster Classification\",\"id\":13,\"name\":\"ACMCLSTR30039\",\"description\":\"\",\"schemavalue\":\"[{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":1,\\\"recordcolumnname\\\":\\\"number\\\",\\\"recordcolumndisplayname\\\":\\\"number\\\",\\\"isprimarykey\\\":true,\\\"isautoincrement\\\":false,\\\"isunique\\\":true,\\\"isrequired\\\":true},{\\\"columntype\\\":\\\"varchar\\\",\\\"columnorder\\\":2,\\\"recordcolumnname\\\":\\\"clean_text\\\",\\\"recordcolumndisplayname\\\":\\\"text\\\",\\\"isprimarykey\\\":false,\\\"isautoincrement\\\":false,\\\"isunique\\\":false,\\\"isrequired\\\":true},{\\\"columntype\\\":\\\"varchar\\\",\\\"columnorder\\\":3,\\\"recordcolumnname\\\":\\\"clusterName\\\",\\\"recordcolumndisplayname\\\":\\\"clusterName\\\",\\\"isprimarykey\\\":false,\\\"isautoincrement\\\":false,\\\"isunique\\\":false,\\\"isrequired\\\":false},{\\\"columntype\\\":\\\"varchar\\\",\\\"columnorder\\\":4,\\\"recordcolumnname\\\":\\\"configurationItem\\\",\\\"recordcolumndisplayname\\\":\\\"configurationItem\\\",\\\"isprimarykey\\\":false,\\\"isautoincrement\\\":false,\\\"isunique\\\":false,\\\"isrequired\\\":false}]\",\"organization\":\"leo1311\",\"formtemplate\":\"[]\"},\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number , clean_text as text, post_ranking_cluster AS clusterName FROM @projectname_tickets_enriched WHERE post_ranking_cluster IS NOT NULL AND post_ranking_cluster <> ''\",\"Cacheable\":\"false\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"type\":\"r\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-21 11:01:56\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encnOsN7Ge7HZuvB9Z4Tobpr5LfVWGgdkxS\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"gBL2oW1CXmYVlFMotQnqjQeGevFjul91p7wutQx8N8Jj71UuoY7eMWasQ9jK5zhTCIwqod4DB9VqFlIC8n2W6w==\",\"organization\":\"leo1311\",\"dshashcode\":\"6dff27e9115bd0514b0e559d24ac28b5567259110cd168ea4378ceb12269b063\",\"activetime\":\"2021-06-21 11:01:55\",\"category\":\"SQL\"},\"backingDataset\":\"\",\"organization\":\"leo1311\",\"datasetType\":\"MYSQL\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false,\"restnode\":false}]},{\"id\":\"kOIVY\",\"alias\":\"Post  Processing  Script\",\"name\":\"Post  Processing  Script\",\"classname\":\"PostProcessingScriptConfig\",\"category\":\"BaseConfig\",\"attributes\":{\"params\":\"\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"from pyspark.ml.feature import IndexToString\\r\",\"from datetime import datetime\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model,dataset):\\r\",\"        print(dataset)\\r\",\"        data = dataset.select('number','prediction')\\r\",\"        indexer = model.stages[3]\\r\",\"        labeler = IndexToString(inputCol='prediction', outputCol='cluster_classification_label', labels=indexer.labels)\\r\",\"        dataset = labeler.transform(data)\\r\",\"        dataset = dataset.drop('prediction')\\r\",\"        dataset = dataset.withColumn('last_updated', lit(datetime.now()))\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},\"position_x\":\"600\",\"position_y\":\"240\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"PwxMg\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"kqYQR\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\",\"out2\"],\"requiredJars\":[],\"formats\":{\"params\":\"textarea\",\"script\":\"textarea\"},\"context\":[{\"modelName\":\"IIAClusterClassification\"},{\"labelCol\":\"cluster_idx\",\"featuresCol\":\"features\",\"numTrees\":\"10\"},{\"inputCols\":\"clusterName\",\"outputCols\":\"cluster_idx\"},{\"inputCol\":\"clean_tokens\",\"outputCol\":\"features\",\"vocabSize\":\"1000000\"},{\"inputCol\":\"tokens\",\"outputCol\":\"clean_tokens\",\"stopWords\":\"\"},{\"inputCol\":\"text\",\"outputCol\":\"tokens\"},{\"dataset\":{\"id\":39039,\"name\":\"Clusters\",\"alias\":\"Clusters\",\"description\":\"clustered Tickets with short description\",\"schema\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-21 11:03:07\",\"alias\":\"Cluster Classification\",\"id\":13,\"name\":\"ACMCLSTR30039\",\"description\":\"\",\"schemavalue\":\"[{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":1,\\\"recordcolumnname\\\":\\\"number\\\",\\\"recordcolumndisplayname\\\":\\\"number\\\",\\\"isprimarykey\\\":true,\\\"isautoincrement\\\":false,\\\"isunique\\\":true,\\\"isrequired\\\":true},{\\\"columntype\\\":\\\"varchar\\\",\\\"columnorder\\\":2,\\\"recordcolumnname\\\":\\\"clean_text\\\",\\\"recordcolumndisplayname\\\":\\\"text\\\",\\\"isprimarykey\\\":false,\\\"isautoincrement\\\":false,\\\"isunique\\\":false,\\\"isrequired\\\":true},{\\\"columntype\\\":\\\"varchar\\\",\\\"columnorder\\\":3,\\\"recordcolumnname\\\":\\\"clusterName\\\",\\\"recordcolumndisplayname\\\":\\\"clusterName\\\",\\\"isprimarykey\\\":false,\\\"isautoincrement\\\":false,\\\"isunique\\\":false,\\\"isrequired\\\":false},{\\\"columntype\\\":\\\"varchar\\\",\\\"columnorder\\\":4,\\\"recordcolumnname\\\":\\\"configurationItem\\\",\\\"recordcolumndisplayname\\\":\\\"configurationItem\\\",\\\"isprimarykey\\\":false,\\\"isautoincrement\\\":false,\\\"isunique\\\":false,\\\"isrequired\\\":false}]\",\"organization\":\"leo1311\",\"formtemplate\":\"[]\"},\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number , clean_text as text, post_ranking_cluster AS clusterName FROM @projectname_tickets_enriched WHERE post_ranking_cluster IS NOT NULL AND post_ranking_cluster <> ''\",\"Cacheable\":\"false\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"type\":\"r\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-21 11:01:56\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encnOsN7Ge7HZuvB9Z4Tobpr5LfVWGgdkxS\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"gBL2oW1CXmYVlFMotQnqjQeGevFjul91p7wutQx8N8Jj71UuoY7eMWasQ9jK5zhTCIwqod4DB9VqFlIC8n2W6w==\",\"organization\":\"leo1311\",\"dshashcode\":\"6dff27e9115bd0514b0e559d24ac28b5567259110cd168ea4378ceb12269b063\",\"activetime\":\"2021-06-21 11:01:55\",\"category\":\"SQL\"},\"backingDataset\":\"\",\"organization\":\"leo1311\",\"datasetType\":\"MYSQL\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false,\"restnode\":false}]},{\"id\":\"kqYQR\",\"alias\":\"Dataset  Loader\",\"name\":\"Dataset  Loader\",\"classname\":\"DatasetLoaderConfig\",\"category\":\"LoaderConfig\",\"attributes\":{\"dataset\":{\"id\":39038,\"name\":\"ClassifiedClusters\",\"alias\":\"ClassifiedClusters\",\"description\":\"Classified Clusters for training data\",\"schema\":{\"id\":10106,\"name\":\"ClusterClassification\",\"schemavalue\":\"[{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":1,\\\"recordcolumnname\\\":\\\"number\\\",\\\"recordcolumndisplayname\\\":\\\"number\\\"},{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":2,\\\"recordcolumnname\\\":\\\"configurationItem\\\",\\\"recordcolumndisplayname\\\":\\\"configurationItem\\\"},{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":3,\\\"recordcolumnname\\\":\\\"clusterName\\\",\\\"recordcolumndisplayname\\\":\\\"clusterName\\\"},{\\\"columntype\\\":\\\"int\\\",\\\"columnorder\\\":4,\\\"recordcolumnname\\\":\\\"projectId\\\",\\\"recordcolumndisplayname\\\":\\\"projectId\\\"},{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":5,\\\"recordcolumnname\\\":\\\"shortDescription\\\",\\\"recordcolumndisplayname\\\":\\\"shortDescription\\\"}]\",\"organization\":\"leo1311\"},\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number, cluster_classification_label,  last_updated from @projectname_tickets_enriched  \",\"Cacheable\":\"false\",\"isStreaming\":\"false\",\"writeMode\":\"update\",\"params\":\"{}\",\"tableName\":\"@projectname_tickets_enriched\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"type\":\"rw\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"datasetType\":\"MYSQL\",\"groups\":\"\",\"expStatus\":0,\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-21 11:01:56\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encnOsN7Ge7HZuvB9Z4Tobpr5LfVWGgdkxS\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"gBL2oW1CXmYVlFMotQnqjQeGevFjul91p7wutQx8N8Jj71UuoY7eMWasQ9jK5zhTCIwqod4DB9VqFlIC8n2W6w==\",\"organization\":\"leo1311\",\"dshashcode\":\"6dff27e9115bd0514b0e559d24ac28b5567259110cd168ea4378ceb12269b063\",\"activetime\":\"2021-06-21 11:01:55\",\"category\":\"SQL\"}},\"applySchema\":false},\"position_x\":\"860\",\"position_y\":\"240\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"kOIVY\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"applySchema\":\"checkbox\"},\"context\":[{\"params\":\"\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"from pyspark.ml.feature import IndexToString\\r\",\"from datetime import datetime\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model,dataset):\\r\",\"        print(dataset)\\r\",\"        data = dataset.select('number','prediction')\\r\",\"        indexer = model.stages[3]\\r\",\"        labeler = IndexToString(inputCol='prediction', outputCol='cluster_classification_label', labels=indexer.labels)\\r\",\"        dataset = labeler.transform(data)\\r\",\"        dataset = dataset.drop('prediction')\\r\",\"        dataset = dataset.withColumn('last_updated', lit(datetime.now()))\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"modelName\":\"IIAClusterClassification\"},{\"labelCol\":\"cluster_idx\",\"featuresCol\":\"features\",\"numTrees\":\"10\"},{\"inputCols\":\"clusterName\",\"outputCols\":\"cluster_idx\"},{\"inputCol\":\"clean_tokens\",\"outputCol\":\"features\",\"vocabSize\":\"1000000\"},{\"inputCol\":\"tokens\",\"outputCol\":\"clean_tokens\",\"stopWords\":\"\"},{\"inputCol\":\"text\",\"outputCol\":\"tokens\"},{\"dataset\":{\"id\":39039,\"name\":\"Clusters\",\"alias\":\"Clusters\",\"description\":\"clustered Tickets with short description\",\"schema\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-21 11:03:07\",\"alias\":\"Cluster Classification\",\"id\":13,\"name\":\"ACMCLSTR30039\",\"description\":\"\",\"schemavalue\":\"[{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":1,\\\"recordcolumnname\\\":\\\"number\\\",\\\"recordcolumndisplayname\\\":\\\"number\\\",\\\"isprimarykey\\\":true,\\\"isautoincrement\\\":false,\\\"isunique\\\":true,\\\"isrequired\\\":true},{\\\"columntype\\\":\\\"varchar\\\",\\\"columnorder\\\":2,\\\"recordcolumnname\\\":\\\"clean_text\\\",\\\"recordcolumndisplayname\\\":\\\"text\\\",\\\"isprimarykey\\\":false,\\\"isautoincrement\\\":false,\\\"isunique\\\":false,\\\"isrequired\\\":true},{\\\"columntype\\\":\\\"varchar\\\",\\\"columnorder\\\":3,\\\"recordcolumnname\\\":\\\"clusterName\\\",\\\"recordcolumndisplayname\\\":\\\"clusterName\\\",\\\"isprimarykey\\\":false,\\\"isautoincrement\\\":false,\\\"isunique\\\":false,\\\"isrequired\\\":false},{\\\"columntype\\\":\\\"varchar\\\",\\\"columnorder\\\":4,\\\"recordcolumnname\\\":\\\"configurationItem\\\",\\\"recordcolumndisplayname\\\":\\\"configurationItem\\\",\\\"isprimarykey\\\":false,\\\"isautoincrement\\\":false,\\\"isunique\\\":false,\\\"isrequired\\\":false}]\",\"organization\":\"leo1311\",\"formtemplate\":\"[]\"},\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number , clean_text as text, post_ranking_cluster AS clusterName FROM @projectname_tickets_enriched WHERE post_ranking_cluster IS NOT NULL AND post_ranking_cluster <> ''\",\"Cacheable\":\"false\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"type\":\"r\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-21 11:01:56\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encnOsN7Ge7HZuvB9Z4Tobpr5LfVWGgdkxS\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"gBL2oW1CXmYVlFMotQnqjQeGevFjul91p7wutQx8N8Jj71UuoY7eMWasQ9jK5zhTCIwqod4DB9VqFlIC8n2W6w==\",\"organization\":\"leo1311\",\"dshashcode\":\"6dff27e9115bd0514b0e559d24ac28b5567259110cd168ea4378ceb12269b063\",\"activetime\":\"2021-06-21 11:01:55\",\"category\":\"SQL\"},\"backingDataset\":\"\",\"organization\":\"leo1311\",\"datasetType\":\"MYSQL\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false,\"restnode\":false}]},{\"id\":\"UkSyH\",\"alias\":\"String  Indexer\",\"name\":\"String  Indexer\",\"classname\":\"StringIndexerTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"inputCols\":\"clusterName\",\"outputCols\":\"cluster_idx\"},\"position_x\":\"930\",\"position_y\":\"110\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"aPhFu\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"KoEyF\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"inputCols\":\"text\",\"outputCols\":\"text\"},\"context\":[{\"inputCol\":\"clean_tokens\",\"outputCol\":\"features\",\"vocabSize\":\"1000000\"},{\"inputCol\":\"tokens\",\"outputCol\":\"clean_tokens\",\"stopWords\":\"\"},{\"inputCol\":\"text\",\"outputCol\":\"tokens\"},{\"dataset\":{\"id\":39039,\"name\":\"Clusters\",\"alias\":\"Clusters\",\"description\":\"clustered Tickets with short description\",\"schema\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-21 11:03:07\",\"alias\":\"Cluster Classification\",\"id\":13,\"name\":\"ACMCLSTR30039\",\"description\":\"\",\"schemavalue\":\"[{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":1,\\\"recordcolumnname\\\":\\\"number\\\",\\\"recordcolumndisplayname\\\":\\\"number\\\",\\\"isprimarykey\\\":true,\\\"isautoincrement\\\":false,\\\"isunique\\\":true,\\\"isrequired\\\":true},{\\\"columntype\\\":\\\"varchar\\\",\\\"columnorder\\\":2,\\\"recordcolumnname\\\":\\\"clean_text\\\",\\\"recordcolumndisplayname\\\":\\\"text\\\",\\\"isprimarykey\\\":false,\\\"isautoincrement\\\":false,\\\"isunique\\\":false,\\\"isrequired\\\":true},{\\\"columntype\\\":\\\"varchar\\\",\\\"columnorder\\\":3,\\\"recordcolumnname\\\":\\\"clusterName\\\",\\\"recordcolumndisplayname\\\":\\\"clusterName\\\",\\\"isprimarykey\\\":false,\\\"isautoincrement\\\":false,\\\"isunique\\\":false,\\\"isrequired\\\":false},{\\\"columntype\\\":\\\"varchar\\\",\\\"columnorder\\\":4,\\\"recordcolumnname\\\":\\\"configurationItem\\\",\\\"recordcolumndisplayname\\\":\\\"configurationItem\\\",\\\"isprimarykey\\\":false,\\\"isautoincrement\\\":false,\\\"isunique\\\":false,\\\"isrequired\\\":false}]\",\"organization\":\"leo1311\",\"formtemplate\":\"[]\"},\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number , clean_text as text, post_ranking_cluster AS clusterName FROM @projectname_tickets_enriched WHERE post_ranking_cluster IS NOT NULL AND post_ranking_cluster <> ''\",\"Cacheable\":\"false\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"type\":\"r\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-21 11:01:56\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encnOsN7Ge7HZuvB9Z4Tobpr5LfVWGgdkxS\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"gBL2oW1CXmYVlFMotQnqjQeGevFjul91p7wutQx8N8Jj71UuoY7eMWasQ9jK5zhTCIwqod4DB9VqFlIC8n2W6w==\",\"organization\":\"leo1311\",\"dshashcode\":\"6dff27e9115bd0514b0e559d24ac28b5567259110cd168ea4378ceb12269b063\",\"activetime\":\"2021-06-21 11:01:55\",\"category\":\"SQL\"},\"backingDataset\":\"\",\"organization\":\"leo1311\",\"datasetType\":\"MYSQL\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false,\"restnode\":false}]},{\"id\":\"acJqw\",\"alias\":\"Stop  Words  Remover\",\"name\":\"Stop  Words  Remover\",\"classname\":\"StopWordsRemoverTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"inputCol\":\"tokens\",\"outputCol\":\"clean_tokens\",\"stopWords\":\"\"},\"position_x\":\"490\",\"position_y\":\"110\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"aPhFu\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"oksqS\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"inputCol\":\"text\",\"outputCol\":\"text\",\"stopWords\":\"text\"},\"context\":[{\"inputCol\":\"text\",\"outputCol\":\"tokens\"},{\"dataset\":{\"id\":39039,\"name\":\"Clusters\",\"alias\":\"Clusters\",\"description\":\"clustered Tickets with short description\",\"schema\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-21 11:03:07\",\"alias\":\"Cluster Classification\",\"id\":13,\"name\":\"ACMCLSTR30039\",\"description\":\"\",\"schemavalue\":\"[{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":1,\\\"recordcolumnname\\\":\\\"number\\\",\\\"recordcolumndisplayname\\\":\\\"number\\\",\\\"isprimarykey\\\":true,\\\"isautoincrement\\\":false,\\\"isunique\\\":true,\\\"isrequired\\\":true},{\\\"columntype\\\":\\\"varchar\\\",\\\"columnorder\\\":2,\\\"recordcolumnname\\\":\\\"clean_text\\\",\\\"recordcolumndisplayname\\\":\\\"text\\\",\\\"isprimarykey\\\":false,\\\"isautoincrement\\\":false,\\\"isunique\\\":false,\\\"isrequired\\\":true},{\\\"columntype\\\":\\\"varchar\\\",\\\"columnorder\\\":3,\\\"recordcolumnname\\\":\\\"clusterName\\\",\\\"recordcolumndisplayname\\\":\\\"clusterName\\\",\\\"isprimarykey\\\":false,\\\"isautoincrement\\\":false,\\\"isunique\\\":false,\\\"isrequired\\\":false},{\\\"columntype\\\":\\\"varchar\\\",\\\"columnorder\\\":4,\\\"recordcolumnname\\\":\\\"configurationItem\\\",\\\"recordcolumndisplayname\\\":\\\"configurationItem\\\",\\\"isprimarykey\\\":false,\\\"isautoincrement\\\":false,\\\"isunique\\\":false,\\\"isrequired\\\":false}]\",\"organization\":\"leo1311\",\"formtemplate\":\"[]\"},\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number , clean_text as text, post_ranking_cluster AS clusterName FROM @projectname_tickets_enriched WHERE post_ranking_cluster IS NOT NULL AND post_ranking_cluster <> ''\",\"Cacheable\":\"false\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"type\":\"r\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-21 11:01:56\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encnOsN7Ge7HZuvB9Z4Tobpr5LfVWGgdkxS\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"gBL2oW1CXmYVlFMotQnqjQeGevFjul91p7wutQx8N8Jj71UuoY7eMWasQ9jK5zhTCIwqod4DB9VqFlIC8n2W6w==\",\"organization\":\"leo1311\",\"dshashcode\":\"6dff27e9115bd0514b0e559d24ac28b5567259110cd168ea4378ceb12269b063\",\"activetime\":\"2021-06-21 11:01:55\",\"category\":\"SQL\"},\"backingDataset\":\"\",\"organization\":\"leo1311\",\"datasetType\":\"MYSQL\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false,\"restnode\":false}]},{\"id\":\"oksqS\",\"alias\":\"Tokenizer\",\"name\":\"Tokenizer\",\"classname\":\"TokenizerTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"inputCol\":\"text\",\"outputCol\":\"tokens\"},\"position_x\":\"260\",\"position_y\":\"110\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"nvSqf\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"acJqw\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"inputCol\":\"text\",\"outputCol\":\"text\"},\"context\":[{\"dataset\":{\"id\":39039,\"name\":\"Clusters\",\"alias\":\"Clusters\",\"description\":\"clustered Tickets with short description\",\"schema\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-21 11:03:07\",\"alias\":\"Cluster Classification\",\"id\":13,\"name\":\"ACMCLSTR30039\",\"description\":\"\",\"schemavalue\":\"[{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":1,\\\"recordcolumnname\\\":\\\"number\\\",\\\"recordcolumndisplayname\\\":\\\"number\\\",\\\"isprimarykey\\\":true,\\\"isautoincrement\\\":false,\\\"isunique\\\":true,\\\"isrequired\\\":true},{\\\"columntype\\\":\\\"varchar\\\",\\\"columnorder\\\":2,\\\"recordcolumnname\\\":\\\"clean_text\\\",\\\"recordcolumndisplayname\\\":\\\"text\\\",\\\"isprimarykey\\\":false,\\\"isautoincrement\\\":false,\\\"isunique\\\":false,\\\"isrequired\\\":true},{\\\"columntype\\\":\\\"varchar\\\",\\\"columnorder\\\":3,\\\"recordcolumnname\\\":\\\"clusterName\\\",\\\"recordcolumndisplayname\\\":\\\"clusterName\\\",\\\"isprimarykey\\\":false,\\\"isautoincrement\\\":false,\\\"isunique\\\":false,\\\"isrequired\\\":false},{\\\"columntype\\\":\\\"varchar\\\",\\\"columnorder\\\":4,\\\"recordcolumnname\\\":\\\"configurationItem\\\",\\\"recordcolumndisplayname\\\":\\\"configurationItem\\\",\\\"isprimarykey\\\":false,\\\"isautoincrement\\\":false,\\\"isunique\\\":false,\\\"isrequired\\\":false}]\",\"organization\":\"leo1311\",\"formtemplate\":\"[]\"},\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number , clean_text as text, post_ranking_cluster AS clusterName FROM @projectname_tickets_enriched WHERE post_ranking_cluster IS NOT NULL AND post_ranking_cluster <> ''\",\"Cacheable\":\"false\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"type\":\"r\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-21 11:01:56\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encnOsN7Ge7HZuvB9Z4Tobpr5LfVWGgdkxS\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"gBL2oW1CXmYVlFMotQnqjQeGevFjul91p7wutQx8N8Jj71UuoY7eMWasQ9jK5zhTCIwqod4DB9VqFlIC8n2W6w==\",\"organization\":\"leo1311\",\"dshashcode\":\"6dff27e9115bd0514b0e559d24ac28b5567259110cd168ea4378ceb12269b063\",\"activetime\":\"2021-06-21 11:01:55\",\"category\":\"SQL\"},\"backingDataset\":\"\",\"organization\":\"leo1311\",\"datasetType\":\"MYSQL\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false,\"restnode\":false}]}]}","admin","Cluster Classification Training","2021-06-21 11:15:34","ClusterClassification_Training","leo1311","DragAndDrop","NULL"
"admin","2021-04-05 09:52:16.408000","false","Predict cluster using trained model","NULL","{\"elements\":[{\"id\":\"nvSqf\",\"alias\":\"Dataset  Extractor\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"id\":39048,\"name\":\"NewTickets\",\"alias\":\"NewTickets\",\"description\":\"New Tickets to predict cluster\",\"schema\":{\"id\":10106,\"name\":\"ClusterClassification\",\"schemavalue\":\"[{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":1,\\\"recordcolumnname\\\":\\\"number\\\",\\\"recordcolumndisplayname\\\":\\\"number\\\"},{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":2,\\\"recordcolumnname\\\":\\\"configurationItem\\\",\\\"recordcolumndisplayname\\\":\\\"configurationItem\\\"},{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":3,\\\"recordcolumnname\\\":\\\"clusterName\\\",\\\"recordcolumndisplayname\\\":\\\"clusterName\\\"},{\\\"columntype\\\":\\\"int\\\",\\\"columnorder\\\":4,\\\"recordcolumnname\\\":\\\"projectId\\\",\\\"recordcolumndisplayname\\\":\\\"projectId\\\"},{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":5,\\\"recordcolumnname\\\":\\\"shortDescription\\\",\\\"recordcolumndisplayname\\\":\\\"shortDescription\\\"}]\",\"organization\":\"leo1311\"},\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number, shortdescription as text, configurationItem, ''AS clusterName FROM  @projectname_tickets WHERE (shortdescription is not null and shortdescription <> '')\",\"Cacheable\":\"false\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"type\":\"r\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"datasetType\":\"MYSQL\",\"expStatus\":0,\"groups\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-21 11:01:56\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encnOsN7Ge7HZuvB9Z4Tobpr5LfVWGgdkxS\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"gBL2oW1CXmYVlFMotQnqjQeGevFjul91p7wutQx8N8Jj71UuoY7eMWasQ9jK5zhTCIwqod4DB9VqFlIC8n2W6w==\",\"organization\":\"leo1311\",\"dshashcode\":\"6dff27e9115bd0514b0e559d24ac28b5567259110cd168ea4378ceb12269b063\",\"activetime\":\"2021-06-21 11:01:55\",\"category\":\"SQL\"}},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false,\"restnode\":true},\"position_x\":\"50\",\"position_y\":\"150\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"YNfFg\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]},{\"id\":\"kOIVY\",\"alias\":\"Post  Processing  Script\",\"name\":\"Post  Processing  Script\",\"classname\":\"PostProcessingScriptConfig\",\"category\":\"BaseConfig\",\"attributes\":{\"params\":\"\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"from pyspark.ml.feature import IndexToString\\r\",\"from datetime import datetime\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model,dataset):\\r\",\"        data = dataset.select('number','prediction')\\r\",\"        indexer = model.stages[3]\\r\",\"        labeler = IndexToString(inputCol='prediction', outputCol='cluster_classification_label', labels=indexer.labels)\\r\",\"        dataset = labeler.transform(data)\\r\",\"        dataset = dataset.select('number','cluster_classification_label')\\r\",\"        dataset = dataset.withColumn('last_updated', lit(datetime.now()))\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},\"position_x\":\"730\",\"position_y\":\"150\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"kqYQR\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"NjHpk\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\",\"out2\"],\"requiredJars\":[],\"formats\":{\"params\":\"textarea\",\"script\":\"textarea\"},\"context\":[{\"modelName\":\"IIAClusterClassification\"},{\"params\":\"{'WorkflowName': '', 'IncidentId': ''}\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import logging\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        incidentId = self.params['IncidentId']\\r\",\"        if incidentId !='':\\r\",\"            dataset = dataset.filter(dataset['number'] == incidentId)\\r\",\"        dataset.collect()\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"dataset\":{\"id\":39048,\"name\":\"NewTickets\",\"alias\":\"NewTickets\",\"description\":\"New Tickets to predict cluster\",\"schema\":{\"id\":10106,\"name\":\"ClusterClassification\",\"schemavalue\":\"[{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":1,\\\"recordcolumnname\\\":\\\"number\\\",\\\"recordcolumndisplayname\\\":\\\"number\\\"},{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":2,\\\"recordcolumnname\\\":\\\"configurationItem\\\",\\\"recordcolumndisplayname\\\":\\\"configurationItem\\\"},{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":3,\\\"recordcolumnname\\\":\\\"clusterName\\\",\\\"recordcolumndisplayname\\\":\\\"clusterName\\\"},{\\\"columntype\\\":\\\"int\\\",\\\"columnorder\\\":4,\\\"recordcolumnname\\\":\\\"projectId\\\",\\\"recordcolumndisplayname\\\":\\\"projectId\\\"},{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":5,\\\"recordcolumnname\\\":\\\"shortDescription\\\",\\\"recordcolumndisplayname\\\":\\\"shortDescription\\\"}]\",\"organization\":\"leo1311\"},\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number, shortdescription as text, configurationItem, ''AS clusterName FROM  @projectname_tickets WHERE (shortdescription is not null and shortdescription <> '')\",\"Cacheable\":\"false\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"type\":\"r\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"datasetType\":\"MYSQL\",\"expStatus\":0,\"groups\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-21 11:01:56\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encnOsN7Ge7HZuvB9Z4Tobpr5LfVWGgdkxS\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"gBL2oW1CXmYVlFMotQnqjQeGevFjul91p7wutQx8N8Jj71UuoY7eMWasQ9jK5zhTCIwqod4DB9VqFlIC8n2W6w==\",\"organization\":\"leo1311\",\"dshashcode\":\"6dff27e9115bd0514b0e559d24ac28b5567259110cd168ea4378ceb12269b063\",\"activetime\":\"2021-06-21 11:01:55\",\"category\":\"SQL\"}},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false,\"restnode\":true}]},{\"id\":\"kqYQR\",\"alias\":\"Dataset  Loader\",\"name\":\"Dataset  Loader\",\"classname\":\"DatasetLoaderConfig\",\"category\":\"LoaderConfig\",\"attributes\":{\"dataset\":{\"id\":39038,\"name\":\"ClassifiedClusters\",\"alias\":\"ClassifiedClusters\",\"description\":\"Classified Clusters for training data\",\"schema\":{\"id\":10106,\"name\":\"ClusterClassification\",\"schemavalue\":\"[{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":1,\\\"recordcolumnname\\\":\\\"number\\\",\\\"recordcolumndisplayname\\\":\\\"number\\\"},{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":2,\\\"recordcolumnname\\\":\\\"configurationItem\\\",\\\"recordcolumndisplayname\\\":\\\"configurationItem\\\"},{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":3,\\\"recordcolumnname\\\":\\\"clusterName\\\",\\\"recordcolumndisplayname\\\":\\\"clusterName\\\"},{\\\"columntype\\\":\\\"int\\\",\\\"columnorder\\\":4,\\\"recordcolumnname\\\":\\\"projectId\\\",\\\"recordcolumndisplayname\\\":\\\"projectId\\\"},{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":5,\\\"recordcolumnname\\\":\\\"shortDescription\\\",\\\"recordcolumndisplayname\\\":\\\"shortDescription\\\"}]\",\"organization\":\"leo1311\"},\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number,cluster_classification_label,  last_updated from @projectname_tickets_enriched\",\"Cacheable\":\"false\",\"isStreaming\":\"false\",\"writeMode\":\"update\",\"params\":\"{}\",\"tableName\":\"@projectname_tickets_enriched\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"type\":\"rw\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"datasetType\":\"MYSQL\",\"groups\":\"\",\"expStatus\":0,\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-21 11:01:56\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encnOsN7Ge7HZuvB9Z4Tobpr5LfVWGgdkxS\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"gBL2oW1CXmYVlFMotQnqjQeGevFjul91p7wutQx8N8Jj71UuoY7eMWasQ9jK5zhTCIwqod4DB9VqFlIC8n2W6w==\",\"organization\":\"leo1311\",\"dshashcode\":\"6dff27e9115bd0514b0e559d24ac28b5567259110cd168ea4378ceb12269b063\",\"activetime\":\"2021-06-21 11:01:55\",\"category\":\"SQL\"}},\"applySchema\":false},\"position_x\":\"950\",\"position_y\":\"150\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"kOIVY\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"applySchema\":\"checkbox\"},\"context\":[{\"params\":\"\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"from pyspark.ml.feature import IndexToString\\r\",\"from datetime import datetime\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model,dataset):\\r\",\"        data = dataset.select('number','prediction')\\r\",\"        indexer = model.stages[3]\\r\",\"        labeler = IndexToString(inputCol='prediction', outputCol='cluster_classification_label', labels=indexer.labels)\\r\",\"        dataset = labeler.transform(data)\\r\",\"        dataset = dataset.select('number','cluster_classification_label')\\r\",\"        dataset = dataset.withColumn('last_updated', lit(datetime.now()))\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"modelName\":\"IIAClusterClassification\"},{\"params\":\"{'WorkflowName': '', 'IncidentId': ''}\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import logging\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        incidentId = self.params['IncidentId']\\r\",\"        if incidentId !='':\\r\",\"            dataset = dataset.filter(dataset['number'] == incidentId)\\r\",\"        dataset.collect()\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"dataset\":{\"id\":39048,\"name\":\"NewTickets\",\"alias\":\"NewTickets\",\"description\":\"New Tickets to predict cluster\",\"schema\":{\"id\":10106,\"name\":\"ClusterClassification\",\"schemavalue\":\"[{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":1,\\\"recordcolumnname\\\":\\\"number\\\",\\\"recordcolumndisplayname\\\":\\\"number\\\"},{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":2,\\\"recordcolumnname\\\":\\\"configurationItem\\\",\\\"recordcolumndisplayname\\\":\\\"configurationItem\\\"},{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":3,\\\"recordcolumnname\\\":\\\"clusterName\\\",\\\"recordcolumndisplayname\\\":\\\"clusterName\\\"},{\\\"columntype\\\":\\\"int\\\",\\\"columnorder\\\":4,\\\"recordcolumnname\\\":\\\"projectId\\\",\\\"recordcolumndisplayname\\\":\\\"projectId\\\"},{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":5,\\\"recordcolumnname\\\":\\\"shortDescription\\\",\\\"recordcolumndisplayname\\\":\\\"shortDescription\\\"}]\",\"organization\":\"leo1311\"},\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number, shortdescription as text, configurationItem, ''AS clusterName FROM  @projectname_tickets WHERE (shortdescription is not null and shortdescription <> '')\",\"Cacheable\":\"false\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"type\":\"r\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"datasetType\":\"MYSQL\",\"expStatus\":0,\"groups\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-21 11:01:56\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encnOsN7Ge7HZuvB9Z4Tobpr5LfVWGgdkxS\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"gBL2oW1CXmYVlFMotQnqjQeGevFjul91p7wutQx8N8Jj71UuoY7eMWasQ9jK5zhTCIwqod4DB9VqFlIC8n2W6w==\",\"organization\":\"leo1311\",\"dshashcode\":\"6dff27e9115bd0514b0e559d24ac28b5567259110cd168ea4378ceb12269b063\",\"activetime\":\"2021-06-21 11:01:55\",\"category\":\"SQL\"}},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false,\"restnode\":true}]},{\"id\":\"NjHpk\",\"alias\":\"Model  Source\",\"name\":\"Model  Source\",\"classname\":\"ModelSourceConfig\",\"category\":\"BaseConfig\",\"attributes\":{\"modelName\":\"IIAClusterClassification\"},\"position_x\":\"510\",\"position_y\":\"150\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"kOIVY\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"YNfFg\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"modelName\":\"text\"},\"context\":[{\"params\":\"{'WorkflowName': '', 'IncidentId': ''}\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import logging\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        incidentId = self.params['IncidentId']\\r\",\"        if incidentId !='':\\r\",\"            dataset = dataset.filter(dataset['number'] == incidentId)\\r\",\"        dataset.collect()\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"dataset\":{\"id\":39048,\"name\":\"NewTickets\",\"alias\":\"NewTickets\",\"description\":\"New Tickets to predict cluster\",\"schema\":{\"id\":10106,\"name\":\"ClusterClassification\",\"schemavalue\":\"[{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":1,\\\"recordcolumnname\\\":\\\"number\\\",\\\"recordcolumndisplayname\\\":\\\"number\\\"},{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":2,\\\"recordcolumnname\\\":\\\"configurationItem\\\",\\\"recordcolumndisplayname\\\":\\\"configurationItem\\\"},{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":3,\\\"recordcolumnname\\\":\\\"clusterName\\\",\\\"recordcolumndisplayname\\\":\\\"clusterName\\\"},{\\\"columntype\\\":\\\"int\\\",\\\"columnorder\\\":4,\\\"recordcolumnname\\\":\\\"projectId\\\",\\\"recordcolumndisplayname\\\":\\\"projectId\\\"},{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":5,\\\"recordcolumnname\\\":\\\"shortDescription\\\",\\\"recordcolumndisplayname\\\":\\\"shortDescription\\\"}]\",\"organization\":\"leo1311\"},\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number, shortdescription as text, configurationItem, ''AS clusterName FROM  @projectname_tickets WHERE (shortdescription is not null and shortdescription <> '')\",\"Cacheable\":\"false\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"type\":\"r\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"datasetType\":\"MYSQL\",\"expStatus\":0,\"groups\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-21 11:01:56\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encnOsN7Ge7HZuvB9Z4Tobpr5LfVWGgdkxS\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"gBL2oW1CXmYVlFMotQnqjQeGevFjul91p7wutQx8N8Jj71UuoY7eMWasQ9jK5zhTCIwqod4DB9VqFlIC8n2W6w==\",\"organization\":\"leo1311\",\"dshashcode\":\"6dff27e9115bd0514b0e559d24ac28b5567259110cd168ea4378ceb12269b063\",\"activetime\":\"2021-06-21 11:01:55\",\"category\":\"SQL\"}},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false,\"restnode\":true}]},{\"id\":\"YNfFg\",\"alias\":\"Pre  Processing  Script\",\"name\":\"Pre  Processing  Script\",\"classname\":\"PreProcessingScriptConfig\",\"category\":\"BaseConfig\",\"attributes\":{\"params\":\"{'WorkflowName': '', 'IncidentId': ''}\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import logging\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        incidentId = self.params['IncidentId']\\r\",\"        if incidentId !='':\\r\",\"            dataset = dataset.filter(dataset['number'] == incidentId)\\r\",\"        dataset.collect()\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},\"position_x\":\"300\",\"position_y\":\"150\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"dataset1\",\"position\":\"LeftMiddle\",\"elementId\":\"nvSqf\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"NjHpk\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"dataset1\",\"dataset2\",\"dataset3\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"params\":\"textarea\",\"script\":\"textarea\"},\"context\":[{\"dataset\":{\"id\":39048,\"name\":\"NewTickets\",\"alias\":\"NewTickets\",\"description\":\"New Tickets to predict cluster\",\"schema\":{\"id\":10106,\"name\":\"ClusterClassification\",\"schemavalue\":\"[{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":1,\\\"recordcolumnname\\\":\\\"number\\\",\\\"recordcolumndisplayname\\\":\\\"number\\\"},{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":2,\\\"recordcolumnname\\\":\\\"configurationItem\\\",\\\"recordcolumndisplayname\\\":\\\"configurationItem\\\"},{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":3,\\\"recordcolumnname\\\":\\\"clusterName\\\",\\\"recordcolumndisplayname\\\":\\\"clusterName\\\"},{\\\"columntype\\\":\\\"int\\\",\\\"columnorder\\\":4,\\\"recordcolumnname\\\":\\\"projectId\\\",\\\"recordcolumndisplayname\\\":\\\"projectId\\\"},{\\\"columntype\\\":\\\"string\\\",\\\"columnorder\\\":5,\\\"recordcolumnname\\\":\\\"shortDescription\\\",\\\"recordcolumndisplayname\\\":\\\"shortDescription\\\"}]\",\"organization\":\"leo1311\"},\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number, shortdescription as text, configurationItem, ''AS clusterName FROM  @projectname_tickets WHERE (shortdescription is not null and shortdescription <> '')\",\"Cacheable\":\"false\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"type\":\"r\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"datasetType\":\"MYSQL\",\"expStatus\":0,\"groups\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-21 11:01:56\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encnOsN7Ge7HZuvB9Z4Tobpr5LfVWGgdkxS\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"gBL2oW1CXmYVlFMotQnqjQeGevFjul91p7wutQx8N8Jj71UuoY7eMWasQ9jK5zhTCIwqod4DB9VqFlIC8n2W6w==\",\"organization\":\"leo1311\",\"dshashcode\":\"6dff27e9115bd0514b0e559d24ac28b5567259110cd168ea4378ceb12269b063\",\"activetime\":\"2021-06-21 11:01:55\",\"category\":\"SQL\"}},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false,\"restnode\":true}]}]}","admin","Cluster Prediction","2021-06-21 11:13:54","Cluster_Prediction","leo1311","DragAndDrop","NULL"
"admin","2021-05-25 15:06:10.595000","false","MAP Key Phrases","NULL","{\"elements\":[{\"attributes\":{\"filetype\":\"Python3\",\"files\":[\"ACMKYPHR40814_leo1311.py\"],\"arguments\":[{\"name\":\"LEAPDS\",\"value\":\"leo1311\",\"type\":\"Datasource\",\"index\":\"1\"},{\"name\":\"TableName\",\"value\":\"@projectname_phrase_extraction\",\"type\":\"Text\",\"index\":\"2\",\"alias\":\"@projectname_phrase_extraction\"}],\"dataset\":[]}}]}","NULL","Key Phrase Mapping","NULL","ACMKYPHR40814","leo1311","NativeScript","NULL"
"admin","2021-04-05 11:38:22.204000","false","Named Entity Extraction","NULL","{\"elements\":[{\"id\":\"fgAKW\",\"alias\":\"Dataset  Extractor\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"id\":39045,\"name\":\"ticket_shortDescription\",\"alias\":\"ticket_shortDescription\",\"description\":\"tickets with short description\",\"schema\":{\"id\":10108,\"name\":\"NERExtraction\",\"alias\":\"NERExtraction\",\"schemavalue\":[{\"columntype\":\"string\",\"columnorder\":1,\"recordcolumnname\":\"number\",\"recordcolumndisplayname\":\"number\"},{\"columntype\":\"string\",\"columnorder\":2,\"recordcolumnname\":\"shortDescription\",\"recordcolumndisplayname\":\"shortDescription\"},{\"columntype\":\"string\",\"columnorder\":3,\"recordcolumnname\":\"namedEntity\",\"recordcolumndisplayname\":\"namedEntity\"}],\"organization\":\"leo1311\"},\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number,  shortdescription  FROM @projectname_tickets WHERE shortdescription != '' AND shortdescription IS NOT NULL \",\"Cacheable\":\"false\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"type\":\"r\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-10 17:08:39\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"enciJA+QyHJIh3qn/lHXQKhmbxHNp5c5qQe\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"uZEL8wN8KBpjxlGp7vmogYHrv8muq+383eAKOoU2hkXJQNfJUGqELqf7JlPfgX01Q7913nPE5X8sLO1Xxu1y9g==\",\"organization\":\"leo1311\",\"dshashcode\":\"6dff27e9115bd0514b0e559d24ac28b5567259110cd168ea4378ceb12269b063\",\"activetime\":\"2021-06-10T17:08:38.614+00:00\",\"category\":\"SQL\"},\"backingDataset\":\"\",\"organization\":\"leo1311\",\"datasetType\":\"MYSQL\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false,\"restnode\":false},\"position_x\":\"60\",\"position_y\":\"110\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"QUUgg\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]},{\"id\":\"wtuSh\",\"alias\":\"Post  Processing  Script\",\"name\":\"Post  Processing  Script\",\"classname\":\"PostProcessingScriptConfig\",\"category\":\"BaseConfig\",\"attributes\":{\"params\":\"\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"from pyspark.sql import *\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model, dataset):\\r\",\"        \\r\",\"        dataset = dataset.withColumn('namedEntities', array_distinct('filter_tokens'))\\r\",\"        dataset = dataset.withColumn('entityValue', explode('namedEntities'))\\r\",\"        dataset = dataset.withColumn('entityId', dense_rank().over(Window.partitionBy('number').orderBy('entityValue')))\\r\",\"        dataset = dataset.withColumn('entityName', concat(lit('entity'), 'entityId'))\\r\",\"        dataset = dataset.select('number','entityName','entityValue')\\r\",\"        return dataset\\r\"]},\"position_x\":\"330\",\"position_y\":\"250\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"CNAxZ\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"HWHBP\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\",\"out2\"],\"requiredJars\":[],\"formats\":{\"params\":\"textarea\",\"script\":\"textarea\"},\"context\":[{\"script\":[\"from pyspark.sql.types import *\\r\",\"from pyspark.sql.functions import *\\r\",\"import enchant\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        def filterTokens(tokens):\\r\",\"            d = enchant.Dict('en_US')\\r\",\"            tokens = [t for t in tokens if d.check(t) == False]\\r\",\"            return tokens\\r\",\"\\r\",\"        udfFilterTokens = udf(filterTokens,ArrayType(StringType()))\\r\",\"        dataset = dataset.withColumn('filter_tokens',udfFilterTokens('tokens'))\\r\",\"\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"inputCol\":\"lemmetized_text\",\"outputCol\":\"tokens\",\"pattern\":\"\\\\W\"},{\"inputCol\":\"shortDescription\",\"outputCol\":\"lemmetized_text\",\"tags\":\"\"},{\"params\":\"{\\\"IncidentId\\\":\\\"\\\"}\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        incidentId = self.params['IncidentId']\\r\",\"        if incidentId !='':\\r\",\"            dataset = dataset.filter(dataset['number'] == incidentId)\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"dataset\":{\"id\":39045,\"name\":\"ticket_shortDescription\",\"alias\":\"ticket_shortDescription\",\"description\":\"tickets with short description\",\"schema\":{\"id\":10108,\"name\":\"NERExtraction\",\"alias\":\"NERExtraction\",\"schemavalue\":[{\"columntype\":\"string\",\"columnorder\":1,\"recordcolumnname\":\"number\",\"recordcolumndisplayname\":\"number\"},{\"columntype\":\"string\",\"columnorder\":2,\"recordcolumnname\":\"shortDescription\",\"recordcolumndisplayname\":\"shortDescription\"},{\"columntype\":\"string\",\"columnorder\":3,\"recordcolumnname\":\"namedEntity\",\"recordcolumndisplayname\":\"namedEntity\"}],\"organization\":\"leo1311\"},\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number,  shortdescription  FROM @projectname_tickets WHERE shortdescription != '' AND shortdescription IS NOT NULL \",\"Cacheable\":\"false\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"type\":\"r\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-10 17:08:39\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"enciJA+QyHJIh3qn/lHXQKhmbxHNp5c5qQe\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"uZEL8wN8KBpjxlGp7vmogYHrv8muq+383eAKOoU2hkXJQNfJUGqELqf7JlPfgX01Q7913nPE5X8sLO1Xxu1y9g==\",\"organization\":\"leo1311\",\"dshashcode\":\"6dff27e9115bd0514b0e559d24ac28b5567259110cd168ea4378ceb12269b063\",\"activetime\":\"2021-06-10T17:08:38.614+00:00\",\"category\":\"SQL\"},\"backingDataset\":\"\",\"organization\":\"leo1311\",\"datasetType\":\"MYSQL\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false,\"restnode\":false}]},{\"id\":\"CNAxZ\",\"alias\":\"Dataset  Loader\",\"name\":\"Dataset  Loader\",\"classname\":\"DatasetLoaderConfig\",\"category\":\"LoaderConfig\",\"attributes\":{\"dataset\":{\"id\":39046,\"name\":\"aio_tkt_ner\",\"alias\":\"aio_tkt_ner\",\"description\":\"NER for Tickets\",\"schema\":{\"id\":10105,\"name\":\"iamp\",\"schemavalue\":[],\"organization\":\"leo1311\"},\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"Select * from @projectname_tickets_ner\",\"Cacheable\":\"false\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_tickets_ner\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"type\":\"rw\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"datasetType\":\"MYSQL\",\"groups\":\"\",\"expStatus\":0,\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-10 17:08:39\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"enciJA+QyHJIh3qn/lHXQKhmbxHNp5c5qQe\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"uZEL8wN8KBpjxlGp7vmogYHrv8muq+383eAKOoU2hkXJQNfJUGqELqf7JlPfgX01Q7913nPE5X8sLO1Xxu1y9g==\",\"organization\":\"leo1311\",\"dshashcode\":\"6dff27e9115bd0514b0e559d24ac28b5567259110cd168ea4378ceb12269b063\",\"activetime\":\"2021-06-10T17:08:38.614+00:00\",\"category\":\"SQL\"}},\"applySchema\":false},\"position_x\":\"540\",\"position_y\":\"250\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"wtuSh\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"applySchema\":\"checkbox\"},\"context\":[{\"params\":\"\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"from pyspark.sql import *\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model, dataset):\\r\",\"        \\r\",\"        dataset = dataset.withColumn('namedEntities', array_distinct('filter_tokens'))\\r\",\"        dataset = dataset.withColumn('entityValue', explode('namedEntities'))\\r\",\"        dataset = dataset.withColumn('entityId', dense_rank().over(Window.partitionBy('number').orderBy('entityValue')))\\r\",\"        dataset = dataset.withColumn('entityName', concat(lit('entity'), 'entityId'))\\r\",\"        dataset = dataset.select('number','entityName','entityValue')\\r\",\"        return dataset\\r\"]},{\"script\":[\"from pyspark.sql.types import *\\r\",\"from pyspark.sql.functions import *\\r\",\"import enchant\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        def filterTokens(tokens):\\r\",\"            d = enchant.Dict('en_US')\\r\",\"            tokens = [t for t in tokens if d.check(t) == False]\\r\",\"            return tokens\\r\",\"\\r\",\"        udfFilterTokens = udf(filterTokens,ArrayType(StringType()))\\r\",\"        dataset = dataset.withColumn('filter_tokens',udfFilterTokens('tokens'))\\r\",\"\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"inputCol\":\"lemmetized_text\",\"outputCol\":\"tokens\",\"pattern\":\"\\\\W\"},{\"inputCol\":\"shortDescription\",\"outputCol\":\"lemmetized_text\",\"tags\":\"\"},{\"params\":\"{\\\"IncidentId\\\":\\\"\\\"}\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        incidentId = self.params['IncidentId']\\r\",\"        if incidentId !='':\\r\",\"            dataset = dataset.filter(dataset['number'] == incidentId)\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"dataset\":{\"id\":39045,\"name\":\"ticket_shortDescription\",\"alias\":\"ticket_shortDescription\",\"description\":\"tickets with short description\",\"schema\":{\"id\":10108,\"name\":\"NERExtraction\",\"alias\":\"NERExtraction\",\"schemavalue\":[{\"columntype\":\"string\",\"columnorder\":1,\"recordcolumnname\":\"number\",\"recordcolumndisplayname\":\"number\"},{\"columntype\":\"string\",\"columnorder\":2,\"recordcolumnname\":\"shortDescription\",\"recordcolumndisplayname\":\"shortDescription\"},{\"columntype\":\"string\",\"columnorder\":3,\"recordcolumnname\":\"namedEntity\",\"recordcolumndisplayname\":\"namedEntity\"}],\"organization\":\"leo1311\"},\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number,  shortdescription  FROM @projectname_tickets WHERE shortdescription != '' AND shortdescription IS NOT NULL \",\"Cacheable\":\"false\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"type\":\"r\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-10 17:08:39\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"enciJA+QyHJIh3qn/lHXQKhmbxHNp5c5qQe\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"uZEL8wN8KBpjxlGp7vmogYHrv8muq+383eAKOoU2hkXJQNfJUGqELqf7JlPfgX01Q7913nPE5X8sLO1Xxu1y9g==\",\"organization\":\"leo1311\",\"dshashcode\":\"6dff27e9115bd0514b0e559d24ac28b5567259110cd168ea4378ceb12269b063\",\"activetime\":\"2021-06-10T17:08:38.614+00:00\",\"category\":\"SQL\"},\"backingDataset\":\"\",\"organization\":\"leo1311\",\"datasetType\":\"MYSQL\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false,\"restnode\":false}]},{\"id\":\"fjZcE\",\"alias\":\"Word  Lemmetizer\",\"name\":\"Word  Lemmetizer\",\"classname\":\"WordLemmetizerTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"inputCol\":\"shortDescription\",\"outputCol\":\"lemmetized_text\",\"tags\":\"\"},\"position_x\":\"520\",\"position_y\":\"110\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"uWRrr\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"QUUgg\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"inputCol\":\"textarea\",\"outputCol\":\"textarea\",\"tags\":\"textarea\"},\"context\":[{\"params\":\"{\\\"IncidentId\\\":\\\"\\\"}\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        incidentId = self.params['IncidentId']\\r\",\"        if incidentId !='':\\r\",\"            dataset = dataset.filter(dataset['number'] == incidentId)\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"dataset\":{\"id\":39045,\"name\":\"ticket_shortDescription\",\"alias\":\"ticket_shortDescription\",\"description\":\"tickets with short description\",\"schema\":{\"id\":10108,\"name\":\"NERExtraction\",\"alias\":\"NERExtraction\",\"schemavalue\":[{\"columntype\":\"string\",\"columnorder\":1,\"recordcolumnname\":\"number\",\"recordcolumndisplayname\":\"number\"},{\"columntype\":\"string\",\"columnorder\":2,\"recordcolumnname\":\"shortDescription\",\"recordcolumndisplayname\":\"shortDescription\"},{\"columntype\":\"string\",\"columnorder\":3,\"recordcolumnname\":\"namedEntity\",\"recordcolumndisplayname\":\"namedEntity\"}],\"organization\":\"leo1311\"},\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number,  shortdescription  FROM @projectname_tickets WHERE shortdescription != '' AND shortdescription IS NOT NULL \",\"Cacheable\":\"false\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"type\":\"r\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-10 17:08:39\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"enciJA+QyHJIh3qn/lHXQKhmbxHNp5c5qQe\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"uZEL8wN8KBpjxlGp7vmogYHrv8muq+383eAKOoU2hkXJQNfJUGqELqf7JlPfgX01Q7913nPE5X8sLO1Xxu1y9g==\",\"organization\":\"leo1311\",\"dshashcode\":\"6dff27e9115bd0514b0e559d24ac28b5567259110cd168ea4378ceb12269b063\",\"activetime\":\"2021-06-10T17:08:38.614+00:00\",\"category\":\"SQL\"},\"backingDataset\":\"\",\"organization\":\"leo1311\",\"datasetType\":\"MYSQL\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false,\"restnode\":false}]},{\"id\":\"HWHBP\",\"alias\":\"Filter Tokens\",\"name\":\"Python  Script  Transformer\",\"classname\":\"PythonScriptTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"script\":[\"from pyspark.sql.types import *\\r\",\"from pyspark.sql.functions import *\\r\",\"import enchant\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        def filterTokens(tokens):\\r\",\"            d = enchant.Dict('en_US')\\r\",\"            tokens = [t for t in tokens if d.check(t) == False]\\r\",\"            return tokens\\r\",\"\\r\",\"        udfFilterTokens = udf(filterTokens,ArrayType(StringType()))\\r\",\"        dataset = dataset.withColumn('filter_tokens',udfFilterTokens('tokens'))\\r\",\"\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},\"position_x\":\"900\",\"position_y\":\"110\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"wtuSh\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"uWRrr\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"script\":\"textarea\"},\"context\":[{\"inputCol\":\"lemmetized_text\",\"outputCol\":\"tokens\",\"pattern\":\"\\\\W\"},{\"inputCol\":\"shortDescription\",\"outputCol\":\"lemmetized_text\",\"tags\":\"\"},{\"params\":\"{\\\"IncidentId\\\":\\\"\\\"}\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        incidentId = self.params['IncidentId']\\r\",\"        if incidentId !='':\\r\",\"            dataset = dataset.filter(dataset['number'] == incidentId)\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"dataset\":{\"id\":39045,\"name\":\"ticket_shortDescription\",\"alias\":\"ticket_shortDescription\",\"description\":\"tickets with short description\",\"schema\":{\"id\":10108,\"name\":\"NERExtraction\",\"alias\":\"NERExtraction\",\"schemavalue\":[{\"columntype\":\"string\",\"columnorder\":1,\"recordcolumnname\":\"number\",\"recordcolumndisplayname\":\"number\"},{\"columntype\":\"string\",\"columnorder\":2,\"recordcolumnname\":\"shortDescription\",\"recordcolumndisplayname\":\"shortDescription\"},{\"columntype\":\"string\",\"columnorder\":3,\"recordcolumnname\":\"namedEntity\",\"recordcolumndisplayname\":\"namedEntity\"}],\"organization\":\"leo1311\"},\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number,  shortdescription  FROM @projectname_tickets WHERE shortdescription != '' AND shortdescription IS NOT NULL \",\"Cacheable\":\"false\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"type\":\"r\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-10 17:08:39\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"enciJA+QyHJIh3qn/lHXQKhmbxHNp5c5qQe\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"uZEL8wN8KBpjxlGp7vmogYHrv8muq+383eAKOoU2hkXJQNfJUGqELqf7JlPfgX01Q7913nPE5X8sLO1Xxu1y9g==\",\"organization\":\"leo1311\",\"dshashcode\":\"6dff27e9115bd0514b0e559d24ac28b5567259110cd168ea4378ceb12269b063\",\"activetime\":\"2021-06-10T17:08:38.614+00:00\",\"category\":\"SQL\"},\"backingDataset\":\"\",\"organization\":\"leo1311\",\"datasetType\":\"MYSQL\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false,\"restnode\":false}]},{\"id\":\"uWRrr\",\"alias\":\"Regex  Tokenizer\",\"name\":\"Regex  Tokenizer\",\"classname\":\"RegexTokenizerTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"inputCol\":\"lemmetized_text\",\"outputCol\":\"tokens\",\"pattern\":\"\\\\W\"},\"position_x\":\"720\",\"position_y\":\"110\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"fjZcE\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"HWHBP\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"inputCol\":\"text\",\"outputCol\":\"text\",\"pattern\":\"text\"},\"context\":[{\"inputCol\":\"shortDescription\",\"outputCol\":\"lemmetized_text\",\"tags\":\"\"},{\"params\":\"{\\\"IncidentId\\\":\\\"\\\"}\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        incidentId = self.params['IncidentId']\\r\",\"        if incidentId !='':\\r\",\"            dataset = dataset.filter(dataset['number'] == incidentId)\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"dataset\":{\"id\":39045,\"name\":\"ticket_shortDescription\",\"alias\":\"ticket_shortDescription\",\"description\":\"tickets with short description\",\"schema\":{\"id\":10108,\"name\":\"NERExtraction\",\"alias\":\"NERExtraction\",\"schemavalue\":[{\"columntype\":\"string\",\"columnorder\":1,\"recordcolumnname\":\"number\",\"recordcolumndisplayname\":\"number\"},{\"columntype\":\"string\",\"columnorder\":2,\"recordcolumnname\":\"shortDescription\",\"recordcolumndisplayname\":\"shortDescription\"},{\"columntype\":\"string\",\"columnorder\":3,\"recordcolumnname\":\"namedEntity\",\"recordcolumndisplayname\":\"namedEntity\"}],\"organization\":\"leo1311\"},\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number,  shortdescription  FROM @projectname_tickets WHERE shortdescription != '' AND shortdescription IS NOT NULL \",\"Cacheable\":\"false\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"type\":\"r\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-10 17:08:39\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"enciJA+QyHJIh3qn/lHXQKhmbxHNp5c5qQe\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"uZEL8wN8KBpjxlGp7vmogYHrv8muq+383eAKOoU2hkXJQNfJUGqELqf7JlPfgX01Q7913nPE5X8sLO1Xxu1y9g==\",\"organization\":\"leo1311\",\"dshashcode\":\"6dff27e9115bd0514b0e559d24ac28b5567259110cd168ea4378ceb12269b063\",\"activetime\":\"2021-06-10T17:08:38.614+00:00\",\"category\":\"SQL\"},\"backingDataset\":\"\",\"organization\":\"leo1311\",\"datasetType\":\"MYSQL\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false,\"restnode\":false}]},{\"id\":\"QUUgg\",\"alias\":\"Pre  Processing  Script\",\"name\":\"Pre  Processing  Script\",\"classname\":\"PreProcessingScriptConfig\",\"category\":\"BaseConfig\",\"attributes\":{\"params\":\"{\\\"IncidentId\\\":\\\"\\\"}\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        incidentId = self.params['IncidentId']\\r\",\"        if incidentId !='':\\r\",\"            dataset = dataset.filter(dataset['number'] == incidentId)\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},\"position_x\":\"290\",\"position_y\":\"110\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"dataset1\",\"position\":\"LeftMiddle\",\"elementId\":\"fgAKW\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"fjZcE\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"dataset1\",\"dataset2\",\"dataset3\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"params\":\"textarea\",\"script\":\"textarea\"},\"context\":[{\"dataset\":{\"id\":39045,\"name\":\"ticket_shortDescription\",\"alias\":\"ticket_shortDescription\",\"description\":\"tickets with short description\",\"schema\":{\"id\":10108,\"name\":\"NERExtraction\",\"alias\":\"NERExtraction\",\"schemavalue\":[{\"columntype\":\"string\",\"columnorder\":1,\"recordcolumnname\":\"number\",\"recordcolumndisplayname\":\"number\"},{\"columntype\":\"string\",\"columnorder\":2,\"recordcolumnname\":\"shortDescription\",\"recordcolumndisplayname\":\"shortDescription\"},{\"columntype\":\"string\",\"columnorder\":3,\"recordcolumnname\":\"namedEntity\",\"recordcolumndisplayname\":\"namedEntity\"}],\"organization\":\"leo1311\"},\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number,  shortdescription  FROM @projectname_tickets WHERE shortdescription != '' AND shortdescription IS NOT NULL \",\"Cacheable\":\"false\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"type\":\"r\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-06-10 17:08:39\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"enciJA+QyHJIh3qn/lHXQKhmbxHNp5c5qQe\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"uZEL8wN8KBpjxlGp7vmogYHrv8muq+383eAKOoU2hkXJQNfJUGqELqf7JlPfgX01Q7913nPE5X8sLO1Xxu1y9g==\",\"organization\":\"leo1311\",\"dshashcode\":\"6dff27e9115bd0514b0e559d24ac28b5567259110cd168ea4378ceb12269b063\",\"activetime\":\"2021-06-10T17:08:38.614+00:00\",\"category\":\"SQL\"},\"backingDataset\":\"\",\"organization\":\"leo1311\",\"datasetType\":\"MYSQL\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false,\"restnode\":false}]}]}","admin","Extract_NER","2021-06-10 17:09:57","Extract_NER","leo1311","DragAndDrop","NULL"
"admin","2021-04-05T11:43:44.820","false","Detect Anomalies in CPU Utilization","NULL","{\"elements\":[{\"attributes\":{\"filetype\":\"Python2\",\"files\":[\"AnomalyDetection_Core.py\"],\"arguments\":[],\"dataset\":[]}}]}","admin","AnomalyDetection","2021-04-05T13:57:46","AnomalyDetection","leo1311","NativeScript","NULL"
"admin","2021-04-28T09:28:53.964","false","Get metadata from ticketing tool","NULL","{\"elements\":[{\"attributes\":{\"filetype\":\"Python3\",\"files\":[\"SNOW_Get_Metadata_API_Acme.py\"],\"arguments\":[{\"name\":\"SnowDataSource\",\"value\":\"ACMSNWQB82627\",\"index\":\"1\",\"type\":\"Datasource\",\"alias\":\"SNOW\"},{\"name\":\"api\",\"value\":\"/api/now/table/\",\"index\":\"2\"},{\"name\":\"params\",\"value\":\"sysparm_display_value=true\",\"index\":\"4\"},{\"name\":\"LEAPDataSource\",\"value\":\"leo1311\",\"index\":\"8\",\"type\":\"Datasource\"},{\"name\":\"setProxy\",\"value\":\"True\",\"type\":\"Text\",\"index\":\"14\"},{\"name\":\"dataTable\",\"value\":\"@projectname_tool_metadata\",\"type\":\"Text\",\"index\":\"6\"}]}}]}","NULL","SNOW_Get_Metadata_API","NULL","SNOW_Get_Metadata_API","leo1311","NativeScript","NULL"
"admin","2021-05-03T05:29:22.875","false","Get Incidents, service requests, ChangeRequest, IncidentTask","NULL","{\"elements\":[{\"attributes\":{\"filetype\":\"Python3\",\"files\":[\"SNOW_Get_API_Acme.py\"],\"arguments\":[{\"name\":\"SnowDataSource\",\"value\":\"ACMSNWQB82627\",\"type\":\"Datasource\",\"index\":\"1\",\"alias\":\"SNOW\"},{\"name\":\"api\",\"value\":\"/api/now/table/\",\"type\":\"Text\",\"index\":\"2\"},{\"name\":\"params\",\"value\":\"sysparm_display_value=true&sysparm_fields=number%2Cshort_description%2Cpriority%2Cstate%2Cdescription%2Csys_id%2Copened_at%2Csys_created_on%2Csys_updated_on%2Cclosed_at%2Cdue_date%2Csys_created_by%2Creopened_time%2Cresolved_at%2Ccategory%2Cclose_code%2Cimpact%2Curgency%2Crequested_for%2Cassignment_group%2Ccaller_id%2Cassigned_to%2Cresolved_by%2Cclosed_by%2Ccmdb_ci%2Cclose_notes%2Clocation%2Crequest_state%2Cprice%2Cspecial_instructions%2Capproval%2Cbusiness_service%2Crisk%2Ctype%2Crequested_by%2Cincident\",\"type\":\"Text\",\"index\":\"3\"},{\"name\":\"snowTable\",\"value\":\"incident\",\"type\":\"Text\",\"index\":\"5\"},{\"name\":\"setProxy\",\"value\":\"True\",\"type\":\"Text\",\"index\":\"6\"},{\"name\":\"LEAPDataSource\",\"value\":\"leo1311\",\"type\":\"Datasource\",\"index\":\"7\"},{\"name\":\"fullLoad\",\"value\":\"False\",\"type\":\"Text\",\"index\":\"8\"},{\"name\":\"TimeDelta(hrs)\",\"value\":\"1\",\"type\":\"Text\",\"index\":\"9\"},{\"name\":\"dataTable\",\"value\":\"@projectname_tickets\",\"type\":\"Text\",\"index\":\"9\"},{\"name\":\"limit\",\"value\":\"1000\",\"type\":\"Text\",\"index\":\"10\"},{\"name\":\"offset\",\"value\":\"0\",\"type\":\"Text\",\"index\":\"11\"}],\"dataset\":[]}}]}","NULL","SNOW_Get_API","NULL","SNOW_Get_API","leo1311","NativeScript","NULL"
"admin","2021-05-03T05:32:23.355","false","Create incident, service request, incident task, change request in SNOW and then in  icm_tickets","NULL","{\"elements\":[{\"attributes\":{\"filetype\":\"Python3\",\"files\":[\"SNOW_Create_API_Acme.py\"],\"arguments\":[{\"name\":\"SnowDataSource\",\"value\":\"ACMSNWQB82627\",\"index\":\"1\",\"type\":\"Datasource\",\"alias\":\"SNOW\"},{\"name\":\"api\",\"value\":\"/api/now/table/\",\"index\":\"2\"},{\"name\":\"params\",\"value\":\"sysparm_display_value=true&sysparm_fields=number%2Cshort_description%2Cpriority%2Cstate%2Cdescription%2Csys_id%2Copened_at%2Csys_created_on%2Csys_updated_on%2Cclosed_at%2Cdue_date%2Csys_created_by%2Creopened_time%2Cresolved_at%2Ccategory%2Cclose_code%2Cimpact%2Curgency%2Crequested_for%2Cassignment_group%2Ccaller_id%2Cassigned_to%2Cresolved_by%2Cclosed_by%2Ccmdb_ci%2Cclose_notes%2Clocation%2Crequest_state%2Cprice%2Cspecial_instructions%2Capproval%2Cbusiness_service%2Crisk%2Ctype%2Crequested_by%2Cincident\",\"index\":\"4\"},{\"name\":\"setProxy\",\"value\":\"True\",\"index\":\"7\"},{\"name\":\"incidentPayload\",\"value\":\"{\\\"shortdescription\\\": \\\"VPLBM01 FACEBOOK INSIGHTS LOG ERROR DETECTED\\\", \\\"priority\\\": \\\"5\\\", \\\"state\\\": \\\"1\\\"}\",\"index\":\"8\"},{\"name\":\"LEAPDataSource\",\"value\":\"leo1311\",\"index\":\"9\",\"type\":\"Datasource\"},{\"name\":\"ticketType\",\"value\":\"Incident\",\"type\":\"Text\",\"index\":\"9\"},{\"name\":\"dataTable\",\"value\":\"@projectname_tickets\",\"type\":\"Text\",\"index\":\"9\"}]}}]}","NULL","SNOW_Create_API","NULL","SNOW_Create_API","leo1311","NativeScript","NULL"
"admin","2021-05-03T05:32:52.837","false","Update incident, service request, change request, incident task in SNOW","NULL","{\"elements\":[{\"attributes\":{\"filetype\":\"Python3\",\"files\":[\"SNOW_Update_API_Acme.py\"],\"arguments\":[{\"name\":\"SnowDataSource\",\"value\":\"ACMSNWQB82627\",\"index\":\"1\",\"type\":\"Datasource\",\"alias\":\"SNOW\"},{\"name\":\"api\",\"value\":\"/api/now/table/\",\"index\":\"2\"},{\"name\":\"params\",\"value\":\"sysparm_display_value=true&sysparm_fields=number%2Cshort_description%2Cpriority%2Cstate%2Cdescription%2Csys_id%2Copened_at%2Csys_created_on%2Csys_updated_on%2Cclosed_at%2Cdue_date%2Csys_created_by%2Creopened_time%2Cresolved_at%2Ccategory%2Cclose_code%2Cimpact%2Curgency%2Crequested_for%2Cassignment_group%2Ccaller_id%2Cassigned_to%2Cresolved_by%2Cclosed_by%2Ccmdb_ci%2Cclose_notes%2Clocation%2Crequest_state%2Cprice%2Cspecial_instructions%2Capproval%2Cbusiness_service%2Crisk%2Ctype%2Crequested_by%2Cincident\",\"index\":\"4\"},{\"name\":\"setProxy\",\"value\":\"True\",\"index\":\"5\"},{\"name\":\"LEAPDataSource\",\"value\":\"leo1311\",\"index\":\"10\",\"type\":\"Datasource\"},{\"name\":\"incidentPayload\",\"value\":\"{\\\"shortdescription\\\":\\\"test update\\\",\\\"sysId\\\":\\\"d581f578dbf8501064b334523996193d\\\",\\\"priority\\\":{\\\"displayvalue\\\":\\\"1\\\",\\\"systemId\\\":\\\"1\\\"},\\\"state\\\":{\\\"displayvalue\\\":\\\"In Progress\\\",\\\"systemId\\\":\\\"2\\\"},\\\"category\\\":{\\\"displayvalue\\\":\\\"Inquiry / Help\\\",\\\"systemId\\\":\\\"inquiry\\\"},\\\"impact\\\":{\\\"displayvalue\\\":\\\"1\\\",\\\"systemId\\\":\\\"1\\\"},\\\"urgency\\\":{\\\"systemId\\\":\\\"\\\"},\\\"configurationitem\\\":{\\\"displayvalue\\\":null,\\\"systemId\\\":\\\"\\\"},\\\"description\\\":\\\"P3 - AccessAuthentication - Multiple Login Failure from same User - Windows\\\\\\\\n containing Failure Audit: An account failed to log on\\\\\\\\n\\\",\\\"assignmentgroup\\\":{\\\"displayvalue\\\":\\\"RMA Approvers\\\",\\\"systemId\\\":\\\"1c590685c0a8018b2a473a7159ff5d9a\\\"},\\\"assignedto\\\":{\\\"displayvalue\\\":\\\"Ameya Shetti\\\",\\\"systemId\\\":\\\"01d0c837374da34084720ba754990e0c\\\"},\\\"sop\\\":null,\\\"workflow\\\":null,\\\"resolutionsteps\\\":null}\",\"index\":\"13\"},{\"name\":\"ticketType\",\"value\":\"Incident\",\"type\":\"Text\",\"index\":\"10\"},{\"name\":\"dataTable\",\"value\":\"@projectname_tickets\",\"type\":\"Text\",\"index\":\"9\"}]}}]}","NULL","SNOW_Update_API","NULL","SNOW_Update_API","leo1311","NativeScript","NULL"
"admin","2021-05-25 09:07:03.255000","false","Processing short description and extracting clean tickets","NULL","{\"elements\":[{\"id\":\"UEeVc\",\"alias\":\"Dataset  Extractor\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"name\":\"Tickets\",\"alias\":\"Tickets\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"Select number, shortdescription, configurationItem as group_by_field from @projectname_tickets where shortdescription <> '' and   shortdescription is not Null  \",\"Cacheable\":\"\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"datasetType\":\"MYSQL\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"40\",\"position_y\":\"30\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"ffQic\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]},{\"id\":\"HYOWn\",\"alias\":\"Dataset  Loader\",\"name\":\"Dataset  Loader\",\"classname\":\"DatasetLoaderConfig\",\"category\":\"LoaderConfig\",\"attributes\":{\"dataset\":{\"name\":\"CleanText\",\"alias\":\"Clean text\",\"description\":\"Clean Text\",\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select number, clean_text, group_by_field, last_updated from @projectname_tickets_enriched\",\"Cacheable\":\"\",\"isStreaming\":\"false\",\"writeMode\":\"update\",\"params\":\"{}\",\"tableName\":\"@projectname_tickets_enriched\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"datasetType\":\"MYSQL\",\"groups\":\"\",\"backingDataset\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"}},\"applySchema\":false},\"position_x\":\"780\",\"position_y\":\"200\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"fPAbp\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"applySchema\":\"checkbox\"},\"context\":[{\"script\":[\"import logging\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"from nltk.stem import WordNetLemmatizer\\r\",\"from datetime import datetime\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"      \\r\",\"        def lemmatize(tokens):\\r\",\"            wordnet_lemmatizer = WordNetLemmatizer()\\r\",\"            lemmatizedTokens = []\\r\",\"            for word in tokens:\\r\",\"                lemmatizedTokens.append(wordnet_lemmatizer.lemmatize(word, pos='v'))\\r\",\"            return ' '.join(lemmatizedTokens)\\r\",\"        \\r\",\"        udfLemmetize = udf(lemmatize, StringType())\\r\",\"        dataset = dataset.withColumn('clean_text',udfLemmetize('clean_tokens'))\\r\",\"        dataset = dataset.select('number','clean_text', 'group_by_field')\\r\",\"        dataset = dataset.withColumn('last_updated',lit(datetime.now()))\\r\",\"\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"lemmatizedText\"},{\"inputCol\":\"tokens\",\"outputCol\":\"clean_tokens\",\"stopWords\":\"id\"},{\"inputCol\":\"cleanText\",\"outputCol\":\"tokens\"},{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import re\\r\",\"\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        \\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = ''\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += ' '\\r\",\"            alphanumeric = re.sub(' +', ' ', alphanumeric)\\r\",\"            finalTokens = [t for t in alphanumeric.split(' ') if not t.isnumeric()]\\r\",\"            return ' '.join(finalTokens)\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset = dataset.withColumn('cleanText',udfAlpaNum('shortdescription'))\\r\",\"        dataset = dataset.select('number','shortdescription','group_by_field', 'cleanText' )\\r\",\"        \\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"number,shortdescription,cleanText,group_by_field\"},{\"dataset\":{\"name\":\"Tickets\",\"alias\":\"Tickets\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"Select number, shortdescription, configurationItem as group_by_field from @projectname_tickets where shortdescription <> '' and   shortdescription is not Null  \",\"Cacheable\":\"\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"datasetType\":\"MYSQL\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"ffQic\",\"alias\":\"Clean Text\",\"name\":\"Pre  Processing  Script\",\"classname\":\"PreProcessingScriptConfig\",\"category\":\"BaseConfig\",\"attributes\":{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import re\\r\",\"\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        \\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = ''\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += ' '\\r\",\"            alphanumeric = re.sub(' +', ' ', alphanumeric)\\r\",\"            finalTokens = [t for t in alphanumeric.split(' ') if not t.isnumeric()]\\r\",\"            return ' '.join(finalTokens)\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset = dataset.withColumn('cleanText',udfAlpaNum('shortdescription'))\\r\",\"        dataset = dataset.select('number','shortdescription','group_by_field', 'cleanText' )\\r\",\"        \\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"number,shortdescription,cleanText,group_by_field\"},\"position_x\":\"260\",\"position_y\":\"30\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"dataset1\",\"position\":\"LeftMiddle\",\"elementId\":\"UEeVc\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"cMPGE\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"dataset1\",\"dataset2\",\"dataset3\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"params\":\"textarea\",\"script\":\"textarea\",\"outputCols\":\"text\"},\"context\":[{\"dataset\":{\"name\":\"Tickets\",\"alias\":\"Tickets\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"Select number, shortdescription, configurationItem as group_by_field from @projectname_tickets where shortdescription <> '' and   shortdescription is not Null  \",\"Cacheable\":\"\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"datasetType\":\"MYSQL\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"cMPGE\",\"alias\":\"Tokenizer\",\"name\":\"Tokenizer\",\"classname\":\"TokenizerTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"inputCol\":\"cleanText\",\"outputCol\":\"tokens\"},\"position_x\":\"520\",\"position_y\":\"30\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"ffQic\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"IgGTx\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"inputCol\":\"text\",\"outputCol\":\"text\"},\"context\":[{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import re\\r\",\"\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        \\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = ''\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += ' '\\r\",\"            alphanumeric = re.sub(' +', ' ', alphanumeric)\\r\",\"            finalTokens = [t for t in alphanumeric.split(' ') if not t.isnumeric()]\\r\",\"            return ' '.join(finalTokens)\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset = dataset.withColumn('cleanText',udfAlpaNum('shortdescription'))\\r\",\"        dataset = dataset.select('number','shortdescription','group_by_field', 'cleanText' )\\r\",\"        \\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"number,shortdescription,cleanText,group_by_field\"},{\"dataset\":{\"name\":\"Tickets\",\"alias\":\"Tickets\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"Select number, shortdescription, configurationItem as group_by_field from @projectname_tickets where shortdescription <> '' and   shortdescription is not Null  \",\"Cacheable\":\"\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"datasetType\":\"MYSQL\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"IgGTx\",\"alias\":\"Stop  Words  Remover\",\"name\":\"Stop  Words  Remover\",\"classname\":\"StopWordsRemoverTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"inputCol\":\"tokens\",\"outputCol\":\"clean_tokens\",\"stopWords\":\"id\"},\"position_x\":\"760\",\"position_y\":\"30\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"cMPGE\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"fPAbp\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"inputCol\":\"text\",\"outputCol\":\"text\",\"stopWords\":\"text\"},\"context\":[{\"inputCol\":\"cleanText\",\"outputCol\":\"tokens\"},{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import re\\r\",\"\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        \\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = ''\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += ' '\\r\",\"            alphanumeric = re.sub(' +', ' ', alphanumeric)\\r\",\"            finalTokens = [t for t in alphanumeric.split(' ') if not t.isnumeric()]\\r\",\"            return ' '.join(finalTokens)\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset = dataset.withColumn('cleanText',udfAlpaNum('shortdescription'))\\r\",\"        dataset = dataset.select('number','shortdescription','group_by_field', 'cleanText' )\\r\",\"        \\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"number,shortdescription,cleanText,group_by_field\"},{\"dataset\":{\"name\":\"Tickets\",\"alias\":\"Tickets\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"Select number, shortdescription, configurationItem as group_by_field from @projectname_tickets where shortdescription <> '' and   shortdescription is not Null  \",\"Cacheable\":\"\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"datasetType\":\"MYSQL\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"fPAbp\",\"alias\":\"Lemmetizer\",\"name\":\"Python  Script  Transformer\",\"classname\":\"PythonScriptTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"script\":[\"import logging\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"from nltk.stem import WordNetLemmatizer\\r\",\"from datetime import datetime\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"      \\r\",\"        def lemmatize(tokens):\\r\",\"            wordnet_lemmatizer = WordNetLemmatizer()\\r\",\"            lemmatizedTokens = []\\r\",\"            for word in tokens:\\r\",\"                lemmatizedTokens.append(wordnet_lemmatizer.lemmatize(word, pos='v'))\\r\",\"            return ' '.join(lemmatizedTokens)\\r\",\"        \\r\",\"        udfLemmetize = udf(lemmatize, StringType())\\r\",\"        dataset = dataset.withColumn('clean_text',udfLemmetize('clean_tokens'))\\r\",\"        dataset = dataset.select('number','clean_text', 'group_by_field')\\r\",\"        dataset = dataset.withColumn('last_updated',lit(datetime.now()))\\r\",\"\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"lemmatizedText\"},\"position_x\":\"70\",\"position_y\":\"200\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"IgGTx\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"HYOWn\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"script\":\"textarea\",\"outputCols\":\"text\"},\"context\":[{\"inputCol\":\"tokens\",\"outputCol\":\"clean_tokens\",\"stopWords\":\"id\"},{\"inputCol\":\"cleanText\",\"outputCol\":\"tokens\"},{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import re\\r\",\"\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        \\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = ''\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += ' '\\r\",\"            alphanumeric = re.sub(' +', ' ', alphanumeric)\\r\",\"            finalTokens = [t for t in alphanumeric.split(' ') if not t.isnumeric()]\\r\",\"            return ' '.join(finalTokens)\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset = dataset.withColumn('cleanText',udfAlpaNum('shortdescription'))\\r\",\"        dataset = dataset.select('number','shortdescription','group_by_field', 'cleanText' )\\r\",\"        \\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"number,shortdescription,cleanText,group_by_field\"},{\"dataset\":{\"name\":\"Tickets\",\"alias\":\"Tickets\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"Select number, shortdescription, configurationItem as group_by_field from @projectname_tickets where shortdescription <> '' and   shortdescription is not Null  \",\"Cacheable\":\"\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"datasetType\":\"MYSQL\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]}]}","NULL","Clean Tickets","NULL","ACMCLNTC99308","leo1311","DragAndDrop","NULL"
"admin","2021-05-25T14:13:54.009","false","TelemetryLogging","NULL","{\"elements\":[{\"id\":\"qqkeR\",\"alias\":\"Dataset  Extractor\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"name\":\"elasticExtractor\",\"description\":\"\",\"schema\":{\"id\":810,\"name\":\"iamp\",\"schemavalue\":\"[]\",\"organization\":\"leo1311\"},\"type\":\"r\",\"attributes\":{\"get_count\":\"false\",\"Cacheable\":\"\",\"Query\":\"\",\"index\":\"bot-factory-telemetry-<jobParams:CurrentExecutionTime;%Y.%m.%d>\",\"QueryParams\":\"{}\",\"IncludeFields\":\"\",\"Limit\":\"3000\",\"ExcludeFields\":\"\",\"params\":\"{}\"},\"expStatus\":0,\"datasetType\":\"ELASTICSEARCH\",\"groups\":\"\",\"backingDataset\":\"\",\"alias\":\"elasticExtractor\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-05-25 14:08:31\",\"alias\":\"ElasticBtf\",\"id\":18,\"name\":\"ACMELSTC74624\",\"description\":\"ElasticBtf\",\"type\":\"ELASTICSEARCH\",\"connectionDetails\":\"{\\\"password\\\":\\\"\\\",\\\"port\\\":\\\"9200\\\",\\\"host\\\":\\\"vimppnz01-07\\\",\\\"AuthType\\\":\\\"NoAuth\\\",\\\"username\\\":\\\"\\\"}\",\"salt\":null,\"organization\":\"leo1311\",\"dshashcode\":null,\"activetime\":\"2021-05-25T14:08:30.698+00:00\",\"category\":\"ELASTICSEARCH\"}},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"20\",\"position_y\":\"0\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"NiwAo\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]},{\"id\":\"NiwAo\",\"alias\":\"Python  Script  Transforme\",\"name\":\"Python  Script  Transformer\",\"classname\":\"PythonScriptTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"script\":[\"import logging\\r\",\"from pyspark.sql import SparkSession\\r\",\"import json\\r\",\"import re\\r\",\"from datetime import datetime\\r\",\"import mysql.connector\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        responseList = []\\r\",\"        eidList = []\\r\",\"\\r\",\"                \\r\",\"        for item in dataset:\\r\",\"            try:\\r\",\"                row = {}\\r\",\"                message = item.get('message')\\r\",\"                msg_dict = message.replace('\\\\n', '')\\r\",\"                newStr = re.sub('\\\\s+', ' ', msg_dict)\\r\",\"                jsonStr = newStr\\r\",\"                data = json.loads(jsonStr.strip())\\r\",\"                date_time = str(item.get('@timestamp'))\\r\",\"                time_stamp = date_time.replace('T', ' ').replace('Z', '')\\r\",\"                format = '%Y-%m-%d %H:%M:%S.%f'  # The format\\r\",\"                datetime_str = datetime.strptime(time_stamp, format)\\r\",\"                row['action_timestamp'] = datetime_str\\r\",\"                \\r\",\"                if ((data['btfdata']['project_name'] == None or data['btfdata']['portfolio_name'] == None or data['btfdata']['workflow_name'] == None or data['btfdata']['workflow_name'] == '') and not(data['mId'].startswith('Skipped Event'))):\\r\",\"                    # logging.info('Ignoring None: ' + str(data['eid']))\\r\",\"                    continue\\r\",\"        \\r\",\"                for key in data.keys():\\r\",\"                    if key in ('eid', 'mId', 'ets'):\\r\",\"                        row[key] = str(data.get(key))\\r\",\"                    else:\\r\",\"                        if key.lower() == 'context':\\r\",\"                            context = data.get('context')\\r\",\"                            row['channel'] = str(context.get('channel', ''))\\r\",\"                            row['env'] = str(context.get('env', ''))\\r\",\"\\r\",\"                            cdata = context.get('cdata')\\r\",\"                            if (type(cdata)) == dict:\\r\",\"                                row['ActivityInstanceId'] = str(cdata.get('ActivityInstanceId', ''))\\r\",\"                                try:\\r\",\"                                    row['Duration'] = str(cdata.get('Duration', ''))\\r\",\"                                except ValueError:\\r\",\"                                    row['Duration'] = ''\\r\",\"                                row['CurrentActivityName'] = str(cdata.get('CurrentActivityName', ''))\\r\",\"                                row['ProcessInstanceId'] = str(cdata.get('ProcessInstanceId', ''))\\r\",\"                                row['Component'] = str(cdata.get('Component', ''))\\r\",\"                            else:\\r\",\"                                row['ActivityInstanceId'] = ''\\r\",\"                                row['Duration'] = ''\\r\",\"                                row['CurrentActivityName'] = ''\\r\",\"                                row['ProcessInstanceId'] = ''\\r\",\"                                row['Component'] = ''\\r\",\"\\r\",\"                        elif key.lower() == 'edata':\\r\",\"                            edata = data.get('edata')\\r\",\"                            row['pageid'] = str(edata.get('pageid', ''))\\r\",\"                            row['type'] = str(edata.get('type', ''))\\r\",\"                            row['stageto'] = str(edata.get('stageto', ''))\\r\",\"\\r\",\"                        elif key.lower() == 'actor':\\r\",\"                            actor = data.get('actor')\\r\",\"                            row['actor_id'] = str(actor.get('id', ''))\\r\",\"                            row['actor_type'] = str(actor.get('type', ''))\\r\",\"\\r\",\"                        elif key.lower() == 'btfdata':\\r\",\"                            btfdata = data.get('btfdata')\\r\",\"                            row['user_name'] = str(btfdata.get('user_name', ''))\\r\",\"                            row['project_name'] = str(btfdata.get('project_name', ''))\\r\",\"                            row['portfolio_name'] = str(btfdata.get('portfolio_name', ''))\\r\",\"                            row['workflow_name'] = str(btfdata.get('workflow_name', ''))\\r\",\"                            row['bot_name'] = str(btfdata.get('bot_name', ''))\\r\",\"                            row['schedule_id'] = str(btfdata.get('schedule_id', ''))\\r\",\"                            row['remote_server'] = str(btfdata.get('remote_server', ''))\\r\",\"                            row['execution_type'] = str(btfdata.get('execution_type', ''))\\r\",\"                            row['error_message'] = str(btfdata.get('error_message', ''))\\r\",\"\\r\",\"                if row['eid'] in eidList:\\r\",\"                    for item in responseList:\\r\",\"                        if item['eid'] == row['eid']:\\r\",\"                            responseList.remove(item)\\r\",\"                else:\\r\",\"                    eidList.append(row['eid'])\\r\",\"                \\r\",\"                mId = row['mId']\\r\",\"                if (mId.startswith('START Bot')):\\r\",\"                    row['SB_ets'] = data.get('ets')\\r\",\"                    row['SB_mId'] = mId.split(':')[1]\\r\",\"                    row['SB_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'In Progress'\\r\",\"                elif (mId.startswith('END Bot')):\\r\",\"                    row['EB_ets'] = data.get('ets')\\r\",\"                    row['EB_mId'] = mId.split(':')[1]\\r\",\"                    row['EB_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Completed'\\r\",\"                elif (mId.startswith('Fail Event')):\\r\",\"                    row['FE_ets'] = data.get('ets')\\r\",\"                    row['FE_mId'] = mId.split(':')[1]\\r\",\"                    row['FE_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Failed'\\r\",\"                elif (mId.startswith('Skipped Event')):\\r\",\"                    row['SE_ets'] = data.get('ets')\\r\",\"                    row['SE_mId'] = mId.split(':')[1]\\r\",\"                    row['SE_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Skipped'\\r\",\"                else:\\r\",\"                    continue\\r\",\"\\r\",\"                responseList.append(row)\\r\",\"            except:\\r\",\"                error = {}\\r\",\"                error['eid'] = data['eid']\\r\",\"                error['message'] = str(data)\\r\",\"                responseList.append(error)\\r\",\"        \\r\",\"            \\r\",\"        if responseList is None or len(responseList) == 0:\\r\",\"            logging.info('No New events fetched')\\r\",\"            print('Completed')\\r\",\"            exit()\\r\",\"        spark = SparkSession.builder.appName('').config('spark.ui.showConsoleProgress', 'false').getOrCreate()\\r\",\"        df = spark.createDataFrame(responseList)\\r\",\"        \\r\",\"        logging.info('returning dataframe')\\r\",\"        return df\\r\"]},\"position_x\":\"220\",\"position_y\":\"0\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"qqkeR\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"mlzTs\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"script\":\"textarea\"},\"context\":[{\"dataset\":{\"name\":\"elasticExtractor\",\"description\":\"\",\"schema\":{\"id\":810,\"name\":\"iamp\",\"schemavalue\":\"[]\",\"organization\":\"leo1311\"},\"type\":\"r\",\"attributes\":{\"get_count\":\"false\",\"Cacheable\":\"\",\"Query\":\"\",\"index\":\"bot-factory-telemetry-<jobParams:CurrentExecutionTime;%Y.%m.%d>\",\"QueryParams\":\"{}\",\"IncludeFields\":\"\",\"Limit\":\"3000\",\"ExcludeFields\":\"\",\"params\":\"{}\"},\"expStatus\":0,\"datasetType\":\"ELASTICSEARCH\",\"groups\":\"\",\"backingDataset\":\"\",\"alias\":\"elasticExtractor\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-05-25 14:08:31\",\"alias\":\"ElasticBtf\",\"id\":18,\"name\":\"ACMELSTC74624\",\"description\":\"ElasticBtf\",\"type\":\"ELASTICSEARCH\",\"connectionDetails\":\"{\\\"password\\\":\\\"\\\",\\\"port\\\":\\\"9200\\\",\\\"host\\\":\\\"vimppnz01-07\\\",\\\"AuthType\\\":\\\"NoAuth\\\",\\\"username\\\":\\\"\\\"}\",\"salt\":null,\"organization\":\"leo1311\",\"dshashcode\":null,\"activetime\":\"2021-05-25T14:08:30.698+00:00\",\"category\":\"ELASTICSEARCH\"}},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"FxLFX\",\"alias\":\"Post  Processing  Script\",\"name\":\"Post  Processing  Script\",\"classname\":\"PostProcessingScriptConfig\",\"category\":\"BaseConfig\",\"attributes\":{\"params\":\"\",\"script\":[\"# Load StartBot\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model, data):\\r\",\"        \\r\",\"        data = data['out2']\\r\",\"        if ('SB_mId' in data.columns) :\\r\",\"            dataset1 = data.where(col('SB_mId').isNotNull())\\r\",\"\\r\",\"            to_drop = ['EB_mId', 'EB_ets', 'EB_timestamp', 'FE_mId', 'FE_ets', 'FE_timestamp', 'SE_mId', 'SE_ets', 'SE_timestamp']\\r\",\"            drop_columns = [i for i in to_drop if i in dataset1.columns]\\r\",\"            dataset1 = dataset1.drop(*drop_columns)\\r\",\"            dataset1 = dataset1.repartition(10)\\r\",\"        else :\\r\",\"            dataset1 = data.where(col('eid').isNull())\\r\",\"\\r\",\"        return dataset1, data\\r\"]},\"position_x\":\"410\",\"position_y\":\"100\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out2\",\"position\":\"BottomCenter\",\"elementId\":\"twFuJ\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"sccMW\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"mlzTs\",\"elementPosition\":\"BottomCenter\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\",\"out2\"],\"requiredJars\":[],\"formats\":{\"params\":\"textarea\",\"script\":\"textarea\"},\"context\":[{\"params\":\"\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model, data):\\r\",\"        \\r\",\"        if ('message' in data.columns):\\r\",\"            dataset1 = data.where(col('message').isNotNull()).select('eid', 'message')\\r\",\"            data = data.where(col('message').isNull())\\r\",\"            data = data.drop('message')\\r\",\"        else:\\r\",\"            dataset1 = data.where(col('eid').isNull())\\r\",\"        return dataset1, data\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"script\":[\"import logging\\r\",\"from pyspark.sql import SparkSession\\r\",\"import json\\r\",\"import re\\r\",\"from datetime import datetime\\r\",\"import mysql.connector\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        responseList = []\\r\",\"        eidList = []\\r\",\"\\r\",\"                \\r\",\"        for item in dataset:\\r\",\"            try:\\r\",\"                row = {}\\r\",\"                message = item.get('message')\\r\",\"                msg_dict = message.replace('\\\\n', '')\\r\",\"                newStr = re.sub('\\\\s+', ' ', msg_dict)\\r\",\"                jsonStr = newStr\\r\",\"                data = json.loads(jsonStr.strip())\\r\",\"                date_time = str(item.get('@timestamp'))\\r\",\"                time_stamp = date_time.replace('T', ' ').replace('Z', '')\\r\",\"                format = '%Y-%m-%d %H:%M:%S.%f'  # The format\\r\",\"                datetime_str = datetime.strptime(time_stamp, format)\\r\",\"                row['action_timestamp'] = datetime_str\\r\",\"                \\r\",\"                if ((data['btfdata']['project_name'] == None or data['btfdata']['portfolio_name'] == None or data['btfdata']['workflow_name'] == None or data['btfdata']['workflow_name'] == '') and not(data['mId'].startswith('Skipped Event'))):\\r\",\"                    # logging.info('Ignoring None: ' + str(data['eid']))\\r\",\"                    continue\\r\",\"        \\r\",\"                for key in data.keys():\\r\",\"                    if key in ('eid', 'mId', 'ets'):\\r\",\"                        row[key] = str(data.get(key))\\r\",\"                    else:\\r\",\"                        if key.lower() == 'context':\\r\",\"                            context = data.get('context')\\r\",\"                            row['channel'] = str(context.get('channel', ''))\\r\",\"                            row['env'] = str(context.get('env', ''))\\r\",\"\\r\",\"                            cdata = context.get('cdata')\\r\",\"                            if (type(cdata)) == dict:\\r\",\"                                row['ActivityInstanceId'] = str(cdata.get('ActivityInstanceId', ''))\\r\",\"                                try:\\r\",\"                                    row['Duration'] = str(cdata.get('Duration', ''))\\r\",\"                                except ValueError:\\r\",\"                                    row['Duration'] = ''\\r\",\"                                row['CurrentActivityName'] = str(cdata.get('CurrentActivityName', ''))\\r\",\"                                row['ProcessInstanceId'] = str(cdata.get('ProcessInstanceId', ''))\\r\",\"                                row['Component'] = str(cdata.get('Component', ''))\\r\",\"                            else:\\r\",\"                                row['ActivityInstanceId'] = ''\\r\",\"                                row['Duration'] = ''\\r\",\"                                row['CurrentActivityName'] = ''\\r\",\"                                row['ProcessInstanceId'] = ''\\r\",\"                                row['Component'] = ''\\r\",\"\\r\",\"                        elif key.lower() == 'edata':\\r\",\"                            edata = data.get('edata')\\r\",\"                            row['pageid'] = str(edata.get('pageid', ''))\\r\",\"                            row['type'] = str(edata.get('type', ''))\\r\",\"                            row['stageto'] = str(edata.get('stageto', ''))\\r\",\"\\r\",\"                        elif key.lower() == 'actor':\\r\",\"                            actor = data.get('actor')\\r\",\"                            row['actor_id'] = str(actor.get('id', ''))\\r\",\"                            row['actor_type'] = str(actor.get('type', ''))\\r\",\"\\r\",\"                        elif key.lower() == 'btfdata':\\r\",\"                            btfdata = data.get('btfdata')\\r\",\"                            row['user_name'] = str(btfdata.get('user_name', ''))\\r\",\"                            row['project_name'] = str(btfdata.get('project_name', ''))\\r\",\"                            row['portfolio_name'] = str(btfdata.get('portfolio_name', ''))\\r\",\"                            row['workflow_name'] = str(btfdata.get('workflow_name', ''))\\r\",\"                            row['bot_name'] = str(btfdata.get('bot_name', ''))\\r\",\"                            row['schedule_id'] = str(btfdata.get('schedule_id', ''))\\r\",\"                            row['remote_server'] = str(btfdata.get('remote_server', ''))\\r\",\"                            row['execution_type'] = str(btfdata.get('execution_type', ''))\\r\",\"                            row['error_message'] = str(btfdata.get('error_message', ''))\\r\",\"\\r\",\"                if row['eid'] in eidList:\\r\",\"                    for item in responseList:\\r\",\"                        if item['eid'] == row['eid']:\\r\",\"                            responseList.remove(item)\\r\",\"                else:\\r\",\"                    eidList.append(row['eid'])\\r\",\"                \\r\",\"                mId = row['mId']\\r\",\"                if (mId.startswith('START Bot')):\\r\",\"                    row['SB_ets'] = data.get('ets')\\r\",\"                    row['SB_mId'] = mId.split(':')[1]\\r\",\"                    row['SB_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'In Progress'\\r\",\"                elif (mId.startswith('END Bot')):\\r\",\"                    row['EB_ets'] = data.get('ets')\\r\",\"                    row['EB_mId'] = mId.split(':')[1]\\r\",\"                    row['EB_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Completed'\\r\",\"                elif (mId.startswith('Fail Event')):\\r\",\"                    row['FE_ets'] = data.get('ets')\\r\",\"                    row['FE_mId'] = mId.split(':')[1]\\r\",\"                    row['FE_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Failed'\\r\",\"                elif (mId.startswith('Skipped Event')):\\r\",\"                    row['SE_ets'] = data.get('ets')\\r\",\"                    row['SE_mId'] = mId.split(':')[1]\\r\",\"                    row['SE_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Skipped'\\r\",\"                else:\\r\",\"                    continue\\r\",\"\\r\",\"                responseList.append(row)\\r\",\"            except:\\r\",\"                error = {}\\r\",\"                error['eid'] = data['eid']\\r\",\"                error['message'] = str(data)\\r\",\"                responseList.append(error)\\r\",\"        \\r\",\"            \\r\",\"        if responseList is None or len(responseList) == 0:\\r\",\"            logging.info('No New events fetched')\\r\",\"            print('Completed')\\r\",\"            exit()\\r\",\"        spark = SparkSession.builder.appName('').config('spark.ui.showConsoleProgress', 'false').getOrCreate()\\r\",\"        df = spark.createDataFrame(responseList)\\r\",\"        \\r\",\"        logging.info('returning dataframe')\\r\",\"        return df\\r\"]},{\"dataset\":{\"name\":\"elasticExtractor\",\"description\":\"\",\"schema\":{\"id\":810,\"name\":\"iamp\",\"schemavalue\":\"[]\",\"organization\":\"leo1311\"},\"type\":\"r\",\"attributes\":{\"get_count\":\"false\",\"Cacheable\":\"\",\"Query\":\"\",\"index\":\"bot-factory-telemetry-<jobParams:CurrentExecutionTime;%Y.%m.%d>\",\"QueryParams\":\"{}\",\"IncludeFields\":\"\",\"Limit\":\"3000\",\"ExcludeFields\":\"\",\"params\":\"{}\"},\"expStatus\":0,\"datasetType\":\"ELASTICSEARCH\",\"groups\":\"\",\"backingDataset\":\"\",\"alias\":\"elasticExtractor\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-05-25 14:08:31\",\"alias\":\"ElasticBtf\",\"id\":18,\"name\":\"ACMELSTC74624\",\"description\":\"ElasticBtf\",\"type\":\"ELASTICSEARCH\",\"connectionDetails\":\"{\\\"password\\\":\\\"\\\",\\\"port\\\":\\\"9200\\\",\\\"host\\\":\\\"vimppnz01-07\\\",\\\"AuthType\\\":\\\"NoAuth\\\",\\\"username\\\":\\\"\\\"}\",\"salt\":null,\"organization\":\"leo1311\",\"dshashcode\":null,\"activetime\":\"2021-05-25T14:08:30.698+00:00\",\"category\":\"ELASTICSEARCH\"}},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"twFuJ\",\"alias\":\"Post  Processing  Script\",\"name\":\"Post  Processing  Script\",\"classname\":\"PostProcessingScriptConfig\",\"category\":\"BaseConfig\",\"attributes\":{\"params\":\"\",\"script\":[\"# Load EndBot\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model, data):\\r\",\"        \\r\",\"        data = data['out2']\\r\",\"        if ('EB_mId' in data.columns) :\\r\",\"            dataset1 = data.where(col('EB_mId').isNotNull())\\r\",\"\\r\",\"            to_drop = ['SB_mId', 'SB_ets', 'SB_timestamp', 'FE_mId', 'FE_ets', 'FE_timestamp', 'SE_mId', 'SE_ets', 'SE_timestamp']\\r\",\"            drop_columns = [i for i in to_drop if i in dataset1.columns]\\r\",\"            dataset1 = dataset1.drop(*drop_columns)\\r\",\"            dataset1 = dataset1.repartition(10)\\r\",\"        else :\\r\",\"            dataset1 = data.where(col('eid').isNull())\\r\",\"\\r\",\"        return dataset1, data\\r\"]},\"position_x\":\"410\",\"position_y\":\"200\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"FxLFX\",\"elementPosition\":\"BottomCenter\"},{\"type\":\"source\",\"endpoint\":\"out2\",\"position\":\"BottomCenter\",\"elementId\":\"vGfMK\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"iRGSJ\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\",\"out2\"],\"requiredJars\":[],\"formats\":{\"params\":\"textarea\",\"script\":\"textarea\"},\"context\":[{\"params\":\"\",\"script\":[\"# Load StartBot\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model, data):\\r\",\"        \\r\",\"        data = data['out2']\\r\",\"        if ('SB_mId' in data.columns) :\\r\",\"            dataset1 = data.where(col('SB_mId').isNotNull())\\r\",\"\\r\",\"            to_drop = ['EB_mId', 'EB_ets', 'EB_timestamp', 'FE_mId', 'FE_ets', 'FE_timestamp', 'SE_mId', 'SE_ets', 'SE_timestamp']\\r\",\"            drop_columns = [i for i in to_drop if i in dataset1.columns]\\r\",\"            dataset1 = dataset1.drop(*drop_columns)\\r\",\"            dataset1 = dataset1.repartition(10)\\r\",\"        else :\\r\",\"            dataset1 = data.where(col('eid').isNull())\\r\",\"\\r\",\"        return dataset1, data\\r\"]},{\"params\":\"\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model, data):\\r\",\"        \\r\",\"        if ('message' in data.columns):\\r\",\"            dataset1 = data.where(col('message').isNotNull()).select('eid', 'message')\\r\",\"            data = data.where(col('message').isNull())\\r\",\"            data = data.drop('message')\\r\",\"        else:\\r\",\"            dataset1 = data.where(col('eid').isNull())\\r\",\"        return dataset1, data\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"script\":[\"import logging\\r\",\"from pyspark.sql import SparkSession\\r\",\"import json\\r\",\"import re\\r\",\"from datetime import datetime\\r\",\"import mysql.connector\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        responseList = []\\r\",\"        eidList = []\\r\",\"\\r\",\"                \\r\",\"        for item in dataset:\\r\",\"            try:\\r\",\"                row = {}\\r\",\"                message = item.get('message')\\r\",\"                msg_dict = message.replace('\\\\n', '')\\r\",\"                newStr = re.sub('\\\\s+', ' ', msg_dict)\\r\",\"                jsonStr = newStr\\r\",\"                data = json.loads(jsonStr.strip())\\r\",\"                date_time = str(item.get('@timestamp'))\\r\",\"                time_stamp = date_time.replace('T', ' ').replace('Z', '')\\r\",\"                format = '%Y-%m-%d %H:%M:%S.%f'  # The format\\r\",\"                datetime_str = datetime.strptime(time_stamp, format)\\r\",\"                row['action_timestamp'] = datetime_str\\r\",\"                \\r\",\"                if ((data['btfdata']['project_name'] == None or data['btfdata']['portfolio_name'] == None or data['btfdata']['workflow_name'] == None or data['btfdata']['workflow_name'] == '') and not(data['mId'].startswith('Skipped Event'))):\\r\",\"                    # logging.info('Ignoring None: ' + str(data['eid']))\\r\",\"                    continue\\r\",\"        \\r\",\"                for key in data.keys():\\r\",\"                    if key in ('eid', 'mId', 'ets'):\\r\",\"                        row[key] = str(data.get(key))\\r\",\"                    else:\\r\",\"                        if key.lower() == 'context':\\r\",\"                            context = data.get('context')\\r\",\"                            row['channel'] = str(context.get('channel', ''))\\r\",\"                            row['env'] = str(context.get('env', ''))\\r\",\"\\r\",\"                            cdata = context.get('cdata')\\r\",\"                            if (type(cdata)) == dict:\\r\",\"                                row['ActivityInstanceId'] = str(cdata.get('ActivityInstanceId', ''))\\r\",\"                                try:\\r\",\"                                    row['Duration'] = str(cdata.get('Duration', ''))\\r\",\"                                except ValueError:\\r\",\"                                    row['Duration'] = ''\\r\",\"                                row['CurrentActivityName'] = str(cdata.get('CurrentActivityName', ''))\\r\",\"                                row['ProcessInstanceId'] = str(cdata.get('ProcessInstanceId', ''))\\r\",\"                                row['Component'] = str(cdata.get('Component', ''))\\r\",\"                            else:\\r\",\"                                row['ActivityInstanceId'] = ''\\r\",\"                                row['Duration'] = ''\\r\",\"                                row['CurrentActivityName'] = ''\\r\",\"                                row['ProcessInstanceId'] = ''\\r\",\"                                row['Component'] = ''\\r\",\"\\r\",\"                        elif key.lower() == 'edata':\\r\",\"                            edata = data.get('edata')\\r\",\"                            row['pageid'] = str(edata.get('pageid', ''))\\r\",\"                            row['type'] = str(edata.get('type', ''))\\r\",\"                            row['stageto'] = str(edata.get('stageto', ''))\\r\",\"\\r\",\"                        elif key.lower() == 'actor':\\r\",\"                            actor = data.get('actor')\\r\",\"                            row['actor_id'] = str(actor.get('id', ''))\\r\",\"                            row['actor_type'] = str(actor.get('type', ''))\\r\",\"\\r\",\"                        elif key.lower() == 'btfdata':\\r\",\"                            btfdata = data.get('btfdata')\\r\",\"                            row['user_name'] = str(btfdata.get('user_name', ''))\\r\",\"                            row['project_name'] = str(btfdata.get('project_name', ''))\\r\",\"                            row['portfolio_name'] = str(btfdata.get('portfolio_name', ''))\\r\",\"                            row['workflow_name'] = str(btfdata.get('workflow_name', ''))\\r\",\"                            row['bot_name'] = str(btfdata.get('bot_name', ''))\\r\",\"                            row['schedule_id'] = str(btfdata.get('schedule_id', ''))\\r\",\"                            row['remote_server'] = str(btfdata.get('remote_server', ''))\\r\",\"                            row['execution_type'] = str(btfdata.get('execution_type', ''))\\r\",\"                            row['error_message'] = str(btfdata.get('error_message', ''))\\r\",\"\\r\",\"                if row['eid'] in eidList:\\r\",\"                    for item in responseList:\\r\",\"                        if item['eid'] == row['eid']:\\r\",\"                            responseList.remove(item)\\r\",\"                else:\\r\",\"                    eidList.append(row['eid'])\\r\",\"                \\r\",\"                mId = row['mId']\\r\",\"                if (mId.startswith('START Bot')):\\r\",\"                    row['SB_ets'] = data.get('ets')\\r\",\"                    row['SB_mId'] = mId.split(':')[1]\\r\",\"                    row['SB_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'In Progress'\\r\",\"                elif (mId.startswith('END Bot')):\\r\",\"                    row['EB_ets'] = data.get('ets')\\r\",\"                    row['EB_mId'] = mId.split(':')[1]\\r\",\"                    row['EB_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Completed'\\r\",\"                elif (mId.startswith('Fail Event')):\\r\",\"                    row['FE_ets'] = data.get('ets')\\r\",\"                    row['FE_mId'] = mId.split(':')[1]\\r\",\"                    row['FE_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Failed'\\r\",\"                elif (mId.startswith('Skipped Event')):\\r\",\"                    row['SE_ets'] = data.get('ets')\\r\",\"                    row['SE_mId'] = mId.split(':')[1]\\r\",\"                    row['SE_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Skipped'\\r\",\"                else:\\r\",\"                    continue\\r\",\"\\r\",\"                responseList.append(row)\\r\",\"            except:\\r\",\"                error = {}\\r\",\"                error['eid'] = data['eid']\\r\",\"                error['message'] = str(data)\\r\",\"                responseList.append(error)\\r\",\"        \\r\",\"            \\r\",\"        if responseList is None or len(responseList) == 0:\\r\",\"            logging.info('No New events fetched')\\r\",\"            print('Completed')\\r\",\"            exit()\\r\",\"        spark = SparkSession.builder.appName('').config('spark.ui.showConsoleProgress', 'false').getOrCreate()\\r\",\"        df = spark.createDataFrame(responseList)\\r\",\"        \\r\",\"        logging.info('returning dataframe')\\r\",\"        return df\\r\"]},{\"dataset\":{\"name\":\"elasticExtractor\",\"description\":\"\",\"schema\":{\"id\":810,\"name\":\"iamp\",\"schemavalue\":\"[]\",\"organization\":\"leo1311\"},\"type\":\"r\",\"attributes\":{\"get_count\":\"false\",\"Cacheable\":\"\",\"Query\":\"\",\"index\":\"bot-factory-telemetry-<jobParams:CurrentExecutionTime;%Y.%m.%d>\",\"QueryParams\":\"{}\",\"IncludeFields\":\"\",\"Limit\":\"3000\",\"ExcludeFields\":\"\",\"params\":\"{}\"},\"expStatus\":0,\"datasetType\":\"ELASTICSEARCH\",\"groups\":\"\",\"backingDataset\":\"\",\"alias\":\"elasticExtractor\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-05-25 14:08:31\",\"alias\":\"ElasticBtf\",\"id\":18,\"name\":\"ACMELSTC74624\",\"description\":\"ElasticBtf\",\"type\":\"ELASTICSEARCH\",\"connectionDetails\":\"{\\\"password\\\":\\\"\\\",\\\"port\\\":\\\"9200\\\",\\\"host\\\":\\\"vimppnz01-07\\\",\\\"AuthType\\\":\\\"NoAuth\\\",\\\"username\\\":\\\"\\\"}\",\"salt\":null,\"organization\":\"leo1311\",\"dshashcode\":null,\"activetime\":\"2021-05-25T14:08:30.698+00:00\",\"category\":\"ELASTICSEARCH\"}},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"mlzTs\",\"alias\":\"Post  Processing  Script\",\"name\":\"Post  Processing  Script\",\"classname\":\"PostProcessingScriptConfig\",\"category\":\"BaseConfig\",\"attributes\":{\"params\":\"\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model, data):\\r\",\"        \\r\",\"        if ('message' in data.columns):\\r\",\"            dataset1 = data.where(col('message').isNotNull()).select('eid', 'message')\\r\",\"            data = data.where(col('message').isNull())\\r\",\"            data = data.drop('message')\\r\",\"        else:\\r\",\"            dataset1 = data.where(col('eid').isNull())\\r\",\"        return dataset1, data\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},\"position_x\":\"410\",\"position_y\":\"0\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"NiwAo\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out2\",\"position\":\"BottomCenter\",\"elementId\":\"FxLFX\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"blpXu\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\",\"out2\"],\"requiredJars\":[],\"formats\":{\"params\":\"textarea\",\"script\":\"textarea\"},\"context\":[{\"script\":[\"import logging\\r\",\"from pyspark.sql import SparkSession\\r\",\"import json\\r\",\"import re\\r\",\"from datetime import datetime\\r\",\"import mysql.connector\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        responseList = []\\r\",\"        eidList = []\\r\",\"\\r\",\"                \\r\",\"        for item in dataset:\\r\",\"            try:\\r\",\"                row = {}\\r\",\"                message = item.get('message')\\r\",\"                msg_dict = message.replace('\\\\n', '')\\r\",\"                newStr = re.sub('\\\\s+', ' ', msg_dict)\\r\",\"                jsonStr = newStr\\r\",\"                data = json.loads(jsonStr.strip())\\r\",\"                date_time = str(item.get('@timestamp'))\\r\",\"                time_stamp = date_time.replace('T', ' ').replace('Z', '')\\r\",\"                format = '%Y-%m-%d %H:%M:%S.%f'  # The format\\r\",\"                datetime_str = datetime.strptime(time_stamp, format)\\r\",\"                row['action_timestamp'] = datetime_str\\r\",\"                \\r\",\"                if ((data['btfdata']['project_name'] == None or data['btfdata']['portfolio_name'] == None or data['btfdata']['workflow_name'] == None or data['btfdata']['workflow_name'] == '') and not(data['mId'].startswith('Skipped Event'))):\\r\",\"                    # logging.info('Ignoring None: ' + str(data['eid']))\\r\",\"                    continue\\r\",\"        \\r\",\"                for key in data.keys():\\r\",\"                    if key in ('eid', 'mId', 'ets'):\\r\",\"                        row[key] = str(data.get(key))\\r\",\"                    else:\\r\",\"                        if key.lower() == 'context':\\r\",\"                            context = data.get('context')\\r\",\"                            row['channel'] = str(context.get('channel', ''))\\r\",\"                            row['env'] = str(context.get('env', ''))\\r\",\"\\r\",\"                            cdata = context.get('cdata')\\r\",\"                            if (type(cdata)) == dict:\\r\",\"                                row['ActivityInstanceId'] = str(cdata.get('ActivityInstanceId', ''))\\r\",\"                                try:\\r\",\"                                    row['Duration'] = str(cdata.get('Duration', ''))\\r\",\"                                except ValueError:\\r\",\"                                    row['Duration'] = ''\\r\",\"                                row['CurrentActivityName'] = str(cdata.get('CurrentActivityName', ''))\\r\",\"                                row['ProcessInstanceId'] = str(cdata.get('ProcessInstanceId', ''))\\r\",\"                                row['Component'] = str(cdata.get('Component', ''))\\r\",\"                            else:\\r\",\"                                row['ActivityInstanceId'] = ''\\r\",\"                                row['Duration'] = ''\\r\",\"                                row['CurrentActivityName'] = ''\\r\",\"                                row['ProcessInstanceId'] = ''\\r\",\"                                row['Component'] = ''\\r\",\"\\r\",\"                        elif key.lower() == 'edata':\\r\",\"                            edata = data.get('edata')\\r\",\"                            row['pageid'] = str(edata.get('pageid', ''))\\r\",\"                            row['type'] = str(edata.get('type', ''))\\r\",\"                            row['stageto'] = str(edata.get('stageto', ''))\\r\",\"\\r\",\"                        elif key.lower() == 'actor':\\r\",\"                            actor = data.get('actor')\\r\",\"                            row['actor_id'] = str(actor.get('id', ''))\\r\",\"                            row['actor_type'] = str(actor.get('type', ''))\\r\",\"\\r\",\"                        elif key.lower() == 'btfdata':\\r\",\"                            btfdata = data.get('btfdata')\\r\",\"                            row['user_name'] = str(btfdata.get('user_name', ''))\\r\",\"                            row['project_name'] = str(btfdata.get('project_name', ''))\\r\",\"                            row['portfolio_name'] = str(btfdata.get('portfolio_name', ''))\\r\",\"                            row['workflow_name'] = str(btfdata.get('workflow_name', ''))\\r\",\"                            row['bot_name'] = str(btfdata.get('bot_name', ''))\\r\",\"                            row['schedule_id'] = str(btfdata.get('schedule_id', ''))\\r\",\"                            row['remote_server'] = str(btfdata.get('remote_server', ''))\\r\",\"                            row['execution_type'] = str(btfdata.get('execution_type', ''))\\r\",\"                            row['error_message'] = str(btfdata.get('error_message', ''))\\r\",\"\\r\",\"                if row['eid'] in eidList:\\r\",\"                    for item in responseList:\\r\",\"                        if item['eid'] == row['eid']:\\r\",\"                            responseList.remove(item)\\r\",\"                else:\\r\",\"                    eidList.append(row['eid'])\\r\",\"                \\r\",\"                mId = row['mId']\\r\",\"                if (mId.startswith('START Bot')):\\r\",\"                    row['SB_ets'] = data.get('ets')\\r\",\"                    row['SB_mId'] = mId.split(':')[1]\\r\",\"                    row['SB_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'In Progress'\\r\",\"                elif (mId.startswith('END Bot')):\\r\",\"                    row['EB_ets'] = data.get('ets')\\r\",\"                    row['EB_mId'] = mId.split(':')[1]\\r\",\"                    row['EB_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Completed'\\r\",\"                elif (mId.startswith('Fail Event')):\\r\",\"                    row['FE_ets'] = data.get('ets')\\r\",\"                    row['FE_mId'] = mId.split(':')[1]\\r\",\"                    row['FE_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Failed'\\r\",\"                elif (mId.startswith('Skipped Event')):\\r\",\"                    row['SE_ets'] = data.get('ets')\\r\",\"                    row['SE_mId'] = mId.split(':')[1]\\r\",\"                    row['SE_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Skipped'\\r\",\"                else:\\r\",\"                    continue\\r\",\"\\r\",\"                responseList.append(row)\\r\",\"            except:\\r\",\"                error = {}\\r\",\"                error['eid'] = data['eid']\\r\",\"                error['message'] = str(data)\\r\",\"                responseList.append(error)\\r\",\"        \\r\",\"            \\r\",\"        if responseList is None or len(responseList) == 0:\\r\",\"            logging.info('No New events fetched')\\r\",\"            print('Completed')\\r\",\"            exit()\\r\",\"        spark = SparkSession.builder.appName('').config('spark.ui.showConsoleProgress', 'false').getOrCreate()\\r\",\"        df = spark.createDataFrame(responseList)\\r\",\"        \\r\",\"        logging.info('returning dataframe')\\r\",\"        return df\\r\"]},{\"dataset\":{\"name\":\"elasticExtractor\",\"description\":\"\",\"schema\":{\"id\":810,\"name\":\"iamp\",\"schemavalue\":\"[]\",\"organization\":\"leo1311\"},\"type\":\"r\",\"attributes\":{\"get_count\":\"false\",\"Cacheable\":\"\",\"Query\":\"\",\"index\":\"bot-factory-telemetry-<jobParams:CurrentExecutionTime;%Y.%m.%d>\",\"QueryParams\":\"{}\",\"IncludeFields\":\"\",\"Limit\":\"3000\",\"ExcludeFields\":\"\",\"params\":\"{}\"},\"expStatus\":0,\"datasetType\":\"ELASTICSEARCH\",\"groups\":\"\",\"backingDataset\":\"\",\"alias\":\"elasticExtractor\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-05-25 14:08:31\",\"alias\":\"ElasticBtf\",\"id\":18,\"name\":\"ACMELSTC74624\",\"description\":\"ElasticBtf\",\"type\":\"ELASTICSEARCH\",\"connectionDetails\":\"{\\\"password\\\":\\\"\\\",\\\"port\\\":\\\"9200\\\",\\\"host\\\":\\\"vimppnz01-07\\\",\\\"AuthType\\\":\\\"NoAuth\\\",\\\"username\\\":\\\"\\\"}\",\"salt\":null,\"organization\":\"leo1311\",\"dshashcode\":null,\"activetime\":\"2021-05-25T14:08:30.698+00:00\",\"category\":\"ELASTICSEARCH\"}},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"vGfMK\",\"alias\":\"Post  Processing  Script\",\"name\":\"Post  Processing  Script\",\"classname\":\"PostProcessingScriptConfig\",\"category\":\"BaseConfig\",\"attributes\":{\"params\":\"\",\"script\":[\"# Load SkipEvent & FailEvent\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model, data):\\r\",\"        \\r\",\"        data = data['out2']\\r\",\"        \\r\",\"        if ('SE_mId' in data.columns) :\\r\",\"            dataset1 = data.where(col('SE_mId').isNotNull())\\r\",\"\\r\",\"            to_drop = ['FE_mId', 'FE_ets', 'FE_timestamp','SB_mId', 'SB_ets', 'SB_timestamp', 'EB_mId', 'EB_ets', 'EB_timestamp']\\r\",\"            drop_columns = [i for i in to_drop if i in dataset1.columns]\\r\",\"            dataset1 = dataset1.drop(*drop_columns)\\r\",\"            dataset1 = dataset1.repartition(10)\\r\",\"        else :\\r\",\"            dataset1 = data.where(col('eid').isNull())\\r\",\"        \\r\",\"        if ('FE_mId' in data.columns) :\\r\",\"            dataset2 = data.where(col('FE_mId').isNotNull())\\r\",\"\\r\",\"            to_drop = ['EB_mId', 'EB_ets', 'EB_timestamp','SB_mId', 'SB_ets', 'SB_timestamp', 'SE_mId', 'SE_ets', 'SE_timestamp']\\r\",\"            drop_columns = [i for i in to_drop if i in dataset2.columns]\\r\",\"            dataset2 = dataset2.drop(*drop_columns)\\r\",\"            dataset2 = dataset2.repartition(10)\\r\",\"        else :\\r\",\"            dataset2 = data.where(col('eid').isNull())\\r\",\"\\r\",\"        return dataset1,dataset2\\r\"]},\"position_x\":\"410\",\"position_y\":\"300\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"twFuJ\",\"elementPosition\":\"BottomCenter\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"GleaE\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"source\",\"endpoint\":\"out2\",\"position\":\"BottomCenter\",\"elementId\":\"BGJcB\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\",\"out2\"],\"requiredJars\":[],\"formats\":{\"params\":\"textarea\",\"script\":\"textarea\"},\"context\":[{\"params\":\"\",\"script\":[\"# Load EndBot\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model, data):\\r\",\"        \\r\",\"        data = data['out2']\\r\",\"        if ('EB_mId' in data.columns) :\\r\",\"            dataset1 = data.where(col('EB_mId').isNotNull())\\r\",\"\\r\",\"            to_drop = ['SB_mId', 'SB_ets', 'SB_timestamp', 'FE_mId', 'FE_ets', 'FE_timestamp', 'SE_mId', 'SE_ets', 'SE_timestamp']\\r\",\"            drop_columns = [i for i in to_drop if i in dataset1.columns]\\r\",\"            dataset1 = dataset1.drop(*drop_columns)\\r\",\"            dataset1 = dataset1.repartition(10)\\r\",\"        else :\\r\",\"            dataset1 = data.where(col('eid').isNull())\\r\",\"\\r\",\"        return dataset1, data\\r\"]},{\"params\":\"\",\"script\":[\"# Load StartBot\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model, data):\\r\",\"        \\r\",\"        data = data['out2']\\r\",\"        if ('SB_mId' in data.columns) :\\r\",\"            dataset1 = data.where(col('SB_mId').isNotNull())\\r\",\"\\r\",\"            to_drop = ['EB_mId', 'EB_ets', 'EB_timestamp', 'FE_mId', 'FE_ets', 'FE_timestamp', 'SE_mId', 'SE_ets', 'SE_timestamp']\\r\",\"            drop_columns = [i for i in to_drop if i in dataset1.columns]\\r\",\"            dataset1 = dataset1.drop(*drop_columns)\\r\",\"            dataset1 = dataset1.repartition(10)\\r\",\"        else :\\r\",\"            dataset1 = data.where(col('eid').isNull())\\r\",\"\\r\",\"        return dataset1, data\\r\"]},{\"params\":\"\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model, data):\\r\",\"        \\r\",\"        if ('message' in data.columns):\\r\",\"            dataset1 = data.where(col('message').isNotNull()).select('eid', 'message')\\r\",\"            data = data.where(col('message').isNull())\\r\",\"            data = data.drop('message')\\r\",\"        else:\\r\",\"            dataset1 = data.where(col('eid').isNull())\\r\",\"        return dataset1, data\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"script\":[\"import logging\\r\",\"from pyspark.sql import SparkSession\\r\",\"import json\\r\",\"import re\\r\",\"from datetime import datetime\\r\",\"import mysql.connector\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        responseList = []\\r\",\"        eidList = []\\r\",\"\\r\",\"                \\r\",\"        for item in dataset:\\r\",\"            try:\\r\",\"                row = {}\\r\",\"                message = item.get('message')\\r\",\"                msg_dict = message.replace('\\\\n', '')\\r\",\"                newStr = re.sub('\\\\s+', ' ', msg_dict)\\r\",\"                jsonStr = newStr\\r\",\"                data = json.loads(jsonStr.strip())\\r\",\"                date_time = str(item.get('@timestamp'))\\r\",\"                time_stamp = date_time.replace('T', ' ').replace('Z', '')\\r\",\"                format = '%Y-%m-%d %H:%M:%S.%f'  # The format\\r\",\"                datetime_str = datetime.strptime(time_stamp, format)\\r\",\"                row['action_timestamp'] = datetime_str\\r\",\"                \\r\",\"                if ((data['btfdata']['project_name'] == None or data['btfdata']['portfolio_name'] == None or data['btfdata']['workflow_name'] == None or data['btfdata']['workflow_name'] == '') and not(data['mId'].startswith('Skipped Event'))):\\r\",\"                    # logging.info('Ignoring None: ' + str(data['eid']))\\r\",\"                    continue\\r\",\"        \\r\",\"                for key in data.keys():\\r\",\"                    if key in ('eid', 'mId', 'ets'):\\r\",\"                        row[key] = str(data.get(key))\\r\",\"                    else:\\r\",\"                        if key.lower() == 'context':\\r\",\"                            context = data.get('context')\\r\",\"                            row['channel'] = str(context.get('channel', ''))\\r\",\"                            row['env'] = str(context.get('env', ''))\\r\",\"\\r\",\"                            cdata = context.get('cdata')\\r\",\"                            if (type(cdata)) == dict:\\r\",\"                                row['ActivityInstanceId'] = str(cdata.get('ActivityInstanceId', ''))\\r\",\"                                try:\\r\",\"                                    row['Duration'] = str(cdata.get('Duration', ''))\\r\",\"                                except ValueError:\\r\",\"                                    row['Duration'] = ''\\r\",\"                                row['CurrentActivityName'] = str(cdata.get('CurrentActivityName', ''))\\r\",\"                                row['ProcessInstanceId'] = str(cdata.get('ProcessInstanceId', ''))\\r\",\"                                row['Component'] = str(cdata.get('Component', ''))\\r\",\"                            else:\\r\",\"                                row['ActivityInstanceId'] = ''\\r\",\"                                row['Duration'] = ''\\r\",\"                                row['CurrentActivityName'] = ''\\r\",\"                                row['ProcessInstanceId'] = ''\\r\",\"                                row['Component'] = ''\\r\",\"\\r\",\"                        elif key.lower() == 'edata':\\r\",\"                            edata = data.get('edata')\\r\",\"                            row['pageid'] = str(edata.get('pageid', ''))\\r\",\"                            row['type'] = str(edata.get('type', ''))\\r\",\"                            row['stageto'] = str(edata.get('stageto', ''))\\r\",\"\\r\",\"                        elif key.lower() == 'actor':\\r\",\"                            actor = data.get('actor')\\r\",\"                            row['actor_id'] = str(actor.get('id', ''))\\r\",\"                            row['actor_type'] = str(actor.get('type', ''))\\r\",\"\\r\",\"                        elif key.lower() == 'btfdata':\\r\",\"                            btfdata = data.get('btfdata')\\r\",\"                            row['user_name'] = str(btfdata.get('user_name', ''))\\r\",\"                            row['project_name'] = str(btfdata.get('project_name', ''))\\r\",\"                            row['portfolio_name'] = str(btfdata.get('portfolio_name', ''))\\r\",\"                            row['workflow_name'] = str(btfdata.get('workflow_name', ''))\\r\",\"                            row['bot_name'] = str(btfdata.get('bot_name', ''))\\r\",\"                            row['schedule_id'] = str(btfdata.get('schedule_id', ''))\\r\",\"                            row['remote_server'] = str(btfdata.get('remote_server', ''))\\r\",\"                            row['execution_type'] = str(btfdata.get('execution_type', ''))\\r\",\"                            row['error_message'] = str(btfdata.get('error_message', ''))\\r\",\"\\r\",\"                if row['eid'] in eidList:\\r\",\"                    for item in responseList:\\r\",\"                        if item['eid'] == row['eid']:\\r\",\"                            responseList.remove(item)\\r\",\"                else:\\r\",\"                    eidList.append(row['eid'])\\r\",\"                \\r\",\"                mId = row['mId']\\r\",\"                if (mId.startswith('START Bot')):\\r\",\"                    row['SB_ets'] = data.get('ets')\\r\",\"                    row['SB_mId'] = mId.split(':')[1]\\r\",\"                    row['SB_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'In Progress'\\r\",\"                elif (mId.startswith('END Bot')):\\r\",\"                    row['EB_ets'] = data.get('ets')\\r\",\"                    row['EB_mId'] = mId.split(':')[1]\\r\",\"                    row['EB_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Completed'\\r\",\"                elif (mId.startswith('Fail Event')):\\r\",\"                    row['FE_ets'] = data.get('ets')\\r\",\"                    row['FE_mId'] = mId.split(':')[1]\\r\",\"                    row['FE_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Failed'\\r\",\"                elif (mId.startswith('Skipped Event')):\\r\",\"                    row['SE_ets'] = data.get('ets')\\r\",\"                    row['SE_mId'] = mId.split(':')[1]\\r\",\"                    row['SE_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Skipped'\\r\",\"                else:\\r\",\"                    continue\\r\",\"\\r\",\"                responseList.append(row)\\r\",\"            except:\\r\",\"                error = {}\\r\",\"                error['eid'] = data['eid']\\r\",\"                error['message'] = str(data)\\r\",\"                responseList.append(error)\\r\",\"        \\r\",\"            \\r\",\"        if responseList is None or len(responseList) == 0:\\r\",\"            logging.info('No New events fetched')\\r\",\"            print('Completed')\\r\",\"            exit()\\r\",\"        spark = SparkSession.builder.appName('').config('spark.ui.showConsoleProgress', 'false').getOrCreate()\\r\",\"        df = spark.createDataFrame(responseList)\\r\",\"        \\r\",\"        logging.info('returning dataframe')\\r\",\"        return df\\r\"]},{\"dataset\":{\"name\":\"elasticExtractor\",\"description\":\"\",\"schema\":{\"id\":810,\"name\":\"iamp\",\"schemavalue\":\"[]\",\"organization\":\"leo1311\"},\"type\":\"r\",\"attributes\":{\"get_count\":\"false\",\"Cacheable\":\"\",\"Query\":\"\",\"index\":\"bot-factory-telemetry-<jobParams:CurrentExecutionTime;%Y.%m.%d>\",\"QueryParams\":\"{}\",\"IncludeFields\":\"\",\"Limit\":\"3000\",\"ExcludeFields\":\"\",\"params\":\"{}\"},\"expStatus\":0,\"datasetType\":\"ELASTICSEARCH\",\"groups\":\"\",\"backingDataset\":\"\",\"alias\":\"elasticExtractor\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-05-25 14:08:31\",\"alias\":\"ElasticBtf\",\"id\":18,\"name\":\"ACMELSTC74624\",\"description\":\"ElasticBtf\",\"type\":\"ELASTICSEARCH\",\"connectionDetails\":\"{\\\"password\\\":\\\"\\\",\\\"port\\\":\\\"9200\\\",\\\"host\\\":\\\"vimppnz01-07\\\",\\\"AuthType\\\":\\\"NoAuth\\\",\\\"username\\\":\\\"\\\"}\",\"salt\":null,\"organization\":\"leo1311\",\"dshashcode\":null,\"activetime\":\"2021-05-25T14:08:30.698+00:00\",\"category\":\"ELASTICSEARCH\"}},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"blpXu\",\"alias\":\"Dataset  Loader\",\"name\":\"Dataset  Loader\",\"classname\":\"DatasetLoaderConfig\",\"category\":\"LoaderConfig\",\"attributes\":{\"dataset\":{\"name\":\"telemetry_errors\",\"description\":\"telemetry_errors\",\"schema\":\"\",\"type\":\"rw\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT * FROM telemetry_errors\",\"Cacheable\":\"\",\"isStreaming\":\"false\",\"writeMode\":\"update\",\"params\":\"{}\",\"tableName\":\"telemetry_errors\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"datasetType\":\"MYSQL\",\"groups\":\"\",\"backingDataset\":\"\",\"alias\":\"telemetry_errors\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"}},\"applySchema\":false},\"position_x\":\"640\",\"position_y\":\"0\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"mlzTs\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"applySchema\":\"checkbox\"},\"context\":[{\"params\":\"\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model, data):\\r\",\"        \\r\",\"        if ('message' in data.columns):\\r\",\"            dataset1 = data.where(col('message').isNotNull()).select('eid', 'message')\\r\",\"            data = data.where(col('message').isNull())\\r\",\"            data = data.drop('message')\\r\",\"        else:\\r\",\"            dataset1 = data.where(col('eid').isNull())\\r\",\"        return dataset1, data\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"script\":[\"import logging\\r\",\"from pyspark.sql import SparkSession\\r\",\"import json\\r\",\"import re\\r\",\"from datetime import datetime\\r\",\"import mysql.connector\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        responseList = []\\r\",\"        eidList = []\\r\",\"\\r\",\"                \\r\",\"        for item in dataset:\\r\",\"            try:\\r\",\"                row = {}\\r\",\"                message = item.get('message')\\r\",\"                msg_dict = message.replace('\\\\n', '')\\r\",\"                newStr = re.sub('\\\\s+', ' ', msg_dict)\\r\",\"                jsonStr = newStr\\r\",\"                data = json.loads(jsonStr.strip())\\r\",\"                date_time = str(item.get('@timestamp'))\\r\",\"                time_stamp = date_time.replace('T', ' ').replace('Z', '')\\r\",\"                format = '%Y-%m-%d %H:%M:%S.%f'  # The format\\r\",\"                datetime_str = datetime.strptime(time_stamp, format)\\r\",\"                row['action_timestamp'] = datetime_str\\r\",\"                \\r\",\"                if ((data['btfdata']['project_name'] == None or data['btfdata']['portfolio_name'] == None or data['btfdata']['workflow_name'] == None or data['btfdata']['workflow_name'] == '') and not(data['mId'].startswith('Skipped Event'))):\\r\",\"                    # logging.info('Ignoring None: ' + str(data['eid']))\\r\",\"                    continue\\r\",\"        \\r\",\"                for key in data.keys():\\r\",\"                    if key in ('eid', 'mId', 'ets'):\\r\",\"                        row[key] = str(data.get(key))\\r\",\"                    else:\\r\",\"                        if key.lower() == 'context':\\r\",\"                            context = data.get('context')\\r\",\"                            row['channel'] = str(context.get('channel', ''))\\r\",\"                            row['env'] = str(context.get('env', ''))\\r\",\"\\r\",\"                            cdata = context.get('cdata')\\r\",\"                            if (type(cdata)) == dict:\\r\",\"                                row['ActivityInstanceId'] = str(cdata.get('ActivityInstanceId', ''))\\r\",\"                                try:\\r\",\"                                    row['Duration'] = str(cdata.get('Duration', ''))\\r\",\"                                except ValueError:\\r\",\"                                    row['Duration'] = ''\\r\",\"                                row['CurrentActivityName'] = str(cdata.get('CurrentActivityName', ''))\\r\",\"                                row['ProcessInstanceId'] = str(cdata.get('ProcessInstanceId', ''))\\r\",\"                                row['Component'] = str(cdata.get('Component', ''))\\r\",\"                            else:\\r\",\"                                row['ActivityInstanceId'] = ''\\r\",\"                                row['Duration'] = ''\\r\",\"                                row['CurrentActivityName'] = ''\\r\",\"                                row['ProcessInstanceId'] = ''\\r\",\"                                row['Component'] = ''\\r\",\"\\r\",\"                        elif key.lower() == 'edata':\\r\",\"                            edata = data.get('edata')\\r\",\"                            row['pageid'] = str(edata.get('pageid', ''))\\r\",\"                            row['type'] = str(edata.get('type', ''))\\r\",\"                            row['stageto'] = str(edata.get('stageto', ''))\\r\",\"\\r\",\"                        elif key.lower() == 'actor':\\r\",\"                            actor = data.get('actor')\\r\",\"                            row['actor_id'] = str(actor.get('id', ''))\\r\",\"                            row['actor_type'] = str(actor.get('type', ''))\\r\",\"\\r\",\"                        elif key.lower() == 'btfdata':\\r\",\"                            btfdata = data.get('btfdata')\\r\",\"                            row['user_name'] = str(btfdata.get('user_name', ''))\\r\",\"                            row['project_name'] = str(btfdata.get('project_name', ''))\\r\",\"                            row['portfolio_name'] = str(btfdata.get('portfolio_name', ''))\\r\",\"                            row['workflow_name'] = str(btfdata.get('workflow_name', ''))\\r\",\"                            row['bot_name'] = str(btfdata.get('bot_name', ''))\\r\",\"                            row['schedule_id'] = str(btfdata.get('schedule_id', ''))\\r\",\"                            row['remote_server'] = str(btfdata.get('remote_server', ''))\\r\",\"                            row['execution_type'] = str(btfdata.get('execution_type', ''))\\r\",\"                            row['error_message'] = str(btfdata.get('error_message', ''))\\r\",\"\\r\",\"                if row['eid'] in eidList:\\r\",\"                    for item in responseList:\\r\",\"                        if item['eid'] == row['eid']:\\r\",\"                            responseList.remove(item)\\r\",\"                else:\\r\",\"                    eidList.append(row['eid'])\\r\",\"                \\r\",\"                mId = row['mId']\\r\",\"                if (mId.startswith('START Bot')):\\r\",\"                    row['SB_ets'] = data.get('ets')\\r\",\"                    row['SB_mId'] = mId.split(':')[1]\\r\",\"                    row['SB_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'In Progress'\\r\",\"                elif (mId.startswith('END Bot')):\\r\",\"                    row['EB_ets'] = data.get('ets')\\r\",\"                    row['EB_mId'] = mId.split(':')[1]\\r\",\"                    row['EB_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Completed'\\r\",\"                elif (mId.startswith('Fail Event')):\\r\",\"                    row['FE_ets'] = data.get('ets')\\r\",\"                    row['FE_mId'] = mId.split(':')[1]\\r\",\"                    row['FE_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Failed'\\r\",\"                elif (mId.startswith('Skipped Event')):\\r\",\"                    row['SE_ets'] = data.get('ets')\\r\",\"                    row['SE_mId'] = mId.split(':')[1]\\r\",\"                    row['SE_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Skipped'\\r\",\"                else:\\r\",\"                    continue\\r\",\"\\r\",\"                responseList.append(row)\\r\",\"            except:\\r\",\"                error = {}\\r\",\"                error['eid'] = data['eid']\\r\",\"                error['message'] = str(data)\\r\",\"                responseList.append(error)\\r\",\"        \\r\",\"            \\r\",\"        if responseList is None or len(responseList) == 0:\\r\",\"            logging.info('No New events fetched')\\r\",\"            print('Completed')\\r\",\"            exit()\\r\",\"        spark = SparkSession.builder.appName('').config('spark.ui.showConsoleProgress', 'false').getOrCreate()\\r\",\"        df = spark.createDataFrame(responseList)\\r\",\"        \\r\",\"        logging.info('returning dataframe')\\r\",\"        return df\\r\"]},{\"dataset\":{\"name\":\"elasticExtractor\",\"description\":\"\",\"schema\":{\"id\":810,\"name\":\"iamp\",\"schemavalue\":\"[]\",\"organization\":\"leo1311\"},\"type\":\"r\",\"attributes\":{\"get_count\":\"false\",\"Cacheable\":\"\",\"Query\":\"\",\"index\":\"bot-factory-telemetry-<jobParams:CurrentExecutionTime;%Y.%m.%d>\",\"QueryParams\":\"{}\",\"IncludeFields\":\"\",\"Limit\":\"3000\",\"ExcludeFields\":\"\",\"params\":\"{}\"},\"expStatus\":0,\"datasetType\":\"ELASTICSEARCH\",\"groups\":\"\",\"backingDataset\":\"\",\"alias\":\"elasticExtractor\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-05-25 14:08:31\",\"alias\":\"ElasticBtf\",\"id\":18,\"name\":\"ACMELSTC74624\",\"description\":\"ElasticBtf\",\"type\":\"ELASTICSEARCH\",\"connectionDetails\":\"{\\\"password\\\":\\\"\\\",\\\"port\\\":\\\"9200\\\",\\\"host\\\":\\\"vimppnz01-07\\\",\\\"AuthType\\\":\\\"NoAuth\\\",\\\"username\\\":\\\"\\\"}\",\"salt\":null,\"organization\":\"leo1311\",\"dshashcode\":null,\"activetime\":\"2021-05-25T14:08:30.698+00:00\",\"category\":\"ELASTICSEARCH\"}},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"sccMW\",\"alias\":\"Dataset  Loader\",\"name\":\"Dataset  Loader\",\"classname\":\"DatasetLoaderConfig\",\"category\":\"LoaderConfig\",\"attributes\":{\"dataset\":{\"name\":\"SB_data\",\"description\":\"\",\"schema\":\"\",\"type\":\"rw\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from telemetry_logging\",\"Cacheable\":\"\",\"isStreaming\":\"false\",\"writeMode\":\"update\",\"params\":\"{}\",\"tableName\":\"telemetry_logging\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"datasetType\":\"MYSQL\",\"groups\":\"\",\"backingDataset\":\"\",\"alias\":\"SB_data\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"}},\"applySchema\":false},\"position_x\":\"640\",\"position_y\":\"100\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"FxLFX\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"applySchema\":\"checkbox\"},\"context\":[{\"params\":\"\",\"script\":[\"# Load StartBot\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model, data):\\r\",\"        \\r\",\"        data = data['out2']\\r\",\"        if ('SB_mId' in data.columns) :\\r\",\"            dataset1 = data.where(col('SB_mId').isNotNull())\\r\",\"\\r\",\"            to_drop = ['EB_mId', 'EB_ets', 'EB_timestamp', 'FE_mId', 'FE_ets', 'FE_timestamp', 'SE_mId', 'SE_ets', 'SE_timestamp']\\r\",\"            drop_columns = [i for i in to_drop if i in dataset1.columns]\\r\",\"            dataset1 = dataset1.drop(*drop_columns)\\r\",\"            dataset1 = dataset1.repartition(10)\\r\",\"        else :\\r\",\"            dataset1 = data.where(col('eid').isNull())\\r\",\"\\r\",\"        return dataset1, data\\r\"]},{\"params\":\"\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model, data):\\r\",\"        \\r\",\"        if ('message' in data.columns):\\r\",\"            dataset1 = data.where(col('message').isNotNull()).select('eid', 'message')\\r\",\"            data = data.where(col('message').isNull())\\r\",\"            data = data.drop('message')\\r\",\"        else:\\r\",\"            dataset1 = data.where(col('eid').isNull())\\r\",\"        return dataset1, data\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"script\":[\"import logging\\r\",\"from pyspark.sql import SparkSession\\r\",\"import json\\r\",\"import re\\r\",\"from datetime import datetime\\r\",\"import mysql.connector\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        responseList = []\\r\",\"        eidList = []\\r\",\"\\r\",\"                \\r\",\"        for item in dataset:\\r\",\"            try:\\r\",\"                row = {}\\r\",\"                message = item.get('message')\\r\",\"                msg_dict = message.replace('\\\\n', '')\\r\",\"                newStr = re.sub('\\\\s+', ' ', msg_dict)\\r\",\"                jsonStr = newStr\\r\",\"                data = json.loads(jsonStr.strip())\\r\",\"                date_time = str(item.get('@timestamp'))\\r\",\"                time_stamp = date_time.replace('T', ' ').replace('Z', '')\\r\",\"                format = '%Y-%m-%d %H:%M:%S.%f'  # The format\\r\",\"                datetime_str = datetime.strptime(time_stamp, format)\\r\",\"                row['action_timestamp'] = datetime_str\\r\",\"                \\r\",\"                if ((data['btfdata']['project_name'] == None or data['btfdata']['portfolio_name'] == None or data['btfdata']['workflow_name'] == None or data['btfdata']['workflow_name'] == '') and not(data['mId'].startswith('Skipped Event'))):\\r\",\"                    # logging.info('Ignoring None: ' + str(data['eid']))\\r\",\"                    continue\\r\",\"        \\r\",\"                for key in data.keys():\\r\",\"                    if key in ('eid', 'mId', 'ets'):\\r\",\"                        row[key] = str(data.get(key))\\r\",\"                    else:\\r\",\"                        if key.lower() == 'context':\\r\",\"                            context = data.get('context')\\r\",\"                            row['channel'] = str(context.get('channel', ''))\\r\",\"                            row['env'] = str(context.get('env', ''))\\r\",\"\\r\",\"                            cdata = context.get('cdata')\\r\",\"                            if (type(cdata)) == dict:\\r\",\"                                row['ActivityInstanceId'] = str(cdata.get('ActivityInstanceId', ''))\\r\",\"                                try:\\r\",\"                                    row['Duration'] = str(cdata.get('Duration', ''))\\r\",\"                                except ValueError:\\r\",\"                                    row['Duration'] = ''\\r\",\"                                row['CurrentActivityName'] = str(cdata.get('CurrentActivityName', ''))\\r\",\"                                row['ProcessInstanceId'] = str(cdata.get('ProcessInstanceId', ''))\\r\",\"                                row['Component'] = str(cdata.get('Component', ''))\\r\",\"                            else:\\r\",\"                                row['ActivityInstanceId'] = ''\\r\",\"                                row['Duration'] = ''\\r\",\"                                row['CurrentActivityName'] = ''\\r\",\"                                row['ProcessInstanceId'] = ''\\r\",\"                                row['Component'] = ''\\r\",\"\\r\",\"                        elif key.lower() == 'edata':\\r\",\"                            edata = data.get('edata')\\r\",\"                            row['pageid'] = str(edata.get('pageid', ''))\\r\",\"                            row['type'] = str(edata.get('type', ''))\\r\",\"                            row['stageto'] = str(edata.get('stageto', ''))\\r\",\"\\r\",\"                        elif key.lower() == 'actor':\\r\",\"                            actor = data.get('actor')\\r\",\"                            row['actor_id'] = str(actor.get('id', ''))\\r\",\"                            row['actor_type'] = str(actor.get('type', ''))\\r\",\"\\r\",\"                        elif key.lower() == 'btfdata':\\r\",\"                            btfdata = data.get('btfdata')\\r\",\"                            row['user_name'] = str(btfdata.get('user_name', ''))\\r\",\"                            row['project_name'] = str(btfdata.get('project_name', ''))\\r\",\"                            row['portfolio_name'] = str(btfdata.get('portfolio_name', ''))\\r\",\"                            row['workflow_name'] = str(btfdata.get('workflow_name', ''))\\r\",\"                            row['bot_name'] = str(btfdata.get('bot_name', ''))\\r\",\"                            row['schedule_id'] = str(btfdata.get('schedule_id', ''))\\r\",\"                            row['remote_server'] = str(btfdata.get('remote_server', ''))\\r\",\"                            row['execution_type'] = str(btfdata.get('execution_type', ''))\\r\",\"                            row['error_message'] = str(btfdata.get('error_message', ''))\\r\",\"\\r\",\"                if row['eid'] in eidList:\\r\",\"                    for item in responseList:\\r\",\"                        if item['eid'] == row['eid']:\\r\",\"                            responseList.remove(item)\\r\",\"                else:\\r\",\"                    eidList.append(row['eid'])\\r\",\"                \\r\",\"                mId = row['mId']\\r\",\"                if (mId.startswith('START Bot')):\\r\",\"                    row['SB_ets'] = data.get('ets')\\r\",\"                    row['SB_mId'] = mId.split(':')[1]\\r\",\"                    row['SB_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'In Progress'\\r\",\"                elif (mId.startswith('END Bot')):\\r\",\"                    row['EB_ets'] = data.get('ets')\\r\",\"                    row['EB_mId'] = mId.split(':')[1]\\r\",\"                    row['EB_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Completed'\\r\",\"                elif (mId.startswith('Fail Event')):\\r\",\"                    row['FE_ets'] = data.get('ets')\\r\",\"                    row['FE_mId'] = mId.split(':')[1]\\r\",\"                    row['FE_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Failed'\\r\",\"                elif (mId.startswith('Skipped Event')):\\r\",\"                    row['SE_ets'] = data.get('ets')\\r\",\"                    row['SE_mId'] = mId.split(':')[1]\\r\",\"                    row['SE_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Skipped'\\r\",\"                else:\\r\",\"                    continue\\r\",\"\\r\",\"                responseList.append(row)\\r\",\"            except:\\r\",\"                error = {}\\r\",\"                error['eid'] = data['eid']\\r\",\"                error['message'] = str(data)\\r\",\"                responseList.append(error)\\r\",\"        \\r\",\"            \\r\",\"        if responseList is None or len(responseList) == 0:\\r\",\"            logging.info('No New events fetched')\\r\",\"            print('Completed')\\r\",\"            exit()\\r\",\"        spark = SparkSession.builder.appName('').config('spark.ui.showConsoleProgress', 'false').getOrCreate()\\r\",\"        df = spark.createDataFrame(responseList)\\r\",\"        \\r\",\"        logging.info('returning dataframe')\\r\",\"        return df\\r\"]},{\"dataset\":{\"name\":\"elasticExtractor\",\"description\":\"\",\"schema\":{\"id\":810,\"name\":\"iamp\",\"schemavalue\":\"[]\",\"organization\":\"leo1311\"},\"type\":\"r\",\"attributes\":{\"get_count\":\"false\",\"Cacheable\":\"\",\"Query\":\"\",\"index\":\"bot-factory-telemetry-<jobParams:CurrentExecutionTime;%Y.%m.%d>\",\"QueryParams\":\"{}\",\"IncludeFields\":\"\",\"Limit\":\"3000\",\"ExcludeFields\":\"\",\"params\":\"{}\"},\"expStatus\":0,\"datasetType\":\"ELASTICSEARCH\",\"groups\":\"\",\"backingDataset\":\"\",\"alias\":\"elasticExtractor\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-05-25 14:08:31\",\"alias\":\"ElasticBtf\",\"id\":18,\"name\":\"ACMELSTC74624\",\"description\":\"ElasticBtf\",\"type\":\"ELASTICSEARCH\",\"connectionDetails\":\"{\\\"password\\\":\\\"\\\",\\\"port\\\":\\\"9200\\\",\\\"host\\\":\\\"vimppnz01-07\\\",\\\"AuthType\\\":\\\"NoAuth\\\",\\\"username\\\":\\\"\\\"}\",\"salt\":null,\"organization\":\"leo1311\",\"dshashcode\":null,\"activetime\":\"2021-05-25T14:08:30.698+00:00\",\"category\":\"ELASTICSEARCH\"}},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"iRGSJ\",\"alias\":\"Dataset  Loader\",\"name\":\"Dataset  Loader\",\"classname\":\"DatasetLoaderConfig\",\"category\":\"LoaderConfig\",\"attributes\":{\"dataset\":{\"name\":\"EB_data\",\"description\":\"\",\"schema\":\"\",\"type\":\"rw\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from telemetry_logging\",\"Cacheable\":\"\",\"isStreaming\":\"false\",\"writeMode\":\"update\",\"params\":\"{}\",\"tableName\":\"telemetry_logging\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"datasetType\":\"MYSQL\",\"groups\":\"\",\"backingDataset\":\"\",\"alias\":\"EB_data\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"}},\"applySchema\":false},\"position_x\":\"640\",\"position_y\":\"200\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"twFuJ\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"applySchema\":\"checkbox\"},\"context\":[{\"params\":\"\",\"script\":[\"# Load EndBot\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model, data):\\r\",\"        \\r\",\"        data = data['out2']\\r\",\"        if ('EB_mId' in data.columns) :\\r\",\"            dataset1 = data.where(col('EB_mId').isNotNull())\\r\",\"\\r\",\"            to_drop = ['SB_mId', 'SB_ets', 'SB_timestamp', 'FE_mId', 'FE_ets', 'FE_timestamp', 'SE_mId', 'SE_ets', 'SE_timestamp']\\r\",\"            drop_columns = [i for i in to_drop if i in dataset1.columns]\\r\",\"            dataset1 = dataset1.drop(*drop_columns)\\r\",\"            dataset1 = dataset1.repartition(10)\\r\",\"        else :\\r\",\"            dataset1 = data.where(col('eid').isNull())\\r\",\"\\r\",\"        return dataset1, data\\r\"]},{\"params\":\"\",\"script\":[\"# Load StartBot\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model, data):\\r\",\"        \\r\",\"        data = data['out2']\\r\",\"        if ('SB_mId' in data.columns) :\\r\",\"            dataset1 = data.where(col('SB_mId').isNotNull())\\r\",\"\\r\",\"            to_drop = ['EB_mId', 'EB_ets', 'EB_timestamp', 'FE_mId', 'FE_ets', 'FE_timestamp', 'SE_mId', 'SE_ets', 'SE_timestamp']\\r\",\"            drop_columns = [i for i in to_drop if i in dataset1.columns]\\r\",\"            dataset1 = dataset1.drop(*drop_columns)\\r\",\"            dataset1 = dataset1.repartition(10)\\r\",\"        else :\\r\",\"            dataset1 = data.where(col('eid').isNull())\\r\",\"\\r\",\"        return dataset1, data\\r\"]},{\"params\":\"\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model, data):\\r\",\"        \\r\",\"        if ('message' in data.columns):\\r\",\"            dataset1 = data.where(col('message').isNotNull()).select('eid', 'message')\\r\",\"            data = data.where(col('message').isNull())\\r\",\"            data = data.drop('message')\\r\",\"        else:\\r\",\"            dataset1 = data.where(col('eid').isNull())\\r\",\"        return dataset1, data\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"script\":[\"import logging\\r\",\"from pyspark.sql import SparkSession\\r\",\"import json\\r\",\"import re\\r\",\"from datetime import datetime\\r\",\"import mysql.connector\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        responseList = []\\r\",\"        eidList = []\\r\",\"\\r\",\"                \\r\",\"        for item in dataset:\\r\",\"            try:\\r\",\"                row = {}\\r\",\"                message = item.get('message')\\r\",\"                msg_dict = message.replace('\\\\n', '')\\r\",\"                newStr = re.sub('\\\\s+', ' ', msg_dict)\\r\",\"                jsonStr = newStr\\r\",\"                data = json.loads(jsonStr.strip())\\r\",\"                date_time = str(item.get('@timestamp'))\\r\",\"                time_stamp = date_time.replace('T', ' ').replace('Z', '')\\r\",\"                format = '%Y-%m-%d %H:%M:%S.%f'  # The format\\r\",\"                datetime_str = datetime.strptime(time_stamp, format)\\r\",\"                row['action_timestamp'] = datetime_str\\r\",\"                \\r\",\"                if ((data['btfdata']['project_name'] == None or data['btfdata']['portfolio_name'] == None or data['btfdata']['workflow_name'] == None or data['btfdata']['workflow_name'] == '') and not(data['mId'].startswith('Skipped Event'))):\\r\",\"                    # logging.info('Ignoring None: ' + str(data['eid']))\\r\",\"                    continue\\r\",\"        \\r\",\"                for key in data.keys():\\r\",\"                    if key in ('eid', 'mId', 'ets'):\\r\",\"                        row[key] = str(data.get(key))\\r\",\"                    else:\\r\",\"                        if key.lower() == 'context':\\r\",\"                            context = data.get('context')\\r\",\"                            row['channel'] = str(context.get('channel', ''))\\r\",\"                            row['env'] = str(context.get('env', ''))\\r\",\"\\r\",\"                            cdata = context.get('cdata')\\r\",\"                            if (type(cdata)) == dict:\\r\",\"                                row['ActivityInstanceId'] = str(cdata.get('ActivityInstanceId', ''))\\r\",\"                                try:\\r\",\"                                    row['Duration'] = str(cdata.get('Duration', ''))\\r\",\"                                except ValueError:\\r\",\"                                    row['Duration'] = ''\\r\",\"                                row['CurrentActivityName'] = str(cdata.get('CurrentActivityName', ''))\\r\",\"                                row['ProcessInstanceId'] = str(cdata.get('ProcessInstanceId', ''))\\r\",\"                                row['Component'] = str(cdata.get('Component', ''))\\r\",\"                            else:\\r\",\"                                row['ActivityInstanceId'] = ''\\r\",\"                                row['Duration'] = ''\\r\",\"                                row['CurrentActivityName'] = ''\\r\",\"                                row['ProcessInstanceId'] = ''\\r\",\"                                row['Component'] = ''\\r\",\"\\r\",\"                        elif key.lower() == 'edata':\\r\",\"                            edata = data.get('edata')\\r\",\"                            row['pageid'] = str(edata.get('pageid', ''))\\r\",\"                            row['type'] = str(edata.get('type', ''))\\r\",\"                            row['stageto'] = str(edata.get('stageto', ''))\\r\",\"\\r\",\"                        elif key.lower() == 'actor':\\r\",\"                            actor = data.get('actor')\\r\",\"                            row['actor_id'] = str(actor.get('id', ''))\\r\",\"                            row['actor_type'] = str(actor.get('type', ''))\\r\",\"\\r\",\"                        elif key.lower() == 'btfdata':\\r\",\"                            btfdata = data.get('btfdata')\\r\",\"                            row['user_name'] = str(btfdata.get('user_name', ''))\\r\",\"                            row['project_name'] = str(btfdata.get('project_name', ''))\\r\",\"                            row['portfolio_name'] = str(btfdata.get('portfolio_name', ''))\\r\",\"                            row['workflow_name'] = str(btfdata.get('workflow_name', ''))\\r\",\"                            row['bot_name'] = str(btfdata.get('bot_name', ''))\\r\",\"                            row['schedule_id'] = str(btfdata.get('schedule_id', ''))\\r\",\"                            row['remote_server'] = str(btfdata.get('remote_server', ''))\\r\",\"                            row['execution_type'] = str(btfdata.get('execution_type', ''))\\r\",\"                            row['error_message'] = str(btfdata.get('error_message', ''))\\r\",\"\\r\",\"                if row['eid'] in eidList:\\r\",\"                    for item in responseList:\\r\",\"                        if item['eid'] == row['eid']:\\r\",\"                            responseList.remove(item)\\r\",\"                else:\\r\",\"                    eidList.append(row['eid'])\\r\",\"                \\r\",\"                mId = row['mId']\\r\",\"                if (mId.startswith('START Bot')):\\r\",\"                    row['SB_ets'] = data.get('ets')\\r\",\"                    row['SB_mId'] = mId.split(':')[1]\\r\",\"                    row['SB_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'In Progress'\\r\",\"                elif (mId.startswith('END Bot')):\\r\",\"                    row['EB_ets'] = data.get('ets')\\r\",\"                    row['EB_mId'] = mId.split(':')[1]\\r\",\"                    row['EB_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Completed'\\r\",\"                elif (mId.startswith('Fail Event')):\\r\",\"                    row['FE_ets'] = data.get('ets')\\r\",\"                    row['FE_mId'] = mId.split(':')[1]\\r\",\"                    row['FE_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Failed'\\r\",\"                elif (mId.startswith('Skipped Event')):\\r\",\"                    row['SE_ets'] = data.get('ets')\\r\",\"                    row['SE_mId'] = mId.split(':')[1]\\r\",\"                    row['SE_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Skipped'\\r\",\"                else:\\r\",\"                    continue\\r\",\"\\r\",\"                responseList.append(row)\\r\",\"            except:\\r\",\"                error = {}\\r\",\"                error['eid'] = data['eid']\\r\",\"                error['message'] = str(data)\\r\",\"                responseList.append(error)\\r\",\"        \\r\",\"            \\r\",\"        if responseList is None or len(responseList) == 0:\\r\",\"            logging.info('No New events fetched')\\r\",\"            print('Completed')\\r\",\"            exit()\\r\",\"        spark = SparkSession.builder.appName('').config('spark.ui.showConsoleProgress', 'false').getOrCreate()\\r\",\"        df = spark.createDataFrame(responseList)\\r\",\"        \\r\",\"        logging.info('returning dataframe')\\r\",\"        return df\\r\"]},{\"dataset\":{\"name\":\"elasticExtractor\",\"description\":\"\",\"schema\":{\"id\":810,\"name\":\"iamp\",\"schemavalue\":\"[]\",\"organization\":\"leo1311\"},\"type\":\"r\",\"attributes\":{\"get_count\":\"false\",\"Cacheable\":\"\",\"Query\":\"\",\"index\":\"bot-factory-telemetry-<jobParams:CurrentExecutionTime;%Y.%m.%d>\",\"QueryParams\":\"{}\",\"IncludeFields\":\"\",\"Limit\":\"3000\",\"ExcludeFields\":\"\",\"params\":\"{}\"},\"expStatus\":0,\"datasetType\":\"ELASTICSEARCH\",\"groups\":\"\",\"backingDataset\":\"\",\"alias\":\"elasticExtractor\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-05-25 14:08:31\",\"alias\":\"ElasticBtf\",\"id\":18,\"name\":\"ACMELSTC74624\",\"description\":\"ElasticBtf\",\"type\":\"ELASTICSEARCH\",\"connectionDetails\":\"{\\\"password\\\":\\\"\\\",\\\"port\\\":\\\"9200\\\",\\\"host\\\":\\\"vimppnz01-07\\\",\\\"AuthType\\\":\\\"NoAuth\\\",\\\"username\\\":\\\"\\\"}\",\"salt\":null,\"organization\":\"leo1311\",\"dshashcode\":null,\"activetime\":\"2021-05-25T14:08:30.698+00:00\",\"category\":\"ELASTICSEARCH\"}},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"GleaE\",\"alias\":\"Dataset  Loader\",\"name\":\"Dataset  Loader\",\"classname\":\"DatasetLoaderConfig\",\"category\":\"LoaderConfig\",\"attributes\":{\"dataset\":{\"name\":\"SE_data\",\"description\":\"\",\"schema\":\"\",\"type\":\"rw\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from telemetry_logging\",\"Cacheable\":\"\",\"isStreaming\":\"false\",\"writeMode\":\"update\",\"params\":\"{}\",\"tableName\":\"telemetry_logging\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"datasetType\":\"MYSQL\",\"groups\":\"\",\"backingDataset\":\"\",\"alias\":\"SE_data\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"}},\"applySchema\":false},\"position_x\":\"640\",\"position_y\":\"300\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"vGfMK\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"applySchema\":\"checkbox\"},\"context\":[{\"params\":\"\",\"script\":[\"# Load SkipEvent & FailEvent\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model, data):\\r\",\"        \\r\",\"        data = data['out2']\\r\",\"        \\r\",\"        if ('SE_mId' in data.columns) :\\r\",\"            dataset1 = data.where(col('SE_mId').isNotNull())\\r\",\"\\r\",\"            to_drop = ['FE_mId', 'FE_ets', 'FE_timestamp','SB_mId', 'SB_ets', 'SB_timestamp', 'EB_mId', 'EB_ets', 'EB_timestamp']\\r\",\"            drop_columns = [i for i in to_drop if i in dataset1.columns]\\r\",\"            dataset1 = dataset1.drop(*drop_columns)\\r\",\"            dataset1 = dataset1.repartition(10)\\r\",\"        else :\\r\",\"            dataset1 = data.where(col('eid').isNull())\\r\",\"        \\r\",\"        if ('FE_mId' in data.columns) :\\r\",\"            dataset2 = data.where(col('FE_mId').isNotNull())\\r\",\"\\r\",\"            to_drop = ['EB_mId', 'EB_ets', 'EB_timestamp','SB_mId', 'SB_ets', 'SB_timestamp', 'SE_mId', 'SE_ets', 'SE_timestamp']\\r\",\"            drop_columns = [i for i in to_drop if i in dataset2.columns]\\r\",\"            dataset2 = dataset2.drop(*drop_columns)\\r\",\"            dataset2 = dataset2.repartition(10)\\r\",\"        else :\\r\",\"            dataset2 = data.where(col('eid').isNull())\\r\",\"\\r\",\"        return dataset1,dataset2\\r\"]},{\"params\":\"\",\"script\":[\"# Load EndBot\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model, data):\\r\",\"        \\r\",\"        data = data['out2']\\r\",\"        if ('EB_mId' in data.columns) :\\r\",\"            dataset1 = data.where(col('EB_mId').isNotNull())\\r\",\"\\r\",\"            to_drop = ['SB_mId', 'SB_ets', 'SB_timestamp', 'FE_mId', 'FE_ets', 'FE_timestamp', 'SE_mId', 'SE_ets', 'SE_timestamp']\\r\",\"            drop_columns = [i for i in to_drop if i in dataset1.columns]\\r\",\"            dataset1 = dataset1.drop(*drop_columns)\\r\",\"            dataset1 = dataset1.repartition(10)\\r\",\"        else :\\r\",\"            dataset1 = data.where(col('eid').isNull())\\r\",\"\\r\",\"        return dataset1, data\\r\"]},{\"params\":\"\",\"script\":[\"# Load StartBot\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model, data):\\r\",\"        \\r\",\"        data = data['out2']\\r\",\"        if ('SB_mId' in data.columns) :\\r\",\"            dataset1 = data.where(col('SB_mId').isNotNull())\\r\",\"\\r\",\"            to_drop = ['EB_mId', 'EB_ets', 'EB_timestamp', 'FE_mId', 'FE_ets', 'FE_timestamp', 'SE_mId', 'SE_ets', 'SE_timestamp']\\r\",\"            drop_columns = [i for i in to_drop if i in dataset1.columns]\\r\",\"            dataset1 = dataset1.drop(*drop_columns)\\r\",\"            dataset1 = dataset1.repartition(10)\\r\",\"        else :\\r\",\"            dataset1 = data.where(col('eid').isNull())\\r\",\"\\r\",\"        return dataset1, data\\r\"]},{\"params\":\"\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model, data):\\r\",\"        \\r\",\"        if ('message' in data.columns):\\r\",\"            dataset1 = data.where(col('message').isNotNull()).select('eid', 'message')\\r\",\"            data = data.where(col('message').isNull())\\r\",\"            data = data.drop('message')\\r\",\"        else:\\r\",\"            dataset1 = data.where(col('eid').isNull())\\r\",\"        return dataset1, data\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"script\":[\"import logging\\r\",\"from pyspark.sql import SparkSession\\r\",\"import json\\r\",\"import re\\r\",\"from datetime import datetime\\r\",\"import mysql.connector\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        responseList = []\\r\",\"        eidList = []\\r\",\"\\r\",\"                \\r\",\"        for item in dataset:\\r\",\"            try:\\r\",\"                row = {}\\r\",\"                message = item.get('message')\\r\",\"                msg_dict = message.replace('\\\\n', '')\\r\",\"                newStr = re.sub('\\\\s+', ' ', msg_dict)\\r\",\"                jsonStr = newStr\\r\",\"                data = json.loads(jsonStr.strip())\\r\",\"                date_time = str(item.get('@timestamp'))\\r\",\"                time_stamp = date_time.replace('T', ' ').replace('Z', '')\\r\",\"                format = '%Y-%m-%d %H:%M:%S.%f'  # The format\\r\",\"                datetime_str = datetime.strptime(time_stamp, format)\\r\",\"                row['action_timestamp'] = datetime_str\\r\",\"                \\r\",\"                if ((data['btfdata']['project_name'] == None or data['btfdata']['portfolio_name'] == None or data['btfdata']['workflow_name'] == None or data['btfdata']['workflow_name'] == '') and not(data['mId'].startswith('Skipped Event'))):\\r\",\"                    # logging.info('Ignoring None: ' + str(data['eid']))\\r\",\"                    continue\\r\",\"        \\r\",\"                for key in data.keys():\\r\",\"                    if key in ('eid', 'mId', 'ets'):\\r\",\"                        row[key] = str(data.get(key))\\r\",\"                    else:\\r\",\"                        if key.lower() == 'context':\\r\",\"                            context = data.get('context')\\r\",\"                            row['channel'] = str(context.get('channel', ''))\\r\",\"                            row['env'] = str(context.get('env', ''))\\r\",\"\\r\",\"                            cdata = context.get('cdata')\\r\",\"                            if (type(cdata)) == dict:\\r\",\"                                row['ActivityInstanceId'] = str(cdata.get('ActivityInstanceId', ''))\\r\",\"                                try:\\r\",\"                                    row['Duration'] = str(cdata.get('Duration', ''))\\r\",\"                                except ValueError:\\r\",\"                                    row['Duration'] = ''\\r\",\"                                row['CurrentActivityName'] = str(cdata.get('CurrentActivityName', ''))\\r\",\"                                row['ProcessInstanceId'] = str(cdata.get('ProcessInstanceId', ''))\\r\",\"                                row['Component'] = str(cdata.get('Component', ''))\\r\",\"                            else:\\r\",\"                                row['ActivityInstanceId'] = ''\\r\",\"                                row['Duration'] = ''\\r\",\"                                row['CurrentActivityName'] = ''\\r\",\"                                row['ProcessInstanceId'] = ''\\r\",\"                                row['Component'] = ''\\r\",\"\\r\",\"                        elif key.lower() == 'edata':\\r\",\"                            edata = data.get('edata')\\r\",\"                            row['pageid'] = str(edata.get('pageid', ''))\\r\",\"                            row['type'] = str(edata.get('type', ''))\\r\",\"                            row['stageto'] = str(edata.get('stageto', ''))\\r\",\"\\r\",\"                        elif key.lower() == 'actor':\\r\",\"                            actor = data.get('actor')\\r\",\"                            row['actor_id'] = str(actor.get('id', ''))\\r\",\"                            row['actor_type'] = str(actor.get('type', ''))\\r\",\"\\r\",\"                        elif key.lower() == 'btfdata':\\r\",\"                            btfdata = data.get('btfdata')\\r\",\"                            row['user_name'] = str(btfdata.get('user_name', ''))\\r\",\"                            row['project_name'] = str(btfdata.get('project_name', ''))\\r\",\"                            row['portfolio_name'] = str(btfdata.get('portfolio_name', ''))\\r\",\"                            row['workflow_name'] = str(btfdata.get('workflow_name', ''))\\r\",\"                            row['bot_name'] = str(btfdata.get('bot_name', ''))\\r\",\"                            row['schedule_id'] = str(btfdata.get('schedule_id', ''))\\r\",\"                            row['remote_server'] = str(btfdata.get('remote_server', ''))\\r\",\"                            row['execution_type'] = str(btfdata.get('execution_type', ''))\\r\",\"                            row['error_message'] = str(btfdata.get('error_message', ''))\\r\",\"\\r\",\"                if row['eid'] in eidList:\\r\",\"                    for item in responseList:\\r\",\"                        if item['eid'] == row['eid']:\\r\",\"                            responseList.remove(item)\\r\",\"                else:\\r\",\"                    eidList.append(row['eid'])\\r\",\"                \\r\",\"                mId = row['mId']\\r\",\"                if (mId.startswith('START Bot')):\\r\",\"                    row['SB_ets'] = data.get('ets')\\r\",\"                    row['SB_mId'] = mId.split(':')[1]\\r\",\"                    row['SB_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'In Progress'\\r\",\"                elif (mId.startswith('END Bot')):\\r\",\"                    row['EB_ets'] = data.get('ets')\\r\",\"                    row['EB_mId'] = mId.split(':')[1]\\r\",\"                    row['EB_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Completed'\\r\",\"                elif (mId.startswith('Fail Event')):\\r\",\"                    row['FE_ets'] = data.get('ets')\\r\",\"                    row['FE_mId'] = mId.split(':')[1]\\r\",\"                    row['FE_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Failed'\\r\",\"                elif (mId.startswith('Skipped Event')):\\r\",\"                    row['SE_ets'] = data.get('ets')\\r\",\"                    row['SE_mId'] = mId.split(':')[1]\\r\",\"                    row['SE_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Skipped'\\r\",\"                else:\\r\",\"                    continue\\r\",\"\\r\",\"                responseList.append(row)\\r\",\"            except:\\r\",\"                error = {}\\r\",\"                error['eid'] = data['eid']\\r\",\"                error['message'] = str(data)\\r\",\"                responseList.append(error)\\r\",\"        \\r\",\"            \\r\",\"        if responseList is None or len(responseList) == 0:\\r\",\"            logging.info('No New events fetched')\\r\",\"            print('Completed')\\r\",\"            exit()\\r\",\"        spark = SparkSession.builder.appName('').config('spark.ui.showConsoleProgress', 'false').getOrCreate()\\r\",\"        df = spark.createDataFrame(responseList)\\r\",\"        \\r\",\"        logging.info('returning dataframe')\\r\",\"        return df\\r\"]},{\"dataset\":{\"name\":\"elasticExtractor\",\"description\":\"\",\"schema\":{\"id\":810,\"name\":\"iamp\",\"schemavalue\":\"[]\",\"organization\":\"leo1311\"},\"type\":\"r\",\"attributes\":{\"get_count\":\"false\",\"Cacheable\":\"\",\"Query\":\"\",\"index\":\"bot-factory-telemetry-<jobParams:CurrentExecutionTime;%Y.%m.%d>\",\"QueryParams\":\"{}\",\"IncludeFields\":\"\",\"Limit\":\"3000\",\"ExcludeFields\":\"\",\"params\":\"{}\"},\"expStatus\":0,\"datasetType\":\"ELASTICSEARCH\",\"groups\":\"\",\"backingDataset\":\"\",\"alias\":\"elasticExtractor\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-05-25 14:08:31\",\"alias\":\"ElasticBtf\",\"id\":18,\"name\":\"ACMELSTC74624\",\"description\":\"ElasticBtf\",\"type\":\"ELASTICSEARCH\",\"connectionDetails\":\"{\\\"password\\\":\\\"\\\",\\\"port\\\":\\\"9200\\\",\\\"host\\\":\\\"vimppnz01-07\\\",\\\"AuthType\\\":\\\"NoAuth\\\",\\\"username\\\":\\\"\\\"}\",\"salt\":null,\"organization\":\"leo1311\",\"dshashcode\":null,\"activetime\":\"2021-05-25T14:08:30.698+00:00\",\"category\":\"ELASTICSEARCH\"}},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"BGJcB\",\"alias\":\"Dataset  Loader\",\"name\":\"Dataset  Loader\",\"classname\":\"DatasetLoaderConfig\",\"category\":\"LoaderConfig\",\"attributes\":{\"dataset\":{\"name\":\"FE_Data\",\"description\":\"\",\"schema\":\"\",\"type\":\"rw\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from telemetry_logging\",\"Cacheable\":\"\",\"isStreaming\":\"false\",\"writeMode\":\"update\",\"params\":\"{}\",\"tableName\":\"telemetry_logging\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"datasetType\":\"MYSQL\",\"groups\":\"\",\"backingDataset\":\"\",\"alias\":\" FE_Data\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"}},\"applySchema\":false},\"position_x\":\"640\",\"position_y\":\"380\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"vGfMK\",\"elementPosition\":\"BottomCenter\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"applySchema\":\"checkbox\"},\"context\":[{\"params\":\"\",\"script\":[\"# Load SkipEvent & FailEvent\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model, data):\\r\",\"        \\r\",\"        data = data['out2']\\r\",\"        \\r\",\"        if ('SE_mId' in data.columns) :\\r\",\"            dataset1 = data.where(col('SE_mId').isNotNull())\\r\",\"\\r\",\"            to_drop = ['FE_mId', 'FE_ets', 'FE_timestamp','SB_mId', 'SB_ets', 'SB_timestamp', 'EB_mId', 'EB_ets', 'EB_timestamp']\\r\",\"            drop_columns = [i for i in to_drop if i in dataset1.columns]\\r\",\"            dataset1 = dataset1.drop(*drop_columns)\\r\",\"            dataset1 = dataset1.repartition(10)\\r\",\"        else :\\r\",\"            dataset1 = data.where(col('eid').isNull())\\r\",\"        \\r\",\"        if ('FE_mId' in data.columns) :\\r\",\"            dataset2 = data.where(col('FE_mId').isNotNull())\\r\",\"\\r\",\"            to_drop = ['EB_mId', 'EB_ets', 'EB_timestamp','SB_mId', 'SB_ets', 'SB_timestamp', 'SE_mId', 'SE_ets', 'SE_timestamp']\\r\",\"            drop_columns = [i for i in to_drop if i in dataset2.columns]\\r\",\"            dataset2 = dataset2.drop(*drop_columns)\\r\",\"            dataset2 = dataset2.repartition(10)\\r\",\"        else :\\r\",\"            dataset2 = data.where(col('eid').isNull())\\r\",\"\\r\",\"        return dataset1,dataset2\\r\"]},{\"params\":\"\",\"script\":[\"# Load EndBot\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model, data):\\r\",\"        \\r\",\"        data = data['out2']\\r\",\"        if ('EB_mId' in data.columns) :\\r\",\"            dataset1 = data.where(col('EB_mId').isNotNull())\\r\",\"\\r\",\"            to_drop = ['SB_mId', 'SB_ets', 'SB_timestamp', 'FE_mId', 'FE_ets', 'FE_timestamp', 'SE_mId', 'SE_ets', 'SE_timestamp']\\r\",\"            drop_columns = [i for i in to_drop if i in dataset1.columns]\\r\",\"            dataset1 = dataset1.drop(*drop_columns)\\r\",\"            dataset1 = dataset1.repartition(10)\\r\",\"        else :\\r\",\"            dataset1 = data.where(col('eid').isNull())\\r\",\"\\r\",\"        return dataset1, data\\r\"]},{\"params\":\"\",\"script\":[\"# Load StartBot\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model, data):\\r\",\"        \\r\",\"        data = data['out2']\\r\",\"        if ('SB_mId' in data.columns) :\\r\",\"            dataset1 = data.where(col('SB_mId').isNotNull())\\r\",\"\\r\",\"            to_drop = ['EB_mId', 'EB_ets', 'EB_timestamp', 'FE_mId', 'FE_ets', 'FE_timestamp', 'SE_mId', 'SE_ets', 'SE_timestamp']\\r\",\"            drop_columns = [i for i in to_drop if i in dataset1.columns]\\r\",\"            dataset1 = dataset1.drop(*drop_columns)\\r\",\"            dataset1 = dataset1.repartition(10)\\r\",\"        else :\\r\",\"            dataset1 = data.where(col('eid').isNull())\\r\",\"\\r\",\"        return dataset1, data\\r\"]},{\"params\":\"\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, model, data):\\r\",\"        \\r\",\"        if ('message' in data.columns):\\r\",\"            dataset1 = data.where(col('message').isNotNull()).select('eid', 'message')\\r\",\"            data = data.where(col('message').isNull())\\r\",\"            data = data.drop('message')\\r\",\"        else:\\r\",\"            dataset1 = data.where(col('eid').isNull())\\r\",\"        return dataset1, data\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"script\":[\"import logging\\r\",\"from pyspark.sql import SparkSession\\r\",\"import json\\r\",\"import re\\r\",\"from datetime import datetime\\r\",\"import mysql.connector\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        responseList = []\\r\",\"        eidList = []\\r\",\"\\r\",\"                \\r\",\"        for item in dataset:\\r\",\"            try:\\r\",\"                row = {}\\r\",\"                message = item.get('message')\\r\",\"                msg_dict = message.replace('\\\\n', '')\\r\",\"                newStr = re.sub('\\\\s+', ' ', msg_dict)\\r\",\"                jsonStr = newStr\\r\",\"                data = json.loads(jsonStr.strip())\\r\",\"                date_time = str(item.get('@timestamp'))\\r\",\"                time_stamp = date_time.replace('T', ' ').replace('Z', '')\\r\",\"                format = '%Y-%m-%d %H:%M:%S.%f'  # The format\\r\",\"                datetime_str = datetime.strptime(time_stamp, format)\\r\",\"                row['action_timestamp'] = datetime_str\\r\",\"                \\r\",\"                if ((data['btfdata']['project_name'] == None or data['btfdata']['portfolio_name'] == None or data['btfdata']['workflow_name'] == None or data['btfdata']['workflow_name'] == '') and not(data['mId'].startswith('Skipped Event'))):\\r\",\"                    # logging.info('Ignoring None: ' + str(data['eid']))\\r\",\"                    continue\\r\",\"        \\r\",\"                for key in data.keys():\\r\",\"                    if key in ('eid', 'mId', 'ets'):\\r\",\"                        row[key] = str(data.get(key))\\r\",\"                    else:\\r\",\"                        if key.lower() == 'context':\\r\",\"                            context = data.get('context')\\r\",\"                            row['channel'] = str(context.get('channel', ''))\\r\",\"                            row['env'] = str(context.get('env', ''))\\r\",\"\\r\",\"                            cdata = context.get('cdata')\\r\",\"                            if (type(cdata)) == dict:\\r\",\"                                row['ActivityInstanceId'] = str(cdata.get('ActivityInstanceId', ''))\\r\",\"                                try:\\r\",\"                                    row['Duration'] = str(cdata.get('Duration', ''))\\r\",\"                                except ValueError:\\r\",\"                                    row['Duration'] = ''\\r\",\"                                row['CurrentActivityName'] = str(cdata.get('CurrentActivityName', ''))\\r\",\"                                row['ProcessInstanceId'] = str(cdata.get('ProcessInstanceId', ''))\\r\",\"                                row['Component'] = str(cdata.get('Component', ''))\\r\",\"                            else:\\r\",\"                                row['ActivityInstanceId'] = ''\\r\",\"                                row['Duration'] = ''\\r\",\"                                row['CurrentActivityName'] = ''\\r\",\"                                row['ProcessInstanceId'] = ''\\r\",\"                                row['Component'] = ''\\r\",\"\\r\",\"                        elif key.lower() == 'edata':\\r\",\"                            edata = data.get('edata')\\r\",\"                            row['pageid'] = str(edata.get('pageid', ''))\\r\",\"                            row['type'] = str(edata.get('type', ''))\\r\",\"                            row['stageto'] = str(edata.get('stageto', ''))\\r\",\"\\r\",\"                        elif key.lower() == 'actor':\\r\",\"                            actor = data.get('actor')\\r\",\"                            row['actor_id'] = str(actor.get('id', ''))\\r\",\"                            row['actor_type'] = str(actor.get('type', ''))\\r\",\"\\r\",\"                        elif key.lower() == 'btfdata':\\r\",\"                            btfdata = data.get('btfdata')\\r\",\"                            row['user_name'] = str(btfdata.get('user_name', ''))\\r\",\"                            row['project_name'] = str(btfdata.get('project_name', ''))\\r\",\"                            row['portfolio_name'] = str(btfdata.get('portfolio_name', ''))\\r\",\"                            row['workflow_name'] = str(btfdata.get('workflow_name', ''))\\r\",\"                            row['bot_name'] = str(btfdata.get('bot_name', ''))\\r\",\"                            row['schedule_id'] = str(btfdata.get('schedule_id', ''))\\r\",\"                            row['remote_server'] = str(btfdata.get('remote_server', ''))\\r\",\"                            row['execution_type'] = str(btfdata.get('execution_type', ''))\\r\",\"                            row['error_message'] = str(btfdata.get('error_message', ''))\\r\",\"\\r\",\"                if row['eid'] in eidList:\\r\",\"                    for item in responseList:\\r\",\"                        if item['eid'] == row['eid']:\\r\",\"                            responseList.remove(item)\\r\",\"                else:\\r\",\"                    eidList.append(row['eid'])\\r\",\"                \\r\",\"                mId = row['mId']\\r\",\"                if (mId.startswith('START Bot')):\\r\",\"                    row['SB_ets'] = data.get('ets')\\r\",\"                    row['SB_mId'] = mId.split(':')[1]\\r\",\"                    row['SB_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'In Progress'\\r\",\"                elif (mId.startswith('END Bot')):\\r\",\"                    row['EB_ets'] = data.get('ets')\\r\",\"                    row['EB_mId'] = mId.split(':')[1]\\r\",\"                    row['EB_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Completed'\\r\",\"                elif (mId.startswith('Fail Event')):\\r\",\"                    row['FE_ets'] = data.get('ets')\\r\",\"                    row['FE_mId'] = mId.split(':')[1]\\r\",\"                    row['FE_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Failed'\\r\",\"                elif (mId.startswith('Skipped Event')):\\r\",\"                    row['SE_ets'] = data.get('ets')\\r\",\"                    row['SE_mId'] = mId.split(':')[1]\\r\",\"                    row['SE_timestamp'] = datetime_str\\r\",\"                    row['Status'] = 'Skipped'\\r\",\"                else:\\r\",\"                    continue\\r\",\"\\r\",\"                responseList.append(row)\\r\",\"            except:\\r\",\"                error = {}\\r\",\"                error['eid'] = data['eid']\\r\",\"                error['message'] = str(data)\\r\",\"                responseList.append(error)\\r\",\"        \\r\",\"            \\r\",\"        if responseList is None or len(responseList) == 0:\\r\",\"            logging.info('No New events fetched')\\r\",\"            print('Completed')\\r\",\"            exit()\\r\",\"        spark = SparkSession.builder.appName('').config('spark.ui.showConsoleProgress', 'false').getOrCreate()\\r\",\"        df = spark.createDataFrame(responseList)\\r\",\"        \\r\",\"        logging.info('returning dataframe')\\r\",\"        return df\\r\"]},{\"dataset\":{\"name\":\"elasticExtractor\",\"description\":\"\",\"schema\":{\"id\":810,\"name\":\"iamp\",\"schemavalue\":\"[]\",\"organization\":\"leo1311\"},\"type\":\"r\",\"attributes\":{\"get_count\":\"false\",\"Cacheable\":\"\",\"Query\":\"\",\"index\":\"bot-factory-telemetry-<jobParams:CurrentExecutionTime;%Y.%m.%d>\",\"QueryParams\":\"{}\",\"IncludeFields\":\"\",\"Limit\":\"3000\",\"ExcludeFields\":\"\",\"params\":\"{}\"},\"expStatus\":0,\"datasetType\":\"ELASTICSEARCH\",\"groups\":\"\",\"backingDataset\":\"\",\"alias\":\"elasticExtractor\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-05-25 14:08:31\",\"alias\":\"ElasticBtf\",\"id\":18,\"name\":\"ACMELSTC74624\",\"description\":\"ElasticBtf\",\"type\":\"ELASTICSEARCH\",\"connectionDetails\":\"{\\\"password\\\":\\\"\\\",\\\"port\\\":\\\"9200\\\",\\\"host\\\":\\\"vimppnz01-07\\\",\\\"AuthType\\\":\\\"NoAuth\\\",\\\"username\\\":\\\"\\\"}\",\"salt\":null,\"organization\":\"leo1311\",\"dshashcode\":null,\"activetime\":\"2021-05-25T14:08:30.698+00:00\",\"category\":\"ELASTICSEARCH\"}},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]}]}","NULL","TelemetryLogging","NULL","TelemetryLogging","leo1311","DragAndDrop","NULL"
"admin","2021-05-27 10:20:38.522000","false","Calculate response and resolution SLA for tickets","NULL","{\"elements\":[{\"id\":\"AJXpS\",\"alias\":\"Dataset  Extractor\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"alias\":\"sla configuration\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from @projectname_sla_configuration\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"140\",\"position_y\":\"220\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"XyhZO\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]},{\"id\":\"LOhNn\",\"alias\":\"Dataset  Extractor\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"alias\":\"Tickets\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number,priority ,createdDate FROM @projectname_tickets WHERE createdDate IS NOT NULL AND\\n number NOT IN (SELECT NUMBER FROM @projectname_tickets_enriched WHERE resolution_SLA IS NOT NULL)\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"120\",\"position_y\":\"50\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"XyhZO\",\"elementPosition\":\"TopCenter\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]},{\"id\":\"ePRxe\",\"alias\":\"Python  Script  Transformer\",\"name\":\"Python  Script  Transformer\",\"classname\":\"PythonScriptTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"script\":[\"import logging\\r\",\"from datetime import datetime\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        \\r\",\"        dataset = dataset.withColumn('response_SLA' ,(unix_timestamp('createdDate') + col('responseSLA')).cast('timestamp'))\\r\",\"        dataset = dataset.withColumn('resolution_SLA',(unix_timestamp('createdDate') + col('resolutionSLA')).cast('timestamp'))\\r\",\"    \\r\",\"    \\r\",\"        dataset = dataset.withColumn('last_updated', lit(datetime.now()))\\r\",\"        dataset = dataset.withColumn('response_SLA_confidence', lit(100))\\r\",\"        dataset = dataset.withColumn('resolution_SLA_confidence', lit(100))\\r\",\"\\r\",\"        dataset = dataset.select('number','response_SLA','resolution_SLA','response_SLA_confidence','resolution_SLA_confidence','last_updated' )\\r\",\"        dataset.show()\\r\",\"        return dataset\\r\"]},\"position_x\":\"629\",\"position_y\":\"94\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"LdAsF\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"XyhZO\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"script\":\"textarea\"},\"context\":[{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset1, dataset2):\\r\",\"        dataset = dataset1.join(dataset2, 'priority')\\r\",\"        dataset = dataset.withColumn('responseSLA', (col('responseSLA') * 3600.0))\\r\",\"        dataset = dataset.withColumn('resolutionSLA', (col('resolutionSLA') * 3600.0))\\r\",\"        dataset = dataset.select('id','priority','number','responseSLA','resolutionSLA','createdDate')\\r\",\"        dataset.show()\\r\",\"        return dataset\\r\",\"\\r\"]},{\"dataset\":{\"alias\":\"sla configuration\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from @projectname_sla_configuration\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Tickets\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number,priority ,createdDate FROM @projectname_tickets WHERE createdDate IS NOT NULL AND\\n number NOT IN (SELECT NUMBER FROM @projectname_tickets_enriched WHERE resolution_SLA IS NOT NULL)\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"LdAsF\",\"alias\":\"Dataset  Loader\",\"name\":\"Dataset  Loader\",\"classname\":\"DatasetLoaderConfig\",\"category\":\"LoaderConfig\",\"attributes\":{\"dataset\":{\"alias\":\"SLA Tickets\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select number, response_SLA, resolution_SLA, response_SLA_confidence, resolution_SLA_confidence, last_updated from @projectname_tickets_enriched\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"update\",\"params\":\"{}\",\"tableName\":\"@projectname_tickets_enriched\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"applySchema\":false},\"position_x\":\"836\",\"position_y\":\"156\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"ePRxe\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"applySchema\":\"checkbox\"},\"context\":[{\"script\":[\"import logging\\r\",\"from datetime import datetime\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        \\r\",\"        dataset = dataset.withColumn('response_SLA' ,(unix_timestamp('createdDate') + col('responseSLA')).cast('timestamp'))\\r\",\"        dataset = dataset.withColumn('resolution_SLA',(unix_timestamp('createdDate') + col('resolutionSLA')).cast('timestamp'))\\r\",\"    \\r\",\"    \\r\",\"        dataset = dataset.withColumn('last_updated', lit(datetime.now()))\\r\",\"        dataset = dataset.withColumn('response_SLA_confidence', lit(100))\\r\",\"        dataset = dataset.withColumn('resolution_SLA_confidence', lit(100))\\r\",\"\\r\",\"        dataset = dataset.select('number','response_SLA','resolution_SLA','response_SLA_confidence','resolution_SLA_confidence','last_updated' )\\r\",\"        dataset.show()\\r\",\"        return dataset\\r\"]},{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset1, dataset2):\\r\",\"        dataset = dataset1.join(dataset2, 'priority')\\r\",\"        dataset = dataset.withColumn('responseSLA', (col('responseSLA') * 3600.0))\\r\",\"        dataset = dataset.withColumn('resolutionSLA', (col('resolutionSLA') * 3600.0))\\r\",\"        dataset = dataset.select('id','priority','number','responseSLA','resolutionSLA','createdDate')\\r\",\"        dataset.show()\\r\",\"        return dataset\\r\",\"\\r\"]},{\"dataset\":{\"alias\":\"sla configuration\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from @projectname_sla_configuration\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Tickets\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number,priority ,createdDate FROM @projectname_tickets WHERE createdDate IS NOT NULL AND\\n number NOT IN (SELECT NUMBER FROM @projectname_tickets_enriched WHERE resolution_SLA IS NOT NULL)\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"XyhZO\",\"alias\":\"Pre  Processing  Script\",\"name\":\"Pre  Processing  Script\",\"classname\":\"PreProcessingScriptConfig\",\"category\":\"BaseConfig\",\"attributes\":{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset1, dataset2):\\r\",\"        dataset = dataset1.join(dataset2, 'priority')\\r\",\"        dataset = dataset.withColumn('responseSLA', (col('responseSLA') * 3600.0))\\r\",\"        dataset = dataset.withColumn('resolutionSLA', (col('resolutionSLA') * 3600.0))\\r\",\"        dataset = dataset.select('id','priority','number','responseSLA','resolutionSLA','createdDate')\\r\",\"        dataset.show()\\r\",\"        return dataset\\r\",\"\\r\"]},\"position_x\":\"370\",\"position_y\":\"140\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"dataset1\",\"position\":\"LeftMiddle\",\"elementId\":\"AJXpS\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"target\",\"endpoint\":\"dataset2\",\"position\":\"TopCenter\",\"elementId\":\"LOhNn\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"ePRxe\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"dataset1\",\"dataset2\",\"dataset3\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"params\":\"textarea\",\"script\":\"textarea\"},\"context\":[{\"dataset\":{\"alias\":\"sla configuration\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from @projectname_sla_configuration\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Tickets\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number,priority ,createdDate FROM @projectname_tickets WHERE createdDate IS NOT NULL AND\\n number NOT IN (SELECT NUMBER FROM @projectname_tickets_enriched WHERE resolution_SLA IS NOT NULL)\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]}]}","NULL","SLA Calculation","NULL","ACMSLCLC50990","leo1311","DragAndDrop","NULL"
"admin","2021-05-28 15:46:38.547000","false","Predict Assignment group and assignee for the ticket","NULL","{\"elements\":[{\"id\":\"BRljv\",\"alias\":\"unassigned ticktes\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"alias\":\"unassigned ticktes\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number, configurationItem FROM @projectname_tickets\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"110\",\"position_y\":\"160\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"BYjfm\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]},{\"id\":\"thKAM\",\"alias\":\"Dataset  Loader\",\"name\":\"Dataset  Loader\",\"classname\":\"DatasetLoaderConfig\",\"category\":\"LoaderConfig\",\"attributes\":{\"dataset\":{\"alias\":\"assigned tickets\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select number, predicted_assignment_group, predicted_assignee from @projectname_tickets_enriched\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"update\",\"params\":\"{}\",\"tableName\":\"@projectname_tickets_enriched\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"applySchema\":false},\"position_x\":\"890\",\"position_y\":\"130\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"WUowg\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"applySchema\":\"checkbox\"},\"context\":[{\"script\":[\"import logging\\r\",\"from pyspark.sql.functions import *\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        dataset = dataset.select('number',col('assignmentgroup').alias('predicted_assignment_group'),col('user').alias('predicted_assignee'))    \\r\",\"        return dataset\\r\",\"\\r\"]},{\"params\":\"\",\"script\":[\"import logging\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset1,dataset2,dataset3):\\r\",\"        dataset = dataset1.join(dataset3, ('configurationItem'))\\r\",\"        dataset.show()\\r\",\"        dataset = dataset.join(dataset2, ('assignmentgroup'))\\r\",\"        dataset.show()\\r\",\"        return dataset\\r\"]},{\"dataset\":{\"alias\":\"unassigned ticktes\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number, configurationItem FROM @projectname_tickets\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"shift roster\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT assignmentgroup , user , isAvailable FROM @projectname_shift_roster WHERE user <> '' AND assignmentgroup <> ''  AND assignmentgroup IS NOT NULL group by assignmentgroup\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Assignment Config\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT DISTINCT configurationItem, assignmentgroup  FROM @projectname_assignment_config\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"BYjfm\",\"alias\":\"Pre  Processing  Script\",\"name\":\"Pre  Processing  Script\",\"classname\":\"PreProcessingScriptConfig\",\"category\":\"BaseConfig\",\"attributes\":{\"params\":\"\",\"script\":[\"import logging\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset1,dataset2,dataset3):\\r\",\"        dataset = dataset1.join(dataset3, ('configurationItem'))\\r\",\"        dataset.show()\\r\",\"        dataset = dataset.join(dataset2, ('assignmentgroup'))\\r\",\"        dataset.show()\\r\",\"        return dataset\\r\"]},\"position_x\":\"350\",\"position_y\":\"120\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"dataset1\",\"position\":\"LeftMiddle\",\"elementId\":\"BRljv\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"WUowg\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"target\",\"endpoint\":\"dataset2\",\"position\":\"TopCenter\",\"elementId\":\"nuYSY\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"target\",\"endpoint\":\"dataset3\",\"position\":\"BottomCenter\",\"elementId\":\"qOpVw\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"dataset1\",\"dataset2\",\"dataset3\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"params\":\"textarea\",\"script\":\"textarea\"},\"context\":[{\"dataset\":{\"alias\":\"unassigned ticktes\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number, configurationItem FROM @projectname_tickets\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"shift roster\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT assignmentgroup , user , isAvailable FROM @projectname_shift_roster WHERE user <> '' AND assignmentgroup <> ''  AND assignmentgroup IS NOT NULL group by assignmentgroup\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Assignment Config\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT DISTINCT configurationItem, assignmentgroup  FROM @projectname_assignment_config\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"nuYSY\",\"alias\":\"shift roster\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"alias\":\"shift roster\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT assignmentgroup , user , isAvailable FROM @projectname_shift_roster WHERE user <> '' AND assignmentgroup <> ''  AND assignmentgroup IS NOT NULL group by assignmentgroup\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"100\",\"position_y\":\"60\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"BYjfm\",\"elementPosition\":\"TopCenter\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]},{\"id\":\"qOpVw\",\"alias\":\"assignment config\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"alias\":\"Assignment Config\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT DISTINCT configurationItem, assignmentgroup  FROM @projectname_assignment_config\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"100\",\"position_y\":\"310\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"BYjfm\",\"elementPosition\":\"BottomCenter\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]},{\"id\":\"WUowg\",\"alias\":\"Python  Script  Transformer\",\"name\":\"Python  Script  Transformer\",\"classname\":\"PythonScriptTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"script\":[\"import logging\\r\",\"from pyspark.sql.functions import *\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        dataset = dataset.select('number',col('assignmentgroup').alias('predicted_assignment_group'),col('user').alias('predicted_assignee'))    \\r\",\"        return dataset\\r\",\"\\r\"]},\"position_x\":\"570\",\"position_y\":\"130\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"BYjfm\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"thKAM\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"script\":\"textarea\"},\"context\":[{\"params\":\"\",\"script\":[\"import logging\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset1,dataset2,dataset3):\\r\",\"        dataset = dataset1.join(dataset3, ('configurationItem'))\\r\",\"        dataset.show()\\r\",\"        dataset = dataset.join(dataset2, ('assignmentgroup'))\\r\",\"        dataset.show()\\r\",\"        return dataset\\r\"]},{\"dataset\":{\"alias\":\"unassigned ticktes\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number, configurationItem FROM @projectname_tickets\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"shift roster\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT assignmentgroup , user , isAvailable FROM @projectname_shift_roster WHERE user <> '' AND assignmentgroup <> ''  AND assignmentgroup IS NOT NULL group by assignmentgroup\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Assignment Config\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 12:33:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT DISTINCT configurationItem, assignmentgroup  FROM @projectname_assignment_config\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]}]}","NULL","Auto Assignment","NULL","ACMATSGN51350","leo1311","DragAndDrop","NULL"
"admin","2021-06-07 06:02:41.157000","false","Generic Network Extraction","NULL","{\"elements\":[{\"attributes\":{\"filetype\":\"Python3\",\"files\":[\"ACMGNRCN39596_Acme.py\"],\"arguments\":[{\"name\":\"projectId\",\"value\":\"1\",\"type\":\"Text\",\"alias\":\"1\",\"index\":\"1\"},{\"name\":\"rawdatasource\",\"value\":\"ProcessMining\",\"type\":\"Datasource\",\"alias\":\"ProcessMining\",\"index\":\"2\"},{\"name\":\"additionalMapping\",\"value\":\"[\\\"txtPU\\\",\\\"txtDeskName\\\",\\\"dtLoad\\\"]\",\"type\":\"Text\",\"alias\":\"[\\\"txtPU\\\",\\\"txtDeskName\\\",\\\"dtLoad\\\"]\",\"index\":\"3\"},{\"name\":\"mandatoryParams\",\"value\":\"{\\\"id\\\":\\\"intClaimid\\\",\\\"node\\\":\\\"txtStatusName\\\",\\\"actiontimestamp\\\":\\\"dtDateActionTakenOn\\\"}\",\"type\":\"Text\",\"alias\":\"{\\\"id\\\":\\\"intClaimid\\\",\\\"node\\\":\\\"txtStatusName\\\",\\\"actiontimestamp\\\":\\\"dtDateActionTakenOn\\\"}\",\"index\":\"4\"},{\"name\":\"edgetablename\",\"value\":\"edge_table\",\"type\":\"Text\",\"alias\":\"edge_table\",\"index\":\"5\"},{\"name\":\"graphtablename\",\"value\":\"graph_table\",\"type\":\"Text\",\"alias\":\"graph_table\",\"index\":\"6\"},{\"name\":\"rawTableName\",\"value\":\"raw_process\",\"type\":\"Text\",\"alias\":\"raw_process\",\"index\":\"7\"},{\"name\":\"type\",\"value\":\"claims\",\"type\":\"Text\",\"alias\":\"claims\",\"index\":\"8\"}],\"dataset\":[]}}]}","admin","Generic Network Extraction","2021-06-07 06:05:33","ACMGNRCN39596","leo1311","NativeScript","NULL"
"admin","2021-06-15 05:48:03.224000","false","Create clusters for resolution steps","NULL","{\"elements\":[{\"id\":\"UEeVc\",\"alias\":\"Dataset  Extractor\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"name\":\"Tickets\",\"alias\":\"Tickets\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"Select t.number, resolution_steps,  post_ranking_cluster as group_by_field from @projectname_tickets t join @projectname_tickets_enriched te on t.number = te.number where resolution_steps <> '' and   resolution_steps is not Null   and post_ranking_cluster is not null and post_ranking_cluster <> ''\",\"Cacheable\":\"\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"datasetType\":\"MYSQL\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"40\",\"position_y\":\"30\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"ffQic\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]},{\"id\":\"HYOWn\",\"alias\":\"Dataset  Loader\",\"name\":\"Dataset  Loader\",\"classname\":\"DatasetLoaderConfig\",\"category\":\"LoaderConfig\",\"attributes\":{\"dataset\":{\"name\":\"CleanText\",\"alias\":\"Clusters\",\"description\":\"Clusters\",\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select number, cluster, group_by_field, last_updated from @projectname_resolution_clusters\",\"Cacheable\":\"\",\"isStreaming\":\"false\",\"writeMode\":\"overwrite\",\"params\":\"{}\",\"tableName\":\"@projectname_resolution_clusters\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"datasetType\":\"MYSQL\",\"groups\":\"\",\"backingDataset\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"}},\"applySchema\":false},\"position_x\":\"780\",\"position_y\":\"200\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"tgmni\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"applySchema\":\"checkbox\"},\"context\":[{\"params\":\"\",\"script\":[\"import logging\\r\",\"from datetime import datetime\\r\",\"from pyspark.sql.types import *\\r\",\"from pyspark.sql.functions import *\\r\",\"import re\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self,model, dataset):\\r\",\"        dataset = dataset.withColumn('sound', soundex('clean_text'))\\r\",\"        dataset.show()\\r\",\"        soundDf = dataset.groupBy('group_by_field','sound').agg(collect_list('number').alias('numberList'), collect_list('clean_text').alias('text_list'))\\r\",\"       \\r\",\"        soundDf = soundDf.withColumn('numberListSize', size('numberList'))\\r\",\"        soundDf = soundDf.filter(soundDf['numberListSize']>=5)\\r\",\"        soundDf = soundDf.withColumn('cluster' , soundDf['text_list'].getItem(0)).drop('text_list')\\r\",\"        \\r\",\"        soundDf = soundDf.select('group_by_field', 'cluster', 'numberList','sound')\\r\",\"        soundDf = soundDf.withColumn('number',explode('numberList')).drop('numberList')\\r\",\"        soundDf = soundDf.withColumn('last_updated',lit(datetime.now()))\\r\",\"\\r\",\"        soundDf = soundDf.select('number',col('cluster').alias('soundex_cluster'),'last_updated')\\r\",\"\\r\",\"        \\r\",\"        soundDf = soundDf.repartition(50)\\r\",\"        return soundDf\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"script\":[\"import logging\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"from nltk.stem import WordNetLemmatizer\\r\",\"from datetime import datetime\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"      \\r\",\"        def lemmatize(tokens):\\r\",\"            wordnet_lemmatizer = WordNetLemmatizer()\\r\",\"            lemmatizedTokens = []\\r\",\"            for word in tokens:\\r\",\"                lemmatizedTokens.append(wordnet_lemmatizer.lemmatize(word, pos='v'))\\r\",\"            return ' '.join(lemmatizedTokens)\\r\",\"        \\r\",\"        udfLemmetize = udf(lemmatize, StringType())\\r\",\"        dataset = dataset.withColumn('clean_text',udfLemmetize('clean_tokens'))\\r\",\"        dataset = dataset.select('number','clean_text', 'group_by_field')\\r\",\"        dataset = dataset.withColumn('last_updated',lit(datetime.now()))\\r\",\"\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"lemmatizedText\"},{\"inputCol\":\"tokens\",\"outputCol\":\"clean_tokens\",\"stopWords\":\"id\"},{\"inputCol\":\"cleanText\",\"outputCol\":\"tokens\"},{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import re\\r\",\"\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        \\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = ''\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += ' '\\r\",\"            alphanumeric = re.sub(' +', ' ', alphanumeric)\\r\",\"            finalTokens = [t for t in alphanumeric.split(' ') if not t.isnumeric()]\\r\",\"            return ' '.join(finalTokens)\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset = dataset.withColumn('cleanText',udfAlpaNum('resolution_steps'))\\r\",\"        dataset = dataset.select('number','resolution_steps','group_by_field', 'cleanText' )\\r\",\"        \\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"number,resolution_steps,cleanText,group_by_field\"},{\"dataset\":{\"name\":\"Tickets\",\"alias\":\"Tickets\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"Select t.number, resolution_steps,  post_ranking_cluster as group_by_field from @projectname_tickets t join @projectname_tickets_enriched te on t.number = te.number where resolution_steps <> '' and   resolution_steps is not Null   and post_ranking_cluster is not null and post_ranking_cluster <> ''\",\"Cacheable\":\"\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"datasetType\":\"MYSQL\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"ffQic\",\"alias\":\"Clean Text\",\"name\":\"Pre  Processing  Script\",\"classname\":\"PreProcessingScriptConfig\",\"category\":\"BaseConfig\",\"attributes\":{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import re\\r\",\"\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        \\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = ''\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += ' '\\r\",\"            alphanumeric = re.sub(' +', ' ', alphanumeric)\\r\",\"            finalTokens = [t for t in alphanumeric.split(' ') if not t.isnumeric()]\\r\",\"            return ' '.join(finalTokens)\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset = dataset.withColumn('cleanText',udfAlpaNum('resolution_steps'))\\r\",\"        dataset = dataset.select('number','resolution_steps','group_by_field', 'cleanText' )\\r\",\"        \\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"number,resolution_steps,cleanText,group_by_field\"},\"position_x\":\"260\",\"position_y\":\"30\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"dataset1\",\"position\":\"LeftMiddle\",\"elementId\":\"UEeVc\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"cMPGE\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"dataset1\",\"dataset2\",\"dataset3\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"params\":\"textarea\",\"script\":\"textarea\",\"outputCols\":\"text\"},\"context\":[{\"dataset\":{\"name\":\"Tickets\",\"alias\":\"Tickets\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"Select t.number, resolution_steps,  post_ranking_cluster as group_by_field from @projectname_tickets t join @projectname_tickets_enriched te on t.number = te.number where resolution_steps <> '' and   resolution_steps is not Null   and post_ranking_cluster is not null and post_ranking_cluster <> ''\",\"Cacheable\":\"\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"datasetType\":\"MYSQL\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"cMPGE\",\"alias\":\"Tokenizer\",\"name\":\"Tokenizer\",\"classname\":\"TokenizerTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"inputCol\":\"cleanText\",\"outputCol\":\"tokens\"},\"position_x\":\"460\",\"position_y\":\"30\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"ffQic\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"IgGTx\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"inputCol\":\"text\",\"outputCol\":\"text\"},\"context\":[{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import re\\r\",\"\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        \\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = ''\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += ' '\\r\",\"            alphanumeric = re.sub(' +', ' ', alphanumeric)\\r\",\"            finalTokens = [t for t in alphanumeric.split(' ') if not t.isnumeric()]\\r\",\"            return ' '.join(finalTokens)\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset = dataset.withColumn('cleanText',udfAlpaNum('resolution_steps'))\\r\",\"        dataset = dataset.select('number','resolution_steps','group_by_field', 'cleanText' )\\r\",\"        \\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"number,resolution_steps,cleanText,group_by_field\"},{\"dataset\":{\"name\":\"Tickets\",\"alias\":\"Tickets\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"Select t.number, resolution_steps,  post_ranking_cluster as group_by_field from @projectname_tickets t join @projectname_tickets_enriched te on t.number = te.number where resolution_steps <> '' and   resolution_steps is not Null   and post_ranking_cluster is not null and post_ranking_cluster <> ''\",\"Cacheable\":\"\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"datasetType\":\"MYSQL\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"IgGTx\",\"alias\":\"Stop  Words  Remover\",\"name\":\"Stop  Words  Remover\",\"classname\":\"StopWordsRemoverTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"inputCol\":\"tokens\",\"outputCol\":\"clean_tokens\",\"stopWords\":\"id\"},\"position_x\":\"800\",\"position_y\":\"40\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"cMPGE\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"fPAbp\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"inputCol\":\"text\",\"outputCol\":\"text\",\"stopWords\":\"text\"},\"context\":[{\"inputCol\":\"cleanText\",\"outputCol\":\"tokens\"},{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import re\\r\",\"\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        \\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = ''\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += ' '\\r\",\"            alphanumeric = re.sub(' +', ' ', alphanumeric)\\r\",\"            finalTokens = [t for t in alphanumeric.split(' ') if not t.isnumeric()]\\r\",\"            return ' '.join(finalTokens)\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset = dataset.withColumn('cleanText',udfAlpaNum('resolution_steps'))\\r\",\"        dataset = dataset.select('number','resolution_steps','group_by_field', 'cleanText' )\\r\",\"        \\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"number,resolution_steps,cleanText,group_by_field\"},{\"dataset\":{\"name\":\"Tickets\",\"alias\":\"Tickets\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"Select t.number, resolution_steps,  post_ranking_cluster as group_by_field from @projectname_tickets t join @projectname_tickets_enriched te on t.number = te.number where resolution_steps <> '' and   resolution_steps is not Null   and post_ranking_cluster is not null and post_ranking_cluster <> ''\",\"Cacheable\":\"\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"datasetType\":\"MYSQL\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"fPAbp\",\"alias\":\"Lemmetizer\",\"name\":\"Python  Script  Transformer\",\"classname\":\"PythonScriptTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"script\":[\"import logging\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"from nltk.stem import WordNetLemmatizer\\r\",\"from datetime import datetime\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"      \\r\",\"        def lemmatize(tokens):\\r\",\"            wordnet_lemmatizer = WordNetLemmatizer()\\r\",\"            lemmatizedTokens = []\\r\",\"            for word in tokens:\\r\",\"                lemmatizedTokens.append(wordnet_lemmatizer.lemmatize(word, pos='v'))\\r\",\"            return ' '.join(lemmatizedTokens)\\r\",\"        \\r\",\"        udfLemmetize = udf(lemmatize, StringType())\\r\",\"        dataset = dataset.withColumn('clean_text',udfLemmetize('clean_tokens'))\\r\",\"        dataset = dataset.select('number','clean_text', 'group_by_field')\\r\",\"        dataset = dataset.withColumn('last_updated',lit(datetime.now()))\\r\",\"\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"lemmatizedText\"},\"position_x\":\"70\",\"position_y\":\"200\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"IgGTx\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"tgmni\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"script\":\"textarea\",\"outputCols\":\"text\"},\"context\":[{\"inputCol\":\"tokens\",\"outputCol\":\"clean_tokens\",\"stopWords\":\"id\"},{\"inputCol\":\"cleanText\",\"outputCol\":\"tokens\"},{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import re\\r\",\"\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        \\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = ''\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += ' '\\r\",\"            alphanumeric = re.sub(' +', ' ', alphanumeric)\\r\",\"            finalTokens = [t for t in alphanumeric.split(' ') if not t.isnumeric()]\\r\",\"            return ' '.join(finalTokens)\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset = dataset.withColumn('cleanText',udfAlpaNum('resolution_steps'))\\r\",\"        dataset = dataset.select('number','resolution_steps','group_by_field', 'cleanText' )\\r\",\"        \\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"number,resolution_steps,cleanText,group_by_field\"},{\"dataset\":{\"name\":\"Tickets\",\"alias\":\"Tickets\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"Select t.number, resolution_steps,  post_ranking_cluster as group_by_field from @projectname_tickets t join @projectname_tickets_enriched te on t.number = te.number where resolution_steps <> '' and   resolution_steps is not Null   and post_ranking_cluster is not null and post_ranking_cluster <> ''\",\"Cacheable\":\"\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"datasetType\":\"MYSQL\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"tgmni\",\"alias\":\"Cluster\",\"name\":\"Post  Processing  Script\",\"classname\":\"PostProcessingScriptConfig\",\"category\":\"BaseConfig\",\"attributes\":{\"params\":\"\",\"script\":[\"import logging\\r\",\"from datetime import datetime\\r\",\"from pyspark.sql.types import *\\r\",\"from pyspark.sql.functions import *\\r\",\"import re\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self,model, dataset):\\r\",\"        dataset = dataset.withColumn('sound', soundex('clean_text'))\\r\",\"        dataset.show()\\r\",\"        soundDf = dataset.groupBy('group_by_field','sound').agg(collect_list('number').alias('numberList'), collect_list('clean_text').alias('text_list'))\\r\",\"       \\r\",\"        soundDf = soundDf.withColumn('numberListSize', size('numberList'))\\r\",\"        soundDf = soundDf.filter(soundDf['numberListSize']>=5)\\r\",\"        soundDf = soundDf.withColumn('cluster' , soundDf['text_list'].getItem(0)).drop('text_list')\\r\",\"        \\r\",\"        soundDf = soundDf.select('group_by_field', 'cluster', 'numberList','sound')\\r\",\"        soundDf = soundDf.withColumn('number',explode('numberList')).drop('numberList')\\r\",\"        soundDf = soundDf.withColumn('last_updated',lit(datetime.now()))\\r\",\"\\r\",\"        soundDf = soundDf.select('number',col('cluster').alias('soundex_cluster'),'last_updated')\\r\",\"\\r\",\"        \\r\",\"        soundDf = soundDf.repartition(50)\\r\",\"        return soundDf\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},\"position_x\":\"570\",\"position_y\":\"200\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"fPAbp\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"HYOWn\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\",\"out2\"],\"requiredJars\":[],\"formats\":{\"params\":\"textarea\",\"script\":\"textarea\"},\"context\":[{\"script\":[\"import logging\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"from nltk.stem import WordNetLemmatizer\\r\",\"from datetime import datetime\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"      \\r\",\"        def lemmatize(tokens):\\r\",\"            wordnet_lemmatizer = WordNetLemmatizer()\\r\",\"            lemmatizedTokens = []\\r\",\"            for word in tokens:\\r\",\"                lemmatizedTokens.append(wordnet_lemmatizer.lemmatize(word, pos='v'))\\r\",\"            return ' '.join(lemmatizedTokens)\\r\",\"        \\r\",\"        udfLemmetize = udf(lemmatize, StringType())\\r\",\"        dataset = dataset.withColumn('clean_text',udfLemmetize('clean_tokens'))\\r\",\"        dataset = dataset.select('number','clean_text', 'group_by_field')\\r\",\"        dataset = dataset.withColumn('last_updated',lit(datetime.now()))\\r\",\"\\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"lemmatizedText\"},{\"inputCol\":\"tokens\",\"outputCol\":\"clean_tokens\",\"stopWords\":\"id\"},{\"inputCol\":\"cleanText\",\"outputCol\":\"tokens\"},{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import re\\r\",\"\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        \\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = ''\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += ' '\\r\",\"            alphanumeric = re.sub(' +', ' ', alphanumeric)\\r\",\"            finalTokens = [t for t in alphanumeric.split(' ') if not t.isnumeric()]\\r\",\"            return ' '.join(finalTokens)\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset = dataset.withColumn('cleanText',udfAlpaNum('resolution_steps'))\\r\",\"        dataset = dataset.select('number','resolution_steps','group_by_field', 'cleanText' )\\r\",\"        \\r\",\"        return dataset\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"],\"outputCols\":\"number,resolution_steps,cleanText,group_by_field\"},{\"dataset\":{\"name\":\"Tickets\",\"alias\":\"Tickets\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":2,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encDFA7GGtjoS9sUXcj8Fa63LyB3Z3LRMzb\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"leapuser\\\",\\\"url\\\":\\\"jdbc:mysql://10.212.115.65:31692/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"Select t.number, resolution_steps,  post_ranking_cluster as group_by_field from @projectname_tickets t join @projectname_tickets_enriched te on t.number = te.number where resolution_steps <> '' and   resolution_steps is not Null   and post_ranking_cluster is not null and post_ranking_cluster <> ''\",\"Cacheable\":\"\",\"isStreaming\":\"false\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"defaultValues\":\"\",\"uniqueIdentifier\":\"\"},\"datasetType\":\"MYSQL\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"expStatus\":0,\"groups\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]}]}","admin","Resolution Steps Clustering","2021-06-15 06:23:22","ACMRSLTN82640","leo1311","DragAndDrop","NULL"
"admin","2021-07-01T11:19:57.357","false","Create tickets in Leap","NULL","{\"elements\":[{\"attributes\":{\"filetype\":\"Python3\",\"files\":[\"ACMLP_CR65949_Acme.py\"],\"arguments\":[{\"name\":\"LEAPDataSource\",\"value\":\"leo1311\",\"type\":\"Datasource\",\"alias\":\"leo1311\",\"index\":\"1\"},{\"name\":\"dataTable\",\"value\":\"@projectname_tickets\",\"type\":\"Text\",\"alias\":\"@projectname_tickets\",\"index\":\"2\"},{\"name\":\"incidentPayload\",\"value\":\"{\\\"shortdescription\\\":\\\"Leap Local create\\\",\\\"priority\\\":{\\\"displayValue\\\":\\\"5\\\",\\\"systemId\\\":\\\"5\\\"},\\\"state\\\":{\\\"displayValue\\\":\\\"New\\\",\\\"systemId\\\":\\\"1\\\"}, \\\"category\\\":{\\\"displayValue\\\":\\\"Inquiry / Help\\\",\\\"systemId\\\":\\\"inquiry\\\"},\\\"impact\\\":{\\\"displayValue\\\":\\\"3\\\",\\\"systemId\\\":\\\"3\\\"}, \\\"urgency\\\":{\\\"displayValue\\\":\\\"3\\\",\\\"systemId\\\":\\\"3\\\"},\\\"configurationitem\\\":{\\\"displayValue\\\":null,\\\"systemId\\\":\\\"\\\"}, \\\"description\\\":null,\\\"assignmentgroup\\\":{\\\"displayValue\\\":null,\\\"systemId\\\":\\\"\\\"}, \\\"assignedto\\\":{\\\"displayValue\\\":null,\\\"systemId\\\":\\\"\\\"},\\\"sop\\\":\\\"Facebook Error\\\", \\\"resolutionStepsClusterName\\\":\\\"FacebookInsights\\\"}\",\"type\":\"Text\",\"alias\":\"{\\\"shortdescription\\\":\\\"test local create\\\",\\\"priority\\\":{\\\"displayValue\\\":\\\"5\\\",\\\"systemId\\\":\\\"5\\\"},\\\"state\\\":{\\\"displayValue\\\":\\\"New\\\",\\\"systemId\\\":\\\"1\\\"}, \\\"category\\\":{\\\"displayValue\\\":\\\"Inquiry / Help\\\",\\\"systemId\\\":\\\"inquiry\\\"},\\\"impact\\\":{\\\"displayValue\\\":\\\"3\\\",\\\"systemId\\\":\\\"3\\\"}, \\\"urgency\\\":{\\\"displayValue\\\":\\\"3\\\",\\\"systemId\\\":\\\"3\\\"},\\\"configurationitem\\\":{\\\"displayValue\\\":null,\\\"systemId\\\":\\\"\\\"}, \\\"description\\\":null,\\\"assignmentgroup\\\":{\\\"displayValue\\\":null,\\\"systemId\\\":\\\"\\\"}, \\\"assignedto\\\":{\\\"displayValue\\\":null,\\\"systemId\\\":\\\"\\\"},\\\"sop\\\":\\\"Facebook Error\\\", \\\"resolutionStepsClusterName\\\":\\\"FacebookInsights\\\"}\",\"index\":\"3\"},{\"name\":\"ticketType\",\"value\":\"Incident\",\"type\":\"Text\",\"alias\":\"Incident\",\"index\":\"4\"}],\"dataset\":[]}}]}","admin","Leap_Create_Ticket","2021-07-02T06:13:48.875923","ACMLP_CR65949","leo1311","NativeScript","NULL"
"admin","2021-07-02T06:29:20.701","false","Update Ticket in Leap","NULL","{\"elements\":[{\"attributes\":{\"filetype\":\"Python3\",\"files\":[\"ACMLP_PD72695_Acme.py\"],\"arguments\":[{\"name\":\"LEAPDataSource\",\"value\":\"leo1311\",\"type\":\"Datasource\",\"alias\":\"leo1311\",\"index\":\"1\"},{\"name\":\"dataTable\",\"value\":\"@projectname_tickets\",\"type\":\"Text\",\"alias\":\"@projectname_tickets\",\"index\":\"2\"},{\"name\":\"incidentPayload\",\"value\":\"{\\\"number\\\":\\\"INC1625226229\\\",\\\"shortdescription\\\":\\\"Leap local update\\\",\\\"priority\\\":{\\\"displayValue\\\":\\\"5\\\",\\\"systemId\\\":\\\"5\\\"},\\\"state\\\":{\\\"displayValue\\\":\\\"New\\\",\\\"systemId\\\":\\\"1\\\"}, \\\"category\\\":{\\\"displayValue\\\":\\\"Inquiry / Help\\\",\\\"systemId\\\":\\\"inquiry\\\"},\\\"impact\\\":{\\\"displayValue\\\":\\\"3\\\",\\\"systemId\\\":\\\"3\\\"}, \\\"urgency\\\":{\\\"displayValue\\\":\\\"3\\\",\\\"systemId\\\":\\\"3\\\"},\\\"configurationitem\\\":{\\\"displayValue\\\":null,\\\"systemId\\\":\\\"\\\"}, \\\"description\\\":null,\\\"assignmentgroup\\\":{\\\"displayValue\\\":null,\\\"systemId\\\":\\\"\\\"}, \\\"assignedto\\\":{\\\"displayValue\\\":null,\\\"systemId\\\":\\\"\\\"},\\\"sop\\\":\\\"Facebook Error\\\", \\\"resolutionStepsClusterName\\\":\\\"FacebookInsights\\\"}\",\"type\":\"Text\",\"alias\":\"{\\\"number\\\":\\\"INC1625226229\\\",\\\"shortdescription\\\":\\\"again test local update\\\",\\\"priority\\\":{\\\"displayValue\\\":\\\"5\\\",\\\"systemId\\\":\\\"5\\\"},\\\"state\\\":{\\\"displayValue\\\":\\\"New\\\",\\\"systemId\\\":\\\"1\\\"}, \\\"category\\\":{\\\"displayValue\\\":\\\"Inquiry / Help\\\",\\\"systemId\\\":\\\"inquiry\\\"},\\\"impact\\\":{\\\"displayValue\\\":\\\"3\\\",\\\"systemId\\\":\\\"3\\\"}, \\\"urgency\\\":{\\\"displayValue\\\":\\\"3\\\",\\\"systemId\\\":\\\"3\\\"},\\\"configurationitem\\\":{\\\"displayValue\\\":null,\\\"systemId\\\":\\\"\\\"}, \\\"description\\\":null,\\\"assignmentgroup\\\":{\\\"displayValue\\\":null,\\\"systemId\\\":\\\"\\\"}, \\\"assignedto\\\":{\\\"displayValue\\\":null,\\\"systemId\\\":\\\"\\\"},\\\"sop\\\":\\\"Facebook Error\\\", \\\"resolutionStepsClusterName\\\":\\\"FacebookInsights\\\"}\",\"index\":\"3\"},{\"name\":\"ticketType\",\"value\":\"Incident\",\"type\":\"Text\",\"alias\":\"Incident\",\"index\":\"4\"}],\"dataset\":[]}}]}","admin","Leap_Update_Ticket","2021-07-02T06:37:19.646041","ACMLP_PD72695","leo1311","NativeScript","NULL"
"admin","2021-08-17T06:53:42.241","false","NULL","NULL","{\"elements\":[{\"id\":\"dBHhv\",\"alias\":\"Pre  Processing  Script\",\"name\":\"Pre  Processing  Script\",\"classname\":\"PreProcessingScriptConfig\",\"category\":\"BaseConfig\",\"attributes\":{\"params\":\"\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"import pyspark.sql.functions as F\\r\",\"from pyspark.sql import SparkSession\\r\",\"from pyspark.sql.types import *\\r\",\"from datetime import datetime\\r\",\"from functools import partial\\r\",\"import re\\r\",\"import logging as logger\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset1, dataset2):\\r\",\"        logger.error(dataset1)\\r\",\"        data2 = dataset2.collect()\\r\",\"        data1 = dataset1.collect()\\r\",\"        logger.error(data1)\\r\",\"        btmClassify = []\\r\",\"        for ticket in data2:\\r\",\"            for category in data1:\\r\",\"                matched = False\\r\",\"                if(category['selection']==False):\\r\",\"                    #logger.error('false')\\r\",\"                    #logger.error(eval(category['category_regex_json']))\\r\",\"                    for x in eval(category['category_regex_json']) :\\r\",\"                        casejson=eval(ticket['caseJson'])\\r\",\"                        #logger.error(x['inputfield'])\\r\",\"                        #logger.error(x['category_regex'])\\r\",\"                        matchData = casejson.get(x['inputfield'])\\r\",\"                        if(matchData is not None):\\r\",\"                            #logger.error('regex')\\r\",\"                            ismatch = re.match(x['category_regex'],matchData.lower())\\r\",\"                            if ismatch != None:\\r\",\"                                #logger.error('regex matched')\\r\",\"                                #logger.error(ticket['status'])\\r\",\"                                #logger.error(type(ticket))\\r\",\"                                \\r\",\"                                testdict = ticket.asDict()\\r\",\"                                #logger.error(type(testdict))\\r\",\"                                testdict['workflow_id'] = category['resolver_workflow_id']\\r\",\"                                testdict['status']='Classified'\\r\",\"                                #logger.error('test1')\\r\",\"                                btmClassify.append(testdict)\\r\",\"                                matched = True\\r\",\"                                #logger.error('test2')\\r\",\"                                #logger.error(testdict)\\r\",\"                                #btmClassify.append({'workflow_id':category['resolver_workflow_id'],'application_id':category['application_id'],'case_id':ticket['case_id']})\\r\",\"                                break;\\r\",\"                    if(matched!=True) :            \\r\",\"                        testdict = ticket.asDict()\\r\",\"                        testdict['workflow_id'] = None\\r\",\"                        testdict['status']='Extracted not Classified'\\r\",\"                        btmClassify.append(testdict)\\r\",\"                else:\\r\",\"                    logger.error('true')\\r\",\"        #logger.error(btmClassify)            \\r\",\"        spark = SparkSession.builder.config('spark.ui.showConsoleProgress', 'false').getOrCreate()\\r\",\"        df = spark.createDataFrame(btmClassify)  \\r\",\"        logger.error('test123')\\r\",\"        \\r\",\"        #df.show()\\r\",\"        # logger.error(btmClassify)            \\r\",\"        return df\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},\"position_x\":\"440\",\"position_y\":\"90\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"yqfEz\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"target\",\"endpoint\":\"dataset2\",\"position\":\"TopCenter\",\"elementId\":\"DoaFw\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"target\",\"endpoint\":\"dataset1\",\"position\":\"LeftMiddle\",\"elementId\":\"JEUuc\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"dataset1\",\"dataset2\",\"dataset3\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"params\":\"textarea\",\"script\":\"textarea\"},\"context\":[{\"dataset\":{\"alias\":\"btm\",\"name\":\"9CHTQE0WHI\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-09-21 05:41:49\",\"alias\":\"btm\",\"id\":24329,\"name\":\"LEOBTMTQ65374\",\"description\":\"btm\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encB7uhUO6Nv79TkK4YQBoi9DXGkTHVwgffvvR0\\\",\\\"userName\\\":\\\"bot-factory\\\",\\\"url\\\":\\\"jdbc:mysql://victadpst-21:3306/leapmaster\\\"}\",\"salt\":\"146MmrUVqn8lUbBxIQWmn2nypcODrYqQdR1AJa+cFMkpRoLbW19T7K6biN1dTSUhtirp1Zx9uig7KCG0EC7K4A==\",\"organization\":\"leo1311\",\"dshashcode\":\"7f78ce5cd189a027927f5afb41fe8b32a779fb9cfd72d246a249d1d93bd0f7f9\",\"activetime\":\"2021-09-21 05:41:49\",\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT * FROM btm_cases WHERE application_id=10000 AND STATUS='Extracted'\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"backingDataset\":\"\",\"organization\":\"leo1311\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"btm_category\",\"name\":\"22OWG5ICZC\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-09-21 05:41:49\",\"alias\":\"btm\",\"id\":24329,\"name\":\"LEOBTMTQ65374\",\"description\":\"btm\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encB7uhUO6Nv79TkK4YQBoi9DXGkTHVwgffvvR0\\\",\\\"userName\\\":\\\"bot-factory\\\",\\\"url\\\":\\\"jdbc:mysql://victadpst-21:3306/leapmaster\\\"}\",\"salt\":\"146MmrUVqn8lUbBxIQWmn2nypcODrYqQdR1AJa+cFMkpRoLbW19T7K6biN1dTSUhtirp1Zx9uig7KCG0EC7K4A==\",\"organization\":\"leo1311\",\"dshashcode\":\"7f78ce5cd189a027927f5afb41fe8b32a779fb9cfd72d246a249d1d93bd0f7f9\",\"activetime\":\"2021-09-21 05:41:49\",\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT * FROM btm_category_details WHERE application_id=10000\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"backingDataset\":\"\",\"organization\":\"leo1311\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"yqfEz\",\"alias\":\"Python  Script  Transformer\",\"name\":\"Python  Script  Transformer\",\"classname\":\"PythonScriptTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"script\":[\"import logging\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        print('python transformer')\\r\",\"        #dataset.show()    \\r\",\"        return dataset\\r\"]},\"position_x\":\"600\",\"position_y\":\"90\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"dBHhv\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"qNIZO\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"script\":\"textarea\"},\"context\":[{\"params\":\"\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"import pyspark.sql.functions as F\\r\",\"from pyspark.sql import SparkSession\\r\",\"from pyspark.sql.types import *\\r\",\"from datetime import datetime\\r\",\"from functools import partial\\r\",\"import re\\r\",\"import logging as logger\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset1, dataset2):\\r\",\"        logger.error(dataset1)\\r\",\"        data2 = dataset2.collect()\\r\",\"        data1 = dataset1.collect()\\r\",\"        logger.error(data1)\\r\",\"        btmClassify = []\\r\",\"        for ticket in data2:\\r\",\"            for category in data1:\\r\",\"                matched = False\\r\",\"                if(category['selection']==False):\\r\",\"                    #logger.error('false')\\r\",\"                    #logger.error(eval(category['category_regex_json']))\\r\",\"                    for x in eval(category['category_regex_json']) :\\r\",\"                        casejson=eval(ticket['caseJson'])\\r\",\"                        #logger.error(x['inputfield'])\\r\",\"                        #logger.error(x['category_regex'])\\r\",\"                        matchData = casejson.get(x['inputfield'])\\r\",\"                        if(matchData is not None):\\r\",\"                            #logger.error('regex')\\r\",\"                            ismatch = re.match(x['category_regex'],matchData.lower())\\r\",\"                            if ismatch != None:\\r\",\"                                #logger.error('regex matched')\\r\",\"                                #logger.error(ticket['status'])\\r\",\"                                #logger.error(type(ticket))\\r\",\"                                \\r\",\"                                testdict = ticket.asDict()\\r\",\"                                #logger.error(type(testdict))\\r\",\"                                testdict['workflow_id'] = category['resolver_workflow_id']\\r\",\"                                testdict['status']='Classified'\\r\",\"                                #logger.error('test1')\\r\",\"                                btmClassify.append(testdict)\\r\",\"                                matched = True\\r\",\"                                #logger.error('test2')\\r\",\"                                #logger.error(testdict)\\r\",\"                                #btmClassify.append({'workflow_id':category['resolver_workflow_id'],'application_id':category['application_id'],'case_id':ticket['case_id']})\\r\",\"                                break;\\r\",\"                    if(matched!=True) :            \\r\",\"                        testdict = ticket.asDict()\\r\",\"                        testdict['workflow_id'] = None\\r\",\"                        testdict['status']='Extracted not Classified'\\r\",\"                        btmClassify.append(testdict)\\r\",\"                else:\\r\",\"                    logger.error('true')\\r\",\"        #logger.error(btmClassify)            \\r\",\"        spark = SparkSession.builder.config('spark.ui.showConsoleProgress', 'false').getOrCreate()\\r\",\"        df = spark.createDataFrame(btmClassify)  \\r\",\"        logger.error('test123')\\r\",\"        \\r\",\"        #df.show()\\r\",\"        # logger.error(btmClassify)            \\r\",\"        return df\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"dataset\":{\"alias\":\"btm\",\"name\":\"9CHTQE0WHI\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-09-21 05:41:49\",\"alias\":\"btm\",\"id\":24329,\"name\":\"LEOBTMTQ65374\",\"description\":\"btm\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encB7uhUO6Nv79TkK4YQBoi9DXGkTHVwgffvvR0\\\",\\\"userName\\\":\\\"bot-factory\\\",\\\"url\\\":\\\"jdbc:mysql://victadpst-21:3306/leapmaster\\\"}\",\"salt\":\"146MmrUVqn8lUbBxIQWmn2nypcODrYqQdR1AJa+cFMkpRoLbW19T7K6biN1dTSUhtirp1Zx9uig7KCG0EC7K4A==\",\"organization\":\"leo1311\",\"dshashcode\":\"7f78ce5cd189a027927f5afb41fe8b32a779fb9cfd72d246a249d1d93bd0f7f9\",\"activetime\":\"2021-09-21 05:41:49\",\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT * FROM btm_cases WHERE application_id=10000 AND STATUS='Extracted'\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"backingDataset\":\"\",\"organization\":\"leo1311\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"btm_category\",\"name\":\"22OWG5ICZC\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-09-21 05:41:49\",\"alias\":\"btm\",\"id\":24329,\"name\":\"LEOBTMTQ65374\",\"description\":\"btm\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encB7uhUO6Nv79TkK4YQBoi9DXGkTHVwgffvvR0\\\",\\\"userName\\\":\\\"bot-factory\\\",\\\"url\\\":\\\"jdbc:mysql://victadpst-21:3306/leapmaster\\\"}\",\"salt\":\"146MmrUVqn8lUbBxIQWmn2nypcODrYqQdR1AJa+cFMkpRoLbW19T7K6biN1dTSUhtirp1Zx9uig7KCG0EC7K4A==\",\"organization\":\"leo1311\",\"dshashcode\":\"7f78ce5cd189a027927f5afb41fe8b32a779fb9cfd72d246a249d1d93bd0f7f9\",\"activetime\":\"2021-09-21 05:41:49\",\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT * FROM btm_category_details WHERE application_id=10000\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"backingDataset\":\"\",\"organization\":\"leo1311\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"qNIZO\",\"alias\":\"Post  Processing  Script\",\"name\":\"Post  Processing  Script\",\"classname\":\"PostProcessingScriptConfig\",\"category\":\"BaseConfig\",\"attributes\":{\"params\":\"\",\"script\":[\"class CustomPythonClass():\\r\",\"  def __main__(self, model,dataset):\\r\",\"      #data = dataset.select('orderId','IsOrderDeliveredOnTime','prediction')\\r\",\"      #index =  2 #<index of StringIndexer used to convert IsOrderDeliveredOnTime to index>\\r\",\"      #indexer = model.stages[index]\\r\",\"      #labeler = IndexToString(inputCol='prediction', outputCol='prediction_label', labels=indexer.labels)\\r\",\"      #dataset = labeler.transform(data)\\r\",\"      #dataset = dataset.drop('prediction')\\r\",\"      #dataset.show()\\r\",\"      data=dataset.select([c for c in dataset.columns if c!='workflow_id'])\\r\",\"      data = data.withColumn('last_updated_dts',lit(current_timestamp()))\\r\",\"      data.show()\\r\",\"      data2=dataset.select('case_id','workflow_id','application_id')\\r\",\"      data2 = data2.dropna(subset=['workflow_id'])\\r\",\"      \\r\",\"      data2.show()\\r\",\"      return data,data2\\r\",\"\\r\",\"\\r\"]},\"position_x\":\"780\",\"position_y\":\"70\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"yqfEz\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"GiUsS\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"source\",\"endpoint\":\"out2\",\"position\":\"BottomCenter\",\"elementId\":\"OdDRx\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\",\"out2\"],\"requiredJars\":[],\"formats\":{\"params\":\"textarea\",\"script\":\"textarea\"},\"context\":[{\"script\":[\"import logging\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        print('python transformer')\\r\",\"        #dataset.show()    \\r\",\"        return dataset\\r\"]},{\"params\":\"\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"import pyspark.sql.functions as F\\r\",\"from pyspark.sql import SparkSession\\r\",\"from pyspark.sql.types import *\\r\",\"from datetime import datetime\\r\",\"from functools import partial\\r\",\"import re\\r\",\"import logging as logger\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset1, dataset2):\\r\",\"        logger.error(dataset1)\\r\",\"        data2 = dataset2.collect()\\r\",\"        data1 = dataset1.collect()\\r\",\"        logger.error(data1)\\r\",\"        btmClassify = []\\r\",\"        for ticket in data2:\\r\",\"            for category in data1:\\r\",\"                matched = False\\r\",\"                if(category['selection']==False):\\r\",\"                    #logger.error('false')\\r\",\"                    #logger.error(eval(category['category_regex_json']))\\r\",\"                    for x in eval(category['category_regex_json']) :\\r\",\"                        casejson=eval(ticket['caseJson'])\\r\",\"                        #logger.error(x['inputfield'])\\r\",\"                        #logger.error(x['category_regex'])\\r\",\"                        matchData = casejson.get(x['inputfield'])\\r\",\"                        if(matchData is not None):\\r\",\"                            #logger.error('regex')\\r\",\"                            ismatch = re.match(x['category_regex'],matchData.lower())\\r\",\"                            if ismatch != None:\\r\",\"                                #logger.error('regex matched')\\r\",\"                                #logger.error(ticket['status'])\\r\",\"                                #logger.error(type(ticket))\\r\",\"                                \\r\",\"                                testdict = ticket.asDict()\\r\",\"                                #logger.error(type(testdict))\\r\",\"                                testdict['workflow_id'] = category['resolver_workflow_id']\\r\",\"                                testdict['status']='Classified'\\r\",\"                                #logger.error('test1')\\r\",\"                                btmClassify.append(testdict)\\r\",\"                                matched = True\\r\",\"                                #logger.error('test2')\\r\",\"                                #logger.error(testdict)\\r\",\"                                #btmClassify.append({'workflow_id':category['resolver_workflow_id'],'application_id':category['application_id'],'case_id':ticket['case_id']})\\r\",\"                                break;\\r\",\"                    if(matched!=True) :            \\r\",\"                        testdict = ticket.asDict()\\r\",\"                        testdict['workflow_id'] = None\\r\",\"                        testdict['status']='Extracted not Classified'\\r\",\"                        btmClassify.append(testdict)\\r\",\"                else:\\r\",\"                    logger.error('true')\\r\",\"        #logger.error(btmClassify)            \\r\",\"        spark = SparkSession.builder.config('spark.ui.showConsoleProgress', 'false').getOrCreate()\\r\",\"        df = spark.createDataFrame(btmClassify)  \\r\",\"        logger.error('test123')\\r\",\"        \\r\",\"        #df.show()\\r\",\"        # logger.error(btmClassify)            \\r\",\"        return df\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"dataset\":{\"alias\":\"btm\",\"name\":\"9CHTQE0WHI\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-09-21 05:41:49\",\"alias\":\"btm\",\"id\":24329,\"name\":\"LEOBTMTQ65374\",\"description\":\"btm\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encB7uhUO6Nv79TkK4YQBoi9DXGkTHVwgffvvR0\\\",\\\"userName\\\":\\\"bot-factory\\\",\\\"url\\\":\\\"jdbc:mysql://victadpst-21:3306/leapmaster\\\"}\",\"salt\":\"146MmrUVqn8lUbBxIQWmn2nypcODrYqQdR1AJa+cFMkpRoLbW19T7K6biN1dTSUhtirp1Zx9uig7KCG0EC7K4A==\",\"organization\":\"leo1311\",\"dshashcode\":\"7f78ce5cd189a027927f5afb41fe8b32a779fb9cfd72d246a249d1d93bd0f7f9\",\"activetime\":\"2021-09-21 05:41:49\",\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT * FROM btm_cases WHERE application_id=10000 AND STATUS='Extracted'\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"backingDataset\":\"\",\"organization\":\"leo1311\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"btm_category\",\"name\":\"22OWG5ICZC\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-09-21 05:41:49\",\"alias\":\"btm\",\"id\":24329,\"name\":\"LEOBTMTQ65374\",\"description\":\"btm\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encB7uhUO6Nv79TkK4YQBoi9DXGkTHVwgffvvR0\\\",\\\"userName\\\":\\\"bot-factory\\\",\\\"url\\\":\\\"jdbc:mysql://victadpst-21:3306/leapmaster\\\"}\",\"salt\":\"146MmrUVqn8lUbBxIQWmn2nypcODrYqQdR1AJa+cFMkpRoLbW19T7K6biN1dTSUhtirp1Zx9uig7KCG0EC7K4A==\",\"organization\":\"leo1311\",\"dshashcode\":\"7f78ce5cd189a027927f5afb41fe8b32a779fb9cfd72d246a249d1d93bd0f7f9\",\"activetime\":\"2021-09-21 05:41:49\",\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT * FROM btm_category_details WHERE application_id=10000\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"backingDataset\":\"\",\"organization\":\"leo1311\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"DoaFw\",\"alias\":\"Dataset  Extractor\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"alias\":\"btm\",\"name\":\"9CHTQE0WHI\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-09-21 05:41:49\",\"alias\":\"btm\",\"id\":24329,\"name\":\"LEOBTMTQ65374\",\"description\":\"btm\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encB7uhUO6Nv79TkK4YQBoi9DXGkTHVwgffvvR0\\\",\\\"userName\\\":\\\"bot-factory\\\",\\\"url\\\":\\\"jdbc:mysql://victadpst-21:3306/leapmaster\\\"}\",\"salt\":\"146MmrUVqn8lUbBxIQWmn2nypcODrYqQdR1AJa+cFMkpRoLbW19T7K6biN1dTSUhtirp1Zx9uig7KCG0EC7K4A==\",\"organization\":\"leo1311\",\"dshashcode\":\"7f78ce5cd189a027927f5afb41fe8b32a779fb9cfd72d246a249d1d93bd0f7f9\",\"activetime\":\"2021-09-21 05:41:49\",\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT * FROM btm_cases WHERE application_id=10000 AND STATUS='Extracted'\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"backingDataset\":\"\",\"organization\":\"leo1311\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"150\",\"position_y\":\"30\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"dBHhv\",\"elementPosition\":\"TopCenter\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]},{\"id\":\"JEUuc\",\"alias\":\"category\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"alias\":\"btm_category\",\"name\":\"22OWG5ICZC\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-09-21 05:41:49\",\"alias\":\"btm\",\"id\":24329,\"name\":\"LEOBTMTQ65374\",\"description\":\"btm\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encB7uhUO6Nv79TkK4YQBoi9DXGkTHVwgffvvR0\\\",\\\"userName\\\":\\\"bot-factory\\\",\\\"url\\\":\\\"jdbc:mysql://victadpst-21:3306/leapmaster\\\"}\",\"salt\":\"146MmrUVqn8lUbBxIQWmn2nypcODrYqQdR1AJa+cFMkpRoLbW19T7K6biN1dTSUhtirp1Zx9uig7KCG0EC7K4A==\",\"organization\":\"leo1311\",\"dshashcode\":\"7f78ce5cd189a027927f5afb41fe8b32a779fb9cfd72d246a249d1d93bd0f7f9\",\"activetime\":\"2021-09-21 05:41:49\",\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT * FROM btm_category_details WHERE application_id=10000\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"backingDataset\":\"\",\"organization\":\"leo1311\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"150\",\"position_y\":\"170\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"dBHhv\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]},{\"id\":\"GiUsS\",\"alias\":\"Dataset  Loader\",\"name\":\"Dataset  Loader\",\"classname\":\"DatasetLoaderConfig\",\"category\":\"LoaderConfig\",\"attributes\":{\"dataset\":{\"alias\":\"test\",\"name\":\"OCQSRTE6M0\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-09-21 05:41:49\",\"alias\":\"btm\",\"id\":24329,\"name\":\"LEOBTMTQ65374\",\"description\":\"btm\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encB7uhUO6Nv79TkK4YQBoi9DXGkTHVwgffvvR0\\\",\\\"userName\\\":\\\"bot-factory\\\",\\\"url\\\":\\\"jdbc:mysql://victadpst-21:3306/leapmaster\\\"}\",\"salt\":\"146MmrUVqn8lUbBxIQWmn2nypcODrYqQdR1AJa+cFMkpRoLbW19T7K6biN1dTSUhtirp1Zx9uig7KCG0EC7K4A==\",\"organization\":\"leo1311\",\"dshashcode\":\"7f78ce5cd189a027927f5afb41fe8b32a779fb9cfd72d246a249d1d93bd0f7f9\",\"activetime\":\"2021-09-21 05:41:49\",\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from btm_cases\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"update\",\"params\":\"{}\",\"tableName\":\"btm_cases\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"backingDataset\":\"\",\"organization\":\"leo1311\"},\"applySchema\":false},\"position_x\":\"970\",\"position_y\":\"100\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"qNIZO\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"applySchema\":\"checkbox\"},\"context\":[{\"params\":\"\",\"script\":[\"class CustomPythonClass():\\r\",\"  def __main__(self, model,dataset):\\r\",\"      #data = dataset.select('orderId','IsOrderDeliveredOnTime','prediction')\\r\",\"      #index =  2 #<index of StringIndexer used to convert IsOrderDeliveredOnTime to index>\\r\",\"      #indexer = model.stages[index]\\r\",\"      #labeler = IndexToString(inputCol='prediction', outputCol='prediction_label', labels=indexer.labels)\\r\",\"      #dataset = labeler.transform(data)\\r\",\"      #dataset = dataset.drop('prediction')\\r\",\"      #dataset.show()\\r\",\"      data=dataset.select([c for c in dataset.columns if c!='workflow_id'])\\r\",\"      data = data.withColumn('last_updated_dts',lit(current_timestamp()))\\r\",\"      data.show()\\r\",\"      data2=dataset.select('case_id','workflow_id','application_id')\\r\",\"      data2 = data2.dropna(subset=['workflow_id'])\\r\",\"      \\r\",\"      data2.show()\\r\",\"      return data,data2\\r\",\"\\r\",\"\\r\"]},{\"script\":[\"import logging\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        print('python transformer')\\r\",\"        #dataset.show()    \\r\",\"        return dataset\\r\"]},{\"params\":\"\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"import pyspark.sql.functions as F\\r\",\"from pyspark.sql import SparkSession\\r\",\"from pyspark.sql.types import *\\r\",\"from datetime import datetime\\r\",\"from functools import partial\\r\",\"import re\\r\",\"import logging as logger\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset1, dataset2):\\r\",\"        logger.error(dataset1)\\r\",\"        data2 = dataset2.collect()\\r\",\"        data1 = dataset1.collect()\\r\",\"        logger.error(data1)\\r\",\"        btmClassify = []\\r\",\"        for ticket in data2:\\r\",\"            for category in data1:\\r\",\"                matched = False\\r\",\"                if(category['selection']==False):\\r\",\"                    #logger.error('false')\\r\",\"                    #logger.error(eval(category['category_regex_json']))\\r\",\"                    for x in eval(category['category_regex_json']) :\\r\",\"                        casejson=eval(ticket['caseJson'])\\r\",\"                        #logger.error(x['inputfield'])\\r\",\"                        #logger.error(x['category_regex'])\\r\",\"                        matchData = casejson.get(x['inputfield'])\\r\",\"                        if(matchData is not None):\\r\",\"                            #logger.error('regex')\\r\",\"                            ismatch = re.match(x['category_regex'],matchData.lower())\\r\",\"                            if ismatch != None:\\r\",\"                                #logger.error('regex matched')\\r\",\"                                #logger.error(ticket['status'])\\r\",\"                                #logger.error(type(ticket))\\r\",\"                                \\r\",\"                                testdict = ticket.asDict()\\r\",\"                                #logger.error(type(testdict))\\r\",\"                                testdict['workflow_id'] = category['resolver_workflow_id']\\r\",\"                                testdict['status']='Classified'\\r\",\"                                #logger.error('test1')\\r\",\"                                btmClassify.append(testdict)\\r\",\"                                matched = True\\r\",\"                                #logger.error('test2')\\r\",\"                                #logger.error(testdict)\\r\",\"                                #btmClassify.append({'workflow_id':category['resolver_workflow_id'],'application_id':category['application_id'],'case_id':ticket['case_id']})\\r\",\"                                break;\\r\",\"                    if(matched!=True) :            \\r\",\"                        testdict = ticket.asDict()\\r\",\"                        testdict['workflow_id'] = None\\r\",\"                        testdict['status']='Extracted not Classified'\\r\",\"                        btmClassify.append(testdict)\\r\",\"                else:\\r\",\"                    logger.error('true')\\r\",\"        #logger.error(btmClassify)            \\r\",\"        spark = SparkSession.builder.config('spark.ui.showConsoleProgress', 'false').getOrCreate()\\r\",\"        df = spark.createDataFrame(btmClassify)  \\r\",\"        logger.error('test123')\\r\",\"        \\r\",\"        #df.show()\\r\",\"        # logger.error(btmClassify)            \\r\",\"        return df\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"dataset\":{\"alias\":\"btm\",\"name\":\"9CHTQE0WHI\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-09-21 05:41:49\",\"alias\":\"btm\",\"id\":24329,\"name\":\"LEOBTMTQ65374\",\"description\":\"btm\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encB7uhUO6Nv79TkK4YQBoi9DXGkTHVwgffvvR0\\\",\\\"userName\\\":\\\"bot-factory\\\",\\\"url\\\":\\\"jdbc:mysql://victadpst-21:3306/leapmaster\\\"}\",\"salt\":\"146MmrUVqn8lUbBxIQWmn2nypcODrYqQdR1AJa+cFMkpRoLbW19T7K6biN1dTSUhtirp1Zx9uig7KCG0EC7K4A==\",\"organization\":\"leo1311\",\"dshashcode\":\"7f78ce5cd189a027927f5afb41fe8b32a779fb9cfd72d246a249d1d93bd0f7f9\",\"activetime\":\"2021-09-21 05:41:49\",\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT * FROM btm_cases WHERE application_id=10000 AND STATUS='Extracted'\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"backingDataset\":\"\",\"organization\":\"leo1311\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"btm_category\",\"name\":\"22OWG5ICZC\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-09-21 05:41:49\",\"alias\":\"btm\",\"id\":24329,\"name\":\"LEOBTMTQ65374\",\"description\":\"btm\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encB7uhUO6Nv79TkK4YQBoi9DXGkTHVwgffvvR0\\\",\\\"userName\\\":\\\"bot-factory\\\",\\\"url\\\":\\\"jdbc:mysql://victadpst-21:3306/leapmaster\\\"}\",\"salt\":\"146MmrUVqn8lUbBxIQWmn2nypcODrYqQdR1AJa+cFMkpRoLbW19T7K6biN1dTSUhtirp1Zx9uig7KCG0EC7K4A==\",\"organization\":\"leo1311\",\"dshashcode\":\"7f78ce5cd189a027927f5afb41fe8b32a779fb9cfd72d246a249d1d93bd0f7f9\",\"activetime\":\"2021-09-21 05:41:49\",\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT * FROM btm_category_details WHERE application_id=10000\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"backingDataset\":\"\",\"organization\":\"leo1311\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"OdDRx\",\"alias\":\"Dataset  Loader\",\"name\":\"Dataset  Loader\",\"classname\":\"DatasetLoaderConfig\",\"category\":\"LoaderConfig\",\"attributes\":{\"dataset\":{\"alias\":\"btm_classifier\",\"name\":\"0OVJMW70P6\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-09-21 05:41:49\",\"alias\":\"btm\",\"id\":24329,\"name\":\"LEOBTMTQ65374\",\"description\":\"btm\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encB7uhUO6Nv79TkK4YQBoi9DXGkTHVwgffvvR0\\\",\\\"userName\\\":\\\"bot-factory\\\",\\\"url\\\":\\\"jdbc:mysql://victadpst-21:3306/leapmaster\\\"}\",\"salt\":\"146MmrUVqn8lUbBxIQWmn2nypcODrYqQdR1AJa+cFMkpRoLbW19T7K6biN1dTSUhtirp1Zx9uig7KCG0EC7K4A==\",\"organization\":\"leo1311\",\"dshashcode\":\"7f78ce5cd189a027927f5afb41fe8b32a779fb9cfd72d246a249d1d93bd0f7f9\",\"activetime\":\"2021-09-21 05:41:49\",\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from btm_classifier\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"btm_classifier\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"backingDataset\":\"\",\"organization\":\"leo1311\"},\"applySchema\":false},\"position_x\":\"950\",\"position_y\":\"220\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"qNIZO\",\"elementPosition\":\"BottomCenter\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"applySchema\":\"checkbox\"},\"context\":[{\"params\":\"\",\"script\":[\"class CustomPythonClass():\\r\",\"  def __main__(self, model,dataset):\\r\",\"      #data = dataset.select('orderId','IsOrderDeliveredOnTime','prediction')\\r\",\"      #index =  2 #<index of StringIndexer used to convert IsOrderDeliveredOnTime to index>\\r\",\"      #indexer = model.stages[index]\\r\",\"      #labeler = IndexToString(inputCol='prediction', outputCol='prediction_label', labels=indexer.labels)\\r\",\"      #dataset = labeler.transform(data)\\r\",\"      #dataset = dataset.drop('prediction')\\r\",\"      #dataset.show()\\r\",\"      data=dataset.select([c for c in dataset.columns if c!='workflow_id'])\\r\",\"      data = data.withColumn('last_updated_dts',lit(current_timestamp()))\\r\",\"      data.show()\\r\",\"      data2=dataset.select('case_id','workflow_id','application_id')\\r\",\"      data2 = data2.dropna(subset=['workflow_id'])\\r\",\"      \\r\",\"      data2.show()\\r\",\"      return data,data2\\r\",\"\\r\",\"\\r\"]},{\"script\":[\"import logging\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        print('python transformer')\\r\",\"        #dataset.show()    \\r\",\"        return dataset\\r\"]},{\"params\":\"\",\"script\":[\"from pyspark.sql.functions import *\\r\",\"import pyspark.sql.functions as F\\r\",\"from pyspark.sql import SparkSession\\r\",\"from pyspark.sql.types import *\\r\",\"from datetime import datetime\\r\",\"from functools import partial\\r\",\"import re\\r\",\"import logging as logger\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset1, dataset2):\\r\",\"        logger.error(dataset1)\\r\",\"        data2 = dataset2.collect()\\r\",\"        data1 = dataset1.collect()\\r\",\"        logger.error(data1)\\r\",\"        btmClassify = []\\r\",\"        for ticket in data2:\\r\",\"            for category in data1:\\r\",\"                matched = False\\r\",\"                if(category['selection']==False):\\r\",\"                    #logger.error('false')\\r\",\"                    #logger.error(eval(category['category_regex_json']))\\r\",\"                    for x in eval(category['category_regex_json']) :\\r\",\"                        casejson=eval(ticket['caseJson'])\\r\",\"                        #logger.error(x['inputfield'])\\r\",\"                        #logger.error(x['category_regex'])\\r\",\"                        matchData = casejson.get(x['inputfield'])\\r\",\"                        if(matchData is not None):\\r\",\"                            #logger.error('regex')\\r\",\"                            ismatch = re.match(x['category_regex'],matchData.lower())\\r\",\"                            if ismatch != None:\\r\",\"                                #logger.error('regex matched')\\r\",\"                                #logger.error(ticket['status'])\\r\",\"                                #logger.error(type(ticket))\\r\",\"                                \\r\",\"                                testdict = ticket.asDict()\\r\",\"                                #logger.error(type(testdict))\\r\",\"                                testdict['workflow_id'] = category['resolver_workflow_id']\\r\",\"                                testdict['status']='Classified'\\r\",\"                                #logger.error('test1')\\r\",\"                                btmClassify.append(testdict)\\r\",\"                                matched = True\\r\",\"                                #logger.error('test2')\\r\",\"                                #logger.error(testdict)\\r\",\"                                #btmClassify.append({'workflow_id':category['resolver_workflow_id'],'application_id':category['application_id'],'case_id':ticket['case_id']})\\r\",\"                                break;\\r\",\"                    if(matched!=True) :            \\r\",\"                        testdict = ticket.asDict()\\r\",\"                        testdict['workflow_id'] = None\\r\",\"                        testdict['status']='Extracted not Classified'\\r\",\"                        btmClassify.append(testdict)\\r\",\"                else:\\r\",\"                    logger.error('true')\\r\",\"        #logger.error(btmClassify)            \\r\",\"        spark = SparkSession.builder.config('spark.ui.showConsoleProgress', 'false').getOrCreate()\\r\",\"        df = spark.createDataFrame(btmClassify)  \\r\",\"        logger.error('test123')\\r\",\"        \\r\",\"        #df.show()\\r\",\"        # logger.error(btmClassify)            \\r\",\"        return df\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"dataset\":{\"alias\":\"btm\",\"name\":\"9CHTQE0WHI\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-09-21 05:41:49\",\"alias\":\"btm\",\"id\":24329,\"name\":\"LEOBTMTQ65374\",\"description\":\"btm\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encB7uhUO6Nv79TkK4YQBoi9DXGkTHVwgffvvR0\\\",\\\"userName\\\":\\\"bot-factory\\\",\\\"url\\\":\\\"jdbc:mysql://victadpst-21:3306/leapmaster\\\"}\",\"salt\":\"146MmrUVqn8lUbBxIQWmn2nypcODrYqQdR1AJa+cFMkpRoLbW19T7K6biN1dTSUhtirp1Zx9uig7KCG0EC7K4A==\",\"organization\":\"leo1311\",\"dshashcode\":\"7f78ce5cd189a027927f5afb41fe8b32a779fb9cfd72d246a249d1d93bd0f7f9\",\"activetime\":\"2021-09-21 05:41:49\",\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT * FROM btm_cases WHERE application_id=10000 AND STATUS='Extracted'\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"backingDataset\":\"\",\"organization\":\"leo1311\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"btm_category\",\"name\":\"22OWG5ICZC\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-09-21 05:41:49\",\"alias\":\"btm\",\"id\":24329,\"name\":\"LEOBTMTQ65374\",\"description\":\"btm\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"encB7uhUO6Nv79TkK4YQBoi9DXGkTHVwgffvvR0\\\",\\\"userName\\\":\\\"bot-factory\\\",\\\"url\\\":\\\"jdbc:mysql://victadpst-21:3306/leapmaster\\\"}\",\"salt\":\"146MmrUVqn8lUbBxIQWmn2nypcODrYqQdR1AJa+cFMkpRoLbW19T7K6biN1dTSUhtirp1Zx9uig7KCG0EC7K4A==\",\"organization\":\"leo1311\",\"dshashcode\":\"7f78ce5cd189a027927f5afb41fe8b32a779fb9cfd72d246a249d1d93bd0f7f9\",\"activetime\":\"2021-09-21 05:41:49\",\"category\":\"SQL\"},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT * FROM btm_category_details WHERE application_id=10000\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"backingDataset\":\"\",\"organization\":\"leo1311\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]}]}","admin","btm_classify","2021-09-29T05:43:16","LEOBTM_C22107","leo1311","DragAndDrop","NULL"
"admin","2021-08-17T06:53:42.241","false","NULL","NULL","{\"elements\":[{\"attributes\":{\"filetype\":\"Python3\",\"files\":[\"LEOBTM_S61592_leo1311.py\"],\"arguments\":[{\"name\":\"SnowDataSource\",\"value\":\"ACMSNWQB82627\",\"type\":\"Datasource\",\"alias\":\"SNOW\",\"index\":\"1\"},{\"name\":\"setProxy\",\"value\":\"True\",\"type\":\"Text\",\"alias\":\"True\",\"index\":\"2\"},{\"name\":\"LEAPDataSource\",\"value\":\"LEOBTMTQ65374\",\"type\":\"Datasource\",\"alias\":\"btm\",\"index\":\"3\"},{\"name\":\"params\",\"value\":\"state=1&sysparm_query=active=true^short_descriptionLIKEProcess_Invoice^ORshort_descriptionLIKEretail%20replenishment\",\"type\":\"Text\",\"alias\":\"state=1&sysparm_query=active=true^short_descriptionLIKEProcess_Invoice^ORshort_descriptionLIKEretail%20replenishment\",\"index\":\"4\"},{\"name\":\"dataTable\",\"value\":\"btm_cases\",\"type\":\"Text\",\"alias\":\"btm_cases\",\"index\":\"5\"},{\"name\":\"fullLoad\",\"value\":\"False\",\"type\":\"Text\",\"alias\":\"False\",\"index\":\"6\"},{\"name\":\"TimeDelta(hrs)\",\"value\":\"1\",\"type\":\"Text\",\"alias\":\"1\",\"index\":\"7\"},{\"name\":\"limit\",\"value\":\"1000\",\"type\":\"Text\",\"alias\":\"1000\",\"index\":\"8\"},{\"name\":\"offset\",\"value\":\"0\",\"type\":\"Text\",\"alias\":\"0\",\"index\":\"9\"},{\"name\":\"api\",\"value\":\"/api/now/table/\",\"type\":\"Text\",\"alias\":\"/api/now/table/\",\"index\":\"10\"},{\"name\":\"snowTable\",\"value\":\"incident\",\"type\":\"Text\",\"alias\":\"incident\",\"index\":\"11\"},{\"name\":\"applicationId\",\"value\":\"10000\",\"type\":\"Text\",\"alias\":\"10000\",\"index\":\"12\"}],\"dataset\":[]}}]}","admin","btm_extractor","2021-09-29T05:43:16","LEOBTM_S61592","leo1311","NativeScript","NULL"
