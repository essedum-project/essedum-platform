"cname","filename","filescript","organization"
"LEOCDGNR37410","LEOCDGNR37410_leo1311.py","import sys, os
# from urllib.parse import urlparse
import sys
import os.path
import json
import re
from datetime import datetime
from collections import defaultdict

arguments = sys.argv
argsDict = {}
for arg in arguments:
    try:
        argsDict[arg.split(':')[0]] = (':').join(arg.split(':')[1:])
    except:
        a = 'error'
        
json_file = os.path.join(argsDict['scriptPath'], 'pipeline.json')

with open(json_file) as f:
    import json
    pipeline_json = json.load(f)
    print(pipeline_json)
 

# base script 
def baseScript():
    return '''
import sys
import os
import subprocess
import logging

{imports}

# os.environ['HTTP_PROXY']='http://blrproxy.ad.infosys.com:80'
# os.environ['HTTPS_PROXY']='http://blrproxy.ad.infosys.com:80'
# os.environ['http_proxy']='http://blrproxy.ad.infosys.com:80'
# os.environ['https_proxy']='http://blrproxy.ad.infosys.com:80'

# os.environ['NO_PROXY']='10.*,localhost,0.0.0.0,victlpast02,0.0.0.0,127.0.0.1,10.81.78.146,victcbfc160,10.156.89.8,10.224.216.10,10.66.15.100'
requirements = [{requirements}]
for module in requirements:
    subprocess.run(sys.executable + ' -m pip install '+ module + ' --index-url https://shreya_bansal@ad.infosys.com:cmVmdGtuOjAxOjE3MjI5Mzk1MjA6b25Yc3ZVRUYxV2tYR1VDS1p3elNFMkxQOHpM@infyartifactory.jfrog.io/artifactory/api/pypi/pypi-remote/simple --trusted-host infyartifactory.jfrog.io',shell=True)
    # subprocess.run(sys.executable + ' -m pip install '+ module)
    print("INSTALLING"+module)

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
handler = logging.StreamHandler()
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

ticket_number = ""

chatbot_params = {chatbot_params}

{tool_functions}

{functions}

def executePipeline():
{executionOrder}


if __name__ == '__main__':
    executePipeline()
    print('Completed')
'''

# base script 
def baseScript_flask():
    return '''
import sys
import os
import subprocess

{imports}

import logging

# os.environ['HTTP_PROXY']='http://blrproxy.ad.infosys.com:80'
# os.environ['HTTPS_PROXY']='http://blrproxy.ad.infosys.com:80'
# os.environ['http_proxy']='http://blrproxy.ad.infosys.com:80'
# os.environ['https_proxy']='http://blrproxy.ad.infosys.com:80'

# os.environ['NO_PROXY']='10.*,localhost,0.0.0.0,victlpast02,0.0.0.0,127.0.0.1,10.81.78.146,victcbfc160,10.156.89.8,10.224.216.10,10.66.15.100'
requirements = [{requirements}]
for module in requirements:
    subprocess.run(sys.executable + ' -m pip install '+ module + ' --index-url https://shreya_bansal@ad.infosys.com:cmVmdGtuOjAxOjE3MjI5Mzk1MjA6b25Yc3ZVRUYxV2tYR1VDS1p3elNFMkxQOHpM@infyartifactory.jfrog.io/artifactory/api/pypi/pypi-remote/simple --trusted-host infyartifactory.jfrog.io',shell=True)


logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
handler = logging.StreamHandler()
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

ticket_number = ""

chatbot_params = {chatbot_params}

{flask_app}

{tool_functions}

{functions}

def execute():
{executeflask}

if __name__ == '__main__':
    execute()
    print('Completed')
'''

# Node 
class Graph:
	def __init__(self, vertices):
		self.graph = defaultdict(list)
		self.V = vertices
	
	def addEdge(self, u, v):
		self.graph[u].append(v)

	def topologicalSortUtil(self, v, visited, stack):
		visited[v] = True
		for i in self.graph[v]:
			if visited[i] == False:
				self.topologicalSortUtil(i, visited, stack)
		stack.append(v)

	def topologicalSort(self):
		visited = [False]*self.V
		stack = []

		for i in range(self.V):
			if visited[i] == False:
				self.topologicalSortUtil(i, visited, stack)

		return stack[::-1] 

class Node:
    def __init__(self, jsonObject):
        self.level = 0;
        self.id = jsonObject.get('id','');
        self.name = jsonObject.get('name','');
        self.className = jsonObject.get('classname', self.name + 'Config');
        self.category = jsonObject.get('category','');
        self.attributes = jsonObject.get('attributes','');
        self.connectors = jsonObject.get('connectors','');
        self.parent = None
        self.formats = jsonObject.get('formats','');        

# Building DAG order
def buildDAGOrder(elements):
    # get all elements from json
    elementlist = []
    nodelist = []
    for e in elements:
        node = Node(e)
        nodelist.append(node)

    id_to_num = {}
    num_to_id = {}
    id_to_node = {}
    for i, ele in enumerate(nodelist):
        id_to_num[ele.id] = i
        num_to_id[i] = ele.id
        id_to_node[ele.id] = ele

    vertex = len(nodelist)
    g = Graph(vertex)  

    for item in nodelist:
        parentid = ''
        childid = ''
        for connector in item.connectors:
            if (connector['type'] == 'target'):
                parentid = connector['elementId']
                g.addEdge(id_to_num[parentid], id_to_num[item.id])
                
            if (connector['type'] == 'source'):
                childid = connector['elementId']
                g.addEdge(id_to_num[item.id], id_to_num[childid])

    stack = g.topologicalSort()
    stack = [num_to_id[num] for num in stack]

    for id in stack:
          elementlist.append(id_to_node[id])
    return elementlist

# fill all job params in pipelineJson
def fillJobParams(pipelineJson):

    organization = pipelineJson.get('org', 'INFOSYS')

    # Set all Job Params
    jobParams = {}
    jobParams['NextExecutionTime'] = pipelineJson.get('Next_Execution_Time', '')
    jobParams['CurrentExecutionTime'] = pipelineJson.get('Current_Execution_Time', '')
    jobParams['LastSuccessfulExecutionTime'] = pipelineJson.get('Last_Successful_Execution_Time', '')
    jobParams['LastExecutionTime'] = pipelineJson.get('Last_Execution_Time', '')

    regEx = '<jobParams:([\w\.-]+);(.*?)>'
    pipelineJsonList = []

    for item in pipelineJson['elements']:
        itemText = json.dumps(item)
        # replace Org
        itemText = itemText.replace('<jobParams:orgName>', organization)
        # replace timestamps
        params = re.findall(regEx, itemText)
        for p in params:
            textToreplace = '<jobParams:{0};{1}>'.format(p[0], p[1])
            if jobParams[p[0]] != '' and jobParams[p[0]] != -1:
                try:
                    dt = datetime.strptime(jobParams[p[0]], '%a, %d %b %Y %H:%M:%S')
                    replaceWith = datetime.strftime(dt, p[1])
                    itemText = itemText.replace(textToreplace, replaceWith)
                except:
                    a = 1
        pipelineJsonList.append(json.loads(itemText))
    return pipelineJsonList


# Build DAG of all the nodes
# Returns the list of elements in order
def buildDAG(pipelineJsonList):
    print('pipelineJsonList', )
    orderedElementList = buildDAGOrder(pipelineJsonList) # DAG.build(pipelineJsonList);
    orderedElementList = list(filter(None, orderedElementList))
    return orderedElementList


# fill node attributes with Actual Data
def fillDatanode(node, script):
    attributes = re.findall('\<(.*?)\>', script)
    
    for item in attributes:

        input_split = item.split('.')
        keys = ''.join(['''['{0}']'''.format(k) for k in input_split])
        
        try:
            
            value = eval('''node.attributes''' + '''{0}'''.format(keys))
            if node.className != 'DatasetExtractorConfig' and node.className != 'DatasetLoaderConfig':
                form = eval('''node.formats''' + '''{0}'''.format(keys))
                
                if form == 'bool':
                    value = 'True' if value=='true' else 'False'
            
            script = script.replace('<' + item + '>', str(value))
            
            
        except:
            print('in Except')
            script = script.replace('<' + item + '>', '')

    return script

# fill node attributes with Actual Data
# def fillDatanode(node, script):
#     attributes = re.findall('\<(.*?)\>', script)
    
#     for item in attributes:

#         input_split = item.split('.')
#         keys = ''.join(['''['{0}']'''.format(k) for k in input_split])
        
#         try:
            
#             value = eval('''node.attributes''' + '''{0}'''.format(keys))
#             if node.className != 'DatasetExtractorConfig':
#                 form = eval('''node.attributes''' + '''{0}'''.format(keys))

#                 if form == 'bool':
#                     value = 'True' if value.lower()=='true' else 'False'
            
#             script = script.replace('<' + item + '>', str(value))
            
            
#         except:
#             print('in Except')
#             script = script.replace('<' + item + '>', '')

#     return script

def generateScript(pipelineJson):

    # format type for pre-processing node/python-script node
    def con(s, t):
        if s=='int':
            return 'integer'
        elif s=='str':
            return 'text'
        elif s=='list':
            return 'list'
        elif s=='bool':
            return 'bool'
        elif isinstance(t, str):
            return 'text'
        elif isinstance(t, int):
            return 'integer'
        return 'bool'


    pipelineElements = fillJobParams(pipelineJson)
    orderedElementList = buildDAG(pipelineElements)
    requirements = []
    chatbot_params= {}
    import_lines = []
    functions = []
    tool_functions = []
    dataset_extractor_param = {}
    dataset_loader_params = []
    extractscriptsuffix = ''
    function_flag = {}
    flask_flag = False
    flask_call = ''
    flask_app = []


    # Script generation
    for node in orderedElementList:
        # Extractors
        element = next(e for e in pipelineJson['elements'] if e['id'] == node.id)
        
        if node.className == 'DatasetExtractorConfig':   
            extractorScript = \
                element['codeGeneration'][node.attributes['dataset']['datasource']['type']]['script']
                
            
            extractorScript = extractorScript.replace('_<id>', '')
            extractorparams = re.findall('def DatasetExtractor.*\(.*?\)', extractorScript)

            try:
                # Retriving parameters of Dataset Extractor
                extractorparams = re.findall('\(.*?\)', extractorparams[0])
                extractorparams = extractorparams[0][1:-1].split(', ')
            except:
                extractorparams = []
            
            para = []
            for p in extractorparams:
                para.extend(p.split(','))
            
            dataset_extractor_param[node.attributes['dataset']['datasource']['type']] = [p.split('=')[0].strip() for p in para]
            
            
            extractorScript = extractorScript.replace('<id>', node.id)

            if isinstance(node.attributes['dataset']['attributes'], str):
                node.attributes['dataset']['attributes'] = json.loads(node.attributes['dataset']['attributes'])
            node.attributes['dataset']['datasource']['connectionDetails'] = json.loads(
                node.attributes['dataset']['datasource']['connectionDetails'])
            
            extractscriptsuffix = extractorScript
            
            # Checking if the function definition is already exists in script
            if (node.className + node.attributes['dataset']['datasource']['type']) in function_flag:
                print('exits', (node.className + node.attributes['dataset']['datasource']['type']))
            else:
                function_flag[(node.className + node.attributes['dataset']['datasource']['type'])] = 1
                functions.append(extractorScript)
            
            import_lines = import_lines + \
                           element['codeGeneration'][node.attributes['dataset']['datasource']['type']]['imports']
            requirements = requirements + \
                           element['codeGeneration'][node.attributes['dataset']['datasource']['type']].get('requirements',[])

        elif node.className == 'AdapterMethodConfig':
            print('node name is: ', node.name)
            transformerScript = element['codeGeneration']['script']
            print(element)
            nodename = ''.join(node.name.split(' '))
            
            transformerScript = transformerScript.replace('_<id>', '')
            transformerScript = transformerScript.replace('<id>', node.id)
            
            # Checking if the function definition is already exists in script
            if node.className in function_flag:
                print('exits', node.className)
            else:
                function_flag[node.className] = 1
                functions.append(transformerScript)
                
            import_lines = import_lines + element['codeGeneration']['imports']
            if element['codeGeneration'].get('requirements', '') != '':
                requirements = requirements + element['codeGeneration'].get('requirements', [])
                print(requirements)
            
        # Pre-processing Script
        elif node.className == 'ScriptTransformerConfig' or node.className == 'PreProcessingScriptConfig' or node.className == 'PostProcessingScriptConfig' or node.className == 'ModelPredictScriptConfig' or node.className == 'PythonScriptConfig' or node.className == 'PostPythonScriptConfig':
            processingScript = ''
            processingScript = ('').join(node.attributes['script'])
            print(processingScript)
            # processingScript = processingScript.replace('\\n', '\r')
            #processingScript = processingScript.replace('\n', '\n')
            #processingScript = processingScript.replace('\r', '\n')
            print(processingScript)
            processingScript = processingScript.replace('_<id>', '')
            processingScript = processingScript.replace('<id>', node.id)
            nodename = node.attributes.get('FunctionName', '')
            
            # Checking if the function definition is already exists in script
            if nodename in function_flag:
                print('exits', nodename)
            else:
                function_flag[nodename] = 1
                functions.append(processingScript)
            # if isinstance(node.attributes['requirements'],str) :
            requirements = requirements + node.attributes['requirements'].split(',')
                # print(f"\n\n @@@@@@@@@@ Requirements in Python Scripts: {requirements}@@@@@@@@@@@@@\n\n")
        
        # Loaders
        elif node.className == 'DatasetLoaderConfig' or node.className == 'ModelLoaderConfig':

            try:
                loaderscript = element['codeGeneration'][node.attributes['dataset']['datasource']['type']]['script']
                requirements = requirements + \
                               element['codeGeneration'][node.attributes['dataset']['datasource']['type']].get('requirements',[])

            except:
                loaderscript = element['codeGeneration']['script']
                requirements = requirements + element['codeGeneration'].get('requirements','')
            loaderscript = loaderscript.replace('_<id>', '')
            
            # Retriving parameters of Dataset Loader
            extractorparams = re.findall('def DatasetLoader\(.*?\)', loaderscript)

            extractorparams = re.findall('\(.*?\)', extractorparams[0])
            
            extractorparams = extractorparams[0][1:-1].split(', ')
            para = []
            for p in extractorparams:
                para.extend(p.split(','))
            
            dataset_loader_params = [p.split('=')[0].strip() for p in para]
            loaderscript = loaderscript.replace('<id>', node.id)
            
            if node.attributes.get('dataset', '') != '' and isinstance(node.attributes['dataset']['attributes'],
                                                                       str):
                node.attributes['dataset']['attributes'] = json.loads(node.attributes['dataset']['attributes'])
            if node.attributes.get('dataset', '') != '' and isinstance(node.attributes['dataset']['datasource']['connectionDetails'] ,
                                                                       str):
                node.attributes['dataset']['datasource']['connectionDetails'] = json.loads(
                    node.attributes['dataset']['datasource']['connectionDetails'])
            
            # Checking if the function definition is already exists in script
            if node.className in function_flag:
                print('exits', node.className)
            else:
                function_flag[node.className] = 1
                functions.append(loaderscript)

            try:
                import_lines = import_lines + \
                               element['codeGeneration'][node.attributes['dataset']['datasource']['type']][
                                   'imports']

            except:
                import_lines = import_lines + \
                               element['codeGeneration']['imports']
        
        elif node.className == 'Generic Tool':
            script = node.attributes['script']
            if node.attributes['Requirements'] != '' or node.attributes['Requirements'] != 'None':
                requirements = requirements + node.attributes['Requirements'].replace(", ",",").split(",")
            if node.attributes['Imports'] != '' or node.attributes['Imports'] != 'None':
                import_lines = import_lines + node.attributes['Imports'].replace(", ",",").split(",")   
            processingScript = ''
            processingScript = ('').join(script)
            tool_functions.append(processingScript)
                       
        elif node.className == 'FlaskApp':
            flask_flag = True
            processingScript = ''
            processingScript = ('').join(node.attributes['script'])
            flask_app.append(processingScript)
            transformerScript = element['codeGeneration']['script']
            functions.append(transformerScript)
            import_lines = import_lines + element['codeGeneration']['imports']
            if element['codeGeneration'].get('requirements', '') != '':
                requirements = requirements + element['codeGeneration'].get('requirements', [])

                
        elif node.className == 'FlaskAPP':
            flask_flag = True
            processingScript = ''
            processingScript = ('').join(node.attributes['script'])
            flask_app.append(processingScript)
            transformerScript = element['codeGeneration']['script']
            functions.append(transformerScript)
            import_lines = import_lines + element['codeGeneration']['imports']
            if element['codeGeneration'].get('requirements', '') != '':
                requirements = requirements + element['codeGeneration'].get('requirements', [])
                # print(f"\n\n@@@@@@@@@@@@ Requirements in flask node: {requirements} @@@@@@@@@@@@@@@@@\n\n")
        
        elif node.className=='PythonClass':
            flask_flag = True
            processingScript = ''
            processingScript = ('').join(node.attributes['script'])
            functions.append(processingScript)

        # Transformers
        else:
            print('@@@@@@@@@@@@ node name is: ', node.name)
            Nodename = node.className
            attributes = node.attributes 
            for key,value in attributes.items():
                param_key = ""
                param_key += Nodename
                param_key += "_"
                param_key += key
                chatbot_params[param_key]=value 
            transformerScript = element['codeGeneration']['script']
            print(element)
            nodename = ''.join(node.name.split(' '))
            
            transformerScript = transformerScript.replace('_<id>', '')
            transformerScript = transformerScript.replace('<id>', node.id)
            
            # Checking if the function definition is already exists in script
            if node.className in function_flag:
                print('exits', node.className)
            else:
                function_flag[node.className] = 1
                functions.append(transformerScript)
                
            import_lines = import_lines + element['codeGeneration']['imports']
            if element['codeGeneration'].get('requirements', '') != '':
                requirements = requirements + element['codeGeneration'].get('requirements', [])
                print(requirements)
            


    import_lines = [l for l in set(import_lines) if l != '']
    requirements = [l for l in set(requirements) if l != '']
    
    if flask_flag:
        pipelineCode = baseScript_flask()
    else:
        pipelineCode = baseScript()
    pipelineCode = pipelineCode.replace('{imports}', ('\n').join(import_lines))
    if len(requirements)>0:
        pipelineCode = pipelineCode.replace('{requirements}', '\''+ ('\',\'').join(requirements)+'\'')
    else:
        pipelineCode = pipelineCode.replace('{requirements}', '')
    
    if len(chatbot_params)>0:
        pipelineCode = pipelineCode.replace('{chatbot_params}', json.dumps(chatbot_params) )
    else:
         pipelineCode = pipelineCode.replace('{chatbot_params}', 'None')
        
    pipelineCode = pipelineCode.replace('{pipelineName}', argsDict['pipelineName'])
    pipelineCode = pipelineCode.replace('{functions}', ('\r').join(functions))
    pipelineCode = pipelineCode.replace('{flask_app}', ('\r').join(flask_app))
    pipelineCode = pipelineCode.replace('{tool_functions}', ('\r').join(tool_functions))
    executionOrder = '\n'
    
    
    
    for node in orderedElementList:
        inputs = []
        
        # Initializing positioning order for input entries of a node
        position_ordering = {'LeftMiddle': 0,'TopCenter': 1, 'RightMiddle': 2, 'BottomCenter': 3}
        index_ordering = {0: 'LeftMiddle', 1: 'TopCenter', 2: 'RightMiddle', 3: 'BottomCenter'}
        outputs = []
        nodename = ''.join(node.name.split(' '))
        # nodename = '_'.join(node.name.strip().split(' ')).lower()
        nodeid = node.id
        
        if nodename == 'DatasetExtractor':
            nodename = nodename + node.attributes['dataset']['datasource']['type']
        
        # if nodename == 'PythonScript' or nodename == 'PostPythonScript' or nodename == 'PostProcessingScript' or nodename == 'PreProcessingScript':
        if node.className == 'ScriptTransformerConfig' or node.className == 'PreProcessingScriptConfig' or node.className == 'PostProcessingScriptConfig' or node.className == 'ModelPredictScriptConfig' or node.className == 'PythonScriptConfig' or node.className == 'PostPythonScriptConfig':
            nodename = node.attributes.get('FunctionName', '')
            node.formats = {para['name'].split(':')[0]: con(para['name'].split(':')[-1], para['value']) for para in node.attributes.get('params', '') if len(para) > 0}
            node.attributes = {para['name'].split(':')[0]: para['value'] for para in node.attributes.get('params', '') if len(para) > 0}

        
        for connector in node.connectors:

            if (connector['type'] == 'target'):
                inputs.append(position_ordering[connector['position']])
                
            if (connector['type'] == 'source'):
                outputs.append('ds_' + connector['elementPosition'] + '_' + connector['elementId'])
        
        # Positioning input entries for a node        
        inputs.sort()
        
        inputs = ['ds_' + index_ordering[pos] + '_' + nodeid for pos in inputs]
        
        # Adding parameters for respective function call
        default_params = []
        if node.className == 'DatasetExtractorConfig':
            default_params = []
            default_params = [e + '=\'<' + e.replace('_', '.') + '>\'' for e in dataset_extractor_param[node.attributes['dataset']['datasource']['type']]]
            
        elif node.className == 'AdapterMethodConfig':
            actual_params = node.attributes            
            actual_param = list(actual_params.keys())
            script_body = {param: '_'.join(re.split('\s\s*', param.strip())) for param in actual_param}
            default_params = []
            actual_formats = node.formats
            NoneType = type(None)
        
            # Value type as String or Non-string depending on format type
            for key, val in script_body.items(): 
                default_params.append(val + '=<' + key + '>')
                
            
        elif node.className == 'DatasetLoaderConfig':
            default_params = []
            default_params = [e + '=\'<' + e.replace('_', '.') + '>\'' for e in dataset_loader_params[1:]]
            
            
        # elif node.className == 'PythonScriptConfig' or node.className == 'PostPythonScriptConfig' or node.className == 'PreProcessingScriptConfig' or node.className == 'PostProcessingScriptConfig':
        elif node.className == 'ScriptTransformerConfig' or node.className == 'PreProcessingScriptConfig' or node.className == 'PostProcessingScriptConfig' or node.className == 'ModelPredictScriptConfig' or node.className == 'PythonScriptConfig' or node.className == 'PostPythonScriptConfig':
            actual_params = node.attributes            
            actual_param = list(actual_params.keys())
            script_body = {param: '_'.join(re.split('\s\s*', param.lower().strip())) + '_param' for param in actual_param}
            default_params = []
            actual_formats = node.formats
            NoneType = type(None)
        
            for key, val in script_body.items(): 
    
                if key == 'script':
                   pass
               
                 # Value type as String or Non-string depending on format type
                elif actual_formats[key] == 'text':
                    default_params.append(val + '=\'<' + key + '>\'') 
                elif actual_formats[key] == 'textarea':
                    default_params.append(val + '=\'\'\'<' + key + '>\'\'\'') 
                elif actual_formats[key] == 'integer':
                    default_params.append(val + '=<' + key + '>')
                elif actual_formats[key] == 'bool':
                    default_params.append(val + '=<' + key + '>')
                elif 'drop' in actual_formats[key].lower():  # for drop down values
                    if actual_formats[actual_formats[key]][0].isalpha():
                        default_params.append(val + '=\'<' + key + '>\'')
                    else:
                        default_params.append(val + '=<' + key + '>')
                else:
                    default_params.append(val + '=<' + key + '>')
        else:               
            actual_params = node.attributes            
            actual_param = list(actual_params.keys())
            script_body = {param: '_'.join(re.split('\s\s*', param.lower().strip())) + '_param' for param in actual_param}
            print('//////////////',script_body)
            default_params = []
            actual_formats = node.formats
            NoneType = type(None)
        
            # Value type as String or Non-string depending on format type
            for key, val in script_body.items(): 
                if actual_formats[key] == 'text':
                    default_params.append(val + '=\'<' + key + '>\'') 
                elif actual_formats[key] == 'textarea':
                    default_params.append(val + '=\'\'\'<' + key + '>\'\'\'') 
                elif actual_formats[key] == 'integer' or actual_formats[key] == 'int':
                    default_params.append(val + '=<' + key + '>')
                elif actual_formats[key] == 'bool':
                    # key = 'True' if key == 'true' else 'False'
                    print('key', key)
                    default_params.append(val + '=<' + key + '>')
                elif 'drop' in actual_formats[key].lower():  # for drop down values
                    if node.className == 'DataExtractor':
                        actual_formats[actual_formats[key]] = [{}]
                    if isinstance(actual_formats[actual_formats[key]][0], str) and actual_formats[actual_formats[key]][0].isalpha():
                        
                        default_params.append(val + '=\'<' + key + '>\'')
                    else:
                        default_params.append(val + '=<' + key + '>')
                else:
                    default_params.append(val + '=<' + key + '>')
                
        # Generating function call
        if len(outputs) > 0:
            call = '    ' + ','.join(outputs) + ' = ' + nodename + '(' + ','.join(inputs)
            if len(default_params) > 0:
                call += ', ' if len(inputs) > 0 else ''
                call += ','.join(default_params)
            call +=  ')\n'
        else:
            call = '    ' + nodename + '(' + ','.join(inputs)
            if len(default_params) > 0:
                call += ', ' if len(inputs) > 0 else ''
                call += ','.join(default_params)
            call +=  ')\n'   
            
        # Filling the user inputted values in function call
        call = fillDatanode(node, call) 
        
        if node.className == 'FlaskAPP' or node.className == 'FlaskApp':
            flask_call += call
        if node.className != 'FlaskAPP' or node.className == 'FlaskAPP':
            executionOrder = executionOrder + call    

    print('executionOrder', executionOrder)
    pipelineCode = pipelineCode.replace('{executionOrder}', executionOrder)
    pipelineCode = pipelineCode.replace('{executeflask}', flask_call)
    pipelineCode = pipelineCode.replace('\r', '\n')
    
    
    with open(os.path.join(argsDict['scriptPath'], argsDict['pipelineName'] + '_generatedCode.py'), 'w') as f:
        f.writelines(pipelineCode)

generateScript(pipeline_json)

print('Completed')","leo1311"
