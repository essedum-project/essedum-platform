"cname","filename","filescript","organization"
"APMCSDTT50266","APMCSDTT50266_leo1311.py","","leo1311"
"APMBCKND86786","APMBCKND86786_leo1311.py","aW1wb3J0IHJlcXVlc3RzCmltcG9ydCBqc29uCmltcG9ydCBteXNxbC5jb25uZWN0b3IKaW1wb3J0IHBhbmRhcyBhcyBwZApmcm9tIHNxbGFsY2hlbXkgaW1wb3J0IGNyZWF0ZV9lbmdpbmUKaW1wb3J0IHN5cwppbXBvcnQgcHlteXNxbAppbXBvcnQgcHltc3NxbApmcm9tIHVybGxpYi5wYXJzZSBpbXBvcnQgcXVvdGVfcGx1cywgdXJscGFyc2UKZnJvbSBsZWFwLnV0aWxzLlV0aWxpdGllcyBpbXBvcnQgVXRpbGl0aWVzCmltcG9ydCBsb2dnaW5nIGFzIGxvZ2dlcgppbXBvcnQgb3MKaW1wb3J0IHN5cwppbXBvcnQgcHlvZGJjCmZyb20gbGVhcC5jb25maWcuRXh0cmFjdG9yQ29uZmlncy5EYXRhc2V0RXh0cmFjdG9yQ29uZmlnIGltcG9ydCBEYXRhc2V0RXh0cmFjdG9yQ29uZmlnCiMgb3MuZW52aXJvblsnTk9fUFJPWFknXT0nbGVhcC1wb3Yuc2Fhcy5hcHBkeW5hbWljcy5jb20nCmxvZ2dlci5iYXNpY0NvbmZpZyhsZXZlbD1sb2dnZXIuSU5GTywgZm9ybWF0PSclKGFzY3RpbWUpcyBJTkZPICUobWVzc2FnZSlzJywgZGF0ZWZtdD0nJXkvJW0vJWQgJUg6JU06JVMnKQphcmd1bWVudHMgPSBzeXMuYXJndgpkaWN0ID0ge30KCgoKZm9yIGFyZyBpbiBhcmd1bWVudHM6CiAgICB0cnk6CiAgICAgICAgZGljdFthcmcuc3BsaXQoJzonKVswXV0gPSAoJzonKS5qb2luKGFyZy5zcGxpdCgnOicpWzE6XSkKICAgIGV4Y2VwdDoKICAgICAgICBhID0gJ2Vycm9yJwoKcHJpbnQoJ2RpY3Rpb25hcnknLCBkaWN0KQoKIyBBcHBEeW5hbWljcyBjbGFzcwoKY2xhc3MgQXBwRHluYW1pY3M6CgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHVzZXJuYW1lLCBwYXNzd29yZCwgY2xpZW50SWQsIGNsaWVudFNlY3JldCwgZG9tYWluKToKICAgICAgICBzZWxmLl9fdXNlcm5hbWUgPSB1c2VybmFtZQogICAgICAgIHNlbGYuX19wYXNzd29yZCA9IHBhc3N3b3JkCiAgICAgICAgc2VsZi5fX2NsaWVudElkID0gY2xpZW50SWQKICAgICAgICBzZWxmLl9fY2xpZW50U2VjcmV0ID0gY2xpZW50U2VjcmV0CiAgICAgICAgc2VsZi5fX2RvbWFpbiA9ICdodHRwczovL3swfS5zYWFzLmFwcGR5bmFtaWNzLmNvbScuZm9ybWF0KGRvbWFpbikKICAgICAgICBzZWxmLl9fY29va2llX3BhcmFtcyA9IHt9CiAgICAgICAgc2VsZi5fX2JlYXJlcl90b2tlbiA9IE5vbmUKCiAgICAjIE9idGFpbiBCZWFyZXIgVG9rZW4gRm9yIFN1YnNlcXVlbnQgQXV0aG9yaXphdGlvbi4KCiAgICBkZWYgZ2V0QmVhcmVyVG9rZW4oc2VsZik6CiAgICAgICAgdXJsID0gc2VsZi5fX2RvbWFpbiArICcvY29udHJvbGxlci9hcGkvb2F1dGgvYWNjZXNzX3Rva2VuJwogICAgICAgIHBheWxvYWQgPSAnZ3JhbnRfdHlwZT1jbGllbnRfY3JlZGVudGlhbHMmY2xpZW50X2lkPXswfSZjbGllbnRfc2VjcmV0PXsxfScuZm9ybWF0KHNlbGYuX19jbGllbnRJZCwgc2VsZi5fX2NsaWVudFNlY3JldCkKICAgICAgICBoZWFkZXJzID0gewogICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3ZuZC5hcHBkLmNudHJsK3Byb3RvYnVmO3Y9MScKICAgICAgICB9CiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5yZXF1ZXN0KCdQT1NUJywgdXJsLCBoZWFkZXJzPWhlYWRlcnMsIGRhdGE9cGF5bG9hZCkKICAgICAgICByZXNwX3RleHQgPSBqc29uLmxvYWRzKHJlc3BvbnNlLnRleHQpCiAgICAgICAgc2VsZi5fX2JlYXJlcl90b2tlbiA9ICByZXNwX3RleHRbJ2FjY2Vzc190b2tlbiddCgogICAgIyBPYnRhaW4gQ29va2llIFBhcmFtcyBGb3IgU3Vic2VxdWVudCBBdXRob3JpemF0aW9uLgoKCgogICAgZGVmIGdldENvb2tpZVBhcmFtcyhzZWxmKToKICAgICAgICBzZWxmLmdldEJlYXJlclRva2VuKCkKICAgICAgICB1cmwgPSBzZWxmLl9fZG9tYWluICsgJy9jb250cm9sbGVyL2F1dGg/YWN0aW9uPWxvZ2luJwogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMucmVxdWVzdCgnR0VUJywgdXJsLCBhdXRoPShzZWxmLl9fdXNlcm5hbWUsIHNlbGYuX19wYXNzd29yZCksIGRhdGE9e30pCiAgICAgICAgc2VsZi5fX2Nvb2tpZV9wYXJhbXMgPSB7J0pTRVNTSU9OSUQnOiByZXNwb25zZS5jb29raWVzLml0ZW1zKClbMF1bMV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1gtQ1NSRi1UT0tFTic6IHJlc3BvbnNlLmNvb2tpZXMuaXRlbXMoKVsxXVsxXX0KCiAgICBkZWYgZ2V0UmVzcG9uc2VGcm9tQXBpKHNlbGYsIGNpVHlwZSwgYXBwbGljYXRpb25JZD1Ob25lKToKICAgICAgICBpZiBjaVR5cGUgPT0gJ2FwcGxpY2F0aW9uJzoKICAgICAgICAgICAgbXlEYXRhc2V0Q29uZmlnID0ganNvbi5sb2FkcyhkaWN0WydhcHBsaWNhdGlvbiddKQogICAgICAgICAgICBteURhdGFzZXRDb25maWcgPSB7J2RhdGFzZXQnOiBteURhdGFzZXRDb25maWd9CiAgICAgICAgICAgIGRhdGEgPSBEYXRhc2V0RXh0cmFjdG9yQ29uZmlnKCcxJywgJycsIG15RGF0YXNldENvbmZpZywgJycpLmdldEV4dHJhY3RvcigpLmdldERhdGEoKQoKICAgICAgICBlbGlmIGNpVHlwZSA9PSAndGllcic6CiAgICAgICAgICAgIG15RGF0YXNldENvbmZpZyA9IGpzb24ubG9hZHMoZGljdFsnc2VydmljZXMnXSkKICAgICAgICAgICAgbXlEYXRhc2V0Q29uZmlnID0geydkYXRhc2V0JzogbXlEYXRhc2V0Q29uZmlnfQogICAgICAgICAgICBkYXRhID0gRGF0YXNldEV4dHJhY3RvckNvbmZpZygnMScsICcnLCBteURhdGFzZXRDb25maWcsICcnKS5nZXRFeHRyYWN0b3IoKS5nZXREYXRhKCkKCiAgICAgICAgIyBlbGlmIGNpVHlwZSA9PSAnbm9kZSc6CiAgICAgICAgIyAgICAgbXlEYXRhc2V0Q29uZmlnID0ganNvbi5sb2FkcyhkaWN0Wydob3N0cyddKQogICAgICAgICMgICAgIG15RGF0YXNldENvbmZpZyA9IHsnZGF0YXNldCc6IG15RGF0YXNldENvbmZpZ30KICAgICAgICAjICAgICBkYXRhID0gRGF0YXNldEV4dHJhY3RvckNvbmZpZygnMScsICcnLCBteURhdGFzZXRDb25maWcsICcnKS5nZXRFeHRyYWN0b3IoKS5nZXREYXRhKCkKCiAgICAgICAgZWxpZiBjaVR5cGUgPT0gJ2JhY2tlbmRzJzoKICAgICAgICAgICAgbXlEYXRhc2V0Q29uZmlnID0ganNvbi5sb2FkcyhkaWN0WydiYWNrZW5kcyddKQogICAgICAgICAgICBteURhdGFzZXRDb25maWcgPSB7J2RhdGFzZXQnOiBteURhdGFzZXRDb25maWd9CiAgICAgICAgICAgIGRhdGEgPSBEYXRhc2V0RXh0cmFjdG9yQ29uZmlnKCcxJywnJyxteURhdGFzZXRDb25maWcsJycpLmdldEV4dHJhY3RvcigpLmdldERhdGEoKQoKICAgICAgICBpZiBsZW4oZGF0YS5qc29uKCkpOgogICAgICAgICAgICByZXR1cm4gZGF0YS5qc29uKCkKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgZGVmIGdldFJlc3BvbnNlRnJvbUR5bmFtaWNQYXRoKHNlbGYsIHBhdGgpOgogICAgICAgICMgY29va2llX3BhcmFtcyA9IHNlbGYuZ2V0Q29va2llUGFyYW1zKCkKICAgICAgICBpZiBzZWxmLl9fY29va2llX3BhcmFtcyA9PSB7fToKICAgICAgICAgICAgc2VsZi5nZXRDb29raWVQYXJhbXMoKQoKICAgICAgICBoZWFkZXJzID0geydDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04JywKICAgICAgICAgICAgICAgICAgICdDb29raWUnOiAnSlNFU1NJT05JRD0nKyBzZWxmLl9fY29va2llX3BhcmFtc1snSlNFU1NJT05JRCddICsgJztYLUNTUkYtVE9LRU49JyArIHNlbGYuX19jb29raWVfcGFyYW1zWydYLUNTUkYtVE9LRU4nXSwKICAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0JlYXJlciAnICsgc2VsZi5fX2JlYXJlcl90b2tlbn0KCgogICAgICAgIHVybCA9IHNlbGYuX19kb21haW4gKyBwYXRoCiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQodXJsLCBoZWFkZXJzPWhlYWRlcnMpCgogICAgICAgICMgLCBwcm94aWVzPXByb3h5RGljdCkKICAgICAgICAjIENoZWNrIGZvciBIVFRQIGNvZGVzIG90aGVyIHRoYW4gMjAwCgogICAgICAgIHByaW50KCdyZXNwb25zZSBzdGF0dXMnLCByZXNwb25zZS5zdGF0dXNfY29kZSkKICAgICAgICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSAhPSAyMDA6CiAgICAgICAgICAgIGxvZ2dlci5pbmZvKCdTdGF0dXM6JywgcmVzcG9uc2Uuc3RhdHVzX2NvZGUsICdIZWFkZXJzOicsIHJlc3BvbnNlLmhlYWRlcnMsICdFcnJvciBSZXNwb25zZTonLAogICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5qc29uKCkpCiAgICAgICAgICAgIGV4aXQoKQoKICAgICAgICBpZiBsZW4ocmVzcG9uc2UuanNvbigpKToKICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKQoKICAgICAgICBzZWxmLmdldENvb2tpZVBhcmFtcygpCiAgICAgICAgc2VsZi5nZXRSZXNwb25zZUZyb21BcGkoY2lUeXBlLCBhcHBsaWNhdGlvbklkKQoKI015U1FMIGNsYXNzCgoKCkR5bmF0cmFjZURlbW9kaWN0ID0ganNvbi5sb2FkcyhkaWN0WydBcHBEeW5hbWljcyddKQp1cmw9RHluYXRyYWNlRGVtb2RpY3RbJ3VybCddCmRUeXBlID0gdXJsLnNwbGl0KCc6JylbMV0KcGggPSBOb25lCm15X2Nvbm4gPSBOb25lCgpkZWYgZ2V0Q29ubmVjdGlvbihkVHlwZSk6CiAgICBnbG9iYWwgcGgKICAgIGdsb2JhbCBteV9jb25uCiAgICBjbnggPSBOb25lCiAgICB1c2VybmFtZSA9IER5bmF0cmFjZURlbW9kaWN0Wyd1c2VyTmFtZSddCiAgICBwYXNzd29yZCA9IFV0aWxpdGllcy5kZWNyeXB0KER5bmF0cmFjZURlbW9kaWN0WydwYXNzd29yZCddLCBEeW5hdHJhY2VEZW1vZGljdFsnc2FsdCddKQogICAgaWYgZFR5cGUgPT0gJ215c3FsJzoKICAgICAgICBob3N0ID0gdXJscGFyc2UoRHluYXRyYWNlRGVtb2RpY3RbJ3VybCddWzU6XSkuaG9zdG5hbWUKICAgICAgICBwb3J0ID0gdXJscGFyc2UoRHluYXRyYWNlRGVtb2RpY3RbJ3VybCddWzU6XSkucG9ydAogICAgICAgIGRhdGFiYXNlID0gdXJscGFyc2UoRHluYXRyYWNlRGVtb2RpY3RbJ3VybCddWzU6XSkucGF0aC5yc3BsaXQoJy8nLCAxKVsxXQogICAgICAgIGNueCA9IG15c3FsLmNvbm5lY3Rvci5jb25uZWN0KHVzZXI9dXNlcm5hbWUsIHBhc3N3b3JkPXBhc3N3b3JkLCBob3N0PWhvc3QsIHBvcnQ9cG9ydCwgZGF0YWJhc2U9ZGF0YWJhc2UpCiAgICAgICAgcGggPSAnJXMnCiAgICAgICAgY254X3N0cmluZyA9ICdteXNxbCtweW15c3FsOi8vezB9OiVzQHsxfS97Mn0nICUgcXVvdGVfcGx1cyhzdHIocGFzc3dvcmQpKQogICAgICAgIHByaW50KCdwYXNzd29yZCBpcycsIHBhc3N3b3JkKQogICAgICAgIGNueF9zdHJpbmcgPSBjbnhfc3RyaW5nLmZvcm1hdCh1c2VybmFtZSxob3N0LGRhdGFiYXNlKQogICAgICAgIHByaW50KCdjbnhTdHJpbmcgaXMnICwgY254X3N0cmluZykKICAgICAgICBteV9jb25uID0gY3JlYXRlX2VuZ2luZShjbnhfc3RyaW5nKQogICAgICAgIAogICAgICAgIAogICAgZWxpZiBkVHlwZSA9PSAnc3Fsc2VydmVyJzoKICAgICAgICAjIHNlcnZlciA9IHVybC5zcGxpdCgnLy8nKVsxXS5zcGxpdCgnOycpWzBdLnJlcGxhY2UoJ1xTUUwnLCdTUUwnKQogICAgICAgIHNlcnZlciA9IHVybC5zcGxpdCgnLy8nKVsxXS5zcGxpdCgnOycpWzBdCiAgICAgICAgZGF0YWJhc2UgPSAodXJsLnNwbGl0KCc9JykpWzFdCiAgICAgICAgY29ubmVjdGlvblN0cmluZyA9ICdEUklWRVI9e09EQkMgRHJpdmVyIDE3IGZvciBTUUwgU0VSVkVSfTtTRVJWRVI9JytzZXJ2ZXIrJztEQVRBQkFTRT0nK2RhdGFiYXNlKyc7VUlEPScrdXNlcm5hbWUrJztQV0Q9JytwYXNzd29yZCsnOycKICAgICAgICBjbnggPSBweW9kYmMuY29ubmVjdChjb25uZWN0aW9uU3RyaW5nKQogICAgICAgIHBoID0gJz8nCiAgICAgICAgZW5nID0gJ21zc3FsK3B5bXNzcWw6Ly97MH06JXNAezF9L3syfScgJSBxdW90ZV9wbHVzKHN0cihwYXNzd29yZCkpCiAgICAgICAgY254X3N0cmluZyA9IGVuZy5mb3JtYXQodXNlcm5hbWUsc2VydmVyLGRhdGFiYXNlKQogICAgICAgIG15X2Nvbm4gPSBjcmVhdGVfZW5naW5lKGNueF9zdHJpbmcpCiAgICAgICAgICAgIAogICAgcmV0dXJuIGNueAoKCgpjbGFzcyBEYXRhQmFzZToKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5fX215Y3Vyc29yID0gTm9uZQogICAgICAgIHNlbGYuX19jbnggPSBOb25lCiAgICAgICAgc2VsZi5fX2RmX215X2Nvbm4gPSBOb25lCgogICAgIyBDcmVhdGluZyBEYXRhQmFzZSBDb25uZWN0aW9uCgogICAgZGVmIGNyZWF0aW5nQ29ubmVjdGlvbihzZWxmKToKICAgICAgICBjbnggPSBnZXRDb25uZWN0aW9uKGRUeXBlKQogICAgICAgIHNlbGYuX19jbnggPSBjbngKICAgICAgICBzZWxmLl9fbXljdXJzb3IgPSAgc2VsZi5fX2NueC5jdXJzb3IoKQogICAgICAgIHNlbGYuX19kZl9teV9jb25uID0gbXlfY29ubgogICAgICAgIAogICAgI0luc2VydGluZyBEYXRhIGludG8gRGF0YUJhc2UgVmlhIEluc2VydCBTdGF0ZW1lbnQKCiAgICBkZWYgaW5zZXJ0RGF0YShzZWxmLCB0YWJsZU5hbWUsIGNvbHVtbk5hbWVMaXN0LCBjb2x1bW5WYWx1ZUxpc3QpOgogICAgICAgIGNvbHVtbnMgPSAnJwogICAgICAgIHZhbHVlcyA9ICcnCiAgICAgICAgZm9yIGNvbHVtbk5hbWUgaW4gY29sdW1uTmFtZUxpc3Q6CiAgICAgICAgICAgIGlmIGNvbHVtbk5hbWUgIT0gY29sdW1uTmFtZUxpc3RbLTFdOgogICAgICAgICAgICAgICAgY29sdW1ucyA9IGNvbHVtbnMgKyBjb2x1bW5OYW1lICsgJywgJwogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgY29sdW1ucyA9IGNvbHVtbnMgKyBjb2x1bW5OYW1lCgogICAgICAgIGZvciBjb2x1bW5WYWx1ZSBpbiBjb2x1bW5WYWx1ZUxpc3Q6CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoY29sdW1uVmFsdWUsIGludCk6CiAgICAgICAgICAgICAgICB2YWx1ZXMgPSB2YWx1ZXMgKyBzdHIoY29sdW1uVmFsdWUpICsgJywgJwogICAgICAgICAgICBlbGlmIGlzaW5zdGFuY2UoY29sdW1uVmFsdWUsIHN0cik6CiAgICAgICAgICAgICAgICAjIHggPSAnezB9Jy5mb3JtYXQoY29sdW1uVmFsdWUpCiAgICAgICAgICAgICAgICB2YWx1ZXMgPSB2YWx1ZXMgKyAnXCd7MH1cJycuZm9ybWF0KGNvbHVtblZhbHVlKSsgJywgJwoKICAgICAgICB2YWx1ZXMgPSB2YWx1ZXNbOi0yXQogICAgICAgIHF1ZXJ5ID0gJ0lOU0VSVCBJTlRPIHswfSAoezF9KSBWQUxVRVMgKHsyfSknLmZvcm1hdCh0YWJsZU5hbWUsIGNvbHVtbnMsIHZhbHVlcykKICAgICAgICBwcmludChxdWVyeSkKICAgICAgICBzZWxmLl9fbXljdXJzb3IuZXhlY3V0ZShxdWVyeSkKICAgICAgICBzZWxmLl9fY254LmNvbW1pdCgpCgogICAgICAgICMgcmV0dXJuIHNlbGYuX19teWN1cnNvci5sYXN0cm93aWQKCiAgICAjIEluc2VydGluZyBEYXRhIGludG8gRGF0YUJhc2UgVmlhIERhdGFGcmFtZQoKICAgIGRlZiBpbnNlcnREYXRhZnJhbWVEYXRhKHNlbGYsIGRhdGEsIGxpc3Rfb2ZfY29sdW1uX25hbWUscHJvamVjdF9pZCwgdGFibGVfbmFtZSk6CiAgICAgICAgaWYgdGFibGVfbmFtZSBpbiBbJ2JjY19jaV9kYXNoYm9hcmRfbWFwcGluZycsICdjZm1feHdfY2lfbWFwcGluZyddOgogICAgICAgICAgICBkZiA9IHBkLkRhdGFGcmFtZShkYXRhLCBjb2x1bW5zPWxpc3Rfb2ZfY29sdW1uX25hbWUpCiAgICAgICAgICAgIGRmWydwcm9qZWN0X2lkJ10gPSBwcm9qZWN0X2lkCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZGYgPSBwZC5EYXRhRnJhbWUoZGF0YSwgY29sdW1ucz1saXN0X29mX2NvbHVtbl9uYW1lKQogICAgICAgICAgICBkZlsnb3JkZXJfdmFsdWUnXSA9IGxpc3QocmFuZ2UoMSwgbGVuKGRhdGEpKzEpKQogICAgICAgICAgICBkZlsncHJvamVjdF9pZCddID0gcHJvamVjdF9pZAogICAgICAgIHByaW50KGRmKQogICAgICAgIGRmLnRvX3NxbChjb249c2VsZi5fX2RmX215X2Nvbm4sIG5hbWU9dGFibGVfbmFtZSwgaWZfZXhpc3RzPSdhcHBlbmQnLCBpbmRleD1GYWxzZSkKCiAgICAgICAgcmV0dXJuIGRmCgogICAgI0ZldGNoaW5nIERhdGEgZnJvbSBEYXRhQmFzZQoKCgogICAgZGVmIGZldGNoRGF0YShzZWxmLCBjb2x1bW5zX25hbWVfbGlzdCwgdGFibGVfbmFtZSwgY29uZGl0aW9uX2RpY3QpOgogICAgICAgIGNvbHVtbk5hbWUgPSAnJwogICAgICAgIHdoZXJlQ29uZGl0aW9uID0gJycKCiAgICAgICAgZm9yIGluZGV4IGluIHJhbmdlKGxlbihjb2x1bW5zX25hbWVfbGlzdCkpOgogICAgICAgICAgICBpZiBpbmRleCAhPSBsZW4oY29sdW1uc19uYW1lX2xpc3QpLTE6CiAgICAgICAgICAgICAgICBjb2x1bW5OYW1lID0gY29sdW1uTmFtZSArIGNvbHVtbnNfbmFtZV9saXN0W2luZGV4XSArICcsICcKCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBjb2x1bW5OYW1lID0gY29sdW1uTmFtZSArIGNvbHVtbnNfbmFtZV9saXN0W2luZGV4XQoKICAgICAgICBmb3Iga2V5IGluIGNvbmRpdGlvbl9kaWN0OgogICAgICAgICAgICBpZiBpc2luc3RhbmNlKGNvbmRpdGlvbl9kaWN0W2tleV0sIGludCk6CiAgICAgICAgICAgICAgICB3aGVyZUNvbmRpdGlvbiA9IHdoZXJlQ29uZGl0aW9uICsga2V5ICsgJyA9ICcgKyBzdHIoY29uZGl0aW9uX2RpY3Rba2V5XSkgKyAnIGFuZCAnCiAgICAgICAgICAgIGVsaWYgaXNpbnN0YW5jZShjb25kaXRpb25fZGljdFtrZXldLCBzdHIpOgoKICAgICAgICAgICAgICAgIHdoZXJlQ29uZGl0aW9uID0gd2hlcmVDb25kaXRpb24gKyBrZXkgKyAnID0gXCcnICsgY29uZGl0aW9uX2RpY3Rba2V5XSArICdcJyBhbmQgJwoKICAgICAgICB3aGVyZSA9IHdoZXJlQ29uZGl0aW9uWzotNV0KICAgICAgICBxdWVyeSA9ICdTRUxFQ1QgezB9IEZST00gezF9IFdIRVJFIHsyfScuZm9ybWF0KGNvbHVtbk5hbWUsIHRhYmxlX25hbWUsIHdoZXJlKQogICAgICAgIHNlbGYuX19teWN1cnNvci5leGVjdXRlKHF1ZXJ5KQogICAgICAgIHJldHVybiBzZWxmLl9fbXljdXJzb3IuZmV0Y2hhbGwoKQoKICAgICMgRGVsZXRpbmcgRGF0YSBmcm9tIERhdGFCYXNlCgoKCiAgICBkZWYgZGVsZXRlX2RhdGEoc2VsZiwgcHJvamVjdF9pZCxjaV9uYW1lX2xpc3QpOgogICAgICAgIGZvciBjaV9uYW1lIGluIGNpX25hbWVfbGlzdDoKICAgICAgICAgICAgY2lfbmFtZSA9ICd7MCknLmZvcm1hdChjaV9uYW1lKQogICAgICAgICAgICBzcWwgPSAnREVMRVRFIEZST00gY2ZtX2NvbmZpZ3VyYXRpb25faXRlbSBXSEVSRSBwcm9qZWN0X2lkID0gezB9IGFuZCBjaV9uYW1lID0gezF9Jy5mb3JtYXQocHJvamVjdF9pZCxjaV9uYW1lKQoKICAgICAgICAgICAgIyBzZWxmLl9fbXljdXJzb3IuZXhlY3V0ZShzcWwpCiAgICAgICAgICAgICMgc2VsZi5fX2NueC5jb21taXQoKQogICAgIyBDbG9zaW5nIERhdGFCYXNlIENvbm5lY3Rpb24KCiAgICBkZWYgY2xvc2luZ19jb25uZWN0aW9uKHNlbGYpOgogICAgICAgIHNlbGYuX19teWN1cnNvci5jbG9zZSgpCiAgICAgICAgc2VsZi5fX2NueC5jbG9zZSgpCgoKCiNPcmdhbml6ZSBEYXRhIGNsYXNzCgoKCmNsYXNzIE9yZ2FuaXplRGF0YToKCiAgICBkZWYgX19pbml0X18oc2VsZiwgcHJvamVjdF9pZCwgZGFzaGJvYXJkX2lkLCBjb25maWd1cmF0aW9uX3R5cGVfbGlzdCxhcHBsaWNhdGlvbl9uYW1lLGR0eXBlKToKICAgICAgICBzZWxmLl9fcHJvamVjdF9pZCA9IHByb2plY3RfaWQKICAgICAgICBzZWxmLl9fbGlzdF9vZl9jb25maWd1cmF0aW9uX3R5cGUgPSBjb25maWd1cmF0aW9uX3R5cGVfbGlzdAogICAgICAgIHNlbGYuX191c2VyX2FwcGxpY2F0aW9uID0gYXBwbGljYXRpb25fbmFtZQogICAgICAgIHNlbGYuX19hcHBsaWNhdGlvbl9pZCA9IE5vbmUKICAgICAgICBzZWxmLl9fYXBwbGljYXRpb25fbmFtZSA9IE5vbmUKICAgICAgICBzZWxmLl9fdGllcl9pZF9saXN0ID0gW10KICAgICAgICBzZWxmLl9fdGllcl9uYW1lX2xpc3QgPSBbXQogICAgICAgIHNlbGYuX19iYWNrZW5kc19pZF9saXN0ID0gW10KICAgICAgICBzZWxmLl9fYmFja2VuZHNfbmFtZV9saXN0ID0gW10KICAgICAgICBzZWxmLl9fbm9kZV9pZF9saXN0ID0gW10KICAgICAgICBzZWxmLl9fbm9kZV9uYW1lX2xpc3QgPSBbXQogICAgICAgIHNlbGYuX19uZXdfbm9kZV9uYW1lX2xpc3QgPSBbXQogICAgICAgIHNlbGYuX19kZWxldGVkX25vZGVfaWRfbGlzdCA9IFtdCiAgICAgICAgc2VsZi5fX2xpc3Rfb2ZfdGllcl9ub2RlX3JlbGF0aW9uX2RpY3QgPSBbXQogICAgICAgIHNlbGYuX19kYXNoYm9hcmRfaWQgPSBkYXNoYm9hcmRfaWQKICAgICAgICBzZWxmLl9fZHR5cGU9IGR0eXBlCgogICAgZGVmIGdldF9saXN0X29mX2NvbmZpZ3VyYXRpb25fdHlwZShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5fX2xpc3Rfb2ZfY29uZmlndXJhdGlvbl90eXBlCgogICAgZGVmIGdldF9iYWNrZW5kc19pZF9saXN0KHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLl9fYmFja2VuZHNfaWRfbGlzdAoKICAgIGRlZiBnZXRfYmFja2VuZHNfbmFtZV9saXN0KHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLl9fYmFja2VuZHNfbmFtZV9saXN0CgogICAgZGVmIGdldF9wcm9qZWN0X2lkKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLl9fcHJvamVjdF9pZAoKICAgIGRlZiBzZXRfZGFzaGJvYXJkX2lkKHNlbGYsIGlkKToKICAgICAgICBzZWxmLl9fZGFzaGJvYXJkX2lkID0gaWQKCiAgICBkZWYgZ2V0X2R0eXBlKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLl9fZHR5cGUKCiAgICBkZWYgZ2V0X2Rhc2hib2FyZF9pZChzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5fX2Rhc2hib2FyZF9pZAoKICAgIGRlZiBnZXRfYXBwbGljYXRpb25faWQoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuX19hcHBsaWNhdGlvbl9pZAoKICAgIGRlZiBnZXRfYXBwbGljYXRpb25fbmFtZShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5fX2FwcGxpY2F0aW9uX25hbWUKCiAgICBkZWYgZ2V0X3RpZXJfaWRfbGlzdChzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5fX3RpZXJfaWRfbGlzdAoKICAgIGRlZiBnZXRfdGllcl9uYW1lX2xpc3Qoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuX190aWVyX25hbWVfbGlzdAoKICAgIGRlZiBnZXRfbm9kZV9pZF9saXN0KHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLl9fbm9kZV9pZF9saXN0CgogICAgZGVmIGdldF9ub2RlX25hbWVfbGlzdChzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5fX25vZGVfbmFtZV9saXN0CgogICAgZGVmIGdldF9uZXdfbm9kZV9uYW1lX2xpc3Qoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuX19uZXdfbm9kZV9uYW1lX2xpc3QKCiAgICBkZWYgZ2V0X2RlbGV0ZWRfbm9kZV9pZF9saXN0KHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLl9fZGVsZXRlZF9ub2RlX2lkX2xpc3QKCiAgICBkZWYgZ2V0X2xpc3Rfb2ZfdGllcl9ub2RlX3JlbGF0aW9uX2RpY3Qoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuX19saXN0X29mX3RpZXJfbm9kZV9yZWxhdGlvbl9kaWN0CgoKICAgIGRlZiBmZXRjaF9pZF9hbmRfbmFtZV9mcm9tX2FwcGxpY2F0aW9uKHNlbGYsIGRhdGEpOgogICAgICAgIGZvciBlbGVtZW50IGluIGRhdGE6CiAgICAgICAgICAgIGlmIGVsZW1lbnRbJ25hbWUnXSA9PSBzZWxmLl9fdXNlcl9hcHBsaWNhdGlvbjoKICAgICAgICAgICAgICAgIHNlbGYuX19hcHBsaWNhdGlvbl9pZCA9IGVsZW1lbnRbJ2lkJ10KICAgICAgICAgICAgICAgIHNlbGYuX19hcHBsaWNhdGlvbl9uYW1lID0gZWxlbWVudFsnbmFtZSddCiAgICAgICAgICAgICAgICBicmVhawoKCiAgICBkZWYgZmV0Y2hfaWRfYW5kX25hbWVfZnJvbV90aWVyKHNlbGYsIGRhdGEpOgogICAgICAgIGZvciBlbGVtZW50IGluIGRhdGE6CiAgICAgICAgICAgIHNlbGYuX190aWVyX2lkX2xpc3QuYXBwZW5kKGVsZW1lbnRbJ2lkJ10pCiAgICAgICAgICAgIHNlbGYuX190aWVyX25hbWVfbGlzdC5hcHBlbmQoZWxlbWVudFsnbmFtZSddKQoKCiAgICBkZWYgZmV0Y2hfaWRfYW5kX25hbWVfZnJvbV9iYWNrZW5kcyhzZWxmLCBkYXRhKToKICAgICAgICBmb3IgZWxlbWVudCBpbiBkYXRhOgogICAgICAgICAgICBzZWxmLl9fYmFja2VuZHNfaWRfbGlzdC5hcHBlbmQoZWxlbWVudFsnaWQnXSkKICAgICAgICAgICAgc2VsZi5fX2JhY2tlbmRzX25hbWVfbGlzdC5hcHBlbmQoZWxlbWVudFsnbmFtZSddKQoKCiAgICBkZWYgZmV0Y2hfaWRfYW5kX25hbWVfZnJvbV9ub2RlKHNlbGYsIGRhdGEpOgogICAgICAgIGZvciBlbGVtZW50IGluIGRhdGE6CiAgICAgICAgICAgIHNlbGYuX19ub2RlX2lkX2xpc3QuYXBwZW5kKGVsZW1lbnRbJ2lkJ10pCiAgICAgICAgICAgIHNlbGYuX19ub2RlX25hbWVfbGlzdC5hcHBlbmQoZWxlbWVudFsnbmFtZSddKQogICAgICAgICAgICBzZWxmLl9fbGlzdF9vZl90aWVyX25vZGVfcmVsYXRpb25fZGljdC5hcHBlbmQoeydub2RlJzogZWxlbWVudFsnbmFtZSddLCAndGllcic6IGVsZW1lbnRbJ3RpZXJOYW1lJ119KQogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICBkZWYgY29tcGFyZUFwaU5vZGVzVG9EYk5vZGVzKHNlbGYsIGFwaV9ub2RlX2xpc3QsIGRiX25vZGVfbGlzdCk6CiAgICAgICAgZm9yIG5hbWUgaW4gZGJfbm9kZV9saXN0OgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBpbmRleCA9IGFwaV9ub2RlX2xpc3QuaW5kZXgobmFtZVswXSkKICAgICAgICAgICAgICAgIGFwaV9ub2RlX2xpc3QucG9wKGluZGV4KQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBzZWxmLl9fZGVsZXRlZF9ub2RlX2lkX2xpc3QuYXBwZW5kKG5hbWVbMF0pCiAgICAgICAgc2VsZi5fX25ld19ub2RlX25hbWVfbGlzdCA9IGFwaV9ub2RlX2xpc3QKI2RiIGRldGFpbHMKCiMgdXNlcm5hbWUsIHBhc3N3b3JkLCBjbGllbnRJZCwgY2xpZW50U2VjcmV0LCBkb21haW4KCmFwcEQgPSBBcHBEeW5hbWljcyhkaWN0Wyd1c2VybmFtZSddLGRpY3RbJ3Bhc3N3b3JkJ10sZGljdFsnY2xpZW50SWQnXSxkaWN0WydjbGllbnRTZWNyZXQnXSwgZGljdFsnZG9tYWluJ10pCgoKCiNDcmVhdGluZyBEYXRhYmFzZSBDb25uZWN0aW9uCgpkYiA9IERhdGFCYXNlKCkKCgoKZGIuY3JlYXRpbmdDb25uZWN0aW9uKCkKCgpkZWYgZ2V0UHJvamVjdElkKCk6CiAgICBjbnggPSBnZXRDb25uZWN0aW9uKGRUeXBlKQogICAgbXljdXJzb3IgPSBjbnguY3Vyc29yKCkKICAgIHEgPSAnc2VsZWN0IGlkIGZyb20gdXNtX3Byb2plY3Qgd2hlcmUgbmFtZSA9IFwnJytkaWN0Wydwcm9qZWN0J10rJ1wnJwogICAgbXljdXJzb3IuZXhlY3V0ZShxKQogICAgbXlyZXN1bHQgPSBteWN1cnNvci5mZXRjaGFsbCgpCiAgICBjbnguY29tbWl0KCkKICAgIG15Y3Vyc29yLmNsb3NlKCkKICAgIGNueC5jbG9zZSgpCiAgICByZXR1cm4gbXlyZXN1bHRbMF1bMF0KCgoKcHJvamVjdF9pZF9zZXQgPSBzdHIoZ2V0UHJvamVjdElkKCkpCgoKCiMgcHJvamVjdF9pZF9zZXQgPSBkaWN0Wydwcm9qZWN0X2lkJ10KCmZhaWx1cmVfZGFzaGJvYXJkX2lkID0gZGljdFsnZmFpbHVyZV9kYXNoYm9hcmRfaWQnXQphcHBsaWNhdGlvbk5hbWUgPSBkaWN0WydhcHBsaWNhdGlvbk5hbWUnXQoKCm9kID0gT3JnYW5pemVEYXRhKHByb2plY3RfaWRfc2V0LCBmYWlsdXJlX2Rhc2hib2FyZF9pZCwgWydBcHBsaWNhdGlvbicsICdUaWVyJywgJ05vZGUnLCAnQmFja2VuZCddLCBhcHBsaWNhdGlvbk5hbWUsJ0FwcEQnKQoKCiMgRmV0Y2hpbmcgQ29uZmlndXJhdGlvbiBUeXBlcwoKCgpjaV90eXBlX2xpc3RfZnJvbV9kYiA9IGRiLmZldGNoRGF0YShbJ2lkJywgJ2N0eXBlJ10sICdjZm1fY29uZmlndXJhdGlvbl9pdGVtX3R5cGUnLCB7J3Byb2plY3RfaWQnOiBvZC5nZXRfcHJvamVjdF9pZCgpLCdkYXNoYm9hcmRfaWQnOiBvZC5nZXRfZGFzaGJvYXJkX2lkKCl9KQoKcHJpbnQoJ2NpX3R5cGVfbGlzdF9mcm9tX2RiOicsIGNpX3R5cGVfbGlzdF9mcm9tX2RiKQoKCgoKCiMgSW5zZXJ0aW5nIEFwcGxpY2F0aW9uIERhdGEgaW50byBDb25maWd1cmF0aW9uIEl0ZW0KCgoKIyBwcmludCgnQXBwbGljYXRpb24gZGF0YSBpbnRvIGNvbmZpZ3VyYXRpb25faXRlbSB0YWJsZSBpbnNlcnRpb24gc3RhcnRlZCcpCgpvZC5mZXRjaF9pZF9hbmRfbmFtZV9mcm9tX2FwcGxpY2F0aW9uKGFwcEQuZ2V0UmVzcG9uc2VGcm9tQXBpKCdhcHBsaWNhdGlvbicpKQoKb2QuZmV0Y2hfaWRfYW5kX25hbWVfZnJvbV90aWVyKGFwcEQuZ2V0UmVzcG9uc2VGcm9tQXBpKCd0aWVyJywgb2QuZ2V0X2FwcGxpY2F0aW9uX2lkKCkpKQoKCmZvciBpZCwgY3R5cGUgaW4gY2lfdHlwZV9saXN0X2Zyb21fZGI6CiAgICBpZiBjdHlwZSA9PSAnQmFja2VuZCc6CgogICAgICAgIHByaW50KCdCYWNrZW5kcyBkYXRhIGludG8gY29uZmlndXJhdGlvbl9pdGVtIHRhYmxlIGluc2VydGlvbiBzdGFydGVkJykKCiAgICAgICAgb2QuZmV0Y2hfaWRfYW5kX25hbWVfZnJvbV9iYWNrZW5kcyhhcHBELmdldFJlc3BvbnNlRnJvbUFwaSgnYmFja2VuZHMnLCBvZC5nZXRfYXBwbGljYXRpb25faWQoKSkpCiAgICAgICAgY291bnQgPSAxCiAgICAgICAgZGF0YSA9IFtdCgogICAgICAgIGZvciBuYW1lIGluIG9kLmdldF9iYWNrZW5kc19uYW1lX2xpc3QoKToKCiAgICAgICAgICAgICMgZGIuaW5zZXJ0RGF0YSgnY2ZtX2NvbmZpZ3VyYXRpb25faXRlbScsIFsnY2lfbmFtZScsICdjdHlwZScsICdvcmRlcl92YWx1ZScsICdkdHlwZScsICdwcm9qZWN0X2lkJ10sIFtuYW1lLCBpZCwgY291bnQsIG9kLmdldF9kdHlwZSgpLCBvZC5nZXRfcHJvamVjdF9pZCgpXSkKCiAgICAgICAgICAgIGNvdW50ICs9IDEKCiAgICAgICAgcHJpbnQoJ0JhY2tlbmRzIGRhdGEgaW50byBjb25maWd1cmF0aW9uX2l0ZW0gdGFibGUgaW5zZXJ0aW9uIGNvbXBsZXRlZCcpCgoKCgoKIyBJbnNlcnRpbmcgY29uZmlndXJhdGlvbiBpdGVtcyBpbnRvIGJjY19jaV9kYXNoYm9hcmRfbWFwcGluZyB0YWJsZQoKCgpwcmludCgnSW5zZXJ0aW9uIGNvbmZpZ3VyYXRpb24gaXRlbXMgaW50byBiY2NfY2lfZGFzaGJvYXJkX21hcHBpbmcgdGFibGUgc3RhcnRlZCcpCgoKCmNpX2xpc3RfZnJvbV9kYiA9IGRiLmZldGNoRGF0YShbJ2lkJywgJ2N0eXBlJ10sICdjZm1fY29uZmlndXJhdGlvbl9pdGVtJywgeydwcm9qZWN0X2lkJzogb2QuZ2V0X3Byb2plY3RfaWQoKSwgJ2R0eXBlJzogb2QuZ2V0X2R0eXBlKCl9KQoKZGF0YSA9IFtdCgpjdHlwZV9saXN0ID0gW10KCgpmb3IgZWxlbWVudCBpbiBjaV90eXBlX2xpc3RfZnJvbV9kYjoKCiAgICBpZiBlbGVtZW50WzFdIGluICgnQmFja2VuZCcpOgoKICAgICAgICBjdHlwZV9saXN0LmFwcGVuZChlbGVtZW50WzBdKQoKCgpmb3IgaWQsIGN0eXBlIGluIGNpX2xpc3RfZnJvbV9kYjoKCiAgICBpZiBjdHlwZSBpbiBjdHlwZV9saXN0OgoKICAgICAgICBkYXRhLmFwcGVuZChbaWQsIG9kLmdldF9kYXNoYm9hcmRfaWQoKV0pCgoKCmRiLmluc2VydERhdGFmcmFtZURhdGEoZGF0YSwgWydjaV9pZCcsICdkYXNoYm9hcmRfaWQnXSwgb2QuZ2V0X3Byb2plY3RfaWQoKSwgJ2JjY19jaV9kYXNoYm9hcmRfbWFwcGluZycpCgpwcmludCgnSW5zZXJ0aW9uIGNvbmZpZ3VyYXRpb24gaXRlbXMgaW50byBiY2NfY2lfZGFzaGJvYXJkX21hcHBpbmcgdGFibGUgY29tcGxldGVkJykKCiNDcmVhdGluZyByZWxhdGlvbnMgYmV0d2VlbiBBcHBsaWNhdGlvbiBhbmQgVGllcgoKCgojIHByaW50KCdDcmVhdGluZyBSZWxhdGlvbiBiZXR3ZWVuIEFwcGxpY2F0aW9uIGFuZCBUaWVyIHN0YXJ0ZWQnKQoKCgojIGZvciBpZCwgbmFtZSBpbiBjaV90eXBlX2xpc3RfZnJvbV9kYjoKCiMgICAgIGlmIG5hbWUgPT0gJ0FwcGxpY2F0aW9uJzoKCgoKIyAgICAgICAgIGFwcGxpY2F0aW9uX2lkX25hbWVfbGlzdCA9IGRiLmZldGNoRGF0YShbJ2lkJywgJ2NpX25hbWUnXSwgJ2NmbV9jb25maWd1cmF0aW9uX2l0ZW0nLCB7J3Byb2plY3RfaWQnOiBvZC5nZXRfcHJvamVjdF9pZCgpLCAnY3R5cGUnOiBpZCwgJ2R0eXBlJzogb2QuZ2V0X2R0eXBlKCl9KQoKIyAgICAgZWxpZiBuYW1lID09ICdUaWVyJzoKCgoKIyAgICAgICAgIHRpZXJfaWRfbmFtZV9saXN0ID0gZGIuZmV0Y2hEYXRhKFsnaWQnLCAnY2lfbmFtZSddLCAnY2ZtX2NvbmZpZ3VyYXRpb25faXRlbScsIHsncHJvamVjdF9pZCc6IG9kLmdldF9wcm9qZWN0X2lkKCksICdjdHlwZSc6IGlkLCAnZHR5cGUnOiBvZC5nZXRfZHR5cGUoKX0pCgoKCiMgZGF0YSA9IFtdCgoKCiMgZm9yIGlkLCBuYW1lIGluIHRpZXJfaWRfbmFtZV9saXN0OgoKCgojICAgICBkYXRhLmFwcGVuZChbYXBwbGljYXRpb25faWRfbmFtZV9saXN0WzBdWzBdLCBpZCwgYXBwbGljYXRpb25faWRfbmFtZV9saXN0WzBdWzFdLCBuYW1lLCAnY29tcG9zZWRPZiddKQoKIyBkYi5pbnNlcnREYXRhZnJhbWVEYXRhKGRhdGEsIFsnY2lfaXRlbTEnLCAnY2lfaXRlbTInLCAnY2lfaXRlbTFfbmFtZScsICdjaV9pdGVtMl9uYW1lJywgJ3JlbGF0aW9uX3R5cGUnXSwKCgoKIyAgICAgICAgICAgICAgICAgICAgICAgb2QuZ2V0X3Byb2plY3RfaWQoKSwgJ2NmbV94d19jaV9tYXBwaW5nJykKCgoKIyBwcmludCgnQ3JlYXRpbmcgUmVsYXRpb24gYmV0d2VlbiBBcHBsaWNhdGlvbiBhbmQgVGllciBjb21wbGV0ZWQnKQoKCgojIENyZWF0aW5nIHJlbGF0aW9ucyBiZXR3ZWVuIFRpZXIgYW5kIFRpZXIKCgoKcHJpbnQoJ0NyZWF0aW5nIFJlbGF0aW9uIGJldHdlZW4gVGllciBhbmQgVGllciBzdGFydGVkJykKCgoKcGF0aCA9ICcvY29udHJvbGxlci9yZXN0dWkvYXBwbGljYXRpb25GbG93TWFwVWlTZXJ2aWNlL2FwcGxpY2F0aW9uL3swfT90aW1lLXJhbmdlPWxhc3RfMV9ob3VyLkJFRk9SRV9OT1cuLTEuLTEuNjAmbWFwSWQ9LTEmYmFzZWxpbmVJZD0tMSZmb3JjZUZldGNoPWZhbHNlJy5mb3JtYXQob2QuZ2V0X2FwcGxpY2F0aW9uX2lkKCkpCgoKCgoKcmVsYXRpb25fcmVzcG9uc2UgPSBhcHBELmdldFJlc3BvbnNlRnJvbUR5bmFtaWNQYXRoKHBhdGgpCgpwcmludChyZWxhdGlvbl9yZXNwb25zZSkKCgoKaWYgbGVuKHJlbGF0aW9uX3Jlc3BvbnNlWydlZGdlcyddKToKICAgIHRpZXJfaWRfbGlzdCA9IG9kLmdldF90aWVyX2lkX2xpc3QoKQogICAgdGllcl9uYW1lX2xpc3QgPSBvZC5nZXRfdGllcl9uYW1lX2xpc3QoKQogICAgYmFja2VuZF9pZF9saXN0ID0gb2QuZ2V0X2JhY2tlbmRzX2lkX2xpc3QoKQogICAgYmFja2VuZF9uYW1lX2xpc3QgPSBvZC5nZXRfYmFja2VuZHNfbmFtZV9saXN0KCkKCiAgICBmb3IgaWQsIG5hbWUgaW4gY2lfdHlwZV9saXN0X2Zyb21fZGI6CiAgICAgICAgaWYgbmFtZSA9PSAnQXBwbGljYXRpb24nOgogICAgICAgICAgICBhcHBsaWNhdGlvbl9pZF9uYW1lX2xpc3QgPSBkYi5mZXRjaERhdGEoWydpZCcsICdjaV9uYW1lJ10sICdjZm1fY29uZmlndXJhdGlvbl9pdGVtJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsncHJvamVjdF9pZCc6IG9kLmdldF9wcm9qZWN0X2lkKCksICdjdHlwZSc6IGlkLCAnZHR5cGUnOiBvZC5nZXRfZHR5cGUoKX0pCiAgICAgICAgZWxpZiBuYW1lID09ICdUaWVyJzoKICAgICAgICAgICAgdGllcl9pZF9uYW1lX2xpc3QgPSBkYi5mZXRjaERhdGEoWydpZCcsICdjaV9uYW1lJ10sICdjZm1fY29uZmlndXJhdGlvbl9pdGVtJywgeydwcm9qZWN0X2lkJzogb2QuZ2V0X3Byb2plY3RfaWQoKSwgJ2N0eXBlJzogaWQsICdkdHlwZSc6IG9kLmdldF9kdHlwZSgpfSkKCgoKICAgIGZvciBlbGVtZW50IGluIHJlbGF0aW9uX3Jlc3BvbnNlWydlZGdlcyddOgoKICAgICAgICBiYWNrZW5kX2ZsYWcgPSBGYWxzZQoKICAgICAgICBpZiAgZWxlbWVudFsnc291cmNlTm9kZURlZmluaXRpb24nXVsnZW50aXR5VHlwZSddICE9ICdCQUNLRU5EJyA6CiAgICAgICAgICAgIHRpZXIxX2luZGV4ID0gdGllcl9pZF9saXN0LmluZGV4KGVsZW1lbnRbJ3NvdXJjZU5vZGVEZWZpbml0aW9uJ11bJ2VudGl0eUlkJ10pCiAgICAgICAgICAgIHNvdXJjZSA9IHRpZXJfbmFtZV9saXN0W3RpZXIxX2luZGV4XQoKCiAgICAgICAgZWxpZiBlbGVtZW50Wydzb3VyY2VOb2RlRGVmaW5pdGlvbiddWydlbnRpdHlUeXBlJ10gPT0gJ0JBQ0tFTkQnIDoKICAgICAgICAgICAgdGllcjFfaW5kZXggPSBiYWNrZW5kX2lkX2xpc3QuaW5kZXgoZWxlbWVudFsnc291cmNlTm9kZURlZmluaXRpb24nXVsnZW50aXR5SWQnXSkKICAgICAgICAgICAgc291cmNlID0gYmFja2VuZF9uYW1lX2xpc3RbdGllcjFfaW5kZXhdCiAgICAgICAgICAgIGJhY2tlbmRfZmxhZyA9IFRydWUKICAgICAgICAgICAgCiAgICAgICAgaWYgZWxlbWVudFsndGFyZ2V0Tm9kZURlZmluaXRpb24nXVsnZW50aXR5VHlwZSddICE9ICdCQUNLRU5EJyA6CiAgICAgICAgICAgIHRpZXIyX2luZGV4ID0gdGllcl9pZF9saXN0LmluZGV4KGVsZW1lbnRbJ3RhcmdldE5vZGVEZWZpbml0aW9uJ11bJ2VudGl0eUlkJ10pCiAgICAgICAgICAgIHRhcmdldCA9IHRpZXJfbmFtZV9saXN0W3RpZXIyX2luZGV4XQoKICAgICAgICBlbGlmIGVsZW1lbnRbJ3RhcmdldE5vZGVEZWZpbml0aW9uJ11bJ2VudGl0eVR5cGUnXSA9PSAnQkFDS0VORCc6CiAgICAgICAgICAgIHRpZXIyX2luZGV4ID0gYmFja2VuZF9pZF9saXN0LmluZGV4KGVsZW1lbnRbJ3RhcmdldE5vZGVEZWZpbml0aW9uJ11bJ2VudGl0eUlkJ10pCiAgICAgICAgICAgIHRhcmdldCA9IGJhY2tlbmRfbmFtZV9saXN0W3RpZXIyX2luZGV4XQogICAgICAgICAgICBiYWNrZW5kX2ZsYWcgPSBUcnVlCgogICAgICAgIHNvdXJjZV90aWVyID0gZGIuZmV0Y2hEYXRhKFsnaWQnLCAnY2lfbmFtZSddLCAnY2ZtX2NvbmZpZ3VyYXRpb25faXRlbScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsncHJvamVjdF9pZCc6IG9kLmdldF9wcm9qZWN0X2lkKCksICdjaV9uYW1lJzogc291cmNlLCAnZHR5cGUnOiBvZC5nZXRfZHR5cGUoKX0pCgogICAgICAgIHRhcmdldF90aWVyID0gZGIuZmV0Y2hEYXRhKFsnaWQnLCAnY2lfbmFtZSddLCAnY2ZtX2NvbmZpZ3VyYXRpb25faXRlbScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsncHJvamVjdF9pZCc6IG9kLmdldF9wcm9qZWN0X2lkKCksICdjaV9uYW1lJzogdGFyZ2V0LCAnZHR5cGUnOiBvZC5nZXRfZHR5cGUoKX0pCgogICAgICAgIGlmIGJhY2tlbmRfZmxhZzoKICAgICAgICAgICAgZGIuaW5zZXJ0RGF0YSgnY2ZtX3h3X2NpX21hcHBpbmcnLAogICAgICAgICAgICAgICAgICAgICAgICAgIFsnY2lfaXRlbTEnLCAnY2lfaXRlbTInLCAnY2lfaXRlbTFfbmFtZScsICdjaV9pdGVtMl9uYW1lJywgJ3JlbGF0aW9uX3R5cGUnLCAncHJvamVjdF9pZCddLAogICAgICAgICAgICAgICAgICAgICAgICAgIFtzb3VyY2VfdGllclswXVswXSwgdGFyZ2V0X3RpZXJbMF1bMF0sIHNvdXJjZV90aWVyWzBdWzFdLCB0YXJnZXRfdGllclswXVsxXSwgJ2RlcGxveWVkT24nLAogICAgICAgICAgICAgICAgICAgICAgICAgIG9kLmdldF9wcm9qZWN0X2lkKCldKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGRiLmluc2VydERhdGEoJ2NmbV94d19jaV9tYXBwaW5nJywgWydjaV9pdGVtMScsICdjaV9pdGVtMicsICdjaV9pdGVtMV9uYW1lJywgJ2NpX2l0ZW0yX25hbWUnLCAncmVsYXRpb25fdHlwZScsICdwcm9qZWN0X2lkJ10sCiAgICAgICAgICAgICAgICAgICAgICBbc291cmNlX3RpZXJbMF1bMF0sIHRhcmdldF90aWVyWzBdWzBdLCBzb3VyY2VfdGllclswXVsxXSwgdGFyZ2V0X3RpZXJbMF1bMV0sICdpc0NsaWVudE9mJywgb2QuZ2V0X3Byb2plY3RfaWQoKV0pCgogICAgICAgICAgICAgICAgICAgIAogICAgcHJpbnQoJ0NyZWF0aW5nIFJlbGF0aW9uIGJldHdlZW4gVGllciBhbmQgVGllciBjb21wbGV0ZWQnKQplbHNlOgogICAgcHJpbnQoJ05vIFRpZXIgdG8gVGllciByZWxhdGlvbiBleGlzdCcpCgoKCgoKIyBDbG9zaW5nIHRoZSBEYXRCYXNlIENvbm5lY3Rpb24KCgoKZGIuY2xvc2luZ19jb25uZWN0aW9uKCkKCnByaW50KCdDb21wbGV0ZWQnKQoKCgoKCgoKCgoKCgoKCgoKCgoK","leo1311"
"APMMNTRN69364","APMMNTRN69364_leo1311.py","","leo1311"
"APMCSTSR49023","APMCSTSR49023_leo1311.py","ZnJvbSBweXNwYXJrLnNxbCBpbXBvcnQgU3BhcmtTZXNzaW9uCmltcG9ydCByZXF1ZXN0cwppbXBvcnQgc3lzCmltcG9ydCBteXNxbC5jb25uZWN0b3IKaW1wb3J0IGpzb24KZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHF1b3RlX3BsdXMsIHVybHBhcnNlCmZyb20gbGVhcC51dGlscy5VdGlsaXRpZXMgaW1wb3J0IFV0aWxpdGllcwppbXBvcnQgZGF0ZXRpbWUKaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyCmZyb20gcmVxdWVzdHMuYXV0aCBpbXBvcnQgSFRUUEJhc2ljQXV0aAppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IHBhbmRhcyBhcyBwZAppbXBvcnQgb3MKaW1wb3J0IHRpbWUKaW1wb3J0IHB5b2RiYwpmcm9tIGxlYXAuY29uZmlnLkV4dHJhY3RvckNvbmZpZ3MuRGF0YXNldEV4dHJhY3RvckNvbmZpZyBpbXBvcnQgRGF0YXNldEV4dHJhY3RvckNvbmZpZwoKCiMgb3MuZW52aXJvblsnTk9fUFJPWFknXT0nbGVhcC1wb3Yuc2Fhcy5hcHBkeW5hbWljcy5jb20nCgpsb2dnZXIuYmFzaWNDb25maWcobGV2ZWw9bG9nZ2VyLklORk8sIGZvcm1hdD0nJShhc2N0aW1lKXMgSU5GTyAlKG1lc3NhZ2UpcycsIGRhdGVmbXQ9JyV5LyVtLyVkICVIOiVNOiVTJykKYXJndW1lbnRzID0gc3lzLmFyZ3YKCgoKZGljdCA9IHt9Cgpmb3IgYXJnIGluIGFyZ3VtZW50czoKICAgIHRyeToKICAgICAgICBkaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICgnOicpLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQoKICAgIGV4Y2VwdDoKICAgICAgICBhID0gJ2Vycm9yJwoKCgpEeW5hdHJhY2VEZW1vZGljdCA9IGpzb24ubG9hZHMoZGljdFsnQXBwRHluYW1pY3MnXSkKCgp1cmw9RHluYXRyYWNlRGVtb2RpY3RbJ3VybCddCgpkVHlwZSA9IHVybC5zcGxpdCgnOicpWzFdCgpwaCA9IE5vbmUKCm15X2Nvbm4gPSBOb25lCgpkZWYgZ2V0Q29ubmVjdGlvbihkVHlwZSk6CiAgICBnbG9iYWwgcGgKICAgIGdsb2JhbCBteV9jb25uCiAgICBjbnggPSBOb25lCiAgICB1c2VybmFtZSA9IER5bmF0cmFjZURlbW9kaWN0Wyd1c2VyTmFtZSddCiAgICBwYXNzd29yZCA9IFV0aWxpdGllcy5kZWNyeXB0KER5bmF0cmFjZURlbW9kaWN0WydwYXNzd29yZCddLCBEeW5hdHJhY2VEZW1vZGljdFsnc2FsdCddKQogICAgaWYgZFR5cGUgPT0gJ215c3FsJzoKICAgICAgICBob3N0ID0gdXJscGFyc2UoRHluYXRyYWNlRGVtb2RpY3RbJ3VybCddWzU6XSkuaG9zdG5hbWUKICAgICAgICBwb3J0ID0gdXJscGFyc2UoRHluYXRyYWNlRGVtb2RpY3RbJ3VybCddWzU6XSkucG9ydAogICAgICAgIGRhdGFiYXNlID0gdXJscGFyc2UoRHluYXRyYWNlRGVtb2RpY3RbJ3VybCddWzU6XSkucGF0aC5yc3BsaXQoJy8nLCAxKVsxXQogICAgICAgIGNueCA9IG15c3FsLmNvbm5lY3Rvci5jb25uZWN0KHVzZXI9dXNlcm5hbWUsIHBhc3N3b3JkPXBhc3N3b3JkLCBob3N0PWhvc3QsIHBvcnQ9cG9ydCwgZGF0YWJhc2U9ZGF0YWJhc2UpCiAgICAgICAgcGggPSAnJXMnCiAgICAgICAgIyBjbnhfc3RyaW5nID0gJ215c3FsK3B5bXlzcWw6Ly97MH06JXNAezF9L3syfScgJSBxdW90ZV9wbHVzKHN0cihwYXNzd29yZCkpCiAgICAgICAgIyBwcmludCgncGFzc3dvcmQgaXMnLCBwYXNzd29yZCkKICAgICAgICAjIGNueF9zdHJpbmcgPSBjbnhfc3RyaW5nLmZvcm1hdCh1c2VybmFtZSxob3N0LGRhdGFiYXNlKQogICAgICAgICMgcHJpbnQoJ2NueFN0cmluZyBpcycgLCBjbnhfc3RyaW5nKQogICAgICAgICMgbXlfY29ubiA9IGNyZWF0ZV9lbmdpbmUoY254X3N0cmluZykKICAgICAgICAKICAgICAgICAKICAgIGVsaWYgZFR5cGUgPT0gJ3NxbHNlcnZlcic6CiAgICAgICAgIyBzZXJ2ZXIgPSB1cmwuc3BsaXQoJy8vJylbMV0uc3BsaXQoJzsnKVswXS5yZXBsYWNlKCdcU1FMJywnU1FMJykKICAgICAgICBzZXJ2ZXIgPSB1cmwuc3BsaXQoJy8vJylbMV0uc3BsaXQoJzsnKVswXQogICAgICAgIGRhdGFiYXNlID0gKHVybC5zcGxpdCgnPScpKVsxXQogICAgICAgIGNvbm5lY3Rpb25TdHJpbmcgPSAnRFJJVkVSPXtPREJDIERyaXZlciAxNyBmb3IgU1FMIFNFUlZFUn07U0VSVkVSPScrc2VydmVyKyc7REFUQUJBU0U9JytkYXRhYmFzZSsnO1VJRD0nK3VzZXJuYW1lKyc7UFdEPScrcGFzc3dvcmQrJzsnCiAgICAgICAgY254ID0gcHlvZGJjLmNvbm5lY3QoY29ubmVjdGlvblN0cmluZykKICAgICAgICBwaCA9ICc/JwogICAgICAgIGVuZyA9ICdtc3NxbCtweW1zc3FsOi8vezB9OiVzQHsxfS97Mn0nICUgcXVvdGVfcGx1cyhzdHIocGFzc3dvcmQpKQogICAgICAgICMgY254X3N0cmluZyA9IGVuZy5mb3JtYXQodXNlcm5hbWUsc2VydmVyLGRhdGFiYXNlKQogICAgICAgICMgbXlfY29ubiA9IGNyZWF0ZV9lbmdpbmUoY254X3N0cmluZykKICAgICAgICAjIG15X2Nvbm4gPSBjcmVhdGVfZW5naW5lKGVuZykKICAgICAgICAgICAgCiAgICByZXR1cm4gY254CiAgICAKZGVmIGdldFByb2plY3RJZCgpOgogICAgY254ID0gZ2V0Q29ubmVjdGlvbihkVHlwZSkKICAgIG15Y3Vyc29yID0gY254LmN1cnNvcigpCiAgICBxID0gJ3NlbGVjdCBpZCBmcm9tIHVzbV9wcm9qZWN0IHdoZXJlIG5hbWUgPSBcJycrZGljdFsncHJvamVjdCddKydcJycKICAgIG15Y3Vyc29yLmV4ZWN1dGUocSkKICAgIG15cmVzdWx0ID0gbXljdXJzb3IuZmV0Y2hhbGwoKQogICAgY254LmNvbW1pdCgpCiAgICBteWN1cnNvci5jbG9zZSgpCiAgICBjbnguY2xvc2UoKQogICAgcmV0dXJuIG15cmVzdWx0WzBdWzBdCgoKCiMgc2V0X3Byb2plY3RfaWQgPSAnMicKCnRhYmxlbmFtZSA9ICdzcmVfY2lfbWV0YWRhdGEnCnByb2plY3RfaWQgPSBzdHIoZ2V0UHJvamVjdElkKCkpCgoKCm15RGF0YXNldENvbmZpZyA9IGpzb24ubG9hZHMoZGljdFsnYXBwbGljYXRpb24nXSkKbXlEYXRhc2V0Q29uZmlnID0geydkYXRhc2V0JzogbXlEYXRhc2V0Q29uZmlnfQpkYXRhID0gRGF0YXNldEV4dHJhY3RvckNvbmZpZygnMScsJycsbXlEYXRhc2V0Q29uZmlnLCcnKS5nZXRFeHRyYWN0b3IoKS5nZXREYXRhKCkKCmFwcGxpY2F0aW9uRGF0YSA9IGRhdGEuanNvbigpCgpyb3cgPSB7fQoKanNvblN0cmluZ0FycmF5ID0gW10KCmFwcGxpY2F0aW9uTmFtZSA9IGRpY3RbJ2FwcGxpY2F0aW9uTmFtZSddCgpmb3IgaSBpbiBhcHBsaWNhdGlvbkRhdGE6CiAgICByb3cgPSBbXQogICAgaWYgKGlbJ25hbWUnXSA9PSBhcHBsaWNhdGlvbk5hbWUpOgogICAgICAgIHJvdy5hcHBlbmQoaVsnaWQnXSkKICAgICAgICByb3cuYXBwZW5kKGlbJ25hbWUnXSkKICAgICAgICByb3cuYXBwZW5kKCdBcHBsaWNhdGlvbicpCiAgICAgICAgcm93LmFwcGVuZCgnQXBwRCcpCiAgICAgICAganNvblN0cmluZ0FycmF5LmFwcGVuZChyb3cpCgoKbXlEYXRhc2V0Q29uZmlnID0ganNvbi5sb2FkcyhkaWN0WydzZXJ2aWNlcyddKQpteURhdGFzZXRDb25maWcgPSB7J2RhdGFzZXQnOiBteURhdGFzZXRDb25maWd9CmRhdGEgPSBEYXRhc2V0RXh0cmFjdG9yQ29uZmlnKCcxJywnJyxteURhdGFzZXRDb25maWcsJycpLmdldEV4dHJhY3RvcigpLmdldERhdGEoKQp0aWVyRGF0YSA9IGRhdGEuanNvbigpCgoKZm9yIGkgaW4gdGllckRhdGE6CiAgICByb3cgPSBbXQogICAgcm93LmFwcGVuZChpWydpZCddKQogICAgcm93LmFwcGVuZChpWyduYW1lJ10pCiAgICByb3cuYXBwZW5kKCdTZXJ2aWNlJykKICAgIHJvdy5hcHBlbmQoJ0FwcEQnKQogICAganNvblN0cmluZ0FycmF5LmFwcGVuZChyb3cpCiAgICAKICAgIApjbnggPSBnZXRDb25uZWN0aW9uKGRUeXBlKQpteWN1cnNvciA9IGNueC5jdXJzb3IoKQoKICAgIApmb3IgaSBpbiBqc29uU3RyaW5nQXJyYXk6CgogICAgdHJ5OgogICAgICAgIHAgPSBwaCArICcsJwogICAgICAgIHAgPSBwKjMKICAgICAgICBxdWVyeT0gJ0luc2VydCBpbnRvIHNyZV9jaV9tZXRhZGF0YSAoY2lfaWQsIGNpX25hbWUsIGNpX3R5cGUsIGFwbV90eXBlLCBwcm9qZWN0X2lkKSB2YWx1ZXMgKCcrcCtwaCsnLCcrcHJvamVjdF9pZCsnKScKICAgICAgICBwcmludCgncXVlcnknLHF1ZXJ5KQogICAgICAgIG15Y3Vyc29yLmV4ZWN1dGUocXVlcnksaSkKICAgICAgICBjbnguY29tbWl0KCkKICAgIGV4Y2VwdDoKICAgICAgICBwcmludCgndmFsdWUgbm90IGluc2VydGVkJyxpKQogICAgICAgIHBhc3MKICAgIAoKbXlEYXRhc2V0Q29uZmlnID0ganNvbi5sb2FkcyhkaWN0Wydob3N0cyddKQpteURhdGFzZXRDb25maWcgPSB7J2RhdGFzZXQnOiBteURhdGFzZXRDb25maWd9CmRhdGEgPSBEYXRhc2V0RXh0cmFjdG9yQ29uZmlnKCcxJywnJyxteURhdGFzZXRDb25maWcsJycpLmdldEV4dHJhY3RvcigpLmdldERhdGEoKQpub2RlRGF0YSA9IGRhdGEuanNvbigpCgpub2RlU3RyaW5nQXJyYXkgPSBbXQoKZm9yIGkgaW4gbm9kZURhdGE6CiAgICByb3cgPSBbXQogICAgcm93LmFwcGVuZChpWydpZCddKQogICAgcm93LmFwcGVuZChpWyduYW1lJ10pCiAgICByb3cuYXBwZW5kKCdIb3N0JykKICAgIHJvdy5hcHBlbmQoJ0FwcEQnKQogICAgcm93LmFwcGVuZChpWyd0aWVyTmFtZSddKQogICAgcm93LmFwcGVuZChpWyd0aWVySWQnXSkKICAgIG5vZGVTdHJpbmdBcnJheS5hcHBlbmQocm93KQogICAgCgpwcmludCgndmFsdWVzPScsbm9kZVN0cmluZ0FycmF5KQoKCmZvciBpIGluIG5vZGVTdHJpbmdBcnJheToKCiAgICB0cnk6CiAgICAgICAgcCA9IHBoICsgJywnCiAgICAgICAgcCA9IHAqNQogICAgICAgIHF1ZXJ5PSAnSW5zZXJ0IGludG8gc3JlX2NpX21ldGFkYXRhIChjaV9pZCwgY2lfbmFtZSwgY2lfdHlwZSwgYXBtX3R5cGUsIHNlcnZpY2VfdHlwZSwgY2lfaG9zdF9ncm91cCwgcHJvamVjdF9pZCkgdmFsdWVzICgnK3ArcGgrJywnK3Byb2plY3RfaWQrJyknCiAgICAgICAgcHJpbnQoJ3F1ZXJ5JyxxdWVyeSkKICAgICAgICBteWN1cnNvci5leGVjdXRlKHF1ZXJ5LGkpCiAgICAgICAgY254LmNvbW1pdCgpCiAgICBleGNlcHQ6CiAgICAgICAgcHJpbnQoJ3ZhbHVlIG5vdCBpbnNlcnRlZCcsaSkKICAgICAgICBwYXNzCiAgICAKbXljdXJzb3IuY2xvc2UoKQpjbnguY2xvc2UoKQoKcHJpbnQoJ0NvbXBsZXRlZCcpCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg==","leo1311"
"LEOAPD_M22623","LEOAPD_M22623_leo1311.py","ZnJvbSBweXNwYXJrLnNxbCBpbXBvcnQgU3BhcmtTZXNzaW9uCmltcG9ydCByZXF1ZXN0cwppbXBvcnQgc3lzCmltcG9ydCBteXNxbC5jb25uZWN0b3IKaW1wb3J0IGpzb24KZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHF1b3RlX3BsdXMsIHVybHBhcnNlCmZyb20gbGVhcC51dGlscy5VdGlsaXRpZXMgaW1wb3J0IFV0aWxpdGllcwppbXBvcnQgZGF0ZXRpbWUKaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyCmZyb20gcmVxdWVzdHMuYXV0aCBpbXBvcnQgSFRUUEJhc2ljQXV0aAppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IHBhbmRhcyBhcyBwZAppbXBvcnQgb3MKaW1wb3J0IHB5b2RiYwppbXBvcnQgdGltZQpmcm9tIGxlYXAuY29uZmlnLkV4dHJhY3RvckNvbmZpZ3MuRGF0YXNldEV4dHJhY3RvckNvbmZpZyBpbXBvcnQgRGF0YXNldEV4dHJhY3RvckNvbmZpZwoKIyBvcy5lbnZpcm9uWydOT19QUk9YWSddPSdsZWFwLXBvdi5zYWFzLmFwcGR5bmFtaWNzLmNvbScKCmxvZ2dlci5iYXNpY0NvbmZpZyhsZXZlbD1sb2dnZXIuSU5GTywgZm9ybWF0PSclKGFzY3RpbWUpcyBJTkZPICUobWVzc2FnZSlzJywgZGF0ZWZtdD0nJXkvJW0vJWQgJUg6JU06JVMnKQphcmd1bWVudHMgPSBzeXMuYXJndgoKZGljdCA9IHt9Cgpmb3IgYXJnIGluIGFyZ3VtZW50czoKICAgIHRyeToKICAgICAgICBkaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICgnOicpLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQogICAgZXhjZXB0OgogICAgICAgIGEgPSAnZXJyb3InCgoKRHluYXRyYWNlRGVtb2RpY3QgPSBqc29uLmxvYWRzKGRpY3RbJ0FwcER5bmFtaWNzJ10pCgoKdXJsPUR5bmF0cmFjZURlbW9kaWN0Wyd1cmwnXQoKZFR5cGUgPSB1cmwuc3BsaXQoJzonKVsxXQoKcGggPSBOb25lCgpteV9jb25uID0gTm9uZQoKZGVmIGdldENvbm5lY3Rpb24oZFR5cGUpOgogICAgZ2xvYmFsIHBoCiAgICBnbG9iYWwgbXlfY29ubgogICAgY254ID0gTm9uZQogICAgdXNlcm5hbWUgPSBEeW5hdHJhY2VEZW1vZGljdFsndXNlck5hbWUnXQogICAgcGFzc3dvcmQgPSBVdGlsaXRpZXMuZGVjcnlwdChEeW5hdHJhY2VEZW1vZGljdFsncGFzc3dvcmQnXSwgRHluYXRyYWNlRGVtb2RpY3RbJ3NhbHQnXSkKICAgIGlmIGRUeXBlID09ICdteXNxbCc6CiAgICAgICAgaG9zdCA9IHVybHBhcnNlKER5bmF0cmFjZURlbW9kaWN0Wyd1cmwnXVs1Ol0pLmhvc3RuYW1lCiAgICAgICAgcG9ydCA9IHVybHBhcnNlKER5bmF0cmFjZURlbW9kaWN0Wyd1cmwnXVs1Ol0pLnBvcnQKICAgICAgICBkYXRhYmFzZSA9IHVybHBhcnNlKER5bmF0cmFjZURlbW9kaWN0Wyd1cmwnXVs1Ol0pLnBhdGgucnNwbGl0KCcvJywgMSlbMV0KICAgICAgICBjbnggPSBteXNxbC5jb25uZWN0b3IuY29ubmVjdCh1c2VyPXVzZXJuYW1lLCBwYXNzd29yZD1wYXNzd29yZCwgaG9zdD1ob3N0LCBwb3J0PXBvcnQsIGRhdGFiYXNlPWRhdGFiYXNlKQogICAgICAgIHBoID0gJyVzJwogICAgICAgICMgY254X3N0cmluZyA9ICdteXNxbCtweW15c3FsOi8vezB9OiVzQHsxfS97Mn0nICUgcXVvdGVfcGx1cyhzdHIocGFzc3dvcmQpKQogICAgICAgICMgcHJpbnQoJ3Bhc3N3b3JkIGlzJywgcGFzc3dvcmQpCiAgICAgICAgIyBjbnhfc3RyaW5nID0gY254X3N0cmluZy5mb3JtYXQodXNlcm5hbWUsaG9zdCxkYXRhYmFzZSkKICAgICAgICAjIHByaW50KCdjbnhTdHJpbmcgaXMnICwgY254X3N0cmluZykKICAgICAgICAjIG15X2Nvbm4gPSBjcmVhdGVfZW5naW5lKGNueF9zdHJpbmcpCiAgICAgICAgCiAgICAgICAgCiAgICBlbGlmIGRUeXBlID09ICdzcWxzZXJ2ZXInOgogICAgICAgICMgc2VydmVyID0gdXJsLnNwbGl0KCcvLycpWzFdLnNwbGl0KCc7JylbMF0ucmVwbGFjZSgnXFNRTCcsJ1NRTCcpCiAgICAgICAgc2VydmVyID0gdXJsLnNwbGl0KCcvLycpWzFdLnNwbGl0KCc7JylbMF0KICAgICAgICBkYXRhYmFzZSA9ICh1cmwuc3BsaXQoJz0nKSlbMV0KICAgICAgICBjb25uZWN0aW9uU3RyaW5nID0gJ0RSSVZFUj17T0RCQyBEcml2ZXIgMTcgZm9yIFNRTCBTRVJWRVJ9O1NFUlZFUj0nK3NlcnZlcisnO0RBVEFCQVNFPScrZGF0YWJhc2UrJztVSUQ9Jyt1c2VybmFtZSsnO1BXRD0nK3Bhc3N3b3JkKyc7JwogICAgICAgIGNueCA9IHB5b2RiYy5jb25uZWN0KGNvbm5lY3Rpb25TdHJpbmcpCiAgICAgICAgcGggPSAnPycKICAgICAgICBlbmcgPSAnbXNzcWwrcHltc3NxbDovL3swfTolc0B7MX0vezJ9JyAlIHF1b3RlX3BsdXMoc3RyKHBhc3N3b3JkKSkKICAgICAgICAjIGNueF9zdHJpbmcgPSBlbmcuZm9ybWF0KHVzZXJuYW1lLHNlcnZlcixkYXRhYmFzZSkKICAgICAgICAjIG15X2Nvbm4gPSBjcmVhdGVfZW5naW5lKGNueF9zdHJpbmcpCiAgICAgICAgIyBteV9jb25uID0gY3JlYXRlX2VuZ2luZShlbmcpCiAgICAgICAgICAgIAogICAgcmV0dXJuIGNueAoKZGVmIGdldFByb2plY3RJZCgpOgogICAgY254ID0gZ2V0Q29ubmVjdGlvbihkVHlwZSkKICAgIG15Y3Vyc29yID0gY254LmN1cnNvcigpCiAgICBxID0gJ3NlbGVjdCBpZCBmcm9tIHVzbV9wcm9qZWN0IHdoZXJlIG5hbWUgPSBcJycrZGljdFsncHJvamVjdCddKydcJycKICAgIG15Y3Vyc29yLmV4ZWN1dGUocSkKICAgIG15cmVzdWx0ID0gbXljdXJzb3IuZmV0Y2hhbGwoKQogICAgY254LmNvbW1pdCgpCiAgICBteWN1cnNvci5jbG9zZSgpCiAgICBjbnguY2xvc2UoKQogICAgcmV0dXJuIG15cmVzdWx0WzBdWzBdCgoKCnByb2plY3RfaWQgPSBzdHIoZ2V0UHJvamVjdElkKCkpICAgIAogICAgCnRhYmxlbmFtZSA9ICdzcmVfY2lfbWV0YWRhdGEnCgoKCgoKbXlEYXRhc2V0Q29uZmlnID0ganNvbi5sb2FkcyhkaWN0Wydub2RlQXZhaWxhYmxlJ10pCm15RGF0YXNldENvbmZpZyA9IHsnZGF0YXNldCc6IG15RGF0YXNldENvbmZpZ30KZGF0YSA9IERhdGFzZXRFeHRyYWN0b3JDb25maWcoJzEnLCcnLG15RGF0YXNldENvbmZpZywnJykuZ2V0RXh0cmFjdG9yKCkuZ2V0RGF0YSgpCm5vZGVfYXZhaWxhYmlsaXR5ID0gZGF0YS5qc29uKCkKCgpjb21iaW5lVmFsdWU9e30Kbm9kZV9kYXRhPVtdCgpmb3IgZWxlbWVudCBpbiBub2RlX2F2YWlsYWJpbGl0eToKICAgIG5vZGVfbmFtZSA9IGVsZW1lbnRbJ21ldHJpY1BhdGgnXS5zcGxpdCgnfCcpWzNdCiAgICB0aWVyX25hbWUgPSBlbGVtZW50WydtZXRyaWNQYXRoJ10uc3BsaXQoJ3wnKVsxXQogICAgdHJ5OgogICAgICAgIGlmIGVsZW1lbnRbJ21ldHJpY1ZhbHVlcyddWzBdWyd2YWx1ZSddOgogICAgICAgICAgICBub2RlX2RhdGEuYXBwZW5kKG5vZGVfbmFtZSkKICAgICAgICAgICAgY29tYmluZVZhbHVlW25vZGVfbmFtZV09dGllcl9uYW1lCiAgICBleGNlcHQ6CiAgICAgICAgc3RhdHVzID0gRmFsc2UKCmNueCA9IGdldENvbm5lY3Rpb24oZFR5cGUpCm15Y3Vyc29yID0gY254LmN1cnNvcigpCgpub2RlRGF0YURCPVtdOwoKZGVmIGdldE5vZGVEYXRhZnJvbURiKCk6CiAgICBxdWVyeTE9J3NlbGVjdCBjaV9uYW1lIGZyb20gc3JlX2NpX21ldGFkYXRhIHdoZXJlIHByb2plY3RfaWQ9Jytwcm9qZWN0X2lkKycgYW5kIGNpX3R5cGU9XCdIb3N0XCcgYW5kIGFwbV90eXBlPVwnQXBwRFwnJwogICAgbXljdXJzb3IuZXhlY3V0ZShxdWVyeTEpCiAgICBteVJlc3VsdD1teWN1cnNvci5mZXRjaGFsbCgpCiAgICBmb3IgaSBpbiBteVJlc3VsdDoKICAgICAgICBub2RlRGF0YURCLmFwcGVuZChpKQoKCmdldE5vZGVEYXRhZnJvbURiKCkKCgpkZWxldGVkTm9kZUxpc3Q9W10KbmV3Tm9kZUxpc3Q9W10KCmRlZiBjb21wYXJlQXBpTm9kZXNUb0RiTm9kZXMoYXBpX25vZGVfbGlzdCwgZGJfbm9kZV9saXN0KToKICAgIGZvciBuYW1lIGluIGRiX25vZGVfbGlzdDoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGluZGV4ID0gYXBpX25vZGVfbGlzdC5pbmRleChuYW1lWzBdKQogICAgICAgICAgICBhcGlfbm9kZV9saXN0LnBvcChpbmRleCkKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIGRlbGV0ZWROb2RlTGlzdC5hcHBlbmQobmFtZVswXSkKCiAgICBwcmludCgnYXBpIG5vZGUgbGlzdCcsIGFwaV9ub2RlX2xpc3QpCiAgICBuZXdOb2RlTGlzdCA9IGFwaV9ub2RlX2xpc3QKCmNvbXBhcmVBcGlOb2Rlc1RvRGJOb2Rlcyhub2RlX2RhdGEsbm9kZURhdGFEQikKCmRlZiB1cGRhdGVfZGF0YShwcm9qZWN0X2lkLGNpX25hbWVfbGlzdCk6CiAgICBmb3IgY2lfbmFtZSBpbiBjaV9uYW1lX2xpc3Q6CiAgICAgICAgc3FsPSdkZWxldGUgZnJvbSBzcmVfY2lfbWV0YWRhdGEgd2hlcmUgcHJvamVjdF9pZD0nK3Byb2plY3RfaWQrJyBhbmQgY2lfbmFtZT1cJycrY2lfbmFtZSsnXCcnCiAgICAgICAgbXljdXJzb3IuZXhlY3V0ZShzcWwpCiAgICAgICAgY254LmNvbW1pdCgpCgpkZWYgZGVsZXRlZE5vZGVMaXN0QWN0aW9uKCk6CiAgICBpZiAobGVuKGRlbGV0ZWROb2RlTGlzdCkhPTApOgogICAgICAgIHByaW50KCdMaXN0IG9mIE5vZGVzIHVwZGF0ZSBmcm9tIEFwcER5bmFtaWNzIGZvciBTcmUgbWV0YXRkYXRhIHRhYmxlOiAnLCBkZWxldGVkTm9kZUxpc3QpCiAgICAgICAgdXBkYXRlX2RhdGEocHJvamVjdF9pZCxkZWxldGVkTm9kZUxpc3QpCgpkZWxldGVkTm9kZUxpc3RBY3Rpb24oKQoKCmRlZiBuZXdOb2Rlc1RvZGJBY3Rpb24oKToKICAgIGlmIGxlbihuZXdOb2RlTGlzdCk6CiAgICAgICAgcHJpbnQoJ0xpc3Qgb2YgTm9kZXMgbmV3bHkgYWRkZWQgdG8gQXBwRHluYW1pY3MgZm9yIFNyZSBtZXRhdGRhdGEgdGFibGU6ICcsICBuZXdOb2RlTGlzdCkKICAgICAgICBmb3IgbmFtZSBpbiBuZXdOb2RlTGlzdDoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgcXVlcnk9ICdJbnNlcnQgaW50byBzcmVfY2lfbWV0YWRhdGEgKGNpX25hbWUsIGNpX3R5cGUsIGFwbV90eXBlLCBzZXJ2aWNlX3R5cGUsIHByb2plY3RfaWQpIHZhbHVlcyAoJytuYW1lKycsXCdIb3N0XCcsXCdBcHBEXCcsJytjb21iaW5lVmFsdWVbbm9kZV9uYW1lXSsnLD8sPywnK3Byb2plY3RfaWQrJyknCiAgICAgICAgICAgICAgICBwcmludCgncXVlcnknLHF1ZXJ5KQogICAgICAgICAgICAgICAgbXljdXJzb3IuZXhlY3V0ZShxdWVyeSxpKQogICAgICAgICAgICAgICAgY254LmNvbW1pdCgpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KCd2YWx1ZSBub3QgaW5zZXJ0ZWQnLGkpCiAgICAgICAgICAgICAgICBwYXNzCgpuZXdOb2Rlc1RvZGJBY3Rpb24oKQoKbXljdXJzb3IuY2xvc2UoKQpjbnguY2xvc2UoKQoKCnByaW50KCdDb21wbGV0ZWQnKQoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoK","leo1311"
"APMPRBLM12200","APMPRBLM12200_leo1311.py","ZnJvbSBweXNwYXJrLnNxbCBpbXBvcnQgU3BhcmtTZXNzaW9uCgppbXBvcnQgcmVxdWVzdHMKCmltcG9ydCBzeXMKCmltcG9ydCBteXNxbC5jb25uZWN0b3IKCmZyb20gcHlzcGFyay5zcWwuZnVuY3Rpb25zIGltcG9ydCAqCgpmcm9tIHB5c3Bhcmsuc3FsLnR5cGVzIGltcG9ydCAqCgppbXBvcnQganNvbgoKZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHF1b3RlX3BsdXMsIHVybHBhcnNlCgpmcm9tIGxlYXAudXRpbHMuVXRpbGl0aWVzIGltcG9ydCBVdGlsaXRpZXMKCmltcG9ydCBkYXRldGltZQoKaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyCgpmcm9tIHJlcXVlc3RzLmF1dGggaW1wb3J0IEhUVFBCYXNpY0F1dGgKCmltcG9ydCByZXF1ZXN0cwoKaW1wb3J0IHBhbmRhcyBhcyBwZAoKaW1wb3J0IG9zCmltcG9ydCB0aW1lCmZyb20gbGVhcC5jb25maWcuRXh0cmFjdG9yQ29uZmlncy5EYXRhc2V0RXh0cmFjdG9yQ29uZmlnIGltcG9ydCBEYXRhc2V0RXh0cmFjdG9yQ29uZmlnCmltcG9ydCBweW9kYmMKCgojCiMgdGltZS5zbGVlcCgxMjApCgojIG9zLmVudmlyb25bJ05PX1BST1hZJ109J2xlYXAtcG92LnNhYXMuYXBwZHluYW1pY3MuY29tJwoKbG9nZ2VyLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dlci5JTkZPLCBmb3JtYXQ9JyUoYXNjdGltZSlzIElORk8gJShtZXNzYWdlKXMnLCBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycpCgphcmd1bWVudHMgPSBzeXMuYXJndgoKCgpkaWN0ID0ge30KCmZvciBhcmcgaW4gYXJndW1lbnRzOgoKICAgIHRyeToKCiAgICAgICAgZGljdFthcmcuc3BsaXQoJzonKVswXV0gPSAoJzonKS5qb2luKGFyZy5zcGxpdCgnOicpWzE6XSkKCiAgICBleGNlcHQ6CgogICAgICAgIGEgPSAnZXJyb3InCgpwcmludCgnZGljdGlvbmFyeScsIGRpY3QpCgoKCnByaW50KCdhcmd1bWVudHMnLCBhcmd1bWVudHMpCgoKCgoKIyBEeW5hdHJhY2VEZW1vIERhdGFzb3VyY2UKCgoKCgpEeW5hdHJhY2VEZW1vZGljdCA9IGpzb24ubG9hZHMoZGljdFsnQXBwRHluYW1pY3MnXSkKCnVybD1EeW5hdHJhY2VEZW1vZGljdFsndXJsJ10KCmRUeXBlID0gdXJsLnNwbGl0KCc6JylbMV0KCnBoID0gTm9uZQoKZGVmIGdldENvbm5lY3Rpb24oZFR5cGUpOgogICAgZ2xvYmFsIHBoCiAgICBjbnggPSBOb25lCiAgICB1c2VybmFtZSA9IER5bmF0cmFjZURlbW9kaWN0Wyd1c2VyTmFtZSddCiAgICBwYXNzd29yZCA9IFV0aWxpdGllcy5kZWNyeXB0KER5bmF0cmFjZURlbW9kaWN0WydwYXNzd29yZCddLCBEeW5hdHJhY2VEZW1vZGljdFsnc2FsdCddKQogICAgaWYgZFR5cGUgPT0gJ215c3FsJzoKICAgICAgICBob3N0ID0gdXJscGFyc2UoRHluYXRyYWNlRGVtb2RpY3RbJ3VybCddWzU6XSkuaG9zdG5hbWUKICAgICAgICBwb3J0ID0gdXJscGFyc2UoRHluYXRyYWNlRGVtb2RpY3RbJ3VybCddWzU6XSkucG9ydAogICAgICAgIGRhdGFiYXNlID0gdXJscGFyc2UoRHluYXRyYWNlRGVtb2RpY3RbJ3VybCddWzU6XSkucGF0aC5yc3BsaXQoJy8nLCAxKVsxXQogICAgICAgIGNueCA9IG15c3FsLmNvbm5lY3Rvci5jb25uZWN0KHVzZXI9dXNlcm5hbWUsIHBhc3N3b3JkPXBhc3N3b3JkLCBob3N0PWhvc3QsIHBvcnQ9cG9ydCwgZGF0YWJhc2U9ZGF0YWJhc2UpCiAgICAgICAgcGggPSAnJXMnCiAgICAgICAgCiAgICBlbGlmIGRUeXBlID09ICdzcWxzZXJ2ZXInOgogICAgICAgICMgc2VydmVyID0gdXJsLnNwbGl0KCcvLycpWzFdLnNwbGl0KCc7JylbMF0ucmVwbGFjZSgnXFNRTCcsJ1NRTCcpCiAgICAgICAgc2VydmVyID0gdXJsLnNwbGl0KCcvLycpWzFdLnNwbGl0KCc7JylbMF0KICAgICAgICBkYXRhYmFzZSA9IHVybC5zcGxpdCgnPScpWzFdCiAgICAgICAgY29ubmVjdGlvblN0cmluZyA9ICdEUklWRVI9e09EQkMgRHJpdmVyIDE3IGZvciBTUUwgU0VSVkVSfTtTRVJWRVI9JytzZXJ2ZXIrJztEQVRBQkFTRT0nK2RhdGFiYXNlKyc7VUlEPScrdXNlcm5hbWUrJztQV0Q9JytwYXNzd29yZCsnOycKICAgICAgICBjbnggPSBweW9kYmMuY29ubmVjdChjb25uZWN0aW9uU3RyaW5nKQogICAgICAgIHBoID0gJz8nCiAgICAgICAgICAgIAogICAgcmV0dXJuIGNueAogICAgCgp0YWJsZW5hbWUgPSAnc3JlX2V2ZW50JwoKZGVmIGdldFByb2plY3RJZCgpOgogICAgY254ID0gZ2V0Q29ubmVjdGlvbihkVHlwZSkKICAgIG15Y3Vyc29yID0gY254LmN1cnNvcigpCiAgICBxID0gJ3NlbGVjdCBpZCBmcm9tIHVzbV9wcm9qZWN0IHdoZXJlIG5hbWUgPSBcJycrZGljdFsncHJvamVjdCddKydcJycKICAgIG15Y3Vyc29yLmV4ZWN1dGUocSkKICAgIG15cmVzdWx0ID0gbXljdXJzb3IuZmV0Y2hhbGwoKQogICAgY254LmNvbW1pdCgpCiAgICBteWN1cnNvci5jbG9zZSgpCiAgICBjbnguY2xvc2UoKQogICAgcmV0dXJuIG15cmVzdWx0WzBdWzBdCgoKCnByb2plY3RfaWQgPSBzdHIoZ2V0UHJvamVjdElkKCkpCgoKCgpwcm9ibGVtc0RpY3QgPSB7fQoKCm15RGF0YXNldENvbmZpZyA9IGpzb24ubG9hZHMoZGljdFsncHJvYmxlbXMnXSkKbXlEYXRhc2V0Q29uZmlnID0geydkYXRhc2V0JzogbXlEYXRhc2V0Q29uZmlnfQpkYXRhID0gRGF0YXNldEV4dHJhY3RvckNvbmZpZygnMScsJycsbXlEYXRhc2V0Q29uZmlnLCcnKS5nZXRFeHRyYWN0b3IoKS5nZXREYXRhKCkKCnByb2JsZW1zRGF0YSA9IGRhdGEuanNvbigpCgojIHByaW50KCdkYXRhJyxwcm9ibGVtc0RhdGEpCgoKanNvblN0cmluZ0FycmF5ID0gW10Kcm93ID0ge30Kc3RhdHVzRmxhZyA9IEZhbHNlCgpmb3IgaSBpbiBwcm9ibGVtc0RhdGE6CiAgICByb3cgPSBbXQogICAgcm93LmFwcGVuZChpWydpZCddKQogICAgcm93LmFwcGVuZChpWyduYW1lJ10pCiAgICBpZihpWydzZXZlcml0eSddID09ICdDUklUSUNBTCcpOgogICAgICAgIHJvdy5hcHBlbmQoJ0lzc3VlJykKICAgIGVsaWYoaVsnc2V2ZXJpdHknXSA9PSAnV0FSTklORycpOgogICAgICAgIHJvdy5hcHBlbmQoJ0FsZXJ0JykKICAgIGFmZmVjdGVkRW50aXR5PWlbJ2FmZmVjdGVkRW50aXR5RGVmaW5pdGlvbiddCiAgICByb3cuYXBwZW5kKGFmZmVjdGVkRW50aXR5WydlbnRpdHlUeXBlJ10pCiAgICByb3cuYXBwZW5kKGlbJ3NldmVyaXR5J10pCiAgICByb3cuYXBwZW5kKGlbJ2luY2lkZW50U3RhdHVzJ10pCiAgICByb3cuYXBwZW5kKGFmZmVjdGVkRW50aXR5WyduYW1lJ10pCiAgICByb3cuYXBwZW5kKGlbJ3N0YXJ0VGltZUluTWlsbGlzJ10pCiAgICByb3cuYXBwZW5kKGlbJ2VuZFRpbWVJbk1pbGxpcyddKQogICAgcm93LmFwcGVuZCgnQXBwRCcpCiAgICByb3cuYXBwZW5kKGlbJ2RlZXBMaW5rVXJsJ10pCiAgICByb3cuYXBwZW5kKHByb2plY3RfaWQpCiAgICBqc29uU3RyaW5nQXJyYXkuYXBwZW5kKHJvdykKCiMgcHJpbnQoanNvblN0cmluZ0FycmF5KQoKCiMgY254ID0gbXlzcWwuY29ubmVjdG9yLmNvbm5lY3QodXNlcj11c2VybmFtZSwgcGFzc3dvcmQ9cGFzc3dvcmQsIGhvc3Q9aG9zdCwgcG9ydD1wb3J0LCBkYXRhYmFzZT1kYXRhYmFzZSkKY254ID0gZ2V0Q29ubmVjdGlvbihkVHlwZSkKbXljdXJzb3IgPSBjbnguY3Vyc29yKCkKCmZvciBpIGluIGpzb25TdHJpbmdBcnJheToKICAgIHRyeToKICAgICAgICAjIHF1ZXJ5PSAnSW5zZXJ0IGludG8gc3JlX2V2ZW50IChldmVudElkLCB0aXRsZSwgZXZlbnRUeXBlLCBpbXBhY3RMZXZlbCxzZXZlcml0eUxldmVsLHN0YXR1cyxyb290Q2F1c2VFbnRpdHksc3RhcnRUaW1lLGVuZFRpbWUsYXBtVHlwZSxkZWVwTGlua1VybCxwcm9qZWN0X2lkKSB2YWx1ZXMgKCVzLCVzLCVzLCVzLCVzLCVzLCVzLCVzLCVzLCVzLCVzLCVzKScKICAgICAgICBwID0gcGggKyAnLCcKICAgICAgICBwID0gcCoxMQogICAgICAgIHF1ZXJ5PSAnSW5zZXJ0IGludG8gc3JlX2V2ZW50IChldmVudElkLCB0aXRsZSwgZXZlbnRUeXBlLCBpbXBhY3RMZXZlbCxzZXZlcml0eUxldmVsLHN0YXR1cyxyb290Q2F1c2VFbnRpdHksc3RhcnRUaW1lLGVuZFRpbWUsYXBtVHlwZSxkZWVwTGlua1VybCxwcm9qZWN0X2lkKSB2YWx1ZXMgKCcrcCtwaCsnKScKICAgICAgICAKICAgICAgICBwcmludCgncXVlcnknLHF1ZXJ5KQogICAgICAgIG15Y3Vyc29yLmV4ZWN1dGUocXVlcnksaSkKICAgICAgICBjbnguY29tbWl0KCkKICAgIGV4Y2VwdDoKICAgICAgICBwcmludCgndmFsdWUgbm90IGluc2VydGVkJyxpKQogICAgICAgIHBhc3MKICAgIApteWN1cnNvci5jbG9zZSgpCmNueC5jbG9zZSgpCgoKcHJpbnQoJ0NvbXBsZXRlZCcpCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoK","leo1311"
"APMNWTCH51420","APMNWTCH51420_leo1311.py","aW1wb3J0IHJlcXVlc3RzDQppbXBvcnQganNvbg0KaW1wb3J0IG15c3FsLmNvbm5lY3Rvcg0KaW1wb3J0IHBhbmRhcyBhcyBwZA0KZnJvbSBzcWxhbGNoZW15IGltcG9ydCBjcmVhdGVfZW5naW5lDQppbXBvcnQgc3lzDQpmcm9tIHVybGxpYi5wYXJzZSBpbXBvcnQgcXVvdGVfcGx1cywgdXJscGFyc2UNCmZyb20gbGVhcC51dGlscy5VdGlsaXRpZXMgaW1wb3J0IFV0aWxpdGllcw0KaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyDQppbXBvcnQgb3MNCmZyb20gcHlzcGFyay5zcWwgaW1wb3J0IFNwYXJrU2Vzc2lvbg0KaW1wb3J0IHN5cw0KZnJvbSBweXNwYXJrLnNxbC5mdW5jdGlvbnMgaW1wb3J0ICoNCmZyb20gcHlzcGFyay5zcWwudHlwZXMgaW1wb3J0ICoNCmltcG9ydCBkYXRldGltZQ0KZnJvbSByZXF1ZXN0cy5hdXRoIGltcG9ydCBIVFRQQmFzaWNBdXRoDQppbXBvcnQgdGltZQ0KZnJvbSBsZWFwLmNvbmZpZy5FeHRyYWN0b3JDb25maWdzLkRhdGFzZXRFeHRyYWN0b3JDb25maWcgaW1wb3J0IERhdGFzZXRFeHRyYWN0b3JDb25maWcNCmltcG9ydCBweW9kYmMNCmltcG9ydCBweW15c3FsDQppbXBvcnQgcHltc3NxbA0KDQojIG9zLmVudmlyb25bJ05PX1BST1hZJ109J2xlYXAtcG92LnNhYXMuYXBwZHluYW1pY3MuY29tJw0KDQoNCmxvZ2dlci5iYXNpY0NvbmZpZyhsZXZlbD1sb2dnZXIuSU5GTywgZm9ybWF0PSclKGFzY3RpbWUpcyBJTkZPICUobWVzc2FnZSlzJywgZGF0ZWZtdD0nJXkvJW0vJWQgJUg6JU06JVMnKQ0KYXJndW1lbnRzID0gc3lzLmFyZ3YNCmRpY3QgPSB7fQ0KZm9yIGFyZyBpbiBhcmd1bWVudHM6DQogICAgdHJ5Og0KICAgICAgICBkaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICgnOicpLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQ0KICAgIGV4Y2VwdDoNCiAgICAgICAgYSA9ICdlcnJvcicNCiMgcHJpbnQoJ2RpY3Rpb25hcnknLCBkaWN0KQ0KI2RiIGRldGFpbHMNCkR5bmF0cmFjZURlbW9kaWN0PWpzb24ubG9hZHMoZGljdFsnQXBwRHluYW1pY3MnXSkNCg0KdXJsPUR5bmF0cmFjZURlbW9kaWN0Wyd1cmwnXQ0KZFR5cGUgPSB1cmwuc3BsaXQoJzonKVsxXQ0KcGxhY2VfaG9sZGVyID0gTm9uZQ0KbXlfY29ubiA9IE5vbmUNCg0KDQoNCmRlZiBnZXRDb25uZWN0aW9uKGRUeXBlKToNCiAgICBnbG9iYWwgcGxhY2VfaG9sZGVyDQogICAgZ2xvYmFsIG15X2Nvbm4NCiAgICBjbnggPSBOb25lDQogICAgdXNlcm5hbWUgPSBEeW5hdHJhY2VEZW1vZGljdFsndXNlck5hbWUnXQ0KICAgIHBhc3N3b3JkID0gVXRpbGl0aWVzLmRlY3J5cHQoRHluYXRyYWNlRGVtb2RpY3RbJ3Bhc3N3b3JkJ10sIER5bmF0cmFjZURlbW9kaWN0WydzYWx0J10pDQogICAgaWYgZFR5cGUgPT0gJ215c3FsJzoNCiAgICAgICAgaG9zdCA9IHVybHBhcnNlKER5bmF0cmFjZURlbW9kaWN0Wyd1cmwnXVs1Ol0pLmhvc3RuYW1lDQogICAgICAgIHBvcnQgPSB1cmxwYXJzZShEeW5hdHJhY2VEZW1vZGljdFsndXJsJ11bNTpdKS5wb3J0DQogICAgICAgIGRhdGFiYXNlID0gdXJscGFyc2UoRHluYXRyYWNlRGVtb2RpY3RbJ3VybCddWzU6XSkucGF0aC5yc3BsaXQoJy8nLCAxKVsxXQ0KICAgICAgICBjbnggPSBteXNxbC5jb25uZWN0b3IuY29ubmVjdCh1c2VyPXVzZXJuYW1lLCBwYXNzd29yZD1wYXNzd29yZCwgaG9zdD1ob3N0LCBwb3J0PXBvcnQsIGRhdGFiYXNlPWRhdGFiYXNlKQ0KICAgICAgICBwbGFjZV9ob2xkZXIgPSAnJXMnDQogICAgICAgICMgbXlfY29ubiA9IGNyZWF0ZV9lbmdpbmUoJ215c3FsK3B5bXlzcWw6Ly97MH06ezF9QHsyfS97M30nLmZvcm1hdCh1c2VybmFtZSxwYXNzd29yZCxob3N0LGRhdGFiYXNlKSkNCiAgICAgICAgY254X3N0cmluZyA9ICdteXNxbCtweW15c3FsOi8vezB9OiVzQHsxfS97Mn0nICUgcXVvdGVfcGx1cyhzdHIocGFzc3dvcmQpKQ0KICAgICAgICBwcmludCgncGFzc3dvcmQgaXMnLCBwYXNzd29yZCkNCiAgICAgICAgY254X3N0cmluZyA9IGNueF9zdHJpbmcuZm9ybWF0KHVzZXJuYW1lLGhvc3QsZGF0YWJhc2UpDQogICAgICAgIHByaW50KCdjbnhTdHJpbmcgaXMnICwgY254X3N0cmluZykNCiAgICAgICAgbXlfY29ubiA9IGNyZWF0ZV9lbmdpbmUoY254X3N0cmluZykNCiAgICAgICAgDQogICAgICAgIA0KICAgIGVsaWYgZFR5cGUgPT0gJ3NxbHNlcnZlcic6DQogICAgICAgICMgc2VydmVyID0gdXJsLnNwbGl0KCcvLycpWzFdLnNwbGl0KCc7JylbMF0ucmVwbGFjZSgnXFNRTCcsJ1NRTCcpDQogICAgICAgIHNlcnZlciA9IHVybC5zcGxpdCgnLy8nKVsxXS5zcGxpdCgnOycpWzBdDQogICAgICAgIGRhdGFiYXNlID0gKHVybC5zcGxpdCgnPScpKVsxXQ0KICAgICAgICBjb25uZWN0aW9uU3RyaW5nID0gJ0RSSVZFUj17T0RCQyBEcml2ZXIgMTcgZm9yIFNRTCBTRVJWRVJ9O1NFUlZFUj0nK3NlcnZlcisnO0RBVEFCQVNFPScrZGF0YWJhc2UrJztVSUQ9Jyt1c2VybmFtZSsnO1BXRD0nK3Bhc3N3b3JkKyc7Jw0KICAgICAgICBjbnggPSBweW9kYmMuY29ubmVjdChjb25uZWN0aW9uU3RyaW5nKQ0KICAgICAgICBwbGFjZV9ob2xkZXIgPSAnPycNCiAgICAgICAgZW5nID0gJ21zc3FsK3B5bXNzcWw6Ly97MH06JXNAezF9L3syfScgJSBxdW90ZV9wbHVzKHN0cihwYXNzd29yZCkpDQogICAgICAgIGNueF9zdHJpbmcgPSBlbmcuZm9ybWF0KHVzZXJuYW1lLHNlcnZlcixkYXRhYmFzZSkNCiAgICAgICAgbXlfY29ubiA9IGNyZWF0ZV9lbmdpbmUoY254X3N0cmluZykNCiAgICANCiAgICByZXR1cm4gY254DQogICAgDQoNCmRlZiBnZXRQcm9qZWN0SWQoKToNCiAgICBjbnggPSBnZXRDb25uZWN0aW9uKGRUeXBlKQ0KICAgIG15Y3Vyc29yID0gY254LmN1cnNvcigpDQogICAgcSA9ICdzZWxlY3QgaWQgZnJvbSB1c21fcHJvamVjdCB3aGVyZSBuYW1lID0gXCcnK2RpY3RbJ3Byb2plY3QnXSsnXCcnDQogICAgbXljdXJzb3IuZXhlY3V0ZShxKQ0KICAgIG15cmVzdWx0ID0gbXljdXJzb3IuZmV0Y2hhbGwoKQ0KICAgIGNueC5jb21taXQoKQ0KICAgIG15Y3Vyc29yLmNsb3NlKCkNCiAgICBjbnguY2xvc2UoKQ0KICAgIHJldHVybiBteXJlc3VsdFswXVswXQ0KIyB0YWJsZW5hbWUgPSAnc3JlX2V2ZW50Jw0KcHJvamVjdF9pZCA9IHN0cihnZXRQcm9qZWN0SWQoKSkNCg0KZ2V0Q29ubmVjdGlvbihkVHlwZSkNCg0KDQoNCg0KY29tYmluZWREYXRhRGljdCA9e30NCg0KbXlEYXRhc2V0Q29uZmlnID0ganNvbi5sb2FkcyhkaWN0WydUaWVyTWV0cmljQXZhaWxhYmlsaXR5J10pDQpteURhdGFzZXRDb25maWcgPSB7J2RhdGFzZXQnOiBteURhdGFzZXRDb25maWd9DQpkYXRhID0gRGF0YXNldEV4dHJhY3RvckNvbmZpZygnMScsJycsbXlEYXRhc2V0Q29uZmlnLCcnKS5nZXRFeHRyYWN0b3IoKS5nZXREYXRhKCkNCg0KY29tYmluZWREYXRhRGljdFsndGllciddID0gZGF0YS5qc29uKCkNCg0KIyBwcmludCh0aWVyTWV0cmljc0RhdGEpDQoNCg0KbXlEYXRhc2V0Q29uZmlnID0ganNvbi5sb2FkcyhkaWN0WydOb2RlTWV0cmljQXZhaWxhYmlsaXR5J10pDQpteURhdGFzZXRDb25maWcgPSB7J2RhdGFzZXQnOiBteURhdGFzZXRDb25maWd9DQpkYXRhID0gRGF0YXNldEV4dHJhY3RvckNvbmZpZygnMScsJycsbXlEYXRhc2V0Q29uZmlnLCcnKS5nZXRFeHRyYWN0b3IoKS5nZXREYXRhKCkNCg0KY29tYmluZWREYXRhRGljdFsnbm9kZSddID0gZGF0YS5qc29uKCkNCg0KDQojIHByaW50KHRpZXJNZXRyaWNzRGF0YSkNCg0KDQoNCmZvciBpIGluIGNvbWJpbmVkRGF0YURpY3Q6DQogICAgZm9yIGRhdGEgaW4gY29tYmluZWREYXRhRGljdFtpXToNCiAgICAgICAgaWYgZGF0YVsnbWV0cmljTmFtZSddICE9ICdNRVRSSUMgREFUQSBOT1QgRk9VTkQnOg0KICAgICAgICAgICAgbWV0cmljX3BhdGhfc3BsaXQgPSBkYXRhWydtZXRyaWNQYXRoJ10uc3BsaXQoJ3wnKQ0KICAgICAgICAgICAgdmFsdWVzID0gZGF0YVsnbWV0cmljVmFsdWVzJ10NCiAgICAgICAgICAgIGRmID0gcGQuRGF0YUZyYW1lKHZhbHVlcykNCiAgICAgICAgICAgIGRmID0gZGYuZHJvcChbJ3VzZVJhbmdlJ10sIGF4aXM9MSkNCiAgICAgICAgICAgIGRmWydwcm9qZWN0X2lkJ10gPSBwcm9qZWN0X2lkDQogICAgICAgICAgICBkZlsnYXBtVHlwZSddID0gJ0FwcGQnDQogICAgICAgICAgICBkZi5yZW5hbWUoY29sdW1ucz17J3ZhbHVlJzonbWV0cmljVmFsdWUnLCAnc3RhcnRUaW1lSW5NaWxsaXMnOiAnc3RhcnRUaW1lJ30sIGlucGxhY2U9VHJ1ZSkNCiAgICAgICAgICAgIGRmWydtZXRyaWNUeXBlJ10gPSBtZXRyaWNfcGF0aF9zcGxpdFstMV0NCiAgICAgICAgICAgIGlmICd0aWVyJyBpbiBpOg0KICAgICAgICAgICAgICAgIGRmWydjaV9uYW1lJ10gPSBtZXRyaWNfcGF0aF9zcGxpdFsxXQ0KICAgICAgICAgICAgICAgIGRmWydjdHlwZSddID0gJ1RpZXInDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICBlbGlmICdub2RlJyBpbiBpOg0KICAgICAgICAgICAgICAgIGRmWydjaV9uYW1lJ10gPSBtZXRyaWNfcGF0aF9zcGxpdFszXQ0KICAgICAgICAgICAgICAgIGRmWydjdHlwZSddID0gJ05vZGUnDQogICAgICAgICAgICANCiAgICAgICAgICAgIGVsaWYgJ292ZXJhbGwnIGluIGk6DQogICAgICAgICAgICAgICAgaWYgbGVuKG1ldHJpY19wYXRoX3NwbGl0KSA9PSAyOg0KICAgICAgICAgICAgICAgICAgICBkZlsnbWV0cmljVHlwZSddID0gbWV0cmljX3BhdGhfc3BsaXRbLTFdDQogICAgICAgICAgICAgICAgICAgIGRmWydjaV9uYW1lJ10gPSBkaWN0WydhcHBsaWNhdGlvbk5hbWUnXQ0KICAgICAgICAgICAgICAgICAgICBkZlsnY3R5cGUnXSA9ICdBcHBsaWNhdGlvbicNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZGYpDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgZGZbJ21ldHJpY1R5cGUnXSA9IG1ldHJpY19wYXRoX3NwbGl0Wy0xXQ0KICAgICAgICAgICAgICAgICAgICBkZlsnY2lfbmFtZSddID0gbWV0cmljX3BhdGhfc3BsaXRbLTJdDQogICAgICAgICAgICAgICAgICAgIGRmWydjdHlwZSddID0gJ1RpZXInDQoNCiAgICAgICAgICAgIHByaW50KGRmKQ0KICAgICAgICANCiAgICAgICAgDQogICAgICAgICAgICBkZi50b19zcWwoY29uPW15X2Nvbm4sIG5hbWU9J3NyZV9tZXRyaWNzJywgaWZfZXhpc3RzPSdhcHBlbmQnLCBpbmRleD1GYWxzZSkNCiAgICAgICAgICAgIA0KICAgIA0KcHJpbnQoJ0NvbXBsZXRlZCcpDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0K","leo1311"
"APMCPMMR89209","APMCPMMR89209_leo1311.py","aW1wb3J0IHJlcXVlc3RzDQppbXBvcnQganNvbg0KaW1wb3J0IG15c3FsLmNvbm5lY3Rvcg0KaW1wb3J0IHBhbmRhcyBhcyBwZA0KZnJvbSBzcWxhbGNoZW15IGltcG9ydCBjcmVhdGVfZW5naW5lDQppbXBvcnQgc3lzDQpmcm9tIHVybGxpYi5wYXJzZSBpbXBvcnQgcXVvdGVfcGx1cywgdXJscGFyc2UNCmZyb20gbGVhcC51dGlscy5VdGlsaXRpZXMgaW1wb3J0IFV0aWxpdGllcw0KaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyDQppbXBvcnQgb3MNCmZyb20gcHlzcGFyay5zcWwgaW1wb3J0IFNwYXJrU2Vzc2lvbg0KaW1wb3J0IHN5cw0KZnJvbSBweXNwYXJrLnNxbC5mdW5jdGlvbnMgaW1wb3J0ICoNCmZyb20gcHlzcGFyay5zcWwudHlwZXMgaW1wb3J0ICoNCmltcG9ydCBkYXRldGltZQ0KZnJvbSByZXF1ZXN0cy5hdXRoIGltcG9ydCBIVFRQQmFzaWNBdXRoDQppbXBvcnQgdGltZQ0KaW1wb3J0IHB5b2RiYw0KaW1wb3J0IHB5bXlzcWwNCmltcG9ydCBweW1zc3FsDQpmcm9tIGxlYXAuY29uZmlnLkV4dHJhY3RvckNvbmZpZ3MuRGF0YXNldEV4dHJhY3RvckNvbmZpZyBpbXBvcnQgRGF0YXNldEV4dHJhY3RvckNvbmZpZw0KDQojIG9zLmVudmlyb25bJ05PX1BST1hZJ109J2xlYXAtcG92LnNhYXMuYXBwZHluYW1pY3MuY29tJw0KDQoNCmxvZ2dlci5iYXNpY0NvbmZpZyhsZXZlbD1sb2dnZXIuSU5GTywgZm9ybWF0PSclKGFzY3RpbWUpcyBJTkZPICUobWVzc2FnZSlzJywgZGF0ZWZtdD0nJXkvJW0vJWQgJUg6JU06JVMnKQ0KYXJndW1lbnRzID0gc3lzLmFyZ3YNCmRpY3QgPSB7fQ0KZm9yIGFyZyBpbiBhcmd1bWVudHM6DQogICAgdHJ5Og0KICAgICAgICBkaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICgnOicpLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQ0KICAgIGV4Y2VwdDoNCiAgICAgICAgYSA9ICdlcnJvcicNCiMgcHJpbnQoJ2RpY3Rpb25hcnknLCBkaWN0KQ0KI2RiIGRldGFpbHMNCkR5bmF0cmFjZURlbW9kaWN0PWpzb24ubG9hZHMoZGljdFsnQXBwRHluYW1pY3MnXSkNCg0KdXJsPUR5bmF0cmFjZURlbW9kaWN0Wyd1cmwnXQ0KZFR5cGUgPSB1cmwuc3BsaXQoJzonKVsxXQ0KcGxhY2VfaG9sZGVyID0gTm9uZQ0KbXlfY29ubiA9IE5vbmUNCg0KDQoNCmRlZiBnZXRDb25uZWN0aW9uKGRUeXBlKToNCiAgICBnbG9iYWwgcGxhY2VfaG9sZGVyDQogICAgZ2xvYmFsIG15X2Nvbm4NCiAgICBjbnggPSBOb25lDQogICAgdXNlcm5hbWUgPSBEeW5hdHJhY2VEZW1vZGljdFsndXNlck5hbWUnXQ0KICAgIHBhc3N3b3JkID0gVXRpbGl0aWVzLmRlY3J5cHQoRHluYXRyYWNlRGVtb2RpY3RbJ3Bhc3N3b3JkJ10sIER5bmF0cmFjZURlbW9kaWN0WydzYWx0J10pDQogICAgaWYgZFR5cGUgPT0gJ215c3FsJzoNCiAgICAgICAgaG9zdCA9IHVybHBhcnNlKER5bmF0cmFjZURlbW9kaWN0Wyd1cmwnXVs1Ol0pLmhvc3RuYW1lDQogICAgICAgIHBvcnQgPSB1cmxwYXJzZShEeW5hdHJhY2VEZW1vZGljdFsndXJsJ11bNTpdKS5wb3J0DQogICAgICAgIGRhdGFiYXNlID0gdXJscGFyc2UoRHluYXRyYWNlRGVtb2RpY3RbJ3VybCddWzU6XSkucGF0aC5yc3BsaXQoJy8nLCAxKVsxXQ0KICAgICAgICBjbnggPSBteXNxbC5jb25uZWN0b3IuY29ubmVjdCh1c2VyPXVzZXJuYW1lLCBwYXNzd29yZD1wYXNzd29yZCwgaG9zdD1ob3N0LCBwb3J0PXBvcnQsIGRhdGFiYXNlPWRhdGFiYXNlKQ0KICAgICAgICBwbGFjZV9ob2xkZXIgPSAnJXMnDQogICAgICAgICMgbXlfY29ubiA9IGNyZWF0ZV9lbmdpbmUoJ215c3FsK3B5bXlzcWw6Ly97MH06ezF9QHsyfS97M30nLmZvcm1hdCh1c2VybmFtZSxwYXNzd29yZCxob3N0LGRhdGFiYXNlKSkNCiAgICAgICAgY254X3N0cmluZyA9ICdteXNxbCtweW15c3FsOi8vezB9OiVzQHsxfS97Mn0nICUgcXVvdGVfcGx1cyhzdHIocGFzc3dvcmQpKQ0KICAgICAgICBjbnhfc3RyaW5nID0gY254X3N0cmluZy5mb3JtYXQodXNlcm5hbWUsaG9zdCxkYXRhYmFzZSkNCiAgICAgICAgcHJpbnQoJ2NueFN0cmluZyBpcycgLCBjbnhfc3RyaW5nKQ0KICAgICAgICBteV9jb25uID0gY3JlYXRlX2VuZ2luZShjbnhfc3RyaW5nKQ0KICAgICAgICANCiAgICAgICAgDQogICAgZWxpZiBkVHlwZSA9PSAnc3Fsc2VydmVyJzoNCiAgICAgICAgIyBzZXJ2ZXIgPSB1cmwuc3BsaXQoJy8vJylbMV0uc3BsaXQoJzsnKVswXS5yZXBsYWNlKCdcU1FMJywnU1FMJykNCiAgICAgICAgc2VydmVyID0gdXJsLnNwbGl0KCcvLycpWzFdLnNwbGl0KCc7JylbMF0NCiAgICAgICAgZGF0YWJhc2UgPSAodXJsLnNwbGl0KCc9JykpWzFdDQogICAgICAgIGNvbm5lY3Rpb25TdHJpbmcgPSAnRFJJVkVSPXtPREJDIERyaXZlciAxNyBmb3IgU1FMIFNFUlZFUn07U0VSVkVSPScrc2VydmVyKyc7REFUQUJBU0U9JytkYXRhYmFzZSsnO1VJRD0nK3VzZXJuYW1lKyc7UFdEPScrcGFzc3dvcmQrJzsnDQogICAgICAgIGNueCA9IHB5b2RiYy5jb25uZWN0KGNvbm5lY3Rpb25TdHJpbmcpDQogICAgICAgIHBsYWNlX2hvbGRlciA9ICc/Jw0KICAgICAgICBlbmcgPSAnbXNzcWwrcHltc3NxbDovL3swfTolc0B7MX0vezJ9JyAlIHF1b3RlX3BsdXMoc3RyKHBhc3N3b3JkKSkNCiAgICAgICAgY254X3N0cmluZyA9IGVuZy5mb3JtYXQodXNlcm5hbWUsc2VydmVyLGRhdGFiYXNlKQ0KICAgICAgICBteV9jb25uID0gY3JlYXRlX2VuZ2luZShjbnhfc3RyaW5nKQ0KICAgIA0KICAgIHJldHVybiBjbngNCg0KIyB0YWJsZW5hbWUgPSAnc3JlX2V2ZW50Jw0KDQpkZWYgZ2V0UHJvamVjdElkKCk6DQogICAgY254ID0gZ2V0Q29ubmVjdGlvbihkVHlwZSkNCiAgICBteWN1cnNvciA9IGNueC5jdXJzb3IoKQ0KICAgIHEgPSAnc2VsZWN0IGlkIGZyb20gdXNtX3Byb2plY3Qgd2hlcmUgbmFtZSA9IFwnJytkaWN0Wydwcm9qZWN0J10rJ1wnJw0KICAgIG15Y3Vyc29yLmV4ZWN1dGUocSkNCiAgICBteXJlc3VsdCA9IG15Y3Vyc29yLmZldGNoYWxsKCkNCiAgICBjbnguY29tbWl0KCkNCiAgICBteWN1cnNvci5jbG9zZSgpDQogICAgY254LmNsb3NlKCkNCiAgICByZXR1cm4gbXlyZXN1bHRbMF1bMF0NCiAgICANCnByb2plY3RfaWQgPSBzdHIoZ2V0UHJvamVjdElkKCkpDQoNCmdldENvbm5lY3Rpb24oZFR5cGUpDQoNCmNvbWJpbmVkRGF0YURpY3QgPXt9DQoNCm15RGF0YXNldENvbmZpZyA9IGpzb24ubG9hZHMoZGljdFsnY3B1RGF0YSddKQ0KbXlEYXRhc2V0Q29uZmlnID0geydkYXRhc2V0JzogbXlEYXRhc2V0Q29uZmlnfQ0KZGF0YSA9IERhdGFzZXRFeHRyYWN0b3JDb25maWcoJzEnLCcnLG15RGF0YXNldENvbmZpZywnJykuZ2V0RXh0cmFjdG9yKCkuZ2V0RGF0YSgpDQoNCmNvbWJpbmVkRGF0YURpY3RbJ25vZGVDcHVEYXRhJ10gPSBkYXRhLmpzb24oKQ0KDQojIHByaW50KHRpZXJNZXRyaWNzRGF0YSkNCg0KDQpteURhdGFzZXRDb25maWcgPSBqc29uLmxvYWRzKGRpY3RbJ21lbW9yeURhdGEnXSkNCm15RGF0YXNldENvbmZpZyA9IHsnZGF0YXNldCc6IG15RGF0YXNldENvbmZpZ30NCmRhdGEgPSBEYXRhc2V0RXh0cmFjdG9yQ29uZmlnKCcxJywnJyxteURhdGFzZXRDb25maWcsJycpLmdldEV4dHJhY3RvcigpLmdldERhdGEoKQ0KDQpjb21iaW5lZERhdGFEaWN0Wydub2RlTWVtb3J5RGF0YSddID0gZGF0YS5qc29uKCkNCg0KDQoNCiMgcHJpbnQodGllck1ldHJpY3NEYXRhKQ0KDQojIG15X2Nvbm4gPSBjcmVhdGVfZW5naW5lKCdteXNxbCtweW15c3FsOi8vezB9OnsxfUB7Mn0vezN9Jy5mb3JtYXQodXNlcm5hbWUscGFzc3dvcmQsaG9zdCxkYXRhYmFzZSkpDQoNCmZvciBpIGluIGNvbWJpbmVkRGF0YURpY3Q6DQogICAgZm9yIGRhdGEgaW4gY29tYmluZWREYXRhRGljdFtpXToNCiAgICAgICAgaWYgZGF0YVsnbWV0cmljTmFtZSddICE9ICdNRVRSSUMgREFUQSBOT1QgRk9VTkQnOg0KICAgICAgICAgICAgbWV0cmljX3BhdGhfc3BsaXQgPSBkYXRhWydtZXRyaWNQYXRoJ10uc3BsaXQoJ3wnKQ0KICAgICAgICAgICAgdmFsdWVzID0gZGF0YVsnbWV0cmljVmFsdWVzJ10NCiAgICAgICAgICAgIGRmID0gcGQuRGF0YUZyYW1lKHZhbHVlcykNCiAgICAgICAgICAgIGRmID0gZGYuZHJvcChbJ3VzZVJhbmdlJ10sIGF4aXM9MSkNCiAgICAgICAgICAgIGRmWydwcm9qZWN0X2lkJ10gPSBwcm9qZWN0X2lkDQogICAgICAgICAgICBkZlsnYXBtVHlwZSddID0gJ0FwcGQnDQogICAgICAgICAgICBkZi5yZW5hbWUoY29sdW1ucz17J3ZhbHVlJzonbWV0cmljVmFsdWUnLCAnc3RhcnRUaW1lSW5NaWxsaXMnOiAnc3RhcnRUaW1lJ30sIGlucGxhY2U9VHJ1ZSkNCiAgICAgICAgICAgIGRmWydtZXRyaWNUeXBlJ10gPSBtZXRyaWNfcGF0aF9zcGxpdFstMV0NCiAgICAgICAgICAgIGlmICd0aWVyJyBpbiBpOg0KICAgICAgICAgICAgICAgIGRmWydjaV9uYW1lJ10gPSBtZXRyaWNfcGF0aF9zcGxpdFsxXQ0KICAgICAgICAgICAgICAgIGRmWydjdHlwZSddID0gJ1RpZXInDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICBlbGlmICdub2RlJyBpbiBpOg0KICAgICAgICAgICAgICAgIGRmWydjaV9uYW1lJ10gPSBtZXRyaWNfcGF0aF9zcGxpdFszXQ0KICAgICAgICAgICAgICAgIGRmWydjdHlwZSddID0gJ05vZGUnDQogICAgICAgICAgICANCiAgICAgICAgICAgIGVsaWYgJ292ZXJhbGwnIGluIGk6DQogICAgICAgICAgICAgICAgaWYgbGVuKG1ldHJpY19wYXRoX3NwbGl0KSA9PSAyOg0KICAgICAgICAgICAgICAgICAgICBkZlsnbWV0cmljVHlwZSddID0gbWV0cmljX3BhdGhfc3BsaXRbLTFdDQogICAgICAgICAgICAgICAgICAgIGRmWydjaV9uYW1lJ10gPSBkaWN0WydhcHBsaWNhdGlvbk5hbWUnXQ0KICAgICAgICAgICAgICAgICAgICBkZlsnY3R5cGUnXSA9ICdBcHBsaWNhdGlvbicNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZGYpDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgZGZbJ21ldHJpY1R5cGUnXSA9IG1ldHJpY19wYXRoX3NwbGl0Wy0xXQ0KICAgICAgICAgICAgICAgICAgICBkZlsnY2lfbmFtZSddID0gbWV0cmljX3BhdGhfc3BsaXRbLTJdDQogICAgICAgICAgICAgICAgICAgIGRmWydjdHlwZSddID0gJ1RpZXInDQoNCiAgICAgICAgICAgIHByaW50KGRmKQ0KICAgICAgICANCg0KICAgICAgICANCiAgICAgICAgICAgIGRmLnRvX3NxbChjb249bXlfY29ubiwgbmFtZT0nc3JlX21ldHJpY3MnLCBpZl9leGlzdHM9J2FwcGVuZCcsIGluZGV4PUZhbHNlKQ0KICAgICAgICAgICAgDQoNCnByaW50KCdDb21wbGV0ZWQnKQ0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQo=","leo1311"
"APMERDTL90894","APMERDTL90894_leo1311.py","aW1wb3J0IHJlcXVlc3RzCmltcG9ydCBqc29uCmltcG9ydCBteXNxbC5jb25uZWN0b3IKaW1wb3J0IHBhbmRhcyBhcyBwZApmcm9tIHNxbGFsY2hlbXkgaW1wb3J0IGNyZWF0ZV9lbmdpbmUKaW1wb3J0IHN5cwpmcm9tIHVybGxpYi5wYXJzZSBpbXBvcnQgcXVvdGVfcGx1cywgdXJscGFyc2UKZnJvbSBsZWFwLnV0aWxzLlV0aWxpdGllcyBpbXBvcnQgVXRpbGl0aWVzCmltcG9ydCBsb2dnaW5nIGFzIGxvZ2dlcgppbXBvcnQgb3MKZnJvbSBweXNwYXJrLnNxbCBpbXBvcnQgU3BhcmtTZXNzaW9uCmltcG9ydCBzeXMKZnJvbSBweXNwYXJrLnNxbC5mdW5jdGlvbnMgaW1wb3J0ICoKZnJvbSBweXNwYXJrLnNxbC50eXBlcyBpbXBvcnQgKgppbXBvcnQgZGF0ZXRpbWUKZnJvbSByZXF1ZXN0cy5hdXRoIGltcG9ydCBIVFRQQmFzaWNBdXRoCmltcG9ydCB0aW1lCmZyb20gbGVhcC5jb25maWcuRXh0cmFjdG9yQ29uZmlncy5EYXRhc2V0RXh0cmFjdG9yQ29uZmlnIGltcG9ydCBEYXRhc2V0RXh0cmFjdG9yQ29uZmlnCmltcG9ydCBweW9kYmMKaW1wb3J0IHB5bXlzcWwKaW1wb3J0IHB5bXNzcWwKCiMgb3MuZW52aXJvblsnTk9fUFJPWFknXT0nbGVhcC1wb3Yuc2Fhcy5hcHBkeW5hbWljcy5jb20nCgpsb2dnZXIuYmFzaWNDb25maWcobGV2ZWw9bG9nZ2VyLklORk8sIGZvcm1hdD0nJShhc2N0aW1lKXMgSU5GTyAlKG1lc3NhZ2UpcycsIGRhdGVmbXQ9JyV5LyVtLyVkICVIOiVNOiVTJykKYXJndW1lbnRzID0gc3lzLmFyZ3YKZGljdCA9IHt9CmZvciBhcmcgaW4gYXJndW1lbnRzOgogICAgdHJ5OgogICAgICAgIGRpY3RbYXJnLnNwbGl0KCc6JylbMF1dID0gKCc6Jykuam9pbihhcmcuc3BsaXQoJzonKVsxOl0pCiAgICBleGNlcHQ6CiAgICAgICAgYSA9ICdlcnJvcicKIyBwcmludCgnZGljdGlvbmFyeScsIGRpY3QpCiNkYiBkZXRhaWxzCkR5bmF0cmFjZURlbW9kaWN0PWpzb24ubG9hZHMoZGljdFsnQXBwRHluYW1pY3MnXSkKCnVybD1EeW5hdHJhY2VEZW1vZGljdFsndXJsJ10KZFR5cGUgPSB1cmwuc3BsaXQoJzonKVsxXQpwbGFjZV9ob2xkZXIgPSBOb25lCm15X2Nvbm4gPSBOb25lCgoKCmRlZiBnZXRDb25uZWN0aW9uKGRUeXBlKToKICAgIGdsb2JhbCBwbGFjZV9ob2xkZXIKICAgIGdsb2JhbCBteV9jb25uCiAgICBjbnggPSBOb25lCiAgICB1c2VybmFtZSA9IER5bmF0cmFjZURlbW9kaWN0Wyd1c2VyTmFtZSddCiAgICBwYXNzd29yZCA9IFV0aWxpdGllcy5kZWNyeXB0KER5bmF0cmFjZURlbW9kaWN0WydwYXNzd29yZCddLCBEeW5hdHJhY2VEZW1vZGljdFsnc2FsdCddKQogICAgaWYgZFR5cGUgPT0gJ215c3FsJzoKICAgICAgICBob3N0ID0gdXJscGFyc2UoRHluYXRyYWNlRGVtb2RpY3RbJ3VybCddWzU6XSkuaG9zdG5hbWUKICAgICAgICBwb3J0ID0gdXJscGFyc2UoRHluYXRyYWNlRGVtb2RpY3RbJ3VybCddWzU6XSkucG9ydAogICAgICAgIGRhdGFiYXNlID0gdXJscGFyc2UoRHluYXRyYWNlRGVtb2RpY3RbJ3VybCddWzU6XSkucGF0aC5yc3BsaXQoJy8nLCAxKVsxXQogICAgICAgIGNueCA9IG15c3FsLmNvbm5lY3Rvci5jb25uZWN0KHVzZXI9dXNlcm5hbWUsIHBhc3N3b3JkPXBhc3N3b3JkLCBob3N0PWhvc3QsIHBvcnQ9cG9ydCwgZGF0YWJhc2U9ZGF0YWJhc2UpCiAgICAgICAgcGxhY2VfaG9sZGVyID0gJyVzJwogICAgICAgICMgbXlfY29ubiA9IGNyZWF0ZV9lbmdpbmUoJ215c3FsK3B5bXlzcWw6Ly97MH06ezF9QHsyfS97M30nLmZvcm1hdCh1c2VybmFtZSxwYXNzd29yZCxob3N0LGRhdGFiYXNlKSkKICAgICAgICBjbnhfc3RyaW5nID0gJ215c3FsK3B5bXlzcWw6Ly97MH06JXNAezF9L3syfScgJSBxdW90ZV9wbHVzKHN0cihwYXNzd29yZCkpCiAgICAgICAgcHJpbnQoJ3Bhc3N3b3JkIGlzJywgcGFzc3dvcmQpCiAgICAgICAgY254X3N0cmluZyA9IGNueF9zdHJpbmcuZm9ybWF0KHVzZXJuYW1lLGhvc3QsZGF0YWJhc2UpCiAgICAgICAgcHJpbnQoJ2NueFN0cmluZyBpcycgLCBjbnhfc3RyaW5nKQogICAgICAgIG15X2Nvbm4gPSBjcmVhdGVfZW5naW5lKGNueF9zdHJpbmcpCiAgICAgICAgCiAgICAgICAgCiAgICBlbGlmIGRUeXBlID09ICdzcWxzZXJ2ZXInOgogICAgICAgICMgc2VydmVyID0gdXJsLnNwbGl0KCcvLycpWzFdLnNwbGl0KCc7JylbMF0ucmVwbGFjZSgnXFNRTCcsJ1NRTCcpCiAgICAgICAgc2VydmVyID0gdXJsLnNwbGl0KCcvLycpWzFdLnNwbGl0KCc7JylbMF0KICAgICAgICBkYXRhYmFzZSA9ICh1cmwuc3BsaXQoJz0nKSlbMV0KICAgICAgICBjb25uZWN0aW9uU3RyaW5nID0gJ0RSSVZFUj17T0RCQyBEcml2ZXIgMTcgZm9yIFNRTCBTRVJWRVJ9O1NFUlZFUj0nK3NlcnZlcisnO0RBVEFCQVNFPScrZGF0YWJhc2UrJztVSUQ9Jyt1c2VybmFtZSsnO1BXRD0nK3Bhc3N3b3JkKyc7JwogICAgICAgIGNueCA9IHB5b2RiYy5jb25uZWN0KGNvbm5lY3Rpb25TdHJpbmcpCiAgICAgICAgcGxhY2VfaG9sZGVyID0gJz8nCiAgICAgICAgZW5nID0gJ21zc3FsK3B5bXNzcWw6Ly97MH06JXNAezF9L3syfScgJSBxdW90ZV9wbHVzKHN0cihwYXNzd29yZCkpCiAgICAgICAgY254X3N0cmluZyA9IGVuZy5mb3JtYXQodXNlcm5hbWUsc2VydmVyLGRhdGFiYXNlKQogICAgICAgIG15X2Nvbm4gPSBjcmVhdGVfZW5naW5lKGNueF9zdHJpbmcpCiAgICAKICAgIHJldHVybiBjbngKICAgIApkZWYgZ2V0UHJvamVjdElkKCk6CiAgICBjbnggPSBnZXRDb25uZWN0aW9uKGRUeXBlKQogICAgbXljdXJzb3IgPSBjbnguY3Vyc29yKCkKICAgIHEgPSAnc2VsZWN0IGlkIGZyb20gdXNtX3Byb2plY3Qgd2hlcmUgbmFtZSA9IFwnJytkaWN0Wydwcm9qZWN0J10rJ1wnJwogICAgbXljdXJzb3IuZXhlY3V0ZShxKQogICAgbXlyZXN1bHQgPSBteWN1cnNvci5mZXRjaGFsbCgpCiAgICBjbnguY29tbWl0KCkKICAgIG15Y3Vyc29yLmNsb3NlKCkKICAgIGNueC5jbG9zZSgpCiAgICByZXR1cm4gbXlyZXN1bHRbMF1bMF0KICAgIAojIHRhYmxlbmFtZSA9ICdzcmVfZXZlbnQnCnByb2plY3RfaWQgPSBzdHIoZ2V0UHJvamVjdElkKCkpCgpjbnggPSBnZXRDb25uZWN0aW9uKGRUeXBlKQoKCmNvbWJpbmVkRGF0YURpY3QgPXt9CgpteURhdGFzZXRDb25maWcgPSBqc29uLmxvYWRzKGRpY3RbJ2Vycm9yc0RhdGEnXSkKbXlEYXRhc2V0Q29uZmlnID0geydkYXRhc2V0JzogbXlEYXRhc2V0Q29uZmlnfQpkYXRhID0gRGF0YXNldEV4dHJhY3RvckNvbmZpZygnMScsJycsbXlEYXRhc2V0Q29uZmlnLCcnKS5nZXRFeHRyYWN0b3IoKS5nZXREYXRhKCkKCmNvbWJpbmVkRGF0YURpY3RbJ2Vycm9yc0RhdGEnXSA9IGRhdGEuanNvbigpCgojIHByaW50KHRpZXJNZXRyaWNzRGF0YSkKCgojIHByaW50KHRpZXJNZXRyaWNzRGF0YSkKCiMgbXlfY29ubiA9IGNyZWF0ZV9lbmdpbmUoJ215c3FsK3B5bXlzcWw6Ly97MH06ezF9QHsyfS97M30nLmZvcm1hdCh1c2VybmFtZSxwYXNzd29yZCxob3N0LGRhdGFiYXNlKSkKCmZvciBpIGluIGNvbWJpbmVkRGF0YURpY3Q6CiAgICBmb3IgZGF0YSBpbiBjb21iaW5lZERhdGFEaWN0W2ldOgogICAgICAgIGlmIGRhdGFbJ21ldHJpY05hbWUnXSAhPSAnTUVUUklDIERBVEEgTk9UIEZPVU5EJzoKICAgICAgICAgICAgbWV0cmljX3BhdGhfc3BsaXQgPSBkYXRhWydtZXRyaWNQYXRoJ10uc3BsaXQoJ3wnKQogICAgICAgICAgICB2YWx1ZXMgPSBkYXRhWydtZXRyaWNWYWx1ZXMnXQogICAgICAgICAgICBkZiA9IHBkLkRhdGFGcmFtZSh2YWx1ZXMpCiAgICAgICAgICAgIGRmID0gZGYuZHJvcChbJ3VzZVJhbmdlJ10sIGF4aXM9MSkKICAgICAgICAgICAgZGZbJ3Byb2plY3RfaWQnXSA9IHByb2plY3RfaWQKICAgICAgICAgICAgZGZbJ2FwbVR5cGUnXSA9ICdBcHBEJwogICAgICAgICAgICBkZi5yZW5hbWUoY29sdW1ucz17J3ZhbHVlJzonbWV0cmljVmFsdWUnLCAnc3RhcnRUaW1lSW5NaWxsaXMnOiAnc3RhcnRUaW1lJ30sIGlucGxhY2U9VHJ1ZSkKICAgICAgICAKICAgICAgICAgICAgZGZbJ21ldHJpY1R5cGUnXSA9IG1ldHJpY19wYXRoX3NwbGl0Wy0xXQogICAgICAgICAgICBkZlsnY2lfbmFtZSddID0gbWV0cmljX3BhdGhfc3BsaXRbMV0KICAgICAgICAgICAgZGZbJ21ldHJpY1BhdGgnXSA9IG1ldHJpY19wYXRoX3NwbGl0Wy0yXQogICAgICAgICAgICBkZlsnY3R5cGUnXSA9ICdUaWVyJwogICAgICAgICAgICBwcmludChkZikKICAgICAgICAgICAgIyBkZi50b19leGNlbCgnb3V0cHV0Lnhsc3gnKQogICAgICAgICAgICAKICAgICAgICAgICAgZGYudG9fc3FsKGNvbj1teV9jb25uLCBuYW1lPSdzcmVfbWV0cmljcycsIGlmX2V4aXN0cz0nYXBwZW5kJywgaW5kZXg9RmFsc2UpCgoKcHJpbnQoJ0NvbXBsZXRlZCcpICAgICAgICAKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoK","leo1311"
"APMBSNST86795","APMBSNST86795_leo1311.py","aW1wb3J0IHJlcXVlc3RzCmltcG9ydCBqc29uCmltcG9ydCBteXNxbC5jb25uZWN0b3IKaW1wb3J0IHBhbmRhcyBhcyBwZApmcm9tIHNxbGFsY2hlbXkgaW1wb3J0IGNyZWF0ZV9lbmdpbmUKaW1wb3J0IHN5cwpmcm9tIHVybGxpYi5wYXJzZSBpbXBvcnQgcXVvdGVfcGx1cywgdXJscGFyc2UKZnJvbSBsZWFwLnV0aWxzLlV0aWxpdGllcyBpbXBvcnQgVXRpbGl0aWVzCmltcG9ydCBsb2dnaW5nIGFzIGxvZ2dlcgppbXBvcnQgb3MKZnJvbSBweXNwYXJrLnNxbCBpbXBvcnQgU3BhcmtTZXNzaW9uCmltcG9ydCBzeXMKZnJvbSBweXNwYXJrLnNxbC5mdW5jdGlvbnMgaW1wb3J0ICoKZnJvbSBweXNwYXJrLnNxbC50eXBlcyBpbXBvcnQgKgppbXBvcnQgZGF0ZXRpbWUKZnJvbSByZXF1ZXN0cy5hdXRoIGltcG9ydCBIVFRQQmFzaWNBdXRoCmltcG9ydCB0aW1lCmltcG9ydCBweW9kYmMKaW1wb3J0IHB5bXlzcWwKaW1wb3J0IHB5bXNzcWwKZnJvbSBsZWFwLmNvbmZpZy5FeHRyYWN0b3JDb25maWdzLkRhdGFzZXRFeHRyYWN0b3JDb25maWcgaW1wb3J0IERhdGFzZXRFeHRyYWN0b3JDb25maWcKCiMgb3MuZW52aXJvblsnTk9fUFJPWFknXT0nbGVhcC1wb3Yuc2Fhcy5hcHBkeW5hbWljcy5jb20nCgoKbG9nZ2VyLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dlci5JTkZPLCBmb3JtYXQ9JyUoYXNjdGltZSlzIElORk8gJShtZXNzYWdlKXMnLCBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycpCmFyZ3VtZW50cyA9IHN5cy5hcmd2CmRpY3QgPSB7fQpmb3IgYXJnIGluIGFyZ3VtZW50czoKICAgIHRyeToKICAgICAgICBkaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICgnOicpLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQogICAgZXhjZXB0OgogICAgICAgIGEgPSAnZXJyb3InCiMgcHJpbnQoJ2RpY3Rpb25hcnknLCBkaWN0KQojZGIgZGV0YWlscwpEeW5hdHJhY2VEZW1vZGljdD1qc29uLmxvYWRzKGRpY3RbJ0FwcER5bmFtaWNzJ10pCgp1cmw9RHluYXRyYWNlRGVtb2RpY3RbJ3VybCddCmRUeXBlID0gdXJsLnNwbGl0KCc6JylbMV0KcGxhY2VfaG9sZGVyID0gTm9uZQpteV9jb25uID0gTm9uZQoKCgpkZWYgZ2V0Q29ubmVjdGlvbihkVHlwZSk6CiAgICBnbG9iYWwgcGxhY2VfaG9sZGVyCiAgICBnbG9iYWwgbXlfY29ubgogICAgY254ID0gTm9uZQogICAgdXNlcm5hbWUgPSBEeW5hdHJhY2VEZW1vZGljdFsndXNlck5hbWUnXQogICAgcGFzc3dvcmQgPSBVdGlsaXRpZXMuZGVjcnlwdChEeW5hdHJhY2VEZW1vZGljdFsncGFzc3dvcmQnXSwgRHluYXRyYWNlRGVtb2RpY3RbJ3NhbHQnXSkKICAgIGlmIGRUeXBlID09ICdteXNxbCc6CiAgICAgICAgaG9zdCA9IHVybHBhcnNlKER5bmF0cmFjZURlbW9kaWN0Wyd1cmwnXVs1Ol0pLmhvc3RuYW1lCiAgICAgICAgcG9ydCA9IHVybHBhcnNlKER5bmF0cmFjZURlbW9kaWN0Wyd1cmwnXVs1Ol0pLnBvcnQKICAgICAgICBkYXRhYmFzZSA9IHVybHBhcnNlKER5bmF0cmFjZURlbW9kaWN0Wyd1cmwnXVs1Ol0pLnBhdGgucnNwbGl0KCcvJywgMSlbMV0KICAgICAgICBjbnggPSBteXNxbC5jb25uZWN0b3IuY29ubmVjdCh1c2VyPXVzZXJuYW1lLCBwYXNzd29yZD1wYXNzd29yZCwgaG9zdD1ob3N0LCBwb3J0PXBvcnQsIGRhdGFiYXNlPWRhdGFiYXNlKQogICAgICAgIHBsYWNlX2hvbGRlciA9ICclcycKICAgICAgICAjIG15X2Nvbm4gPSBjcmVhdGVfZW5naW5lKCdteXNxbCtweW15c3FsOi8vezB9OnsxfUB7Mn0vezN9Jy5mb3JtYXQodXNlcm5hbWUscGFzc3dvcmQsaG9zdCxkYXRhYmFzZSkpCiAgICAgICAgY254X3N0cmluZyA9ICdteXNxbCtweW15c3FsOi8vezB9OiVzQHsxfS97Mn0nICUgcXVvdGVfcGx1cyhzdHIocGFzc3dvcmQpKQogICAgICAgIHByaW50KCdwYXNzd29yZCBpcycsIHBhc3N3b3JkKQogICAgICAgIGNueF9zdHJpbmcgPSBjbnhfc3RyaW5nLmZvcm1hdCh1c2VybmFtZSxob3N0LGRhdGFiYXNlKQogICAgICAgIHByaW50KCdjbnhTdHJpbmcgaXMnICwgY254X3N0cmluZykKICAgICAgICBteV9jb25uID0gY3JlYXRlX2VuZ2luZShjbnhfc3RyaW5nKQogICAgICAgIAogICAgICAgIAogICAgZWxpZiBkVHlwZSA9PSAnc3Fsc2VydmVyJzoKICAgICAgICAjIHNlcnZlciA9IHVybC5zcGxpdCgnLy8nKVsxXS5zcGxpdCgnOycpWzBdLnJlcGxhY2UoJ1xTUUwnLCdTUUwnKQogICAgICAgIHNlcnZlciA9IHVybC5zcGxpdCgnLy8nKVsxXS5zcGxpdCgnOycpWzBdCiAgICAgICAgZGF0YWJhc2UgPSAodXJsLnNwbGl0KCc9JykpWzFdCiAgICAgICAgY29ubmVjdGlvblN0cmluZyA9ICdEUklWRVI9e09EQkMgRHJpdmVyIDE3IGZvciBTUUwgU0VSVkVSfTtTRVJWRVI9JytzZXJ2ZXIrJztEQVRBQkFTRT0nK2RhdGFiYXNlKyc7VUlEPScrdXNlcm5hbWUrJztQV0Q9JytwYXNzd29yZCsnOycKICAgICAgICBjbnggPSBweW9kYmMuY29ubmVjdChjb25uZWN0aW9uU3RyaW5nKQogICAgICAgIHBsYWNlX2hvbGRlciA9ICc/JwogICAgICAgIGVuZyA9ICdtc3NxbCtweW1zc3FsOi8vezB9OiVzQHsxfS97Mn0nICUgcXVvdGVfcGx1cyhzdHIocGFzc3dvcmQpKQogICAgICAgIGNueF9zdHJpbmcgPSBlbmcuZm9ybWF0KHVzZXJuYW1lLHNlcnZlcixkYXRhYmFzZSkKICAgICAgICBteV9jb25uID0gY3JlYXRlX2VuZ2luZShjbnhfc3RyaW5nKQogICAgCiAgICByZXR1cm4gY254CiAgICAKCmRlZiBnZXRQcm9qZWN0SWQoKToKICAgIGNueCA9IGdldENvbm5lY3Rpb24oZFR5cGUpCiAgICBteWN1cnNvciA9IGNueC5jdXJzb3IoKQogICAgcSA9ICdzZWxlY3QgaWQgZnJvbSB1c21fcHJvamVjdCB3aGVyZSBuYW1lID0gXCcnK2RpY3RbJ3Byb2plY3QnXSsnXCcnCiAgICBteWN1cnNvci5leGVjdXRlKHEpCiAgICBteXJlc3VsdCA9IG15Y3Vyc29yLmZldGNoYWxsKCkKICAgIGNueC5jb21taXQoKQogICAgbXljdXJzb3IuY2xvc2UoKQogICAgY254LmNsb3NlKCkKICAgIHJldHVybiBteXJlc3VsdFswXVswXQojIHRhYmxlbmFtZSA9ICdzcmVfZXZlbnQnCnByb2plY3RfaWQgPSBzdHIoZ2V0UHJvamVjdElkKCkpCgpjbnggPSBnZXRDb25uZWN0aW9uKGRUeXBlKQoKCgpjb21iaW5lZERhdGFEaWN0ID17fQoKbXlEYXRhc2V0Q29uZmlnID0ganNvbi5sb2FkcyhkaWN0Wyd0cmFuc2FjdGlvbnNEYXRhJ10pCm15RGF0YXNldENvbmZpZyA9IHsnZGF0YXNldCc6IG15RGF0YXNldENvbmZpZ30KZGF0YSA9IERhdGFzZXRFeHRyYWN0b3JDb25maWcoJzEnLCcnLG15RGF0YXNldENvbmZpZywnJykuZ2V0RXh0cmFjdG9yKCkuZ2V0RGF0YSgpCgpjb21iaW5lZERhdGFEaWN0Wyd0cmFuc2FjdGlvbnNEYXRhJ10gPSBkYXRhLmpzb24oKQoKCgojIHByaW50KHRpZXJNZXRyaWNzRGF0YSkKCgojIHByaW50KHRpZXJNZXRyaWNzRGF0YSkKCiMgbXlfY29ubiA9IGNyZWF0ZV9lbmdpbmUoJ215c3FsK3B5bXlzcWw6Ly97MH06ezF9QHsyfS97M30nLmZvcm1hdCh1c2VybmFtZSxwYXNzd29yZCxob3N0LGRhdGFiYXNlKSkKCmZvciBpIGluIGNvbWJpbmVkRGF0YURpY3Q6CiAgICBmb3IgZGF0YSBpbiBjb21iaW5lZERhdGFEaWN0W2ldOgogICAgICAgIGlmIGRhdGFbJ21ldHJpY05hbWUnXSAhPSAnTUVUUklDIERBVEEgTk9UIEZPVU5EJzoKICAgICAgICAgICAgbWV0cmljX3BhdGhfc3BsaXQgPSBkYXRhWydtZXRyaWNQYXRoJ10uc3BsaXQoJ3wnKQogICAgICAgICAgICB2YWx1ZXMgPSBkYXRhWydtZXRyaWNWYWx1ZXMnXQogICAgICAgICAgICBkZiA9IHBkLkRhdGFGcmFtZSh2YWx1ZXMpCiAgICAgICAgICAgIGRmID0gZGYuZHJvcChbJ3VzZVJhbmdlJ10sIGF4aXM9MSkKICAgICAgICAgICAgZGZbJ3Byb2plY3RfaWQnXSA9IHByb2plY3RfaWQKICAgICAgICAgICAgZGZbJ2FwbVR5cGUnXSA9ICdBcHBEJwogICAgICAgICAgICBkZlsnYXBpVHlwZSddID0gJ0J1c2luZXNzIFRyYW5zYWN0aW9uIFBlcmZvcm1hbmNlJwogICAgICAgICAgICBkZi5yZW5hbWUoY29sdW1ucz17J3ZhbHVlJzonbWV0cmljVmFsdWUnLCAnc3RhcnRUaW1lSW5NaWxsaXMnOiAnc3RhcnRUaW1lJ30sIGlucGxhY2U9VHJ1ZSkKICAgICAgICAgICAgZGZbJ21ldHJpY1R5cGUnXSA9IG1ldHJpY19wYXRoX3NwbGl0Wy0xXQogICAgICAgICAgICBkZlsnY2lfbmFtZSddID0gbWV0cmljX3BhdGhfc3BsaXRbMl0KICAgICAgICAgICAgZGZbJ21ldHJpY1BhdGgnXSA9IG1ldHJpY19wYXRoX3NwbGl0WzNdCiAgICAgICAgICAgIGRmWydjdHlwZSddID0gJ1RpZXInCgogICAgICAgICAgICBwcmludChkZikKCiAgICAgICAgICAgIAoKICAgICAgICAgICAgZGYudG9fc3FsKGNvbj1teV9jb25uLCBuYW1lPSdzcmVfbWV0cmljcycsIGlmX2V4aXN0cz0nYXBwZW5kJywgaW5kZXg9RmFsc2UpCgoKcHJpbnQoJ0NvbXBsZXRlZCcpCiAgICAgICAgCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgo=","leo1311"
"APMBSNSM29436","APMBSNSM29436_leo1311.py","aW1wb3J0IHJlcXVlc3RzCmltcG9ydCBqc29uCmltcG9ydCBteXNxbC5jb25uZWN0b3IKaW1wb3J0IHBhbmRhcyBhcyBwZAppbXBvcnQgc3lzCmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCBxdW90ZV9wbHVzLCB1cmxwYXJzZQpmcm9tIGxlYXAudXRpbHMuVXRpbGl0aWVzIGltcG9ydCBVdGlsaXRpZXMKaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyCmltcG9ydCBvcwppbXBvcnQgcHlvZGJjCiMgaW1wb3J0IHB5bXNzcWwKaW1wb3J0IGRhdGV0aW1lCgoKbG9nZ2VyLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dlci5JTkZPLCBmb3JtYXQ9JyUoYXNjdGltZSlzIElORk8gJShtZXNzYWdlKXMnLCBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycpCgojIG9zLmVudmlyb25bJ05PX1BST1hZJ109J2xlYXAtcG92LnNhYXMuYXBwZHluYW1pY3MuY29tJwoKYXJndW1lbnRzID0gc3lzLmFyZ3YKCmRpY3QgPSB7fQoKZm9yIGFyZyBpbiBhcmd1bWVudHM6CgogICAgdHJ5OgoKICAgICAgICBkaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICgnOicpLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQoKICAgIGV4Y2VwdDoKCiAgICAgICAgYSA9ICdlcnJvcicKCnByaW50KCdkaWN0aW9uYXJ5JywgZGljdCkKCiNkYiBkZXRhaWxzCgpEeW5hdHJhY2VEZW1vZGljdCA9IGpzb24ubG9hZHMoZGljdFsnQXBwRHluYW1pY3MnXSkKCgp1cmw9RHluYXRyYWNlRGVtb2RpY3RbJ3VybCddCgpkVHlwZSA9IHVybC5zcGxpdCgnOicpWzFdCgpwaCA9IE5vbmUKCm15X2Nvbm4gPSBOb25lCgpkZWYgZ2V0Q29ubmVjdGlvbihkVHlwZSk6CiAgICBnbG9iYWwgcGgKICAgIGdsb2JhbCBteV9jb25uCiAgICBjbnggPSBOb25lCiAgICB1c2VybmFtZSA9IER5bmF0cmFjZURlbW9kaWN0Wyd1c2VyTmFtZSddCiAgICBwYXNzd29yZCA9IFV0aWxpdGllcy5kZWNyeXB0KER5bmF0cmFjZURlbW9kaWN0WydwYXNzd29yZCddLCBEeW5hdHJhY2VEZW1vZGljdFsnc2FsdCddKQogICAgaWYgZFR5cGUgPT0gJ215c3FsJzoKICAgICAgICBob3N0ID0gdXJscGFyc2UoRHluYXRyYWNlRGVtb2RpY3RbJ3VybCddWzU6XSkuaG9zdG5hbWUKICAgICAgICBwb3J0ID0gdXJscGFyc2UoRHluYXRyYWNlRGVtb2RpY3RbJ3VybCddWzU6XSkucG9ydAogICAgICAgIGRhdGFiYXNlID0gdXJscGFyc2UoRHluYXRyYWNlRGVtb2RpY3RbJ3VybCddWzU6XSkucGF0aC5yc3BsaXQoJy8nLCAxKVsxXQogICAgICAgIGNueCA9IG15c3FsLmNvbm5lY3Rvci5jb25uZWN0KHVzZXI9dXNlcm5hbWUsIHBhc3N3b3JkPXBhc3N3b3JkLCBob3N0PWhvc3QsIHBvcnQ9cG9ydCwgZGF0YWJhc2U9ZGF0YWJhc2UpCiAgICAgICAgcGggPSAnJXMnCiAgICAgICAgIyBteV9jb25uID0gY3JlYXRlX2VuZ2luZSgnbXlzcWwrcHlteXNxbDovL3swfTp7MX1AezJ9L3szfScuZm9ybWF0KHVzZXJuYW1lLHBhc3N3b3JkLGhvc3QsZGF0YWJhc2UpKQogICAgICAgICMgY254X3N0cmluZyA9ICdteXNxbCtweW15c3FsOi8vezB9OiVzQHsxfS97Mn0nICUgcXVvdGVfcGx1cyhzdHIocGFzc3dvcmQpKQogICAgICAgICMgcHJpbnQoJ3Bhc3N3b3JkIGlzJywgcGFzc3dvcmQpCiAgICAgICAgIyBjbnhfc3RyaW5nID0gY254X3N0cmluZy5mb3JtYXQodXNlcm5hbWUsaG9zdCxkYXRhYmFzZSkKICAgICAgICAjIHByaW50KCdjbnhTdHJpbmcgaXMnICwgY254X3N0cmluZykKICAgICAgICAjIG15X2Nvbm4gPSBjcmVhdGVfZW5naW5lKGNueF9zdHJpbmcpCiAgICAgICAgCiAgICAgICAgCiAgICBlbGlmIGRUeXBlID09ICdzcWxzZXJ2ZXInOgogICAgICAgICMgc2VydmVyID0gdXJsLnNwbGl0KCcvLycpWzFdLnNwbGl0KCc7JylbMF0ucmVwbGFjZSgnXFNRTCcsJ1NRTCcpCiAgICAgICAgc2VydmVyID0gdXJsLnNwbGl0KCcvLycpWzFdLnNwbGl0KCc7JylbMF0KICAgICAgICBkYXRhYmFzZSA9ICh1cmwuc3BsaXQoJz0nKSlbMV0KICAgICAgICBjb25uZWN0aW9uU3RyaW5nID0gJ0RSSVZFUj17T0RCQyBEcml2ZXIgMTcgZm9yIFNRTCBTRVJWRVJ9O1NFUlZFUj0nK3NlcnZlcisnO0RBVEFCQVNFPScrZGF0YWJhc2UrJztVSUQ9Jyt1c2VybmFtZSsnO1BXRD0nK3Bhc3N3b3JkKyc7JwogICAgICAgIGNueCA9IHB5b2RiYy5jb25uZWN0KGNvbm5lY3Rpb25TdHJpbmcpCiAgICAgICAgcGggPSAnPycKICAgICAgICAjIGVuZyA9ICdtc3NxbCtweW1zc3FsOi8vbGVhcGFkbWluOiVzQFZJQ1RBRFBTVC0xM1xcU1FMU0VSVkVSXzE3L2xlYXBtYXN0ZXInICUgcXVvdGVfcGx1cyhzdHIocGFzc3dvcmQpKQogICAgICAgIGVuZyA9ICdtc3NxbCtweW1zc3FsOi8vezB9OiVzQHsxfS97Mn0nICUgcXVvdGVfcGx1cyhzdHIocGFzc3dvcmQpKQogICAgICAgIGNueF9zdHJpbmcgPSBlbmcuZm9ybWF0KHVzZXJuYW1lLHNlcnZlcixkYXRhYmFzZSkKICAgICAgICBteV9jb25uID0gY3JlYXRlX2VuZ2luZShjbnhfc3RyaW5nKQogICAgICAgICAgICAKICAgIHJldHVybiBjbngKICAgIAoKZGVmIGdldFByb2plY3RJZCgpOgogICAgY254ID0gZ2V0Q29ubmVjdGlvbihkVHlwZSkKICAgIG15Y3Vyc29yID0gY254LmN1cnNvcigpCiAgICBxID0gJ3NlbGVjdCBpZCBmcm9tIHVzbV9wcm9qZWN0IHdoZXJlIG5hbWUgPSBcJycrZGljdFsncHJvamVjdCddKydcJycKICAgIG15Y3Vyc29yLmV4ZWN1dGUocSkKICAgIG15cmVzdWx0ID0gbXljdXJzb3IuZmV0Y2hhbGwoKQogICAgY254LmNvbW1pdCgpCiAgICBteWN1cnNvci5jbG9zZSgpCiAgICBjbnguY2xvc2UoKQogICAgcmV0dXJuIG15cmVzdWx0WzBdWzBdCgoKCnByb2plY3RfaWQgPSBzdHIoZ2V0UHJvamVjdElkKCkpCgoKY254ID0gZ2V0Q29ubmVjdGlvbihkVHlwZSkKbXljdXJzb3IgPSBjbnguY3Vyc29yKCkKCmRhdGVfdG9kYXkgPSBkYXRldGltZS5kYXRldGltZS5ub3coKQpkYXRlX3llc3RlcmRheSA9IGRhdGV0aW1lLmRhdGV0aW1lLm5vdygpIC0gZGF0ZXRpbWUudGltZWRlbHRhKDEpCmVuZCA9IGRhdGV0aW1lLmRhdGV0aW1lLnRpbWVzdGFtcChkYXRlX3RvZGF5KSoxMDAwCnN0YXJ0ID0gZGF0ZXRpbWUuZGF0ZXRpbWUudGltZXN0YW1wKGRhdGVfeWVzdGVyZGF5KSoxMDAwCgoKdXJsID0gJ2h0dHBzOi8vYW5hbHl0aWNzLmFwaS5hcHBkeW5hbWljcy5jb20vZXZlbnRzL3F1ZXJ5P3N0YXJ0PScrc3RyKGludChzdGFydCkpKycmZW5kPScrc3RyKGludChlbmQpKSsnJmxpbWl0PTEwMDAnCmhlYWRlcnMgPSB7CiAgICAnWC1FdmVudHMtQVBJLUFjY291bnROYW1lJzonbGVhcC1wb3ZfMjA0NmE1Y2UtYWNiNS00ZDAzLWEyZGQtNDZkOWQ3ZTdmMjUzJywKICAgICdYLUV2ZW50cy1BUEktS2V5JzogJ2VkZGM5NjhmLTIzM2UtNDg4Mi1iZGI2LTJlNWQ2NTJiM2FmYycsCiAgICAnQ29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL3ZuZC5hcHBkLmV2ZW50cytqc29uO3Y9MicKfQoKCmF2Z190a3RfcHJpY2UgPSAnU0VMRUNUIGF2ZyhzZWdtZW50cy51c2VyRGF0YS50aWNrZXRQcmljZSkgQVMgXCdBdmVyYWdlIFRpY2tldCBQcmljZVwnIEZST00gdHJhbnNhY3Rpb25zIFdIRVJFIGFwcGxpY2F0aW9uID0gXCdBRC1BaXItTGVhcFwnJyAKcHJpY2Vfc3VtICA9ICdTRUxFQ1Qgc3VtKHNlZ21lbnRzLnVzZXJEYXRhLnRpY2tldFByaWNlKSBBUyBcJ1RvdGFsIFByaWNlXCcgRlJPTSB0cmFuc2FjdGlvbnMgV0hFUkUgYXBwbGljYXRpb24gPSBcJ0FELUFpci1MZWFwXCcgJwp0aWNrZXRzX3NvbGQgPSAnU0VMRUNUIGNvdW50KHNlZ21lbnRzLnVzZXJEYXRhLnRpY2tldElkKSBBUyBcJ1RpY2tldCBTb2xkXCcgRlJPTSB0cmFuc2FjdGlvbnMgV0hFUkUgYXBwbGljYXRpb24gPSBcJ0FELUFpci1MZWFwXCcnCnVzZXJfdmlzaXRlZCA9ICdTRUxFQ1QgY291bnQoc2VnbWVudHMuaHR0cERhdGEuaGVhZGVycy5zZXNzaW9uSWQpIEFTIFwnVXNlciBWaXNpdGVkXCcgRlJPTSB0cmFuc2FjdGlvbnMgV0hFUkUgYXBwbGljYXRpb249IFwnQUQtQWlyLUxlYXBcJycKYm9va2luZ19jbGFzcyA9ICdTRUxFQ1Qgc2VnbWVudHMudXNlckRhdGEuY3VzdG9tZXJDbGFzcyBBUyBcJ2N1c3RvbWVyQ2xhc3NcJywgY291bnQoKikgRlJPTSB0cmFuc2FjdGlvbnMgV0hFUkUgYXBwbGljYXRpb249IFwnQUQtQWlyLUxlYXBcJyBMSU1JVCAxMCcKZmFpbGVkX2Jvb2tpbmcgPSAnU0VMRUNUIGNvdW50KHNlZ21lbnRzLnVzZXJEYXRhLmJvb2tpbmdGYWlsZWQpIEFTIFwnRmFpbGVkIEJvb2tpbmdzXCcgRlJPTSB0cmFuc2FjdGlvbnMgV0hFUkUgYXBwbGljYXRpb249IFwnQUQtQWlyLUxlYXBcJyBBTkQgc2VnbWVudHMudXNlckRhdGEuYm9va2luZ0ZhaWxlZD0gdHJ1ZScKCmxvZ2luID0gJ1NFTEVDVCBjb3VudCgqKSBBUyBcJ0xvZ2luXCcgRlJPTSB0cmFuc2FjdGlvbnMgV0hFUkUgdHJhbnNhY3Rpb25OYW1lID0gXCdMb2dpblwnIEFORCBhcHBsaWNhdGlvbiBJTiAoXCdBRC1BaXItTGVhcFwnKSBBTkQgdXNlckV4cGVyaWVuY2UgPSBcJ05PUk1BTFwnJwpzZWFyY2hfZmxpZ2h0ID0gJ1NFTEVDVCBjb3VudCgqKSBBUyBcJ1NlYXJjaCBGbGlnaHRzXCcgRlJPTSB0cmFuc2FjdGlvbnMgV0hFUkUgdHJhbnNhY3Rpb25OYW1lID0gXCcvd2ViLWFwaS9mbGlnaHRzL3NlYXJjaEZvckZsaWdodHNcJyBBTkQgYXBwbGljYXRpb24gSU4gKFwnQUQtQWlyLUxlYXBcJykgQU5EIHVzZXJFeHBlcmllbmNlID0gXCdOT1JNQUxcJycKY2hvb3NlX3NlYXQgPSAnU0VMRUNUIGNvdW50KCopIEFTIFwnQ2hvb3NlIFNlYXRcJyBGUk9NIHRyYW5zYWN0aW9ucyBXSEVSRSB0cmFuc2FjdGlvbk5hbWUgPSBcJy93ZWItYXBpL2ZsaWdodHMvY2hvb3NlU2VhdFwnIEFORCBhcHBsaWNhdGlvbiBJTiAoXCdBRC1BaXItTGVhcFwnKSBBTkQgdXNlckV4cGVyaWVuY2UgPSBcJ05PUk1BTFwnJwpib29rX2ZsaWdodCA9ICdTRUxFQ1QgY291bnQoKikgQVMgXCdCb29rIEZsaWdodFwnIEZST00gdHJhbnNhY3Rpb25zIFdIRVJFIHRyYW5zYWN0aW9uTmFtZSA9IFwnL3dlYi1hcGkvZmxpZ2h0cy9ib29rRmxpZ2h0XCcgQU5EIGFwcGxpY2F0aW9uIElOIChcJ0FELUFpci1MZWFwXCcpIEFORCB1c2VyRXhwZXJpZW5jZSA9IFwnTk9STUFMXCcnCmNoZWNrb3V0ID0gJ1NFTEVDVCBjb3VudCgqKSBBUyBcJ0NoZWNrb3V0XCcgRlJPTSB0cmFuc2FjdGlvbnMgV0hFUkUgdHJhbnNhY3Rpb25OYW1lID0gXCcvd2ViLWFwaS9mbGlnaHRzL2NoZWNrb3V0XCcgQU5EIGFwcGxpY2F0aW9uIElOIChcJ0FELUFpci1MZWFwXCcpIEFORCB1c2VyRXhwZXJpZW5jZSA9IFwnTk9STUFMXCcnCgpkYXRhID0gW2F2Z190a3RfcHJpY2UsIHByaWNlX3N1bSwgdGlja2V0c19zb2xkLCB1c2VyX3Zpc2l0ZWQsIGZhaWxlZF9ib29raW5nLGxvZ2luLHNlYXJjaF9mbGlnaHQsY2hvb3NlX3NlYXQsYm9va19mbGlnaHQsY2hlY2tvdXRdCgpmb3IgaSBpbiBkYXRhOgogICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KHVybCwgaGVhZGVycz1oZWFkZXJzLCBkYXRhPWkpCiAgICBsYWJlbCA9IHJlc3BvbnNlLmpzb24oKVswXVsnZmllbGRzJ11bMF1bJ2xhYmVsJ10KICAgIHZhbHVlID0gcmVzcG9uc2UuanNvbigpWzBdWydyZXN1bHRzJ11bMF1bMF0KICAgIAogICAgcHJpbnQobGFiZWwsIHZhbHVlKQogICAgCiAgICBxdWVyeSA9ICdJTlNFUlQgSU5UTyBzcmVfbWV0cmljcyAobWV0cmljVHlwZSwgbWV0cmljVmFsdWUsIHN0YXJ0VGltZSwgZW5kVGltZSwgYXBtVHlwZSwgcHJvamVjdF9pZCwgYXBpVHlwZSwgZGVzY3JpcHRpb24pIFZBTFVFUyAoXCd7MH1cJywgezF9LCB7Mn0sIHszfSwgXCd7NH1cJywgezV9LCBcJ3s2fVwnLCBcJ3s3fVwnKScKICAgIHF1ZXJ5ID0gcXVlcnkuZm9ybWF0KGxhYmVsLCB2YWx1ZSwgaW50KHN0YXJ0KSwgaW50KGVuZCksICdBcHBEJywgcHJvamVjdF9pZCwgJ1RyYW5zYWN0aW9uIEFuYWx5YXRpY3MgRGF0YScsICdCdXNpbmVzcyBNZXRyaWMgV29ya2luZycpCiAgICBteWN1cnNvci5leGVjdXRlKHF1ZXJ5KQogICAgY254LmNvbW1pdCgpCgoKbXljdXJzb3IuY2xvc2UoKQpjbnguY2xvc2UoKQoKCnByaW50KCdDb21wbGV0ZWQnKQoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg==","leo1311"
"APMOVRLP63363","APMOVRLP63363_leo1311.py","aW1wb3J0IHJlcXVlc3RzCmltcG9ydCBqc29uCmltcG9ydCBteXNxbC5jb25uZWN0b3IKaW1wb3J0IHBhbmRhcyBhcyBwZApmcm9tIHNxbGFsY2hlbXkgaW1wb3J0IGNyZWF0ZV9lbmdpbmUKaW1wb3J0IHN5cwpmcm9tIHVybGxpYi5wYXJzZSBpbXBvcnQgcXVvdGVfcGx1cywgdXJscGFyc2UKZnJvbSBsZWFwLnV0aWxzLlV0aWxpdGllcyBpbXBvcnQgVXRpbGl0aWVzCmltcG9ydCBsb2dnaW5nIGFzIGxvZ2dlcgppbXBvcnQgb3MKZnJvbSBweXNwYXJrLnNxbCBpbXBvcnQgU3BhcmtTZXNzaW9uCmltcG9ydCBzeXMKZnJvbSBweXNwYXJrLnNxbC5mdW5jdGlvbnMgaW1wb3J0ICoKZnJvbSBweXNwYXJrLnNxbC50eXBlcyBpbXBvcnQgKgppbXBvcnQgZGF0ZXRpbWUKZnJvbSByZXF1ZXN0cy5hdXRoIGltcG9ydCBIVFRQQmFzaWNBdXRoCmltcG9ydCB0aW1lCmltcG9ydCBweW9kYmMKaW1wb3J0IHB5bXlzcWwKaW1wb3J0IHB5bXNzcWwKZnJvbSBsZWFwLmNvbmZpZy5FeHRyYWN0b3JDb25maWdzLkRhdGFzZXRFeHRyYWN0b3JDb25maWcgaW1wb3J0IERhdGFzZXRFeHRyYWN0b3JDb25maWcKCgojIG9zLmVudmlyb25bJ05PX1BST1hZJ109J2xlYXAtcG92LnNhYXMuYXBwZHluYW1pY3MuY29tJwoKbG9nZ2VyLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dlci5JTkZPLCBmb3JtYXQ9JyUoYXNjdGltZSlzIElORk8gJShtZXNzYWdlKXMnLCBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycpCmFyZ3VtZW50cyA9IHN5cy5hcmd2CmRpY3QgPSB7fQpmb3IgYXJnIGluIGFyZ3VtZW50czoKICAgIHRyeToKICAgICAgICBkaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICgnOicpLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQogICAgZXhjZXB0OgogICAgICAgIGEgPSAnZXJyb3InCiMgcHJpbnQoJ2RpY3Rpb25hcnknLCBkaWN0KQojZGIgZGV0YWlscwpEeW5hdHJhY2VEZW1vZGljdD1qc29uLmxvYWRzKGRpY3RbJ0FwcER5bmFtaWNzJ10pCgp1cmw9RHluYXRyYWNlRGVtb2RpY3RbJ3VybCddCmRUeXBlID0gdXJsLnNwbGl0KCc6JylbMV0KcGxhY2VfaG9sZGVyID0gTm9uZQpteV9jb25uID0gTm9uZQoKCgpkZWYgZ2V0Q29ubmVjdGlvbihkVHlwZSk6CiAgICBnbG9iYWwgcGxhY2VfaG9sZGVyCiAgICBnbG9iYWwgbXlfY29ubgogICAgY254ID0gTm9uZQogICAgdXNlcm5hbWUgPSBEeW5hdHJhY2VEZW1vZGljdFsndXNlck5hbWUnXQogICAgcGFzc3dvcmQgPSBVdGlsaXRpZXMuZGVjcnlwdChEeW5hdHJhY2VEZW1vZGljdFsncGFzc3dvcmQnXSwgRHluYXRyYWNlRGVtb2RpY3RbJ3NhbHQnXSkKICAgIGlmIGRUeXBlID09ICdteXNxbCc6CiAgICAgICAgaG9zdCA9IHVybHBhcnNlKER5bmF0cmFjZURlbW9kaWN0Wyd1cmwnXVs1Ol0pLmhvc3RuYW1lCiAgICAgICAgcG9ydCA9IHVybHBhcnNlKER5bmF0cmFjZURlbW9kaWN0Wyd1cmwnXVs1Ol0pLnBvcnQKICAgICAgICBkYXRhYmFzZSA9IHVybHBhcnNlKER5bmF0cmFjZURlbW9kaWN0Wyd1cmwnXVs1Ol0pLnBhdGgucnNwbGl0KCcvJywgMSlbMV0KICAgICAgICBjbnggPSBteXNxbC5jb25uZWN0b3IuY29ubmVjdCh1c2VyPXVzZXJuYW1lLCBwYXNzd29yZD1wYXNzd29yZCwgaG9zdD1ob3N0LCBwb3J0PXBvcnQsIGRhdGFiYXNlPWRhdGFiYXNlKQogICAgICAgIHBsYWNlX2hvbGRlciA9ICclcycKICAgICAgICAjIG15X2Nvbm4gPSBjcmVhdGVfZW5naW5lKCdteXNxbCtweW15c3FsOi8vezB9OnsxfUB7Mn0vezN9Jy5mb3JtYXQodXNlcm5hbWUscGFzc3dvcmQsaG9zdCxkYXRhYmFzZSkpCiAgICAgICAgY254X3N0cmluZyA9ICdteXNxbCtweW15c3FsOi8vezB9OiVzQHsxfS97Mn0nICUgcXVvdGVfcGx1cyhzdHIocGFzc3dvcmQpKQogICAgICAgIHByaW50KCdwYXNzd29yZCBpcycsIHBhc3N3b3JkKQogICAgICAgIGNueF9zdHJpbmcgPSBjbnhfc3RyaW5nLmZvcm1hdCh1c2VybmFtZSxob3N0LGRhdGFiYXNlKQogICAgICAgIHByaW50KCdjbnhTdHJpbmcgaXMnICwgY254X3N0cmluZykKICAgICAgICBteV9jb25uID0gY3JlYXRlX2VuZ2luZShjbnhfc3RyaW5nKQogICAgICAgIAogICAgICAgIAogICAgZWxpZiBkVHlwZSA9PSAnc3Fsc2VydmVyJzoKICAgICAgICAjIHNlcnZlciA9IHVybC5zcGxpdCgnLy8nKVsxXS5zcGxpdCgnOycpWzBdLnJlcGxhY2UoJ1xTUUwnLCdTUUwnKQogICAgICAgIHNlcnZlciA9IHVybC5zcGxpdCgnLy8nKVsxXS5zcGxpdCgnOycpWzBdCiAgICAgICAgZGF0YWJhc2UgPSAodXJsLnNwbGl0KCc9JykpWzFdCiAgICAgICAgY29ubmVjdGlvblN0cmluZyA9ICdEUklWRVI9e09EQkMgRHJpdmVyIDE3IGZvciBTUUwgU0VSVkVSfTtTRVJWRVI9JytzZXJ2ZXIrJztEQVRBQkFTRT0nK2RhdGFiYXNlKyc7VUlEPScrdXNlcm5hbWUrJztQV0Q9JytwYXNzd29yZCsnOycKICAgICAgICBjbnggPSBweW9kYmMuY29ubmVjdChjb25uZWN0aW9uU3RyaW5nKQogICAgICAgIHBsYWNlX2hvbGRlciA9ICc/JwogICAgICAgICMgZW5nID0gJ21zc3FsK3B5bXNzcWw6Ly9sZWFwYWRtaW46JXNAVklDVEFEUFNULTEzXFxTUUxTRVJWRVJfMTcvbGVhcG1hc3RlcicgJSBxdW90ZV9wbHVzKHN0cihwYXNzd29yZCkpCiAgICAgICAgZW5nID0gJ21zc3FsK3B5bXNzcWw6Ly97MH06JXNAezF9L3syfScgJSBxdW90ZV9wbHVzKHN0cihwYXNzd29yZCkpCiAgICAgICAgY254X3N0cmluZyA9IGVuZy5mb3JtYXQodXNlcm5hbWUsc2VydmVyLGRhdGFiYXNlKQogICAgICAgIG15X2Nvbm4gPSBjcmVhdGVfZW5naW5lKGNueF9zdHJpbmcpCiAgICAKICAgIHJldHVybiBjbngKICAgIAoKICAgIApkZWYgZ2V0UHJvamVjdElkKCk6CiAgICBjbnggPSBnZXRDb25uZWN0aW9uKGRUeXBlKQogICAgbXljdXJzb3IgPSBjbnguY3Vyc29yKCkKICAgIHEgPSAnc2VsZWN0IGlkIGZyb20gdXNtX3Byb2plY3Qgd2hlcmUgbmFtZSA9IFwnJytkaWN0Wydwcm9qZWN0J10rJ1wnJwogICAgbXljdXJzb3IuZXhlY3V0ZShxKQogICAgbXlyZXN1bHQgPSBteWN1cnNvci5mZXRjaGFsbCgpCiAgICBjbnguY29tbWl0KCkKICAgIG15Y3Vyc29yLmNsb3NlKCkKICAgIGNueC5jbG9zZSgpCiAgICByZXR1cm4gbXlyZXN1bHRbMF1bMF0KIyB0YWJsZW5hbWUgPSAnc3JlX2V2ZW50Jwpwcm9qZWN0X2lkID0gc3RyKGdldFByb2plY3RJZCgpKQpjbnggPSBnZXRDb25uZWN0aW9uKGRUeXBlKQoKCmNvbWJpbmVkRGF0YURpY3QgPXt9CgoKbXlEYXRhc2V0Q29uZmlnID0ganNvbi5sb2FkcyhkaWN0WydhcHBNZXRyaWNzJ10pCm15RGF0YXNldENvbmZpZyA9IHsnZGF0YXNldCc6IG15RGF0YXNldENvbmZpZ30KZGF0YSA9IERhdGFzZXRFeHRyYWN0b3JDb25maWcoJzEnLCcnLG15RGF0YXNldENvbmZpZywnJykuZ2V0RXh0cmFjdG9yKCkuZ2V0RGF0YSgpCgpjb21iaW5lZERhdGFEaWN0WydvdmVyYWxsQXBwTWV0cmljcyddID0gZGF0YS5qc29uKCkKCgpteURhdGFzZXRDb25maWcgPSBqc29uLmxvYWRzKGRpY3RbJ3RpZXJNZXRyaWNzJ10pCm15RGF0YXNldENvbmZpZyA9IHsnZGF0YXNldCc6IG15RGF0YXNldENvbmZpZ30KZGF0YSA9IERhdGFzZXRFeHRyYWN0b3JDb25maWcoJzEnLCcnLG15RGF0YXNldENvbmZpZywnJykuZ2V0RXh0cmFjdG9yKCkuZ2V0RGF0YSgpCgpjb21iaW5lZERhdGFEaWN0WydvdmVyYWxsdHJzTWV0cmljcyddID0gZGF0YS5qc29uKCkKCgojIHByaW50KHRpZXJNZXRyaWNzRGF0YSkKCiMgbXlfY29ubiA9IGNyZWF0ZV9lbmdpbmUoJ215c3FsK3B5bXlzcWw6Ly97MH06ezF9QHsyfS97M30nLmZvcm1hdCh1c2VybmFtZSxwYXNzd29yZCxob3N0LGRhdGFiYXNlKSkKCmFwcGxpY2F0aW9uTmFtZSA9IGRpY3RbJ2FwcGxpY2F0aW9uTmFtZSddCgpmb3IgaSBpbiBjb21iaW5lZERhdGFEaWN0OgogICAgZm9yIGRhdGEgaW4gY29tYmluZWREYXRhRGljdFtpXToKICAgICAgICBpZiBkYXRhWydtZXRyaWNOYW1lJ10gIT0gJ01FVFJJQyBEQVRBIE5PVCBGT1VORCc6CiAgICAgICAgICAgIG1ldHJpY19wYXRoX3NwbGl0ID0gZGF0YVsnbWV0cmljUGF0aCddLnNwbGl0KCd8JykKICAgICAgICAgICAgdmFsdWVzID0gZGF0YVsnbWV0cmljVmFsdWVzJ10KICAgICAgICAgICAgZGYgPSBwZC5EYXRhRnJhbWUodmFsdWVzKQogICAgICAgICAgICBkZiA9IGRmLmRyb3AoWyd1c2VSYW5nZSddLCBheGlzPTEpCiAgICAgICAgICAgIGRmWydwcm9qZWN0X2lkJ10gPSBwcm9qZWN0X2lkCiAgICAgICAgICAgIGRmWydhcG1UeXBlJ10gPSAnQXBwZCcKICAgICAgICAgICAgZGYucmVuYW1lKGNvbHVtbnM9eyd2YWx1ZSc6J21ldHJpY1ZhbHVlJywgJ3N0YXJ0VGltZUluTWlsbGlzJzogJ3N0YXJ0VGltZSd9LCBpbnBsYWNlPVRydWUpCiAgICAgICAgICAgIGRmWydtZXRyaWNUeXBlJ10gPSBtZXRyaWNfcGF0aF9zcGxpdFstMV0KICAgICAgICAgICAgaWYgJ3RpZXInIGluIGk6CiAgICAgICAgICAgICAgICBkZlsnY2lfbmFtZSddID0gbWV0cmljX3BhdGhfc3BsaXRbMV0KICAgICAgICAgICAgICAgIGRmWydjdHlwZSddID0gJ1RpZXInCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgZWxpZiAnbm9kZScgaW4gaToKICAgICAgICAgICAgICAgIGRmWydjaV9uYW1lJ10gPSBtZXRyaWNfcGF0aF9zcGxpdFszXQogICAgICAgICAgICAgICAgZGZbJ2N0eXBlJ10gPSAnTm9kZScKICAgICAgICAgICAgCiAgICAgICAgICAgIGVsaWYgJ292ZXJhbGwnIGluIGk6CiAgICAgICAgICAgICAgICBpZiBsZW4obWV0cmljX3BhdGhfc3BsaXQpID09IDI6CiAgICAgICAgICAgICAgICAgICAgZGZbJ21ldHJpY1R5cGUnXSA9IG1ldHJpY19wYXRoX3NwbGl0Wy0xXQogICAgICAgICAgICAgICAgICAgIGRmWydjaV9uYW1lJ10gPSBhcHBsaWNhdGlvbk5hbWUKICAgICAgICAgICAgICAgICAgICBkZlsnY3R5cGUnXSA9ICdBcHBsaWNhdGlvbicKICAgICAgICAgICAgICAgICAgICBwcmludChkZikKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgZGZbJ21ldHJpY1R5cGUnXSA9IG1ldHJpY19wYXRoX3NwbGl0Wy0xXQogICAgICAgICAgICAgICAgICAgIGRmWydjaV9uYW1lJ10gPSBtZXRyaWNfcGF0aF9zcGxpdFstMl0KICAgICAgICAgICAgICAgICAgICBkZlsnY3R5cGUnXSA9ICdUaWVyJwoKICAgICAgICAgICAgcHJpbnQoZGYpCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIGRmLnRvX3NxbChjb249bXlfY29ubiwgbmFtZT0nc3JlX21ldHJpY3MnLCBpZl9leGlzdHM9J2FwcGVuZCcsIGluZGV4PUZhbHNlKQogICAgICAgICAgICAKICAgICAgICAgICAgCnByaW50KCdDb21wbGV0ZWQnKQoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgo=","leo1311"
"LEOTSTRP51301","LEOTSTRP51301_leo1311.py","","leo1311"
"LEOTSTBD61925","LEOTSTBD61925_leo1311.py","ZnJvbSBweXNwYXJrLnNxbCBpbXBvcnQgU3BhcmtTZXNzaW9uCmltcG9ydCByZXF1ZXN0cwppbXBvcnQgc3lzCmltcG9ydCBvcwppbXBvcnQgbXlzcWwuY29ubmVjdG9yCmZyb20gcHlzcGFyay5zcWwuZnVuY3Rpb25zIGltcG9ydCAqCmZyb20gcHlzcGFyay5zcWwudHlwZXMgaW1wb3J0ICoKaW1wb3J0IGpzb24KaW1wb3J0IHRpbWUKZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHF1b3RlX3BsdXMsIHVybHBhcnNlCmZyb20gbGVhcC51dGlscy5VdGlsaXRpZXMgaW1wb3J0IFV0aWxpdGllcwppbXBvcnQgZGF0ZXRpbWUKaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyCmltcG9ydCB1cmxsaWIzCgp1cmxsaWIzLmRpc2FibGVfd2FybmluZ3MoKQoKIyBvcy5lbnZpcm9uWydOT19QUk9YWSddID0gJ2luZm9zeXNxM2RldjEuc2VydmljZS1ub3cuY29tJwoKbG9nZ2VyLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dlci5JTkZPLGZvcm1hdD0nJShhc2N0aW1lKXMgSU5GTyAlKG1lc3NhZ2UpcycsIGRhdGVmbXQ9JyV5LyVtLyVkICVIOiVNOiVTJykKYXJndW1lbnRzID1zeXMuYXJndgoKZGljdD17fQoKZm9yIGFyZyBpbiBhcmd1bWVudHM6CiAgICAgdHJ5OgogICAgICAgICBkaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICgnOicpLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQogICAgIGV4Y2VwdDoKICAgICAgICAgYT0nZXJyb3InCgojU05vdyBEYXRhc291cmNlCnNub3dkcyA9IGpzb24ubG9hZHMoZGljdFsnU25vd0RhdGFTb3VyY2UnXSkKc25vd0RTZGljdCA9IHt9CnNub3dEU2RpY3QgPSBzbm93ZHMKCiMgU2V0IHRoZSByZXF1ZXN0IHBhcmFtZXRlcnMKdXJsID0gc25vd0RTZGljdFsnVXJsJ10KdXNlciA9IHNub3dEU2RpY3RbJ0F1dGhEZXRhaWxzJ11bJ3VzZXJuYW1lJ10KcHdkID0gVXRpbGl0aWVzLmRlY3J5cHQoc25vd0RTZGljdFsnQXV0aERldGFpbHMnXVsncGFzc3dvcmQnXSwgc25vd0RTZGljdFsnc2FsdCddKQoKYXBpID0gZGljdFsnYXBpJ10Kc25vd3RhYmxlPWRpY3RbJ3Nub3dUYWJsZSddCnBhcmFtcyA9ZGljdFsncGFyYW1zJ10KCiMgU2V0IHByb3BlciBoZWFkZXJzCgpoZWFkZXJzID0geydDb250ZW50LVR5cGUnOidhcHBsaWNhdGlvbi9qc29uJywnQWNjZXB0JzonYXBwbGljYXRpb24vanNvbid9CgojYWRkIGZpbHRlciB0byBnZXQgcmVjb3JkcyB1cGRhdGVkIGluIGxhc3QgMjQgIGhvdXJzCgppZiBkaWN0WydmdWxsTG9hZCddID09ICdUcnVlJzoKICAgIGZyb21EYXRlID0gZGF0ZXRpbWUuZGF0ZXRpbWUoMjAxNywxLDEpCmVsc2U6CiAgICB0cnk6CiAgICAgICAgdGltZWRlbHRhID0gZmxvYXQoZGljdFsnVGltZURlbHRhKGhycyknXSkKICAgIGV4Y2VwdDoKICAgICAgICB0aW1lZGVsdGEgPSAxICMgZGVmYXVsdCAxIGhvdXIKCiAgICBsb2dnZXIuaW5mbygnRmV0Y2hpbmcgcmVjb3JkcyBmb3IgbGFzdCB7MH0gaHJzJy5mb3JtYXQodGltZWRlbHRhKSkKICAgIGZyb21EYXRlID0gIGRhdGV0aW1lLmRhdGV0aW1lLnV0Y25vdygpIC0gIGRhdGV0aW1lLnRpbWVkZWx0YShob3VycyA9IHRpbWVkZWx0YSkKCnRpbWVzdGFtcFBhcmFtID0gJ3N5c191cGRhdGVkX29uPj0nK2Zyb21EYXRlLnN0cmZ0aW1lKCclWS0lbS0lZCAlSDolTTolUycpCnBhcmFtcyA9IHBhcmFtcyArICcmc3lzcGFybV9xdWVyeT0nICsgcXVvdGVfcGx1cyh0aW1lc3RhbXBQYXJhbSkKCiMgRG8gdGhlIEhUVFAgcmVxdWVzdAoKdXJsID0gdXJsK2FwaStzbm93dGFibGUrJz8nK3BhcmFtcwpwcmludCgndXJsJyx1cmwpCgpwcm94eURpY3QgPSB7fQoKaWYgZGljdFsnc2V0UHJveHknXSA9PSAnVHJ1ZSc6CiAgICBwcm94eURpY3QgPSB7CiAgICAgICAgICAgICdodHRwJzogJ2h0dHA6Ly8xMjcuMC4wLjE6MzEyOCcsCiAgICAgICAgICAgICdodHRwcyc6ICdodHRwOi8vMTI3LjAuMC4xOjMxMjgnfQoKcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQodXJsLCBhdXRoPSh1c2VyLCBwd2QpLCBoZWFkZXJzPWhlYWRlcnMgLHByb3hpZXM9cHJveHlEaWN0KQoKIyBDaGVjayBmb3IgSFRUUCBjb2RlcyBvdGhlciB0aGFuIDIwMAppZiByZXNwb25zZS5zdGF0dXNfY29kZSAhPSAyMDA6CiAgICBsb2dnZXIuaW5mbygnU3RhdHVzOicsIHJlc3BvbnNlLnN0YXR1c19jb2RlLCAnSGVhZGVyczonLCByZXNwb25zZS5oZWFkZXJzLCAnRXJyb3IgUmVzcG9uc2U6JyxyZXNwb25zZS5qc29uKCkpCiAgICBleGl0KCkKCiMgRGVjb2RlIHRoZSBKU09OIHJlc3BvbnNlIGludG8gYSBkaWN0aW9uYXJ5IGFuZCB1c2UgdGhlIGRhdGEKCmRhdGEgPSByZXNwb25zZS5qc29uKCkKbG9nZ2VyLmluZm8oJ1JlY29yZHMgRmV0Y2hlZCB7MH0nLmZvcm1hdCggbGVuKGRhdGFbJ3Jlc3VsdCddKSkpCgojY29udmVydCBqc29uIHRvIHNwYXJrIGRhdGFmcmFtZQpqc29uU3RyaW5nQXJyYXkgPSBbXQoKdGlja2V0cyA9IHt9CmVuZFRpbWVEaWMgPSB7fQpwcm9ibGVtSWQgPSB7fQoKZm9yIHJvdyBpbiBkYXRhWydyZXN1bHQnXToKICAgIGlmIHJvd1snZGVzY3JpcHRpb24nXS5zdGFydHN3aXRoKCdBcHBEXycpOgogICAgICAgIHRpY2tldHNbcm93WydudW1iZXInXV0gPSByb3dbJ3N0YXRlJ10KICAgICAgICBlbmRUaW1lRGljW3Jvd1snbnVtYmVyJ11dID0gcm93WydyZXNvbHZlZF9hdCddCiAgICAgICAgcHJvYmxlbUlkW3Jvd1snbnVtYmVyJ11dID0gcm93WydkZXNjcmlwdGlvbiddCiAgICAgICAganNvbnN0ciA9anNvbi5kdW1wcyhyb3cpCiAgICAgICAganNvblN0cmluZ0FycmF5LmFwcGVuZChqc29uc3RyKQogICAgICAgIHByaW50KCdqc29uU3RyaW5nQXJyYXknLHJvdykKICAgICAgICBwcmludCgnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScpCgpwcmludCgndGlja2V0cycsdGlja2V0cykKCgojTEVBUCBEYXRhc291cmNlCgpsZWFwRFNkaWN0ID0ge30KCmxlYXBkcyA9IGpzb24ubG9hZHMoZGljdFsnTEVBUERhdGFTb3VyY2UnXSkKbGVhcERTZGljdCA9IGxlYXBkcwoKdXNlcm5hbWUgPSBsZWFwRFNkaWN0Wyd1c2VyTmFtZSddCnBhc3N3b3JkID0gVXRpbGl0aWVzLmRlY3J5cHQobGVhcERTZGljdFsncGFzc3dvcmQnXSxsZWFwRFNkaWN0WydzYWx0J10pCmhvc3QgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLmhvc3RuYW1lCnBvcnQgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLnBvcnQKZGF0YWJhc2UgPSAnJwpkYXRhYmFzZTEgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLnBhdGgucnNwbGl0KCcvJywgMSlbMV0KdGFibGVuYW1lID0gZGljdFsncHJvamVjdCddICsgJ190aWNrZXRzJwojIHRhYmxlbmFtZSA9ICdpY21fdGlja2V0cycKCkR5bmF0cmFjZURlbW9kaWN0MT1qc29uLmxvYWRzKGRpY3RbJ0R5bmF0cmFjZVNyY19EYXRhJ10pCmRhdGFiYXNlMj11cmxwYXJzZShEeW5hdHJhY2VEZW1vZGljdDFbJ3VybCddWzU6XSkucGF0aC5yc3BsaXQoJy8nLCAxKVsxXQoKZGVmIGdldFByb2plY3RJZCgpOgogICAgY254ID0gbXlzcWwuY29ubmVjdG9yLmNvbm5lY3QodXNlcj11c2VybmFtZSwgcGFzc3dvcmQ9cGFzc3dvcmQsIGhvc3Q9aG9zdCwgcG9ydD1wb3J0LCBkYXRhYmFzZT1kYXRhYmFzZTEpCiAgICBteWN1cnNvciA9IGNueC5jdXJzb3IoKQogICAgcSA9ICdzZWxlY3QgaWQgZnJvbSB1c21fcHJvamVjdCB3aGVyZSBuYW1lID0gXCcnK2RpY3RbJ3Byb2plY3QnXSsnXCcnCiAgICBteWN1cnNvci5leGVjdXRlKHEpCiAgICBteXJlc3VsdCA9IG15Y3Vyc29yLmZldGNoYWxsKCkKICAgIGNueC5jb21taXQoKQogICAgbXljdXJzb3IuY2xvc2UoKQogICAgY254LmNsb3NlKCkKICAgIHJldHVybiBteXJlc3VsdFswXVswXQoKcHJvamVjdElkID0gc3RyKGdldFByb2plY3RJZCgpKQoKZGVmIHVwZGF0ZVRpY2tldFN0YXR1cygpOgoKICAgIGNueCA9IG15c3FsLmNvbm5lY3Rvci5jb25uZWN0KHVzZXI9dXNlcm5hbWUsIHBhc3N3b3JkPXBhc3N3b3JkLCBob3N0PWhvc3QsIHBvcnQ9cG9ydCwgZGF0YWJhc2U9ZGF0YWJhc2UpCiAgICAKICAgIG15Y3Vyc29yID0gY254LmN1cnNvcigpCgogICAgZm9yIGtleSx2YWx1ZSBpbiB0aWNrZXRzLml0ZW1zKCk6CgogICAgICAgIGlmIHZhbHVlIG5vdCBpbiBbJ09wZW4nLCAnTmV3J106CgogICAgICAgICAgICBkYXRlX3RpbWVfb2JqID0gZGF0ZXRpbWUuZGF0ZXRpbWUuc3RycHRpbWUoZW5kVGltZURpY1trZXldLCAnJVktJW0tJWQgJUg6JU06JVMnKQoKICAgICAgICAgICAgZW5kVGltZUluVVRDID0gaW50KGRhdGVfdGltZV9vYmoucmVwbGFjZSh0emluZm89ZGF0ZXRpbWUudGltZXpvbmUudXRjKS50aW1lc3RhbXAoKSAqIDEwMDApCiAgICAgICAgICAgIAogICAgICAgICAgICByZXNvbHV0aW9uU3RlcHM9JycnUmVzb2x2ZXJfU2VsZkhlYWxpbmdcbkR5bmFtaWNBY3Rpdml0eVxuRmxvd2NoYXJ0IGZvciBIZWFsaW5nXG5FeGVjdXRlU2NyaXB0IGZvciBQb2QgSGVhbGluZ1xuRXh0cmFjdCBpbmNpZGVudCBJRCBmb3IgSXNzdWVcblNhdHVyYXRpb25cbkV4dHJhY3QgU3lzIElEIGZvciBJc3N1ZVxuVXBkYXRlIHRpY2tldCBhcyBhdXRvIHJlc29sdmVkXG5VcGRhdGUgU2VydmljZU5vdyBBUEknJycKICAgICAgICAgICAgCiAgICAgICAgICAgICMgcmVzb2x1dGlvblN0ZXBzPVwnS2Fma2FfU2VsZkhlYWxpbmdcbkR5bmFtaWNBY3Rpdml0eVxuRmxvd2NoYXJ0XG4gRXh0cmFjdCBpbmNpZGVudCBJRFxuIEV4dHJhY3QgU3lzIElEXG5FeGVjdXRlU2NyaXB0XG4gVXBkYXRlIHRpY2tldCBhcyBhdXRvIHJlc29sdmVkXG4gVXBkYXRlIFNlcnZpY2VOb3cgQXBpXCcnCiAgICAgICAgICAgIHEgPSAnVXBkYXRlICcrZGF0YWJhc2UyKycuJyt0YWJsZW5hbWUrJyBzZXQgc3RhdGU9XCdDbG9zZWRcJyxyZXNvbHZlZERhdGUgPSBcJycgKyBzdHIoZW5kVGltZURpY1trZXldKSArICdcJyxyZXNvbHV0aW9uX3N0ZXBzPVwnJytyZXNvbHV0aW9uU3RlcHMgKydcJyBXSEVSRSBudW1iZXIgPSBcJycgKyBrZXkgKyAnXCcnCiAgICAgICAgICAgIHExID0gJ1VwZGF0ZSAgJytkYXRhYmFzZTErJy5zcmVfZXZlbnQgc2V0IHN0YXR1cz1cJ1JFU09MVkVEXCcsZW5kVGltZSA9IFwnJyArIHN0cihlbmRUaW1lSW5VVEMpICsgJ1wnIFdIRVJFIHByb2plY3RfaWQ9Jytwcm9qZWN0SWQrJyBhbmQgZXZlbnRUeXBlPVwnSXNzdWVcJyBhbmQgYXBtVHlwZT1cJ0FwcERcJyBhbmQgaW5jaWRlbnRJZCA9IFwnJyArIGtleSArICdcJycKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICBteWN1cnNvci5leGVjdXRlKHEpCiAgICAgICAgICAgIG15Y3Vyc29yLmV4ZWN1dGUocTEpCiAgICAgICAgICAgIAoKICAgIGNueC5jb21taXQoKQoKICAgIG15Y3Vyc29yLmNsb3NlKCkKCiAgICBjbnguY2xvc2UoKQoKCnVwZGF0ZVRpY2tldFN0YXR1cygpCmxvZ2dlci5pbmZvKCdDb21wbGV0ZWQnKQpwcmludCgnQ29tcGxldGVkJykKCgoKCgoKCgoKCgo=","leo1311"
"Appd_Induce_CPU_Issue","Appd_Induce_CPU_Issue_leo1311.py","aW1wb3J0IHJlcXVlc3RzCmltcG9ydCBsb2dnaW5nIGFzIGxvZ2dlcgppbXBvcnQganNvbgoJCgojIFNldCBwcm9wZXIgaGVhZGVycwoKdXNlcm5hbWU9ZGljdFsndXNlcm5hbWUnXQpwYXNzd29yZD1kaWN0WydwYXNzd29yZCddCmNsaWVudElkPWRpY3RbJ2NsaWVudElkJ10KY2xpZW50U2VjcmV0PWRpY3RbJ2NsaWVudFNlY3JldCddCmRvbWFpbj1kaWN0Wydkb21haW4nXQphcHBsaWNhdGlvbk5hbWU9ZGljdFsnYXBwbGljYXRpb25OYW1lJ10KaGVhbHRocnVsZWlkPWRpY3RbJ0NQVUhlYWx0aFJ1bGVJZCddCgp1cmwgPSAnaHR0cHM6Ly97MH0uc2Fhcy5hcHBkeW5hbWljcy5jb20vY29udHJvbGxlci9hcGkvb2F1dGgvYWNjZXNzX3Rva2VuJy5mb3JtYXQoZG9tYWluKQoKcGF5bG9hZCA9ICdncmFudF90eXBlPWNsaWVudF9jcmVkZW50aWFscyZjbGllbnRfaWQ9ezB9JmNsaWVudF9zZWNyZXQ9ezF9Jy5mb3JtYXQoY2xpZW50SWQsIGNsaWVudFNlY3JldCkKCmhlYWRlcnMgPSB7J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi92bmQuYXBwZC5jbnRybCtwcm90b2J1Zjt2PTEnfQoKcHJveHlEaWN0ID0ge30KCiMgcHJveHlEaWN0ID0geydodHRwJyAgOiAnaHR0cDovLzEyNy4wLjAuMTozMTI4JywKCiMgICAgICAgICAgICdodHRwcycgOiAnaHR0cDovLzEyNy4wLjAuMTozMTI4JyAgICAgICAgICB9CgpyZXNwb25zZSA9IHJlcXVlc3RzLnJlcXVlc3QoJ1BPU1QnLCB1cmwsIGhlYWRlcnM9aGVhZGVycywgZGF0YT1wYXlsb2FkLHByb3hpZXM9cHJveHlEaWN0KQoKcmVzcF90ZXh0ID0ganNvbi5sb2FkcyhyZXNwb25zZS50ZXh0KQoKYmVhcmVyX3Rva2VuID0gIHJlc3BfdGV4dFsnYWNjZXNzX3Rva2VuJ10KCgoKdXJsID0gJ2h0dHBzOi8vezB9LnNhYXMuYXBwZHluYW1pY3MuY29tL2NvbnRyb2xsZXIvYXV0aD9hY3Rpb249bG9naW4nLmZvcm1hdChkb21haW4pCgojIHByb3h5RGljdCA9IHsKCiMgICAgICAgICAgICdodHRwJyAgOiAnaHR0cDovLzEyNy4wLjAuMTozMTI4JywKCiMgICAgICAgICAgICdodHRwcycgOiAnaHR0cDovLzEyNy4wLjAuMTozMTI4JyAgICAgICAgICB9CiAgICAgICAgICAKcmVzcG9uc2UgPSByZXF1ZXN0cy5yZXF1ZXN0KCdHRVQnLCB1cmwsIGF1dGg9KHVzZXJuYW1lLCBwYXNzd29yZCksIGRhdGE9e30scHJveGllcz1wcm94eURpY3QpCgpjb29raWVfcGFyYW1zID0geydKU0VTU0lPTklEJzogcmVzcG9uc2UuY29va2llcy5pdGVtcygpWzBdWzFdLCAnWC1DU1JGLVRPS0VOJzogcmVzcG9uc2UuY29va2llcy5pdGVtcygpWzFdWzFdfQoKCiMgU2V0IHByb3BlciBoZWFkZXJzCmhlYWRlcnMgPSB7J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJywgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnLAoKICAgICAgICAgICAnQ29va2llJzogJ0pTRVNTSU9OSUQ9JysgY29va2llX3BhcmFtc1snSlNFU1NJT05JRCddICsgJztYLUNTUkYtVE9LRU49JyArIGNvb2tpZV9wYXJhbXNbJ1gtQ1NSRi1UT0tFTiddLAoKICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdCZWFyZXIgJyArIGJlYXJlcl90b2tlbn0KCgoKdXJsID0gJ2h0dHBzOi8vezB9LnNhYXMuYXBwZHluYW1pY3MuY29tL2NvbnRyb2xsZXIvYWxlcnRpbmcvcmVzdC92MS9hcHBsaWNhdGlvbnMvezF9L2hlYWx0aC1ydWxlcy97Mn0nLmZvcm1hdChkb21haW4sYXBwbGljYXRpb25OYW1lLGhlYWx0aHJ1bGVpZCkKIyBoZWFkZXJzID0geydDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04JywKIyAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOidCZWFyZXIgZXlKcmFXUWlPaUl5TURRMllUVmpaUzFoWTJJMUxUUmtNRE10WVRKa1pDMDBObVE1WkRkbE4yWXlOVE1pTENKaGJHY2lPaUpJVXpJMU5pSjkuZXlKcGMzTWlPaUpCY0hCRWVXNWhiV2xqY3lJc0ltRjFaQ0k2SWtGd2NFUmZRVkJKY3lJc0ltcDBhU0k2SWxWRFNXSjRPRGhwWVhWdGQzUnBjMWRpWVdsYVRtY2lMQ0p6ZFdJaU9pSnNaV0Z3TFhCdmRpSXNJbWxrVkhsd1pTSTZJa0ZRU1Y5RFRFbEZUbFFpTENKcFpDSTZJbUZpWXprM05HVTJMVGMzWVRJdE5EQmlPUzA0TkdRd0xUbG1ZVFV5WWpFNU0yUXdOaUlzSW1GalkzUkpaQ0k2SWpJd05EWmhOV05sTFdGallqVXROR1F3TXkxaE1tUmtMVFEyWkRsa04yVTNaakkxTXlJc0luUnVkRWxrSWpvaU1qQTBObUUxWTJVdFlXTmlOUzAwWkRBekxXRXlaR1F0TkRaa09XUTNaVGRtTWpVeklpd2lZV05qZEU1aGJXVWlPaUpzWldGd0xYQnZkaUlzSW5SbGJtRnVkRTVoYldVaU9pSWlMQ0ptYlcxVWJuUkpaQ0k2Ym5Wc2JDd2lZV05qZEZCbGNtMGlPbHRkTENKeWIyeGxTV1J6SWpwYlhTd2lhV0YwSWpveE5qSTJNVFkyTnpRekxDSnVZbVlpT2pFMk1qWXhOalkyTWpNc0ltVjRjQ0k2TVRZeU56ZzVORGMwTXl3aWRHOXJaVzVVZVhCbElqb2lRVU5EUlZOVEluMC5SaTVVdjF1ZTg4Q1JWWjdBamZJSDJ6NHpYbHR1TkFrYkMxclJQY0REbVBJJ30KCgppID0gewoKICAgICduYW1lJzogJ0NQVSB1dGlsaXphdGlvbiBpcyB0b28gaGlnaCcsCiAgICAnZW5hYmxlZCc6IFRydWUsCiAgICAndXNlRGF0YUZyb21MYXN0Tk1pbnV0ZXMnOiAxLAogICAgJ3dhaXRUaW1lQWZ0ZXJWaW9sYXRpb24nOiAxLAogICAgJ3NjaGVkdWxlTmFtZSc6ICdBbHdheXMnLAogICAgJ2FmZmVjdHMnOiB7CiAgICAgICAgJ2FmZmVjdGVkRW50aXR5VHlwZSc6ICdUSUVSX05PREVfSEFSRFdBUkUnLAogICAgICAgICdhZmZlY3RlZEVudGl0aWVzJzogewogICAgICAgICAgICAndGllck9yTm9kZSc6ICdOT0RFX0FGRkVDVEVEX0VOVElUSUVTJywKICAgICAgICAgICAgJ3R5cGVvZk5vZGUnOiAnQUxMX05PREVTJywKICAgICAgICAgICAgJ2FmZmVjdGVkTm9kZXMnOiB7CiAgICAgICAgICAgICAgICAnYWZmZWN0ZWROb2RlU2NvcGUnOiAnQUxMX05PREVTJwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgICdldmFsQ3JpdGVyaWFzJzogewogICAgICAgICdjcml0aWNhbENyaXRlcmlhJzogewogICAgICAgICAgICAnY29uZGl0aW9uQWdncmVnYXRpb25UeXBlJzogJ0FMTCcsCiAgICAgICAgICAgICdjb25kaXRpb25FeHByZXNzaW9uJzogTm9uZSwKICAgICAgICAgICAgJ2NvbmRpdGlvbnMnOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgJ25hbWUnOiAnQ29uZGl0aW9uIDEnLAogICAgICAgICAgICAgICAgICAgICdzaG9ydE5hbWUnOiAnQScsCiAgICAgICAgICAgICAgICAgICAgJ2V2YWx1YXRlVG9UcnVlT25Ob0RhdGEnOiBGYWxzZSwKICAgICAgICAgICAgICAgICAgICAnZXZhbERldGFpbCc6IHsKICAgICAgICAgICAgICAgICAgICAgICAgJ2V2YWxEZXRhaWxUeXBlJzogJ1NJTkdMRV9NRVRSSUMnLAogICAgICAgICAgICAgICAgICAgICAgICAnbWV0cmljQWdncmVnYXRlRnVuY3Rpb24nOiAnVkFMVUUnLAogICAgICAgICAgICAgICAgICAgICAgICAnbWV0cmljUGF0aCc6ICdIYXJkd2FyZSBSZXNvdXJjZXN8Q1BVfCVCdXN5JywKICAgICAgICAgICAgICAgICAgICAgICAgJ21ldHJpY0V2YWxEZXRhaWwnOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWV0cmljRXZhbERldGFpbFR5cGUnOiAnU1BFQ0lGSUNfVFlQRScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY29tcGFyZUNvbmRpdGlvbic6ICdHUkVBVEVSX1RIQU5fU1BFQ0lGSUNfVkFMVUUnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbXBhcmVWYWx1ZSc6IDAuMgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAndHJpZ2dlckVuYWJsZWQnOiBUcnVlLAogICAgICAgICAgICAgICAgICAgICdtaW5pbXVtVHJpZ2dlcnMnOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICdldmFsTWF0Y2hpbmdDcml0ZXJpYSc6IE5vbmUKICAgICAgICB9LAogICAgICAgICd3YXJuaW5nQ3JpdGVyaWEnOiB7CiAgICAgICAgICAgICdjb25kaXRpb25BZ2dyZWdhdGlvblR5cGUnOiAnQUxMJywKICAgICAgICAgICAgJ2NvbmRpdGlvbkV4cHJlc3Npb24nOiBOb25lLAogICAgICAgICAgICAnY29uZGl0aW9ucyc6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAnbmFtZSc6ICdDb25kaXRpb24gMScsCiAgICAgICAgICAgICAgICAgICAgJ3Nob3J0TmFtZSc6ICdBJywKICAgICAgICAgICAgICAgICAgICAnZXZhbHVhdGVUb1RydWVPbk5vRGF0YSc6IEZhbHNlLAogICAgICAgICAgICAgICAgICAgICdldmFsRGV0YWlsJzogewogICAgICAgICAgICAgICAgICAgICAgICAnZXZhbERldGFpbFR5cGUnOiAnU0lOR0xFX01FVFJJQycsCiAgICAgICAgICAgICAgICAgICAgICAgICdtZXRyaWNBZ2dyZWdhdGVGdW5jdGlvbic6ICdWQUxVRScsCiAgICAgICAgICAgICAgICAgICAgICAgICdtZXRyaWNQYXRoJzogJ0hhcmR3YXJlIFJlc291cmNlc3xDUFV8JUJ1c3knLAogICAgICAgICAgICAgICAgICAgICAgICAnbWV0cmljRXZhbERldGFpbCc6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtZXRyaWNFdmFsRGV0YWlsVHlwZSc6ICdTUEVDSUZJQ19UWVBFJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb21wYXJlQ29uZGl0aW9uJzogJ0dSRUFURVJfVEhBTl9TUEVDSUZJQ19WQUxVRScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY29tcGFyZVZhbHVlJzogMC4xCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICd0cmlnZ2VyRW5hYmxlZCc6IFRydWUsCiAgICAgICAgICAgICAgICAgICAgJ21pbmltdW1UcmlnZ2Vycyc6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgJ2V2YWxNYXRjaGluZ0NyaXRlcmlhJzogTm9uZQogICAgICAgIH0KICAgIH0KfQojIFNlcmlhbGl6aW5nIGpzb24KanNvbl9vYmplY3QgPSBqc29uLmR1bXBzKGksIGluZGVudCA9IDQpCgpyZXNwb25zZSA9IHJlcXVlc3RzLnB1dCh1cmwsIGhlYWRlcnM9aGVhZGVycywgZGF0YT1qc29uX29iamVjdCkKcHJpbnQocmVzcG9uc2UpCgppZiByZXNwb25zZS5zdGF0dXNfY29kZSAhPSAyMDA6CgogICAgbG9nZ2VyLmluZm8oJ1N0YXR1czonLCByZXNwb25zZS5zdGF0dXNfY29kZSwgJ0hlYWRlcnM6JywgcmVzcG9uc2UuaGVhZGVycywgJ0Vycm9yIFJlc3BvbnNlOicsIHJlc3BvbnNlLmpzb24oKSkKCiAgICBleGl0KCkKCmVsc2U6CiAgICBwcmludChyZXNwb25zZSkKCgpwcmludCgnQ29tcGxldGVkJykKCQoKCgoKCgoKCgoKCgoKCgoKCgoK","leo1311"
"APPAPD_R45047","APPAPD_R45047_leo1311.py","aW1wb3J0IHJlcXVlc3RzCmltcG9ydCBsb2dnaW5nIGFzIGxvZ2dlcgppbXBvcnQganNvbgoJCgojIFNldCBwcm9wZXIgaGVhZGVycwp1c2VybmFtZT1kaWN0Wyd1c2VybmFtZSddCnBhc3N3b3JkPWRpY3RbJ3Bhc3N3b3JkJ10KY2xpZW50SWQ9ZGljdFsnY2xpZW50SWQnXQpjbGllbnRTZWNyZXQ9ZGljdFsnY2xpZW50U2VjcmV0J10KZG9tYWluPWRpY3RbJ2RvbWFpbiddCmFwcGxpY2F0aW9uTmFtZT1kaWN0WydhcHBsaWNhdGlvbk5hbWUnXQpoZWFsdGhydWxlaWQ9ZGljdFsnQ1BVSGVhbHRoUnVsZUlkJ10KCnVybCA9ICdodHRwczovL3swfS5zYWFzLmFwcGR5bmFtaWNzLmNvbS9jb250cm9sbGVyL2FwaS9vYXV0aC9hY2Nlc3NfdG9rZW4nLmZvcm1hdChkb21haW4pCgpwYXlsb2FkID0gJ2dyYW50X3R5cGU9Y2xpZW50X2NyZWRlbnRpYWxzJmNsaWVudF9pZD17MH0mY2xpZW50X3NlY3JldD17MX0nLmZvcm1hdChjbGllbnRJZCwgY2xpZW50U2VjcmV0KQoKaGVhZGVycyA9IHsnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3ZuZC5hcHBkLmNudHJsK3Byb3RvYnVmO3Y9MSd9Cgpwcm94eURpY3QgPSB7fQoKIyBwcm94eURpY3QgPSB7J2h0dHAnICA6ICdodHRwOi8vMTI3LjAuMC4xOjMxMjgnLAoKIyAgICAgICAgICAgJ2h0dHBzJyA6ICdodHRwOi8vMTI3LjAuMC4xOjMxMjgnICAgICAgICAgIH0KCnJlc3BvbnNlID0gcmVxdWVzdHMucmVxdWVzdCgnUE9TVCcsIHVybCwgaGVhZGVycz1oZWFkZXJzLCBkYXRhPXBheWxvYWQsIHByb3hpZXM9cHJveHlEaWN0KQoKcmVzcF90ZXh0ID0ganNvbi5sb2FkcyhyZXNwb25zZS50ZXh0KQoKYmVhcmVyX3Rva2VuID0gIHJlc3BfdGV4dFsnYWNjZXNzX3Rva2VuJ10KCgoKdXJsID0gJ2h0dHBzOi8vezB9LnNhYXMuYXBwZHluYW1pY3MuY29tL2NvbnRyb2xsZXIvYXV0aD9hY3Rpb249bG9naW4nLmZvcm1hdChkb21haW4pCgojIHByb3h5RGljdCA9IHsKCiMgICAgICAgICAgICdodHRwJyAgOiAnaHR0cDovLzEyNy4wLjAuMTozMTI4JywKCiMgICAgICAgICAgICdodHRwcycgOiAnaHR0cDovLzEyNy4wLjAuMTozMTI4JyAgICAgICAgICB9CiAgICAgICAgICAKcmVzcG9uc2UgPSByZXF1ZXN0cy5yZXF1ZXN0KCdHRVQnLCB1cmwsIGF1dGg9KHVzZXJuYW1lLCBwYXNzd29yZCksIGRhdGE9e30scHJveGllcz1wcm94eURpY3QpCgpjb29raWVfcGFyYW1zID0geydKU0VTU0lPTklEJzogcmVzcG9uc2UuY29va2llcy5pdGVtcygpWzBdWzFdLCAnWC1DU1JGLVRPS0VOJzogcmVzcG9uc2UuY29va2llcy5pdGVtcygpWzFdWzFdfQoKCiMgU2V0IHByb3BlciBoZWFkZXJzCmhlYWRlcnMgPSB7J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJywgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnLAoKICAgICAgICAgICAnQ29va2llJzogJ0pTRVNTSU9OSUQ9JysgY29va2llX3BhcmFtc1snSlNFU1NJT05JRCddICsgJztYLUNTUkYtVE9LRU49JyArIGNvb2tpZV9wYXJhbXNbJ1gtQ1NSRi1UT0tFTiddLAoKICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdCZWFyZXIgJyArIGJlYXJlcl90b2tlbn0KCgoKdXJsID0gJ2h0dHBzOi8vezB9LnNhYXMuYXBwZHluYW1pY3MuY29tL2NvbnRyb2xsZXIvYWxlcnRpbmcvcmVzdC92MS9hcHBsaWNhdGlvbnMvezF9L2hlYWx0aC1ydWxlcy97Mn0nLmZvcm1hdChkb21haW4sYXBwbGljYXRpb25OYW1lLGhlYWx0aHJ1bGVpZCkKIyBoZWFkZXJzID0geydDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04JywKIyAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOidCZWFyZXIgZXlKcmFXUWlPaUl5TURRMllUVmpaUzFoWTJJMUxUUmtNRE10WVRKa1pDMDBObVE1WkRkbE4yWXlOVE1pTENKaGJHY2lPaUpJVXpJMU5pSjkuZXlKcGMzTWlPaUpCY0hCRWVXNWhiV2xqY3lJc0ltRjFaQ0k2SWtGd2NFUmZRVkJKY3lJc0ltcDBhU0k2SWxWRFNXSjRPRGhwWVhWdGQzUnBjMWRpWVdsYVRtY2lMQ0p6ZFdJaU9pSnNaV0Z3TFhCdmRpSXNJbWxrVkhsd1pTSTZJa0ZRU1Y5RFRFbEZUbFFpTENKcFpDSTZJbUZpWXprM05HVTJMVGMzWVRJdE5EQmlPUzA0TkdRd0xUbG1ZVFV5WWpFNU0yUXdOaUlzSW1GalkzUkpaQ0k2SWpJd05EWmhOV05sTFdGallqVXROR1F3TXkxaE1tUmtMVFEyWkRsa04yVTNaakkxTXlJc0luUnVkRWxrSWpvaU1qQTBObUUxWTJVdFlXTmlOUzAwWkRBekxXRXlaR1F0TkRaa09XUTNaVGRtTWpVeklpd2lZV05qZEU1aGJXVWlPaUpzWldGd0xYQnZkaUlzSW5SbGJtRnVkRTVoYldVaU9pSWlMQ0ptYlcxVWJuUkpaQ0k2Ym5Wc2JDd2lZV05qZEZCbGNtMGlPbHRkTENKeWIyeGxTV1J6SWpwYlhTd2lhV0YwSWpveE5qSTJNVFkyTnpRekxDSnVZbVlpT2pFMk1qWXhOalkyTWpNc0ltVjRjQ0k2TVRZeU56ZzVORGMwTXl3aWRHOXJaVzVVZVhCbElqb2lRVU5EUlZOVEluMC5SaTVVdjF1ZTg4Q1JWWjdBamZJSDJ6NHpYbHR1TkFrYkMxclJQY0REbVBJJ30KCgppID0gewoKICAgICduYW1lJzogJ0NQVSB1dGlsaXphdGlvbiBpcyB0b28gaGlnaCcsCiAgICAnZW5hYmxlZCc6IFRydWUsCiAgICAndXNlRGF0YUZyb21MYXN0Tk1pbnV0ZXMnOiAxLAogICAgJ3dhaXRUaW1lQWZ0ZXJWaW9sYXRpb24nOiAxLAogICAgJ3NjaGVkdWxlTmFtZSc6ICdBbHdheXMnLAogICAgJ2FmZmVjdHMnOiB7CiAgICAgICAgJ2FmZmVjdGVkRW50aXR5VHlwZSc6ICdUSUVSX05PREVfSEFSRFdBUkUnLAogICAgICAgICdhZmZlY3RlZEVudGl0aWVzJzogewogICAgICAgICAgICAndGllck9yTm9kZSc6ICdOT0RFX0FGRkVDVEVEX0VOVElUSUVTJywKICAgICAgICAgICAgJ3R5cGVvZk5vZGUnOiAnQUxMX05PREVTJywKICAgICAgICAgICAgJ2FmZmVjdGVkTm9kZXMnOiB7CiAgICAgICAgICAgICAgICAnYWZmZWN0ZWROb2RlU2NvcGUnOiAnQUxMX05PREVTJwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgICdldmFsQ3JpdGVyaWFzJzogewogICAgICAgICdjcml0aWNhbENyaXRlcmlhJzogewogICAgICAgICAgICAnY29uZGl0aW9uQWdncmVnYXRpb25UeXBlJzogJ0FMTCcsCiAgICAgICAgICAgICdjb25kaXRpb25FeHByZXNzaW9uJzogTm9uZSwKICAgICAgICAgICAgJ2NvbmRpdGlvbnMnOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgJ25hbWUnOiAnQ29uZGl0aW9uIDEnLAogICAgICAgICAgICAgICAgICAgICdzaG9ydE5hbWUnOiAnQScsCiAgICAgICAgICAgICAgICAgICAgJ2V2YWx1YXRlVG9UcnVlT25Ob0RhdGEnOiBGYWxzZSwKICAgICAgICAgICAgICAgICAgICAnZXZhbERldGFpbCc6IHsKICAgICAgICAgICAgICAgICAgICAgICAgJ2V2YWxEZXRhaWxUeXBlJzogJ1NJTkdMRV9NRVRSSUMnLAogICAgICAgICAgICAgICAgICAgICAgICAnbWV0cmljQWdncmVnYXRlRnVuY3Rpb24nOiAnVkFMVUUnLAogICAgICAgICAgICAgICAgICAgICAgICAnbWV0cmljUGF0aCc6ICdIYXJkd2FyZSBSZXNvdXJjZXN8Q1BVfCVCdXN5JywKICAgICAgICAgICAgICAgICAgICAgICAgJ21ldHJpY0V2YWxEZXRhaWwnOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWV0cmljRXZhbERldGFpbFR5cGUnOiAnU1BFQ0lGSUNfVFlQRScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY29tcGFyZUNvbmRpdGlvbic6ICdHUkVBVEVSX1RIQU5fU1BFQ0lGSUNfVkFMVUUnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbXBhcmVWYWx1ZSc6IDg1CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICd0cmlnZ2VyRW5hYmxlZCc6IFRydWUsCiAgICAgICAgICAgICAgICAgICAgJ21pbmltdW1UcmlnZ2Vycyc6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgJ2V2YWxNYXRjaGluZ0NyaXRlcmlhJzogTm9uZQogICAgICAgIH0sCiAgICAgICAgJ3dhcm5pbmdDcml0ZXJpYSc6IHsKICAgICAgICAgICAgJ2NvbmRpdGlvbkFnZ3JlZ2F0aW9uVHlwZSc6ICdBTEwnLAogICAgICAgICAgICAnY29uZGl0aW9uRXhwcmVzc2lvbic6IE5vbmUsCiAgICAgICAgICAgICdjb25kaXRpb25zJzogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICduYW1lJzogJ0NvbmRpdGlvbiAxJywKICAgICAgICAgICAgICAgICAgICAnc2hvcnROYW1lJzogJ0EnLAogICAgICAgICAgICAgICAgICAgICdldmFsdWF0ZVRvVHJ1ZU9uTm9EYXRhJzogRmFsc2UsCiAgICAgICAgICAgICAgICAgICAgJ2V2YWxEZXRhaWwnOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICdldmFsRGV0YWlsVHlwZSc6ICdTSU5HTEVfTUVUUklDJywKICAgICAgICAgICAgICAgICAgICAgICAgJ21ldHJpY0FnZ3JlZ2F0ZUZ1bmN0aW9uJzogJ1ZBTFVFJywKICAgICAgICAgICAgICAgICAgICAgICAgJ21ldHJpY1BhdGgnOiAnSGFyZHdhcmUgUmVzb3VyY2VzfENQVXwlQnVzeScsCiAgICAgICAgICAgICAgICAgICAgICAgICdtZXRyaWNFdmFsRGV0YWlsJzogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21ldHJpY0V2YWxEZXRhaWxUeXBlJzogJ1NQRUNJRklDX1RZUEUnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbXBhcmVDb25kaXRpb24nOiAnR1JFQVRFUl9USEFOX1NQRUNJRklDX1ZBTFVFJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb21wYXJlVmFsdWUnOiAwLjEKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgJ3RyaWdnZXJFbmFibGVkJzogVHJ1ZSwKICAgICAgICAgICAgICAgICAgICAnbWluaW11bVRyaWdnZXJzJzogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAnZXZhbE1hdGNoaW5nQ3JpdGVyaWEnOiBOb25lCiAgICAgICAgfQogICAgfQp9CgojIFNlcmlhbGl6aW5nIGpzb24KanNvbl9vYmplY3QgPSBqc29uLmR1bXBzKGksIGluZGVudCA9IDQpCgpyZXNwb25zZSA9IHJlcXVlc3RzLnB1dCh1cmwsIGhlYWRlcnM9aGVhZGVycywgZGF0YT1qc29uX29iamVjdCkKcHJpbnQocmVzcG9uc2UuanNvbigpKQoKaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgIT0gMjAwOgoKICAgIGxvZ2dlci5pbmZvKCdTdGF0dXM6JywgcmVzcG9uc2Uuc3RhdHVzX2NvZGUsICdIZWFkZXJzOicsIHJlc3BvbnNlLmhlYWRlcnMsICdFcnJvciBSZXNwb25zZTonLCByZXNwb25zZS5qc29uKCkpCgogICAgZXhpdCgpCgplbHNlOgogICAgcHJpbnQocmVzcG9uc2UpCgoKcHJpbnQoJ0NvbXBsZXRlZCcpCgoKCQoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoK","leo1311"
"APPAPD_R48261","APPAPD_R48261_leo1311.py","aW1wb3J0IHJlcXVlc3RzCmltcG9ydCBqc29uCmltcG9ydCBteXNxbC5jb25uZWN0b3IKaW1wb3J0IHBhbmRhcyBhcyBwZApmcm9tIHNxbGFsY2hlbXkgaW1wb3J0IGNyZWF0ZV9lbmdpbmUKaW1wb3J0IHN5cwpmcm9tIHVybGxpYi5wYXJzZSBpbXBvcnQgcXVvdGVfcGx1cywgdXJscGFyc2UKZnJvbSBsZWFwLnV0aWxzLlV0aWxpdGllcyBpbXBvcnQgVXRpbGl0aWVzCmltcG9ydCBsb2dnaW5nIGFzIGxvZ2dlcgppbXBvcnQgb3MKZnJvbSBweXNwYXJrLnNxbCBpbXBvcnQgU3BhcmtTZXNzaW9uCmltcG9ydCBzeXMKZnJvbSBweXNwYXJrLnNxbC5mdW5jdGlvbnMgaW1wb3J0ICoKZnJvbSBweXNwYXJrLnNxbC50eXBlcyBpbXBvcnQgKgppbXBvcnQgZGF0ZXRpbWUKZnJvbSByZXF1ZXN0cy5hdXRoIGltcG9ydCBIVFRQQmFzaWNBdXRoCmltcG9ydCB0aW1lCmltcG9ydCBweW9kYmMKaW1wb3J0IHB5bXlzcWwKaW1wb3J0IHB5bXNzcWwKZnJvbSBsZWFwLmNvbmZpZy5FeHRyYWN0b3JDb25maWdzLkRhdGFzZXRFeHRyYWN0b3JDb25maWcgaW1wb3J0IERhdGFzZXRFeHRyYWN0b3JDb25maWcKCm9zLmVudmlyb25bJ05PX1BST1hZJ109J2xlYXAtcG92LnNhYXMuYXBwZHluYW1pY3MuY29tJwoKbG9nZ2VyLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dlci5JTkZPLCBmb3JtYXQ9JyUoYXNjdGltZSlzIElORk8gJShtZXNzYWdlKXMnLCBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycpCmFyZ3VtZW50cyA9IHN5cy5hcmd2CmRpY3QgPSB7fQpmb3IgYXJnIGluIGFyZ3VtZW50czoKICAgIHRyeToKICAgICAgICBkaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICgnOicpLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQogICAgZXhjZXB0OgogICAgICAgIGEgPSAnZXJyb3InCiMgcHJpbnQoJ2RpY3Rpb25hcnknLCBkaWN0KQojZGIgZGV0YWlscwpEeW5hdHJhY2VEZW1vZGljdD1qc29uLmxvYWRzKGRpY3RbJ0FwcER5bmFtaWNzJ10pCgp1cmw9RHluYXRyYWNlRGVtb2RpY3RbJ3VybCddCmRUeXBlID0gdXJsLnNwbGl0KCc6JylbMV0KcGxhY2VfaG9sZGVyID0gTm9uZQpteV9jb25uID0gTm9uZQoKCgpkZWYgZ2V0Q29ubmVjdGlvbihkVHlwZSk6CiAgICBnbG9iYWwgcGxhY2VfaG9sZGVyCiAgICBnbG9iYWwgbXlfY29ubgogICAgY254ID0gTm9uZQogICAgdXNlcm5hbWUgPSBEeW5hdHJhY2VEZW1vZGljdFsndXNlck5hbWUnXQogICAgcGFzc3dvcmQgPSBVdGlsaXRpZXMuZGVjcnlwdChEeW5hdHJhY2VEZW1vZGljdFsncGFzc3dvcmQnXSwgRHluYXRyYWNlRGVtb2RpY3RbJ3NhbHQnXSkKICAgIGlmIGRUeXBlID09ICdteXNxbCc6CiAgICAgICAgaG9zdCA9IHVybHBhcnNlKER5bmF0cmFjZURlbW9kaWN0Wyd1cmwnXVs1Ol0pLmhvc3RuYW1lCiAgICAgICAgcG9ydCA9IHVybHBhcnNlKER5bmF0cmFjZURlbW9kaWN0Wyd1cmwnXVs1Ol0pLnBvcnQKICAgICAgICBkYXRhYmFzZSA9IHVybHBhcnNlKER5bmF0cmFjZURlbW9kaWN0Wyd1cmwnXVs1Ol0pLnBhdGgucnNwbGl0KCcvJywgMSlbMV0KICAgICAgICBjbnggPSBteXNxbC5jb25uZWN0b3IuY29ubmVjdCh1c2VyPXVzZXJuYW1lLCBwYXNzd29yZD1wYXNzd29yZCwgaG9zdD1ob3N0LCBwb3J0PXBvcnQsIGRhdGFiYXNlPWRhdGFiYXNlKQogICAgICAgIHBsYWNlX2hvbGRlciA9ICclcycKICAgICAgICAjIG15X2Nvbm4gPSBjcmVhdGVfZW5naW5lKCdteXNxbCtweW15c3FsOi8vezB9OnsxfUB7Mn0vezN9Jy5mb3JtYXQodXNlcm5hbWUscGFzc3dvcmQsaG9zdCxkYXRhYmFzZSkpCiAgICAgICAgY254X3N0cmluZyA9ICdteXNxbCtweW15c3FsOi8vezB9OiVzQHsxfS97Mn0nICUgcXVvdGVfcGx1cyhzdHIocGFzc3dvcmQpKQogICAgICAgIHByaW50KCdwYXNzd29yZCBpcycsIHBhc3N3b3JkKQogICAgICAgIGNueF9zdHJpbmcgPSBjbnhfc3RyaW5nLmZvcm1hdCh1c2VybmFtZSxob3N0LGRhdGFiYXNlKQogICAgICAgIHByaW50KCdjbnhTdHJpbmcgaXMnICwgY254X3N0cmluZykKICAgICAgICBteV9jb25uID0gY3JlYXRlX2VuZ2luZShjbnhfc3RyaW5nKQogICAgICAgIAogICAgICAgIAogICAgZWxpZiBkVHlwZSA9PSAnc3Fsc2VydmVyJzoKICAgICAgICAjIHNlcnZlciA9IHVybC5zcGxpdCgnLy8nKVsxXS5zcGxpdCgnOycpWzBdLnJlcGxhY2UoJ1xTUUwnLCdTUUwnKQogICAgICAgIHNlcnZlciA9IHVybC5zcGxpdCgnLy8nKVsxXS5zcGxpdCgnOycpWzBdCiAgICAgICAgZGF0YWJhc2UgPSAodXJsLnNwbGl0KCc9JykpWzFdCiAgICAgICAgY29ubmVjdGlvblN0cmluZyA9ICdEUklWRVI9e09EQkMgRHJpdmVyIDE3IGZvciBTUUwgU0VSVkVSfTtTRVJWRVI9JytzZXJ2ZXIrJztEQVRBQkFTRT0nK2RhdGFiYXNlKyc7VUlEPScrdXNlcm5hbWUrJztQV0Q9JytwYXNzd29yZCsnOycKICAgICAgICBjbnggPSBweW9kYmMuY29ubmVjdChjb25uZWN0aW9uU3RyaW5nKQogICAgICAgIHBsYWNlX2hvbGRlciA9ICc/JwogICAgICAgIGVuZyA9ICdtc3NxbCtweW1zc3FsOi8vezB9OiVzQHsxfS97Mn0nICUgcXVvdGVfcGx1cyhzdHIocGFzc3dvcmQpKQogICAgICAgIGNueF9zdHJpbmcgPSBlbmcuZm9ybWF0KHVzZXJuYW1lLHNlcnZlcixkYXRhYmFzZSkKICAgICAgICBteV9jb25uID0gY3JlYXRlX2VuZ2luZShjbnhfc3RyaW5nKQogICAgCiAgICByZXR1cm4gY254CiAgICAKZGVmIGdldFByb2plY3RJZCgpOgogICAgY254ID0gZ2V0Q29ubmVjdGlvbihkVHlwZSkKICAgIG15Y3Vyc29yID0gY254LmN1cnNvcigpCiAgICBxID0gJ3NlbGVjdCBpZCBmcm9tIHVzbV9wcm9qZWN0IHdoZXJlIG5hbWUgPSBcJycrZGljdFsncHJvamVjdCddKydcJycKICAgIG15Y3Vyc29yLmV4ZWN1dGUocSkKICAgIG15cmVzdWx0ID0gbXljdXJzb3IuZmV0Y2hhbGwoKQogICAgY254LmNvbW1pdCgpCiAgICBteWN1cnNvci5jbG9zZSgpCiAgICBjbnguY2xvc2UoKQogICAgcmV0dXJuIG15cmVzdWx0WzBdWzBdCiAgICAKIyB0YWJsZW5hbWUgPSAnc3JlX2V2ZW50Jwpwcm9qZWN0X2lkID0gc3RyKGdldFByb2plY3RJZCgpKQoKY254ID0gZ2V0Q29ubmVjdGlvbihkVHlwZSkKCgpjb21iaW5lZERhdGFEaWN0ID17fQoKbXlEYXRhc2V0Q29uZmlnID0ganNvbi5sb2FkcyhkaWN0WydyZXNwb25zZVRpbWUnXSkKbXlEYXRhc2V0Q29uZmlnID0geydkYXRhc2V0JzogbXlEYXRhc2V0Q29uZmlnfQpkYXRhID0gRGF0YXNldEV4dHJhY3RvckNvbmZpZygnMScsJycsbXlEYXRhc2V0Q29uZmlnLCcnKS5nZXRFeHRyYWN0b3IoKS5nZXREYXRhKCkKCmNvbWJpbmVkRGF0YURpY3RbJ3Jlc3BvbnNlVGltZSddID0gZGF0YS5qc29uKCkKCiMgcHJpbnQodGllck1ldHJpY3NEYXRhKQoKCiMgcHJpbnQodGllck1ldHJpY3NEYXRhKQoKIyBteV9jb25uID0gY3JlYXRlX2VuZ2luZSgnbXlzcWwrcHlteXNxbDovL3swfTp7MX1AezJ9L3szfScuZm9ybWF0KHVzZXJuYW1lLHBhc3N3b3JkLGhvc3QsZGF0YWJhc2UpKQoKZm9yIGkgaW4gY29tYmluZWREYXRhRGljdDoKICAgIGZvciBkYXRhIGluIGNvbWJpbmVkRGF0YURpY3RbaV06CiAgICAgICAgaWYgZGF0YVsnbWV0cmljTmFtZSddICE9ICdNRVRSSUMgREFUQSBOT1QgRk9VTkQnOgogICAgICAgICAgICBtZXRyaWNfcGF0aF9zcGxpdCA9IGRhdGFbJ21ldHJpY1BhdGgnXS5zcGxpdCgnfCcpCiAgICAgICAgICAgIHZhbHVlcyA9IGRhdGFbJ21ldHJpY1ZhbHVlcyddCiAgICAgICAgICAgIGRmID0gcGQuRGF0YUZyYW1lKHZhbHVlcykKICAgICAgICAgICAgZGYgPSBkZi5kcm9wKFsndXNlUmFuZ2UnXSwgYXhpcz0xKQogICAgICAgICAgICBkZlsncHJvamVjdF9pZCddID0gcHJvamVjdF9pZAogICAgICAgICAgICBkZlsnYXBtVHlwZSddID0gJ0FwcEQnCiAgICAgICAgICAgIGRmLnJlbmFtZShjb2x1bW5zPXsndmFsdWUnOidtZXRyaWNWYWx1ZScsICdzdGFydFRpbWVJbk1pbGxpcyc6ICdzdGFydFRpbWUnfSwgaW5wbGFjZT1UcnVlKQogICAgICAgIAogICAgICAgICAgICBkZlsnbWV0cmljVHlwZSddID0gbWV0cmljX3BhdGhfc3BsaXRbLTFdCiAgICAgICAgICAgIGRmWydjaV9uYW1lJ10gPSBtZXRyaWNfcGF0aF9zcGxpdFsxXQogICAgICAgICAgICBkZlsnbWV0cmljUGF0aCddID0gbWV0cmljX3BhdGhfc3BsaXRbLTJdCiAgICAgICAgICAgIGRmWydjdHlwZSddID0gJ1RpZXInCiAgICAgICAgICAgIHByaW50KGRmKQogICAgICAgICAgICAjIGRmLnRvX2V4Y2VsKCdvdXRwdXQueGxzeCcpCiAgICAgICAgICAgIAogICAgICAgICAgICBkZi50b19zcWwoY29uPW15X2Nvbm4sIG5hbWU9J3NyZV9tZXRyaWNzJywgaWZfZXhpc3RzPSdhcHBlbmQnLCBpbmRleD1GYWxzZSkKCgpwcmludCgnQ29tcGxldGVkJykgICAgICAgIAoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgo=","leo1311"
