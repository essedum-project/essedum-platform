"cname","filename","filescript","organization"
"APMDT_VN81403","APMDT_VN81403_leo1311.py","","leo1311"
"APMDT_PR86325","APMDT_PR86325_leo1311.py","","leo1311"
"APMDT_HS24363","APMDT_HS24363_leo1311.py","","leo1311"
"APMDT_PL81905","APMDT_PL81905_leo1311.py","","leo1311"
"APMDT_SR22120","APMDT_SR22120_leo1311.py","","leo1311"
"APMDT_PR80903","APMDT_PR80903_leo1311.py","","leo1311"
"APMDT_HS91825","APMDT_HS91825_leo1311.py","","leo1311"
"APMDT_PT70742","APMDT_PT70742_leo1311.py","","leo1311"
"APMDT_SR58716","APMDT_SR58716_leo1311.py","ZnJvbSBweXNwYXJrLnNxbCBpbXBvcnQgU3BhcmtTZXNzaW9uCmltcG9ydCByZXF1ZXN0cwppbXBvcnQgc3lzCmltcG9ydCBteXNxbC5jb25uZWN0b3IKZnJvbSBweXNwYXJrLnNxbC5mdW5jdGlvbnMgaW1wb3J0ICoKZnJvbSBweXNwYXJrLnNxbC50eXBlcyBpbXBvcnQgKgppbXBvcnQganNvbgpmcm9tIHVybGxpYi5wYXJzZSBpbXBvcnQgcXVvdGVfcGx1cywgdXJscGFyc2UKZnJvbSBsZWFwLnV0aWxzLlV0aWxpdGllcyBpbXBvcnQgVXRpbGl0aWVzCmltcG9ydCBkYXRldGltZQppbXBvcnQgbG9nZ2luZyBhcyBsb2dnZXIKZnJvbSByZXF1ZXN0cy5hdXRoIGltcG9ydCBIVFRQQmFzaWNBdXRoCmltcG9ydCByZXF1ZXN0cwppbXBvcnQgcGFuZGFzIGFzIHBkCmltcG9ydCBvcwpmcm9tIGxlYXAuY29uZmlnLkV4dHJhY3RvckNvbmZpZ3MuRGF0YXNldEV4dHJhY3RvckNvbmZpZyBpbXBvcnQgRGF0YXNldEV4dHJhY3RvckNvbmZpZwoKb3MuZW52aXJvblsnTk9fUFJPWFknXT0naW5meWFwbS50b29scy5pbmZvc3lzYXBwcy5jb20nCmFyZ3VtZW50cyA9IHN5cy5hcmd2CmRpY3QgPSB7fQpmb3IgYXJnIGluIGFyZ3VtZW50czoKICAgIHRyeToKICAgICAgICBkaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICgnOicpLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQogICAgZXhjZXB0OgogICAgICAgIGEgPSAnZXJyb3InCgpteURhdGFzZXRDb25maWcgPSBqc29uLmxvYWRzKGRpY3RbJ215RGF0YXNldCddKQpteURhdGFzZXRDb25maWcgPSB7J2RhdGFzZXQnOiBteURhdGFzZXRDb25maWd9CmRhdGEgPSBEYXRhc2V0RXh0cmFjdG9yQ29uZmlnKCcxJywnJyxteURhdGFzZXRDb25maWcsJycpLmdldEV4dHJhY3RvcigpLmdldERhdGEoKQpkYXRhPWpzb24ubG9hZHMoZGF0YSkKIyBwcmludChkYXRhKQoKbG9nZ2VyLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dlci5JTkZPLCBmb3JtYXQ9JyUoYXNjdGltZSlzIElORk8gJShtZXNzYWdlKXMnLCBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycpCmFyZ3VtZW50cyA9IHN5cy5hcmd2CgpwcmludCgnYXJndW1lbnRzJywgYXJndW1lbnRzKQoKIyBjb252ZXJ0IGpzb24gdG8gc3BhcmsgZGF0YWZyYW1lCmpzb25TdHJpbmdBcnJheSA9IFtdCgojIER5bmF0cmFjZURlbW8gRGF0YXNvdXJjZQpEeW5hdHJhY2VEZW1vZHMgPSBkaWN0WydEeW5hdHJhY2VEZW1vJ10KRHluYXRyYWNlRGVtb2RzPWpzb24ubG9hZHMoRHluYXRyYWNlRGVtb2RzKQoKRHluYXRyYWNlRGVtb2RpY3QgPSB7fQpEeW5hdHJhY2VEZW1vZGljdD1EeW5hdHJhY2VEZW1vZHMKCnVzZXJuYW1lID0gRHluYXRyYWNlRGVtb2RpY3RbJ3VzZXJOYW1lJ10KcGFzc3dvcmQgPSBVdGlsaXRpZXMuZGVjcnlwdChEeW5hdHJhY2VEZW1vZGljdFsncGFzc3dvcmQnXSwgRHluYXRyYWNlRGVtb2RpY3RbJ3NhbHQnXSkKaG9zdCA9IHVybHBhcnNlKER5bmF0cmFjZURlbW9kaWN0Wyd1cmwnXVs1Ol0pLmhvc3RuYW1lCnBvcnQgPSB1cmxwYXJzZShEeW5hdHJhY2VEZW1vZGljdFsndXJsJ11bNTpdKS5wb3J0CmRhdGFiYXNlID0gdXJscGFyc2UoRHluYXRyYWNlRGVtb2RpY3RbJ3VybCddWzU6XSkucGF0aC5yc3BsaXQoJy8nLCAxKVsxXQoKZGVmIGdldFByb2plY3RJZCgpOgogICAgY254ID0gbXlzcWwuY29ubmVjdG9yLmNvbm5lY3QodXNlcj11c2VybmFtZSwgcGFzc3dvcmQ9cGFzc3dvcmQsIGhvc3Q9aG9zdCwgcG9ydD1wb3J0LCBkYXRhYmFzZT1kYXRhYmFzZSkKICAgIG15Y3Vyc29yID0gY254LmN1cnNvcigpCiAgICBxID0gJ3NlbGVjdCBpZCBmcm9tIHVzbV9wcm9qZWN0IHdoZXJlIG5hbWUgPSBcJycrZGljdFsncHJvamVjdCddKydcJycKICAgIG15Y3Vyc29yLmV4ZWN1dGUocSkKICAgIG15cmVzdWx0ID0gbXljdXJzb3IuZmV0Y2hhbGwoKQogICAgY254LmNvbW1pdCgpCiAgICBteWN1cnNvci5jbG9zZSgpCiAgICBjbnguY2xvc2UoKQogICAgcmV0dXJuIG15cmVzdWx0WzBdWzBdCgpwcm9qZWN0SWQgPSBzdHIoZ2V0UHJvamVjdElkKCkpCgpkZWYgZ2V0U2VydmljZUN0eXBlKCk6CiAgICBjbnggPSBteXNxbC5jb25uZWN0b3IuY29ubmVjdCh1c2VyPXVzZXJuYW1lLCBwYXNzd29yZD1wYXNzd29yZCwgaG9zdD1ob3N0LCBwb3J0PXBvcnQsIGRhdGFiYXNlPWRhdGFiYXNlKQogICAgbXljdXJzb3IgPSBjbnguY3Vyc29yKCkKICAgIHEgPSAnc2VsZWN0IGlkIGZyb20gY2ZtX2NvbmZpZ3VyYXRpb25faXRlbV90eXBlIHdoZXJlIGN0eXBlID0gXCdTZXJ2aWNlXCcgYW5kIGJhY2tncm91bmRfY29sb3VyPVwnRFRcJyBhbmQgcHJvamVjdF9pZCA9Jytwcm9qZWN0SWQKICAgIG15Y3Vyc29yLmV4ZWN1dGUocSkKICAgIG15cmVzdWx0ID0gbXljdXJzb3IuZmV0Y2hhbGwoKQogICAgY254LmNvbW1pdCgpCiAgICBteWN1cnNvci5jbG9zZSgpCiAgICBjbnguY2xvc2UoKQogICAgcmV0dXJuIG15cmVzdWx0WzBdWzBdCiAgICAKc2VydmljZUN0eXBlID0gc3RyKGdldFNlcnZpY2VDdHlwZSgpKQoKZGVmIGdldFNlcnZpY2VzKCk6CiAgICBmb3IgaXRlbSBpbiBkYXRhWydlbnRpdGllcyddOgogICAgICAgIHJvdyA9IHt9CiAgICAgICAgcm93WydjaV9uYW1lJ10gPSBpdGVtWydlbnRpdHlJZCddCiAgICAgICAgcm93WydjdHlwZSddID0gc2VydmljZUN0eXBlCiAgICAgICAgcm93Wydwcm9qZWN0X2lkJ10gPSBpbnQocHJvamVjdElkKQogICAgICAgIGpzb25TdHJpbmdBcnJheS5hcHBlbmQocm93KQogICAgICAgIAogICAgICAgIApnZXRTZXJ2aWNlcygpCgojIGZvciBpIGluIGpzb25TdHJpbmdBcnJheToKIyAgICAgcHJpbnQoJ2pzb25yb3cnLGkpCgpwcmludCgnZW50ZXIgc3BhcmsnKQoKc3BhcmsgPSBTcGFya1Nlc3Npb24uYnVpbGRlci5tYXN0ZXIoJ2xvY2FsJykuYXBwTmFtZSgnc2xhJykuY29uZmlnKCdzcGFyay51aS5zaG93Q29uc29sZVByb2dyZXNzJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmYWxzZScpLmdldE9yQ3JlYXRlKCkKZGYgPSBzcGFyay5yZWFkLmpzb24oc3Bhcmsuc3BhcmtDb250ZXh0LnBhcmFsbGVsaXplKGpzb25TdHJpbmdBcnJheSkpCgpwcmludCgnaW4gc3BhcmsnKQoKcGRmID0gcGQuRGF0YUZyYW1lKGpzb25TdHJpbmdBcnJheSkKCkR5blRvSWNtQ29sdW1uTWFwcGluZyA9IHsnY2lfbmFtZSc6ICdjaV9uYW1lJywnY3R5cGUnOidjdHlwZScsJ3Byb2plY3RfaWQnOidwcm9qZWN0X2lkJ30KCnByaW50KCdzcGFyayBlbmQnKQojIG1hcENvbHVtbnMKZm91bmRDb2x1bW5zID0gW10KZm9yIGtleSBpbiBEeW5Ub0ljbUNvbHVtbk1hcHBpbmcua2V5cygpOgogICAgdHJ5OgogICAgICAgIE5ld0NvbHVtbiA9IER5blRvSWNtQ29sdW1uTWFwcGluZ1trZXldCiAgICAgICAgRHluQ29sdW1uID0ga2V5CiAgICAgICAgZGYgPSBkZi53aXRoQ29sdW1uKE5ld0NvbHVtbiwgd2hlbihjb2woRHluQ29sdW1uKSA9PSAnJywgTm9uZSkub3RoZXJ3aXNlKGNvbChEeW5Db2x1bW4pKSkKICAgICAgICBmb3VuZENvbHVtbnMuYXBwZW5kKE5ld0NvbHVtbikKICAgIGV4Y2VwdDoKICAgICAgICBlcnJvciA9ICdDb2x1bW4gTm90IGZvdW5kJwpkZiA9IGRmLnNlbGVjdChmb3VuZENvbHVtbnMpCmRmID0gc3BhcmsuY3JlYXRlRGF0YUZyYW1lKHBkZikKIyBzYXZlIHRvIGRiCmNvbHVtbkxpc3QgPSBkZi5jb2x1bW5zCiMgcHJpbnQoY29sdW1uTGlzdCkKCmNpTmFtZVNldCA9IHNldCgpCgpkZWYgaXNDaUF2YWlsYWJsZSgpOgogICAgcHJpbnQoJ2lzQ2lBdmFpbGFibGUnKQogICAgY254ID0gbXlzcWwuY29ubmVjdG9yLmNvbm5lY3QodXNlcj11c2VybmFtZSwgcGFzc3dvcmQ9cGFzc3dvcmQsIGhvc3Q9aG9zdCwgcG9ydD1wb3J0LCBkYXRhYmFzZT1kYXRhYmFzZSkKICAgIG15Y3Vyc29yID0gY254LmN1cnNvcigpCiAgICBxID0gJ3NlbGVjdCBjaV9uYW1lIGZyb20gY2ZtX2NvbmZpZ3VyYXRpb25faXRlbSB3aGVyZSBjdHlwZT0nK3NlcnZpY2VDdHlwZSsnIGFuZCBwcm9qZWN0X2lkPScrcHJvamVjdElkCiAgICBteWN1cnNvci5leGVjdXRlKHEpCiAgICBteXJlc3VsdCA9IG15Y3Vyc29yLmZldGNoYWxsKCkKICAgIGZvciAoYSkgaW4gbXlyZXN1bHQ6CiAgICAgICAgY2lOYW1lU2V0LmFkZChhWzBdKQogICAgY254LmNvbW1pdCgpCiAgICBteWN1cnNvci5jbG9zZSgpCiAgICBjbnguY2xvc2UoKQoKaXNDaUF2YWlsYWJsZSgpCgpkZWYgcHJvY2Vzc19wYXJ0aXRpb24oaXRlcmF0b3IpOgogICAgY254ID0gbXlzcWwuY29ubmVjdG9yLmNvbm5lY3QodXNlcj11c2VybmFtZSwgcGFzc3dvcmQ9cGFzc3dvcmQsIGhvc3Q9aG9zdCwgcG9ydD1wb3J0LCBkYXRhYmFzZT1kYXRhYmFzZSkKICAgIG15Y3Vyc29yID0gY254LmN1cnNvcigpCiAgICBmb3Igcm93IGluIGl0ZXJhdG9yOgogICAgICAgIHRyeToKICAgICAgICAgICAgcGFyYW1zRGljdCA9IHt9CiAgICAgICAgICAgIHZhbHVlcyA9IFtdCiAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKDAsIGxlbihjb2x1bW5MaXN0KSk6CiAgICAgICAgICAgICAgICBwYXJhbXNEaWN0W2NvbHVtbkxpc3RbaV1dID0gcm93W2ldCiAgICAgICAgICAgICAgICB2YWx1ZXMuYXBwZW5kKHJvd1tpXSkKCiAgICAgICAgICAgIGNvbHVtbnMgPSAnLCAnLmpvaW4oJ2B7MH1gJy5mb3JtYXQoaykgZm9yIGsgaW4gcGFyYW1zRGljdCkKICAgICAgICAgICAgZHVwbGljYXRlcyA9ICcsICcuam9pbignezB9PVZBTFVFUyh7MH0pJy5mb3JtYXQoaykgZm9yIGsgaW4gcGFyYW1zRGljdCkKICAgICAgICAgICAgcGxhY2VfaG9sZGVycyA9ICcsICcuam9pbignJXMnLmZvcm1hdChrKSBmb3IgayBpbiBwYXJhbXNEaWN0KQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgdmFsdWVzWzBdIG5vdCBpbiBjaU5hbWVTZXQ6CiAgICAgICAgICAgICAgICBxcnkgPSAnc2VsZWN0IG1heChvcmRlcl92YWx1ZSkgZnJvbSBjZm1fY29uZmlndXJhdGlvbl9pdGVtIHdoZXJlIHByb2plY3RfaWQ9ICcrcHJvamVjdElkKycgYW5kIGN0eXBlID0gJytzdHIodmFsdWVzWzFdKQogICAgICAgICAgICAgICAgbXljdXJzb3IuZXhlY3V0ZShxcnkpCiAgICAgICAgICAgICAgICBteXJlc3VsdCA9IG15Y3Vyc29yLmZldGNoYWxsKCkKICAgICAgICAgICAgICAgIGNvdW50ID0gbXlyZXN1bHRbMF1bMF0KICAgICAgICAgICAgICAgIGlmIGNvdW50ID09IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgY291bnQgPSAwCiAgICAgICAgICAgICAgICBjb3VudCA9IGNvdW50ICsgMQogICAgICAgICAgICAgICAgcSA9ICdJTlNFUlQgSU5UTyBjZm1fY29uZmlndXJhdGlvbl9pdGVtKCcrY29sdW1ucysnLG9yZGVyX3ZhbHVlKSBWQUxVRVMgKCcrcGxhY2VfaG9sZGVycysnLCcrc3RyKGNvdW50KSsnKScKICAgICAgICAgICAgICAgIHZhbCA9ICh2YWx1ZXNbMF0sdmFsdWVzWzFdLHZhbHVlc1syXSkKICAgICAgICAgICAgICAgIG15Y3Vyc29yLmV4ZWN1dGUocSwgdmFsKQogICAgICAgICAgICAgICAgY2lOYW1lU2V0LmFkZCh2YWx1ZXNbMF0pCiAgICAgICAgICAgIGNueC5jb21taXQoKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgbG9nZ2VyLmluZm8oJ0Vycm9yIE51bWJlcjogJyArIHJvd1swXSkKCiAgICBteWN1cnNvci5jbG9zZSgpCiAgICBjbnguY2xvc2UoKQoKZGYuZm9yZWFjaFBhcnRpdGlvbihwcm9jZXNzX3BhcnRpdGlvbikKcHJpbnQoJ0NvbXBsZXRlZCcpCmxvZ2dlci5pbmZvKCdDb21wbGV0ZWQnKQoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg==","leo1311"
"APMDT_PG97620","APMDT_PG97620_leo1311.py","","leo1311"
"APMDT_HS44485","APMDT_HS44485_leo1311.py","","leo1311"
"APMDT_PT68853","APMDT_PT68853_leo1311.py","","leo1311"
"APMDT_SR68662","APMDT_SR68662_leo1311.py","","leo1311"
"APMDT_HS71491","APMDT_HS71491_leo1311.py","ZnJvbSBweXNwYXJrLnNxbCBpbXBvcnQgU3BhcmtTZXNzaW9uDQppbXBvcnQgcmVxdWVzdHMNCmltcG9ydCBzeXMNCmltcG9ydCBteXNxbC5jb25uZWN0b3INCmZyb20gcHlzcGFyay5zcWwuZnVuY3Rpb25zIGltcG9ydCAqDQpmcm9tIHB5c3Bhcmsuc3FsLnR5cGVzIGltcG9ydCAqDQppbXBvcnQganNvbg0KZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHF1b3RlX3BsdXMsIHVybHBhcnNlDQpmcm9tIGxlYXAudXRpbHMuVXRpbGl0aWVzIGltcG9ydCBVdGlsaXRpZXMNCmltcG9ydCBkYXRldGltZQ0KaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyDQpmcm9tIHJlcXVlc3RzLmF1dGggaW1wb3J0IEhUVFBCYXNpY0F1dGgNCmltcG9ydCByZXF1ZXN0cw0KaW1wb3J0IHBhbmRhcyBhcyBwZA0KaW1wb3J0IG9zDQpmcm9tIGxlYXAuY29uZmlnLkV4dHJhY3RvckNvbmZpZ3MuRGF0YXNldEV4dHJhY3RvckNvbmZpZyBpbXBvcnQgRGF0YXNldEV4dHJhY3RvckNvbmZpZw0KDQpvcy5lbnZpcm9uWydOT19QUk9YWSddPSdpbmZ5YXBtLnRvb2xzLmluZm9zeXNhcHBzLmNvbScNCmFyZ3VtZW50cyA9IHN5cy5hcmd2DQpkaWN0ID0ge30NCmZvciBhcmcgaW4gYXJndW1lbnRzOg0KICAgIHRyeToNCiAgICAgICAgZGljdFthcmcuc3BsaXQoJzonKVswXV0gPSAoJzonKS5qb2luKGFyZy5zcGxpdCgnOicpWzE6XSkNCiAgICBleGNlcHQ6DQogICAgICAgIGEgPSAnZXJyb3InDQoNCm15RGF0YXNldENvbmZpZyA9IGpzb24ubG9hZHMoZGljdFsnbXlEYXRhc2V0J10pDQpteURhdGFzZXRDb25maWcgPSB7J2RhdGFzZXQnOiBteURhdGFzZXRDb25maWd9DQpkYXRhID0gRGF0YXNldEV4dHJhY3RvckNvbmZpZygnMScsJycsbXlEYXRhc2V0Q29uZmlnLCcnKS5nZXRFeHRyYWN0b3IoKS5nZXREYXRhKCkNCmRhdGE9anNvbi5sb2FkcyhkYXRhKQ0KIyBwcmludChkYXRhKQ0KDQpsb2dnZXIuYmFzaWNDb25maWcobGV2ZWw9bG9nZ2VyLklORk8sIGZvcm1hdD0nJShhc2N0aW1lKXMgSU5GTyAlKG1lc3NhZ2UpcycsIGRhdGVmbXQ9JyV5LyVtLyVkICVIOiVNOiVTJykNCmFyZ3VtZW50cyA9IHN5cy5hcmd2DQoNCnByaW50KCdhcmd1bWVudHMnLCBhcmd1bWVudHMpDQoNCiMgY29udmVydCBqc29uIHRvIHNwYXJrIGRhdGFmcmFtZQ0KanNvblN0cmluZ0FycmF5ID0gW10NCg0KIyBEeW5hdHJhY2VEZW1vIERhdGFzb3VyY2UNCkR5bmF0cmFjZURlbW9kcyA9IGRpY3RbJ0R5bmF0cmFjZURlbW8nXQ0KRHluYXRyYWNlRGVtb2RzPWpzb24ubG9hZHMoRHluYXRyYWNlRGVtb2RzKQ0KDQpEeW5hdHJhY2VEZW1vZGljdCA9IHt9DQpEeW5hdHJhY2VEZW1vZGljdD1EeW5hdHJhY2VEZW1vZHMNCg0KdXNlcm5hbWUgPSBEeW5hdHJhY2VEZW1vZGljdFsndXNlck5hbWUnXQ0KcGFzc3dvcmQgPSBVdGlsaXRpZXMuZGVjcnlwdChEeW5hdHJhY2VEZW1vZGljdFsncGFzc3dvcmQnXSwgRHluYXRyYWNlRGVtb2RpY3RbJ3NhbHQnXSkNCmhvc3QgPSB1cmxwYXJzZShEeW5hdHJhY2VEZW1vZGljdFsndXJsJ11bNTpdKS5ob3N0bmFtZQ0KcG9ydCA9IHVybHBhcnNlKER5bmF0cmFjZURlbW9kaWN0Wyd1cmwnXVs1Ol0pLnBvcnQNCmRhdGFiYXNlID0gdXJscGFyc2UoRHluYXRyYWNlRGVtb2RpY3RbJ3VybCddWzU6XSkucGF0aC5yc3BsaXQoJy8nLCAxKVsxXQ0KDQpkZWYgZ2V0UHJvamVjdElkKCk6DQogICAgY254ID0gbXlzcWwuY29ubmVjdG9yLmNvbm5lY3QodXNlcj11c2VybmFtZSwgcGFzc3dvcmQ9cGFzc3dvcmQsIGhvc3Q9aG9zdCwgcG9ydD1wb3J0LCBkYXRhYmFzZT1kYXRhYmFzZSkNCiAgICBteWN1cnNvciA9IGNueC5jdXJzb3IoKQ0KICAgIHEgPSAnc2VsZWN0IGlkIGZyb20gdXNtX3Byb2plY3Qgd2hlcmUgbmFtZSA9IFwnJytkaWN0Wydwcm9qZWN0J10rJ1wnJw0KICAgIG15Y3Vyc29yLmV4ZWN1dGUocSkNCiAgICBteXJlc3VsdCA9IG15Y3Vyc29yLmZldGNoYWxsKCkNCiAgICBjbnguY29tbWl0KCkNCiAgICBteWN1cnNvci5jbG9zZSgpDQogICAgY254LmNsb3NlKCkNCiAgICByZXR1cm4gbXlyZXN1bHRbMF1bMF0NCg0KcHJvamVjdElkID0gc3RyKGdldFByb2plY3RJZCgpKQ0KDQpkZWYgaW5zZXJ0SG9zdE1ldHJpY3MoaG9zdElkLHRpbWVMaXN0LHZhbHVlTGlzdCxtZXRyaWNUeXBlLG1ldHJpY1BhdGgpOg0KICAgIGNueCA9IG15c3FsLmNvbm5lY3Rvci5jb25uZWN0KHVzZXI9dXNlcm5hbWUsIHBhc3N3b3JkPXBhc3N3b3JkLCBob3N0PWhvc3QsIHBvcnQ9cG9ydCwgZGF0YWJhc2U9ZGF0YWJhc2UpDQogICAgbXljdXJzb3IgPSBjbnguY3Vyc29yKCkNCiAgICBmb3IgaSBpbiByYW5nZSgwLGxlbih0aW1lTGlzdCktMSkgOg0KICAgICAgICBxID0gJ2luc2VydCBpbnRvIHNyZV9tZXRyaWNzKGNpX25hbWUsY3R5cGUsc3RhcnRUaW1lLG1ldHJpY1ZhbHVlLG1ldHJpY1R5cGUscHJvamVjdF9pZCxtZXRyaWNQYXRoLGRhc2hib2FyZFR5cGUsYXBtVHlwZSkgJw0KICAgICAgICBxICs9ICd2YWx1ZXMoXCcnK2hvc3RJZCsnXCcsXCdIb3N0XCcsXCcnK3N0cih0aW1lTGlzdFtpXSkrJ1wnLFwnJytzdHIodmFsdWVMaXN0W2ldKSsnXCcsXCcnK21ldHJpY1R5cGUrJ1wnLFwnJytwcm9qZWN0SWQrJ1wnLFwnJyttZXRyaWNQYXRoKydcJyxcJ01vbml0b3JpbmdcJyxcJ0RUXCcpJw0KICAgICAgICBteWN1cnNvci5leGVjdXRlKHEpDQogICAgY254LmNvbW1pdCgpDQogICAgbXljdXJzb3IuY2xvc2UoKQ0KICAgIGNueC5jbG9zZSgpDQoNCmRlZiBnZXRIb3N0TWV0cmljcygpOg0KICAgIGNueCA9IG15c3FsLmNvbm5lY3Rvci5jb25uZWN0KHVzZXI9dXNlcm5hbWUsIHBhc3N3b3JkPXBhc3N3b3JkLCBob3N0PWhvc3QsIHBvcnQ9cG9ydCwgZGF0YWJhc2U9ZGF0YWJhc2UpDQogICAgbXljdXJzb3IgPSBjbnguY3Vyc29yKCkNCiAgICBmb3IgaXRlbSBpbiBkYXRhWydyZXN1bHQnXToNCiAgICAgICAgbWV0cmljUGF0aCA9IGl0ZW1bJ21ldHJpY0lkJ10NCiAgICAgICAgaWYgJ2NwdScgaW4gbWV0cmljUGF0aDoNCiAgICAgICAgICAgIG1ldHJpY1R5cGUgPSAnQ1BVIFVzYWdlICUnDQogICAgICAgIGVsaWYgJ21lbScgaW4gbWV0cmljUGF0aDoNCiAgICAgICAgICAgIG1ldHJpY1R5cGUgPSAnTWVtb3J5IFVzYWdlICUnDQogICAgICAgIGVsaWYgJ2Rpc2snIGluIG1ldHJpY1BhdGg6DQogICAgICAgICAgICBtZXRyaWNUeXBlID0gJ0Rpc2sgVXNhZ2UgJScNCiAgICAgICAgZm9yIGkgaW4gaXRlbVsnZGF0YSddOg0KICAgICAgICAgICAgaG9zdElkID0gaVsnZGltZW5zaW9ucyddWzBdDQogICAgICAgICAgICB2YWx1ZXNMaXN0ID0gaVsndmFsdWVzJ10NCiAgICAgICAgICAgIHRpbWVzdGFtcHNMaXN0ID0gaVsndGltZXN0YW1wcyddDQogICAgICAgICAgICBxID0gJ1NFTEVDVCBNQVgoaWQpIEZST00gYHNyZV9tZXRyaWNzYCBXSEVSRSBhcG1UeXBlID1cJ0RUXCcgYW5kIHByb2plY3RfaWQgPSAnK3Byb2plY3RJZCsnIGFuZCBtZXRyaWNUeXBlID1cJycrbWV0cmljVHlwZSsnXCcgYW5kIGNpX25hbWUgPVwnJytob3N0SWQrJ1wnJw0KICAgICAgICAgICAgbXljdXJzb3IuZXhlY3V0ZShxKQ0KICAgICAgICAgICAgbXlyZXN1bHQgPSBteWN1cnNvci5mZXRjaGFsbCgpDQogICAgICAgICAgICBtYXhJZCA9IG15cmVzdWx0WzBdWzBdDQogICAgICAgICAgICBpZiBtYXhJZCBpcyBOb25lOg0KICAgICAgICAgICAgICAgIGluc2VydEhvc3RNZXRyaWNzKGhvc3RJZCx0aW1lc3RhbXBzTGlzdCx2YWx1ZXNMaXN0LG1ldHJpY1R5cGUsbWV0cmljUGF0aCkNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgY291bnRlciA9IG1heElkDQogICAgICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UoMCwgbGVuKHRpbWVzdGFtcHNMaXN0KS0xKToNCiAgICAgICAgICAgICAgICAgICAgaWYgdmFsdWVzTGlzdFtpXSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICAgICAgICAgICAgIHEgPSAndXBkYXRlIHNyZV9tZXRyaWNzIHNldCBzdGFydFRpbWU9XCcnK3N0cih0aW1lc3RhbXBzTGlzdFtpXSkrJ1wnLG1ldHJpY1ZhbHVlPVwnJytzdHIodmFsdWVzTGlzdFtpXSkrJ1wnIHdoZXJlIG1ldHJpY1R5cGUgPVwnJyttZXRyaWNUeXBlKydcJyBhbmQgcHJvamVjdF9pZCA9ICcrcHJvamVjdElkKycgYW5kIGFwbVR5cGU9XCdEVFwnIGFuZCBpZCA9JytzdHIoY291bnRlcikNCiAgICAgICAgICAgICAgICAgICAgICAgICMgcHJpbnQoJ3F1ZXJ5JyxxKQ0KICAgICAgICAgICAgICAgICAgICAgICAgbXljdXJzb3IuZXhlY3V0ZShxKQ0KICAgICAgICAgICAgICAgICAgICBjb3VudGVyIC09MQ0KICAgICAgICAgICAgICAgICAgICAjIHByaW50KCdjb3VudGVyJyxjb3VudGVyKQ0KDQogICAgICAgIA0KICAgIGNueC5jb21taXQoKQ0KICAgIG15Y3Vyc29yLmNsb3NlKCkNCiAgICBjbnguY2xvc2UoKQ0KICAgIA0KZ2V0SG9zdE1ldHJpY3MoKQ0KcHJpbnQoJ0NvbXBsZXRlZCcpDQpsb2dnZXIuaW5mbygnQ29tcGxldGVkJykNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0K","leo1311"
"APMDT_CR20147","APMDT_CR20147_leo1311.py","","leo1311"
"APMDT_PR53085","APMDT_PR53085_leo1311.py","","leo1311"
"APMDT_HS25375","APMDT_HS25375_leo1311.py","","leo1311"
"APMDT_HS58589","APMDT_HS58589_leo1311.py","","leo1311"
"APMDT_HS63212","APMDT_HS63212_leo1311.py","","leo1311"
"LEODT_RS45315","LEODT_RS45315_leo1311.py","aW1wb3J0IHJlcXVlc3RzDQppbXBvcnQgc3lzDQppbXBvcnQganNvbg0KZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHF1b3RlX3BsdXMsIHVybHBhcnNlDQpmcm9tIGxlYXAudXRpbHMuVXRpbGl0aWVzIGltcG9ydCBVdGlsaXRpZXMNCmltcG9ydCBkYXRldGltZQ0KaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyDQpmcm9tIHJlcXVlc3RzLmF1dGggaW1wb3J0IEhUVFBCYXNpY0F1dGgNCmltcG9ydCByZXF1ZXN0cw0KaW1wb3J0IG9zDQoNCmxvZ2dlci5iYXNpY0NvbmZpZyhsZXZlbD1sb2dnZXIuSU5GTyxmb3JtYXQ9JyUoYXNjdGltZSlzIElORk8gJShtZXNzYWdlKXMnLCBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycpDQphcmd1bWVudHMgPXN5cy5hcmd2DQoNCmRpY3Q9e30NCmZvciBhcmcgaW4gYXJndW1lbnRzOg0KICAgICB0cnk6DQogICAgICAgICBkaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICgnOicpLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQ0KICAgICBleGNlcHQ6DQogICAgICAgICBhPSdlcnJvcicNCnByaW50KCdkaWN0aW9uYXJ5JywgZGljdCkNCg0KcHJpbnQoJ2FyZ3VtZW50cycsYXJndW1lbnRzKQ0KIyBTZXQgdGhlIHJlcXVlc3QgcGFyYW1ldGVycw0KdXJsID0gJ2h0dHA6Ly92aWN0bHB0c3QtMTY6ODA3OS9zZXJ2aWNlcy9Db25maWd1cmF0aW9uU2VydmljZS9zZXRQbHVnaW5FbmFibGVkP25hbWU9Q1BVTG9hZCZlbmFibGVkPWZhbHNlJw0KDQojIFNldCBwcm9wZXIgaGVhZGVycw0KaGVhZGVycyA9IHsnQWNjZXB0JzonYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04J30NCg0KIyB0aGlzIGFwaSBkb2Vzbid0IGFjY2VwdCBjb250ZW50LXR5cGUNCiMgaGVhZGVycyA9IHsnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLCAnQWNjZXB0JzogJyovKicsICdIb3N0JzogJ3ZpY3RhZHBzdC0xMDo4MDc5J30NCg0KIyBEbyB0aGUgSFRUUCByZXF1ZXN0DQojIHVybCA9IHVybA0KDQpvcy5lbnZpcm9uWydodHRwX3Byb3h5J10gPSAnJw0Kb3MuZW52aXJvblsnaHR0cHNfcHJveHknXSA9ICcnDQoNCnByb3h5RGljdCA9e30NCmlmIGRpY3RbJ3NldFByb3h5J10gPT0gJ1RydWUnOg0KICAgIHByb3h5RGljdCA9IHsNCiAgICAgICAgICAgICAgICAgICdodHRwJyAgOiAnaHR0cDovLzEyNy4wLjAuMTozMTI4JywNCiAgICAgICAgICAgICAgICAgICdodHRwcycgOiAnaHR0cDovLzEyNy4wLjAuMTozMTI4JywgIA0KICAgICAgICAgICAgICAgICAgfQ0KcHJpbnQoJ3Byb3h5IGRpY3Rpb25hcnknLHByb3h5RGljdCkNCg0KcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQodXJsLCBoZWFkZXJzPWhlYWRlcnMpDQojIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KHVybCwgaGVhZGVycz1oZWFkZXJzLCBwcm94aWVzID0gcHJveHlEaWN0KQ0KIyBwcm94aWVzID0gcHJveHlEaWN0DQoNCiMgQ2hlY2sgZm9yIEhUVFAgY29kZXMgb3RoZXIgdGhhbiAyMDANCnByaW50KCdyZXNwb25zZSBzdGF0dXMnLHJlc3BvbnNlLnN0YXR1c19jb2RlKQ0KaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgIT0gMjAwIGFuZCByZXNwb25zZS5zdGF0dXNfY29kZSAhPSAyMDI6DQogICAgbG9nZ2VyLmluZm8oJ1N0YXR1czonLCByZXNwb25zZS5zdGF0dXNfY29kZSwgJ0hlYWRlcnM6JywgcmVzcG9uc2UuaGVhZGVycywgJ0Vycm9yIFJlc3BvbnNlOicscmVzcG9uc2UuanNvbigpKQ0KICAgIGV4aXQoKQ0KICAgIA0KcHJpbnQoJ0NvbXBsZXRlZCcpDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg==","leo1311"
"LEODT_ND23928","LEODT_ND23928_leo1311.py","aW1wb3J0IHJlcXVlc3RzDQppbXBvcnQgc3lzDQppbXBvcnQganNvbg0KZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHF1b3RlX3BsdXMsIHVybHBhcnNlDQpmcm9tIGxlYXAudXRpbHMuVXRpbGl0aWVzIGltcG9ydCBVdGlsaXRpZXMNCmltcG9ydCBkYXRldGltZQ0KaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyDQpmcm9tIHJlcXVlc3RzLmF1dGggaW1wb3J0IEhUVFBCYXNpY0F1dGgNCmltcG9ydCByZXF1ZXN0cw0KaW1wb3J0IG9zDQoNCmxvZ2dlci5iYXNpY0NvbmZpZyhsZXZlbD1sb2dnZXIuSU5GTyxmb3JtYXQ9JyUoYXNjdGltZSlzIElORk8gJShtZXNzYWdlKXMnLCBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycpDQphcmd1bWVudHMgPXN5cy5hcmd2DQoNCmRpY3Q9e30NCmZvciBhcmcgaW4gYXJndW1lbnRzOg0KICAgICB0cnk6DQogICAgICAgICBkaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICgnOicpLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQ0KICAgICBleGNlcHQ6DQogICAgICAgICBhPSdlcnJvcicNCnByaW50KCdkaWN0aW9uYXJ5JywgZGljdCkNCg0KcHJpbnQoJ2FyZ3VtZW50cycsYXJndW1lbnRzKQ0KIyBTZXQgdGhlIHJlcXVlc3QgcGFyYW1ldGVycw0KdXJsID0gJ2h0dHA6Ly92aWN0bHB0c3QtMTY6ODA3OS9zZXJ2aWNlcy9Db25maWd1cmF0aW9uU2VydmljZS9zZXRQbHVnaW5FbmFibGVkP25hbWU9Q1BVTG9hZCZlbmFibGVkPXRydWUnDQoNCiMgU2V0IHByb3BlciBoZWFkZXJzDQpoZWFkZXJzID0geydBY2NlcHQnOidhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnfQ0KDQojIHRoaXMgYXBpIGRvZXNuJ3QgYWNjZXB0IGNvbnRlbnQtdHlwZQ0KIyBoZWFkZXJzID0geydDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsICdBY2NlcHQnOiAnKi8qJywgJ0hvc3QnOiAndmljdGFkcHN0LTEwOjgwNzknfQ0KDQojIERvIHRoZSBIVFRQIHJlcXVlc3QNCiMgdXJsID0gdXJsDQoNCm9zLmVudmlyb25bJ2h0dHBfcHJveHknXSA9ICcnDQpvcy5lbnZpcm9uWydodHRwc19wcm94eSddID0gJycNCg0KcHJveHlEaWN0ID17fQ0KaWYgZGljdFsnc2V0UHJveHknXSA9PSAnVHJ1ZSc6DQogICAgcHJveHlEaWN0ID0gew0KICAgICAgICAgICAgICAgICAgJ2h0dHAnICA6ICdodHRwOi8vMTI3LjAuMC4xOjMxMjgnLA0KICAgICAgICAgICAgICAgICAgJ2h0dHBzJyA6ICdodHRwOi8vMTI3LjAuMC4xOjMxMjgnLCAgDQogICAgICAgICAgICAgICAgICB9DQpwcmludCgncHJveHkgZGljdGlvbmFyeScscHJveHlEaWN0KQ0KDQpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwsIGhlYWRlcnM9aGVhZGVycykNCiMgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQodXJsLCBoZWFkZXJzPWhlYWRlcnMsIHByb3hpZXMgPSBwcm94eURpY3QsdmVyaWZ5PUZhbHNlKQ0KIyBwcm94aWVzID0gcHJveHlEaWN0DQoNCiMgQ2hlY2sgZm9yIEhUVFAgY29kZXMgb3RoZXIgdGhhbiAyMDANCnByaW50KCdyZXNwb25zZSBzdGF0dXMnLHJlc3BvbnNlLnN0YXR1c19jb2RlKQ0KaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgIT0gMjAwIGFuZCByZXNwb25zZS5zdGF0dXNfY29kZSAhPSAyMDI6DQogICAgbG9nZ2VyLmluZm8oJ1N0YXR1czonLCByZXNwb25zZS5zdGF0dXNfY29kZSwgJ0hlYWRlcnM6JywgcmVzcG9uc2UuaGVhZGVycywgJ0Vycm9yIFJlc3BvbnNlOicscmVzcG9uc2UuanNvbigpKQ0KICAgIGV4aXQoKQ0KICAgIA0KcHJpbnQoJ0NvbXBsZXRlZCcpDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0K","leo1311"
"LEODT_SN26353","LEODT_SN26353_leo1311.py","","leo1311"
"LEOSNW_C64708","LEOSNW_C64708_leo1311.py","","leo1311"
"LEOINFYD68146","LEOINFYD68146_leo1311.py","ZnJvbSBweXNwYXJrLnNxbCBpbXBvcnQgU3BhcmtTZXNzaW9uDQoNCmltcG9ydCByZXF1ZXN0cw0KDQppbXBvcnQgc3lzDQoNCmltcG9ydCBteXNxbC5jb25uZWN0b3INCg0KZnJvbSBweXNwYXJrLnNxbC5mdW5jdGlvbnMgaW1wb3J0ICoNCg0KZnJvbSBweXNwYXJrLnNxbC50eXBlcyBpbXBvcnQgKg0KDQppbXBvcnQganNvbg0KDQpmcm9tIHVybGxpYi5wYXJzZSBpbXBvcnQgcXVvdGVfcGx1cywgdXJscGFyc2UNCg0KZnJvbSBsZWFwLnV0aWxzLlV0aWxpdGllcyBpbXBvcnQgVXRpbGl0aWVzDQoNCmltcG9ydCBkYXRldGltZQ0KDQppbXBvcnQgdGltZQ0KDQppbXBvcnQgbG9nZ2luZyBhcyBsb2dnZXINCg0KZnJvbSByZXF1ZXN0cy5hdXRoIGltcG9ydCBIVFRQQmFzaWNBdXRoDQoNCmltcG9ydCByZXF1ZXN0cw0KDQppbXBvcnQgcGFuZGFzIGFzIHBkDQoNCmltcG9ydCBvcw0KaW1wb3J0IHVybGxpYjMNCg0KdXJsbGliMy5kaXNhYmxlX3dhcm5pbmdzKCkNCg0Kb3MuZW52aXJvblsnTk9fUFJPWFknXT0naW5meWFwbS50b29scy5pbmZvc3lzYXBwcy5jb20nDQoNCmxvZ2dlci5iYXNpY0NvbmZpZyhsZXZlbD1sb2dnZXIuSU5GTywgZm9ybWF0PSclKGFzY3RpbWUpcyBJTkZPICUobWVzc2FnZSlzJywgZGF0ZWZtdD0nJXkvJW0vJWQgJUg6JU06JVMnKQ0KDQphcmd1bWVudHMgPSBzeXMuYXJndg0KDQoNCg0KZGljdCA9IHt9DQoNCmZvciBhcmcgaW4gYXJndW1lbnRzOg0KDQogICAgdHJ5Og0KDQogICAgICAgIGRpY3RbYXJnLnNwbGl0KCc6JylbMF1dID0gKCc6Jykuam9pbihhcmcuc3BsaXQoJzonKVsxOl0pDQoNCiAgICBleGNlcHQ6DQoNCiAgICAgICAgYSA9ICdlcnJvcicNCg0KcHJpbnQoJ2RpY3Rpb25hcnknLCBkaWN0KQ0KDQoNCg0KcHJpbnQoJ2FyZ3VtZW50cycsIGFyZ3VtZW50cykNCg0KDQoNCiMgdXJsID0gJ2h0dHBzOi8vaW5meWFwbS50b29scy5pbmZvc3lzYXBwcy5jb20vZS8zMDc5M2NiZi0wNDk3LTRjNDctOWU0OC1iMGJkMjAzMjY4OTQvYXBpL3YyL3Byb2JsZW1zP2Zyb209bm93LTMwZCZwcm9ibGVtU2VsZWN0b3I9c2V2ZXJpdHlMZXZlbCUyOCUyMlJFU09VUkNFX0NPTlRFTlRJT04lMjIlMjklMkNhZmZlY3RlZEVudGl0aWVzJTI4JTIySE9TVC02RkM0RUEyNkVEMjM2QUFBJTIyJTI5Jw0KDQojIFNldCBwcm9wZXIgaGVhZGVycw0KDQpob3N0X2lkID0gJ0hPU1QtNUJGMzQ4QThEMDlFMjc1NycNCg0KdXJsID0gJ2h0dHBzOi8vaW5meWFwbS50b29scy5pbmZvc3lzYXBwcy5jb20vZS8zMDc5M2NiZi0wNDk3LTRjNDctOWU0OC1iMGJkMjAzMjY4OTQvYXBpL3YyL3Byb2JsZW1zP2ZpZWxkcz1ldmlkZW5jZURldGFpbHMmcHJvYmxlbVNlbGVjdG9yPSUyMHRleHQlMjglMjJDUFUlMjBzYXR1cmF0aW9uJTIyJTI5JTJDYWZmZWN0ZWRFbnRpdGllcyUyOCUyMicraG9zdF9pZCsnJTIyJTI5Jw0KDQpoZWFkZXJzID0geydDb250ZW50LVR5cGUnOidhcHBsaWNhdGlvbi9qc29uJywnQWNjZXB0JzonYXBwbGljYXRpb24vanNvbicsJ0F1dGhvcml6YXRpb24nOidBcGktVG9rZW4gS1ZyUkY0ZDJRNzZhaHpCTzZ6M0NOJ30NCg0KDQoNCiMgRG8gdGhlIEhUVFAgcmVxdWVzdA0KDQp1cmwgPSB1cmwNCg0KDQoNCm9zLmVudmlyb25bJ2h0dHBfcHJveHknXSA9ICcnDQoNCm9zLmVudmlyb25bJ2h0dHBzX3Byb3h5J10gPSAnJw0KDQoNCg0KcHJveHlEaWN0ID17fQ0KDQppZiBkaWN0WydzZXRQcm94eSddID09ICdUcnVlJzoNCg0KICAgIHByb3h5RGljdCA9IHsNCg0KICAgICAgICAgICAgICAgICAgJ2h0dHAnICA6ICdodHRwOi8vMTI3LjAuMC4xOjMxMjgnLA0KDQogICAgICAgICAgICAgICAgICAnaHR0cHMnIDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzEyOCcsICANCg0KICAgICAgICAgICAgICAgICAgfQ0KDQpwcmludCgncHJveHkgZGljdGlvbmFyeScscHJveHlEaWN0KQ0KDQojIHRpbWUuc2xlZXAoMzYwKQ0KDQoNCg0KDQoNCiMgY29udmVydCBqc29uIHRvIHNwYXJrIGRhdGFmcmFtZQ0KDQpqc29uU3RyaW5nQXJyYXkgPSBbXQ0KDQoNCiMgRHluYXRyYWNlRGVtbyBEYXRhc291cmNlDQoNCg0KDQpEeW5hdHJhY2VEZW1vZHMgPSBkaWN0WydEeW5hdHJhY2VEZW1vJ10NCkR5bmF0cmFjZURlbW9kcz1qc29uLmxvYWRzKER5bmF0cmFjZURlbW9kcykNCg0KdGFibGVuYW1lPWRpY3RbJ3RhYmxlbmFtZSddDQoNCkR5bmF0cmFjZURlbW9kaWN0ID0ge30NCkR5bmF0cmFjZURlbW9kaWN0PUR5bmF0cmFjZURlbW9kcw0KDQoNCg0KdXNlcm5hbWUgPSBEeW5hdHJhY2VEZW1vZGljdFsndXNlck5hbWUnXQ0KcGFzc3dvcmQgPSBVdGlsaXRpZXMuZGVjcnlwdChEeW5hdHJhY2VEZW1vZGljdFsncGFzc3dvcmQnXSwgRHluYXRyYWNlRGVtb2RpY3RbJ3NhbHQnXSkNCmhvc3QgPSB1cmxwYXJzZShEeW5hdHJhY2VEZW1vZGljdFsndXJsJ11bNTpdKS5ob3N0bmFtZQ0KcG9ydCA9IHVybHBhcnNlKER5bmF0cmFjZURlbW9kaWN0Wyd1cmwnXVs1Ol0pLnBvcnQNCmRhdGFiYXNlID0gdXJscGFyc2UoRHluYXRyYWNlRGVtb2RpY3RbJ3VybCddWzU6XSkucGF0aC5yc3BsaXQoJy8nLCAxKVsxXQ0KDQoNCg0KZGVmIGdldFByb2plY3RJZCgpOg0KICAgIGNueCA9IG15c3FsLmNvbm5lY3Rvci5jb25uZWN0KHVzZXI9dXNlcm5hbWUsIHBhc3N3b3JkPXBhc3N3b3JkLCBob3N0PWhvc3QsIHBvcnQ9cG9ydCwgZGF0YWJhc2U9ZGF0YWJhc2UpDQogICAgbXljdXJzb3IgPSBjbnguY3Vyc29yKCkNCiAgICBxID0gJ3NlbGVjdCBpZCBmcm9tIHVzbV9wcm9qZWN0IHdoZXJlIG5hbWUgPSBcJycrZGljdFsncHJvamVjdCddKydcJycNCiAgICBteWN1cnNvci5leGVjdXRlKHEpDQogICAgbXlyZXN1bHQgPSBteWN1cnNvci5mZXRjaGFsbCgpDQogICAgY254LmNvbW1pdCgpDQogICAgbXljdXJzb3IuY2xvc2UoKQ0KICAgIGNueC5jbG9zZSgpDQogICAgcmV0dXJuIG15cmVzdWx0WzBdWzBdDQoNCg0KDQpwcm9qZWN0SWQgPSBpbnQoZ2V0UHJvamVjdElkKCkpDQoNCnN0YXR1c2ZsYWcgPSBUcnVlDQoNCiMgaWYobm90IGJvb2woIGRhdGFbJ3Byb2JsZW1zJ10pKToNCiMgICAgIHByaW50KCdObyBEYXRhL1Byb2JsZW0gRm91bmQnKQ0KICAgIA0KZGVmIGdldElzc3VlKCk6DQogICAgDQogICAgZ2xvYmFsIHN0YXR1c2ZsYWcNCiAgICANCiAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwsIGhlYWRlcnM9aGVhZGVycywgcHJveGllcz1wcm94eURpY3QsIHZlcmlmeT1GYWxzZSkNCiAgICBkYXRhID0gcmVzcG9uc2UuanNvbigpDQogICAgDQogICAgZGF0YUtleXMgPSBsaXN0KGRhdGEua2V5cygpKQ0KICAgIA0KICAgIGZvciBpdGVtIGluIGRhdGFbJ3Byb2JsZW1zJ106DQogICAgDQogICAgICAgIHJvdz17fQ0KICAgIA0KICAgICAgICBpZiBpdGVtWyd0aXRsZSddIT0nTWVtb3J5IHNhdHVyYXRpb24nOg0KICAgIA0KICAgICAgICAgICAgcm93WydldmVudElkJ10gPSBpdGVtWydwcm9ibGVtSWQnXQ0KDQogICAgICAgICAgICANCiAgICAgICAgICAgIHJvd1snZGlzcGxheUlkJ10gPSBpdGVtWydkaXNwbGF5SWQnXQ0KICAgICAgICANCiAgICAgICAgICAgIHJvd1sndGl0bGUnXSA9ICdDUFUgc2F0dXJhdGlvbicNCiAgICAgICAgDQogICAgICAgICAgICBpdGVtS2V5cyA9IGxpc3QoaXRlbS5rZXlzKCkpDQogICAgICAgIA0KICAgICAgICAgICAgZXZpZGVuY2VEZXRhaWxzS2V5cyAgPSBbXQ0KICAgICAgICANCiAgICAgICAgICAgIGlmICdldmlkZW5jZURldGFpbHMnIGluIGl0ZW1LZXlzOg0KICAgICAgICANCiAgICAgICAgICAgICAgICBldmlkZW5jZURldGFpbHNLZXlzID0gbGlzdChpdGVtWydldmlkZW5jZURldGFpbHMnXS5rZXlzKCkpDQogICAgICAgIA0KICAgICAgICAgICAgaWYgYm9vbChldmlkZW5jZURldGFpbHNLZXlzKToNCiAgICAgICAgDQogICAgICAgICAgICAgICAgZXZlbnRzPScnDQogICAgICAgIA0KICAgICAgICAgICAgICAgIGZvciBpIGluIGl0ZW1bJ2V2aWRlbmNlRGV0YWlscyddWydkZXRhaWxzJ106DQogICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBkZXRhaWxzS2V5cyA9IGxpc3QoaS5rZXlzKCkpDQogICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBpZiAnZXZlbnRJZCcgaW4gZGV0YWlsc0tleXM6DQogICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzICs9IGlbJ2V2ZW50SWQnXSArICcsJw0KICAgICAgICANCiAgICAgICAgICAgICAgICByb3dbJ3JlbGF0ZWRFdmVudHMnXSA9ICBldmVudHNbOi0xXQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgDQogICAgICAgICAgICAgICAgcm93WydyZWxhdGVkRXZlbnRzJ10gPSAnKE5VTEwpJw0KICAgICAgICANCiAgICAgICAgICAgIHJvd1snaW1wYWN0TGV2ZWwnXSA9IGl0ZW1bJ2ltcGFjdExldmVsJ10NCiAgICAgICAgDQogICAgICAgICAgICByb3dbJ3NldmVyaXR5TGV2ZWwnXSA9ICdSRVNPVVJDRV9DT05URU5USU9OJw0KICAgICAgICANCiAgICAgICAgICAgIHJvd1snc3RhdHVzJ10gPSBpdGVtWydzdGF0dXMnXQ0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZihpdGVtWydzdGF0dXMnXT09J09QRU4nKToNCiAgICAgICAgICAgICAgICBzdGF0dXNmbGFnID0gRmFsc2UNCiAgICAgICAgICAgICAgICBwcm9ibGVtSWQgPSBpdGVtWydwcm9ibGVtSWQnXQ0KICAgICAgICANCiAgICAgICAgICAgICMgaWYgaXRlbVsncm9vdENhdXNlRW50aXR5J10gIT0gTm9uZToNCiAgICAgICAgICAgICMgICAgIHJvd1sncm9vdENhdXNlRW50aXR5J10gPSBpdGVtWydyb290Q2F1c2VFbnRpdHknXVsnZW50aXR5SWQnXVsnaWQnXQ0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICMgZWxpZiBib29sKGl0ZW1bJ2ltcGFjdGVkRW50aXRpZXMnXSk6DQogICAgICAgICAgICAjICAgICByb3dbJ3Jvb3RDYXVzZUVudGl0eSddID0gaXRlbVsnaW1wYWN0ZWRFbnRpdGllcyddWzBdWydlbnRpdHlJZCddWydpZCddDQogICAgICAgIA0KICAgICAgICAgICAgcm93Wydyb290Q2F1c2VFbnRpdHknXSA9IGhvc3RfaWQNCiAgICAgICAgDQogICAgICAgICAgICByb3dbJ3N0YXJ0VGltZSddID0gaXRlbVsnc3RhcnRUaW1lJ10NCiAgICAgICAgDQogICAgICAgICAgICByb3dbJ2VuZFRpbWUnXSA9IGl0ZW1bJ2VuZFRpbWUnXQ0KICAgICAgICAgICAgcm93WydldmVudFR5cGUnXSA9ICdJc3N1ZScNCg0KICAgICAgICAgICAgcm93WydhcG1UeXBlJ10gPSAnRFQnDQogICAgICAgICAgICByb3dbJ2RlZXBMaW5rVXJsJ10gPSAnaHR0cHM6Ly9pbmZ5YXBtLnRvb2xzLmluZm9zeXNhcHBzLmNvbS9lLzMwNzkzY2JmLTA0OTctNGM0Ny05ZTQ4LWIwYmQyMDMyNjg5NC8jcHJvYmxlbXMvcHJvYmxlbWRldGFpbHM7Z2Y9YWxsO3BpZD0nK2l0ZW1bJ3Byb2JsZW1JZCddDQogICAgICAgIA0KICAgICAgICAgICAganNvblN0cmluZ0FycmF5LmFwcGVuZChyb3cpDQogICAgICAgICAgICANCiAgICByZXR1cm4gc3RhdHVzZmxhZw0KDQpmdXR1cmVUaW1lID0gZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkgKyBkYXRldGltZS50aW1lZGVsdGEobWludXRlcz0xMikNCg0Kd2hpbGUgKHN0YXR1c2ZsYWcpOg0KICAgIGN1cnJlbnRUaW1lID0gZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkNCiAgICBpZiBmdXR1cmVUaW1lID4gY3VycmVudFRpbWUgYW5kIHN0YXR1c2ZsYWcgaXMgVHJ1ZToNCiAgICAgICAgc3RhdHVzZmxhZyA9IGdldElzc3VlKCkNCiAgICBlbHNlOg0KICAgICAgICBicmVhazsNCg0KZm9yIGkgaW4ganNvblN0cmluZ0FycmF5Og0KICAgIGlmIGlbJ3N0YXR1cyddID09ICdPUEVOJzoNCiAgICAgICAgcHJpbnQoJ0lzc3VlJyxpKQ0KDQoNCg0KcHJpbnQoJ2VudGVyIHNwYXJrJykNCg0KDQoNCnNwYXJrID0gU3BhcmtTZXNzaW9uLmJ1aWxkZXIubWFzdGVyKCdsb2NhbCcpLmFwcE5hbWUoJ3NsYScpLmNvbmZpZygnc3BhcmsudWkuc2hvd0NvbnNvbGVQcm9ncmVzcycsDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZmFsc2UnKS5nZXRPckNyZWF0ZSgpDQoNCmRmID0gc3BhcmsucmVhZC5qc29uKHNwYXJrLnNwYXJrQ29udGV4dC5wYXJhbGxlbGl6ZShqc29uU3RyaW5nQXJyYXkpKQ0KDQoNCg0KcHJpbnQoJ2luIHNwYXJrJykNCg0KDQoNCnBkZiA9IHBkLkRhdGFGcmFtZShqc29uU3RyaW5nQXJyYXkpDQoNCkR5blRvSWNtQ29sdW1uTWFwcGluZyA9IHsnZXZlbnRJZCc6ICdldmVudElkJywnZGlzcGxheUlkJzonZGlzcGxheUlkJywndGl0bGUnOid0aXRsZScsJ3JlbGF0ZWRFdmVudHMnOidyZWxhdGVkRXZlbnRzJywnZXZlbnRUeXBlJzonZXZlbnRUeXBlJywnaW1wYWN0TGV2ZWwnOidpbXBhY3RMZXZlbCcsJ3NldmVyaXR5TGV2ZWwnOidzZXZlcml0eUxldmVsJywnc3RhdHVzJzonc3RhdHVzJywNCiAgICAncm9vdENhdXNlRW50aXR5Jzoncm9vdENhdXNlRW50aXR5Jywnc3RhcnRUaW1lJzonc3RhcnRUaW1lJywnZW5kVGltZSc6J2VuZFRpbWUnLCdkZWVwTGlua1VybCc6J2RlZXBMaW5rVXJsJywnYXBtVHlwZSc6J2FwbVR5cGUnfQ0KDQpwcmludCgnc3BhcmsgZW5kJykNCg0KIyBtYXBDb2x1bW5zDQoNCmZvdW5kQ29sdW1ucyA9IFtdDQoNCmZvciBrZXkgaW4gRHluVG9JY21Db2x1bW5NYXBwaW5nLmtleXMoKToNCg0KICAgIHRyeToNCg0KICAgICAgICBOZXdDb2x1bW4gPSBEeW5Ub0ljbUNvbHVtbk1hcHBpbmdba2V5XQ0KDQogICAgICAgIER5bkNvbHVtbiA9IGtleQ0KDQogICAgICAgIGRmID0gZGYud2l0aENvbHVtbihOZXdDb2x1bW4sIHdoZW4oY29sKER5bkNvbHVtbikgPT0gJycsIE5vbmUpLm90aGVyd2lzZShjb2woRHluQ29sdW1uKSkpDQoNCiAgICAgICAgZm91bmRDb2x1bW5zLmFwcGVuZChOZXdDb2x1bW4pDQoNCiAgICBleGNlcHQ6DQoNCiAgICAgICAgZXJyb3IgPSAnQ29sdW1uIE5vdCBmb3VuZCcNCg0KZGYgPSBkZi5zZWxlY3QoZm91bmRDb2x1bW5zKQ0KDQpkZiA9IHNwYXJrLmNyZWF0ZURhdGFGcmFtZShwZGYpDQoNCiMgc2F2ZSB0byBkYg0KDQpjb2x1bW5MaXN0ID0gZGYuY29sdW1ucw0KDQojIHByaW50KGNvbHVtbkxpc3QpDQoNCg0KDQoNCg0KZGVmIGdldEhvc3RDcHVVc2FnZSgpOg0KICAgICAgICANCiAgICBoZWFkZXJzID0geydDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsJ0F1dGhvcml6YXRpb24nOiAnQXBpLVRva2VuIEtWclJGNGQyUTc2YWh6Qk82ejNDTid9DQoNCiAgICBjbnggPSBteXNxbC5jb25uZWN0b3IuY29ubmVjdCh1c2VyPXVzZXJuYW1lLCBwYXNzd29yZD1wYXNzd29yZCwgaG9zdD1ob3N0LCBwb3J0PXBvcnQsIGRhdGFiYXNlPWRhdGFiYXNlKQ0KDQogICAgbXljdXJzb3IgPSBjbnguY3Vyc29yKCkNCg0KDQogICAgdXJsID0gJ2h0dHBzOi8vaW5meWFwbS50b29scy5pbmZvc3lzYXBwcy5jb20vZS8zMDc5M2NiZi0wNDk3LTRjNDctOWU0OC1iMGJkMjAzMjY4OTQvYXBpL3YyL21ldHJpY3MvcXVlcnk/bWV0cmljU2VsZWN0b3I9YnVpbHRpbiUzQWhvc3QuY3B1LnVzYWdlJnJlc29sdXRpb249NW0mZnJvbT1ub3ctMWgmZW50aXR5U2VsZWN0b3I9dHlwZSUyOCUyMkhPU1QlMjIlMjklMkNlbnRpdHlJZCUyOCUyMkhPU1QtNUJGMzQ4QThEMDlFMjc1NyUyMiUyOScNCg0KICAgIHByb3h5RGljdCA9IHt9DQogICAgDQogICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQodXJsLCBoZWFkZXJzPWhlYWRlcnMsIHByb3hpZXM9cHJveHlEaWN0LCB2ZXJpZnk9RmFsc2UpDQoNCiAgICBkYXRhID0gcmVzcG9uc2UuanNvbigpDQoNCg0KICAgIGNwdVZhbHVlc0xpc3QgPSBkYXRhWydyZXN1bHQnXVswXVsnZGF0YSddWzBdWyd2YWx1ZXMnXQ0KDQogICAgdGltZXN0YW1wc0xpc3QgPSBkYXRhWydyZXN1bHQnXVswXVsnZGF0YSddWzBdWyd0aW1lc3RhbXBzJ10NCiAgICANCiAgICBpZCA9IDc3ODYNCg0KICAgIGZvciBpIGluIHJhbmdlKDAsIGxlbih0aW1lc3RhbXBzTGlzdCktMSk6DQogICAgICAgIA0KICAgICAgICBpZiBjcHVWYWx1ZXNMaXN0W2ldIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcSA9ICd1cGRhdGUgc3JlX2V2ZW50c19tZXRyaWNzIHNldCB0aW1lc3RhbXA9XCcnK3N0cih0aW1lc3RhbXBzTGlzdFtpXSkrJ1wnLGNwdV91c2FnZT1cJycrc3RyKGNwdVZhbHVlc0xpc3RbaV0pKydcJyB3aGVyZSBpZCA9JytzdHIoaWQpDQogICAgICAgICAgICBteWN1cnNvci5leGVjdXRlKHEpDQoNCiAgICAgICAgaWQgLT0xDQoNCg0KICAgIGNueC5jb21taXQoKQ0KDQogICAgbXljdXJzb3IuY2xvc2UoKQ0KDQogICAgY254LmNsb3NlKCkNCiAgICAgICAgDQojIHVwZGF0ZVByb2JsZW1TdGF0dXMoKQ0KDQpkZWYgcHJvY2Vzc19wYXJ0aXRpb24oaXRlcmF0b3IpOg0KDQogICAgcHJpbnQoJ2VudGVyZWQgaXRlcmF0b3InKQ0KDQogICAgY254ID0gbXlzcWwuY29ubmVjdG9yLmNvbm5lY3QodXNlcj11c2VybmFtZSwgcGFzc3dvcmQ9cGFzc3dvcmQsIGhvc3Q9aG9zdCwgcG9ydD1wb3J0LCBkYXRhYmFzZT1kYXRhYmFzZSkNCg0KICAgIG15Y3Vyc29yID0gY254LmN1cnNvcigpDQoNCiAgICAjIHByaW50KCdpdGVyYXRvcicsIGl0ZXJhdG9yKQ0KDQogICAgZm9yIHJvdyBpbiBpdGVyYXRvcjoNCg0KICAgICAgICB0cnk6DQoNCiAgICAgICAgICAgIHBhcmFtc0RpY3QgPSB7fQ0KDQogICAgICAgICAgICB2YWx1ZXMgPSBbXQ0KDQogICAgICAgICAgICBmb3IgaSBpbiByYW5nZSgwLCBsZW4oY29sdW1uTGlzdCkpOg0KDQogICAgICAgICAgICAgICAgcGFyYW1zRGljdFtjb2x1bW5MaXN0W2ldXSA9IHJvd1tpXQ0KDQogICAgICAgICAgICAgICAgdmFsdWVzLmFwcGVuZChyb3dbaV0pDQoNCiAgICAgICAgICAgICAgICAjIHByaW50KCd5ZXMnLCB2YWx1ZXMpDQoNCg0KDQogICAgICAgICAgICBjb2x1bW5zID0gJywgJy5qb2luKCdgezB9YCcuZm9ybWF0KGspIGZvciBrIGluIHBhcmFtc0RpY3QpDQoNCiAgICAgICAgICAgIGR1cGxpY2F0ZXMgPSAnLCAnLmpvaW4oJ3swfT1WQUxVRVMoezB9KScuZm9ybWF0KGspIGZvciBrIGluIHBhcmFtc0RpY3QpDQoNCiAgICAgICAgICAgIHBsYWNlX2hvbGRlcnMgPSAnLCAnLmpvaW4oJyVzJy5mb3JtYXQoaykgZm9yIGsgaW4gcGFyYW1zRGljdCkNCg0KICAgICAgICANCg0KICAgICAgICANCg0KICAgICAgICAgICAgcSA9ICdJTlNFUlQgSU5UTyAnKyB0YWJsZW5hbWUgKycgKHswfSxwcm9qZWN0X2lkKSBWQUxVRVMgKHsxfSwnK3N0cihwcm9qZWN0SWQpKycpJw0KICAgICAgICAgICAgcT1xLmZvcm1hdChjb2x1bW5zLCBwbGFjZV9ob2xkZXJzKQ0KDQogICAgICAgICAgICANCg0KICAgICAgICAgICAgIyB2YWwgPSAodmFsdWVzWzBdLHZhbHVlc1sxXSx2YWx1ZXNbMF0sdmFsdWVzWzFdKQ0KDQogICAgICAgICAgICB2YWwgPSAodmFsdWVzWzBdLHZhbHVlc1sxXSx2YWx1ZXNbMl0sdmFsdWVzWzNdLHZhbHVlc1s0XSx2YWx1ZXNbNV0sdmFsdWVzWzZdLHZhbHVlc1s3XSx2YWx1ZXNbOF0sdmFsdWVzWzldLHZhbHVlc1sxMF0sdmFsdWVzWzExXSx2YWx1ZXNbMTJdKQ0KDQogICAgICAgICAgICBwcmludCgndGVzdHR0JywgcSx2YWwpDQogICAgICAgICAgICAjIHByaW50KCd2YWwnLCB2YWwpDQoNCiAgICAgICAgICAgIG15Y3Vyc29yLmV4ZWN1dGUocSwgdmFsKQ0KDQogICAgICAgICAgICAjIHF1ZXJ5ID0gJ0lOU0VSVCBJTlRPIHswfSAoezF9KSBWQUxVRVMgKHsyfSknLmZvcm1hdCh0YWJsZW5hbWUsIGNvbHVtbnMsIHBsYWNlX2hvbGRlcnMpDQoNCiAgICAgICAgICAgICMgcXVlcnkgPSAnezB9IE9OIERVUExJQ0FURSBLRVkgVVBEQVRFIHsxfScuZm9ybWF0KHF1ZXJ5LCBkdXBsaWNhdGVzKQ0KDQogICAgICAgICAgICAjIG15Y3Vyc29yLmV4ZWN1dGVtYW55KHF1ZXJ5LCAodmFsdWVzLCkpDQoNCiAgICAgICAgICAgIGNueC5jb21taXQoKQ0KDQogICAgICAgIGV4Y2VwdDoNCg0KICAgICAgICAgICAgbG9nZ2VyLmluZm8oJ0Vycm9yIE51bWJlcjogJyArIHJvd1swXSkNCg0KDQoNCiAgICBteWN1cnNvci5jbG9zZSgpDQoNCiAgICBjbnguY2xvc2UoKQ0KDQoNCmRmLmZvcmVhY2hQYXJ0aXRpb24ocHJvY2Vzc19wYXJ0aXRpb24pDQoNCiMgZ2V0SG9zdENwdVVzYWdlKCkNCnByaW50KCdDb21wbGV0ZWQnKQ0KDQpsb2dnZXIuaW5mbygnQ29tcGxldGVkJykNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQo=","leo1311"
"LEOINFYD55307","LEOINFYD55307_leo1311.py","","leo1311"
"LEODT_CR38314","LEODT_CR38314_leo1311.py","ZnJvbSBweXNwYXJrLnNxbCBpbXBvcnQgU3BhcmtTZXNzaW9uDQppbXBvcnQgcmVxdWVzdHMNCmltcG9ydCBzeXMNCmltcG9ydCBteXNxbC5jb25uZWN0b3INCmZyb20gcHlzcGFyay5zcWwuZnVuY3Rpb25zIGltcG9ydCAqDQpmcm9tIHB5c3Bhcmsuc3FsLnR5cGVzIGltcG9ydCAqDQppbXBvcnQganNvbg0KZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHF1b3RlX3BsdXMsIHVybHBhcnNlDQpmcm9tIGxlYXAudXRpbHMuVXRpbGl0aWVzIGltcG9ydCBVdGlsaXRpZXMNCmltcG9ydCBkYXRldGltZQ0KaW1wb3J0IHRpbWUNCmltcG9ydCBsb2dnaW5nIGFzIGxvZ2dlcg0KZnJvbSByZXF1ZXN0cy5hdXRoIGltcG9ydCBIVFRQQmFzaWNBdXRoDQppbXBvcnQgcmVxdWVzdHMNCmltcG9ydCBwYW5kYXMgYXMgcGQNCmltcG9ydCBvcw0KDQpsb2dnZXIuYmFzaWNDb25maWcobGV2ZWw9bG9nZ2VyLklORk8sIGZvcm1hdD0nJShhc2N0aW1lKXMgSU5GTyAlKG1lc3NhZ2UpcycsIGRhdGVmbXQ9JyV5LyVtLyVkICVIOiVNOiVTJykNCmFyZ3VtZW50cyA9IHN5cy5hcmd2DQoNCmRpY3QgPSB7fQ0KDQpmb3IgYXJnIGluIGFyZ3VtZW50czoNCiAgICB0cnk6DQogICAgICAgIGRpY3RbYXJnLnNwbGl0KCc6JylbMF1dID0gKCc6Jykuam9pbihhcmcuc3BsaXQoJzonKVsxOl0pDQogICAgZXhjZXB0Og0KICAgICAgICBhID0gJ2Vycm9yJw0KDQojIER5bmF0cmFjZURlbW8gRGF0YXNvdXJjZQ0KRHluYXRyYWNlRGVtb2RzID0gZGljdFsnRHluYXRyYWNlRGVtbyddDQpEeW5hdHJhY2VEZW1vZHM9anNvbi5sb2FkcyhEeW5hdHJhY2VEZW1vZHMpDQoNCkR5bmF0cmFjZURlbW9kaWN0ID0ge30NCkR5bmF0cmFjZURlbW9kaWN0PUR5bmF0cmFjZURlbW9kcw0KDQp0YWJsZW5hbWUgPSBkaWN0Wyd0YWJsZW5hbWUnXQ0KdXNlcm5hbWUgPSBEeW5hdHJhY2VEZW1vZGljdFsndXNlck5hbWUnXQ0KcGFzc3dvcmQgPSBVdGlsaXRpZXMuZGVjcnlwdChEeW5hdHJhY2VEZW1vZGljdFsncGFzc3dvcmQnXSwgRHluYXRyYWNlRGVtb2RpY3RbJ3NhbHQnXSkNCmhvc3QgPSB1cmxwYXJzZShEeW5hdHJhY2VEZW1vZGljdFsndXJsJ11bNTpdKS5ob3N0bmFtZQ0KcG9ydCA9IHVybHBhcnNlKER5bmF0cmFjZURlbW9kaWN0Wyd1cmwnXVs1Ol0pLnBvcnQNCmRhdGFiYXNlID0gdXJscGFyc2UoRHluYXRyYWNlRGVtb2RpY3RbJ3VybCddWzU6XSkucGF0aC5yc3BsaXQoJy8nLCAxKVsxXQ0KDQoNCiMgY29udmVydCBqc29uIHRvIHNwYXJrIGRhdGFmcmFtZQ0KanNvblN0cmluZ0FycmF5ID0gW10NCg0KZGVmIGdldFByb2plY3RJZCgpOg0KICAgIGNueCA9IG15c3FsLmNvbm5lY3Rvci5jb25uZWN0KHVzZXI9dXNlcm5hbWUsIHBhc3N3b3JkPXBhc3N3b3JkLCBob3N0PWhvc3QsIHBvcnQ9cG9ydCwgZGF0YWJhc2U9ZGF0YWJhc2UpDQogICAgbXljdXJzb3IgPSBjbnguY3Vyc29yKCkNCiAgICBxID0gJ3NlbGVjdCBpZCBmcm9tIHVzbV9wcm9qZWN0IHdoZXJlIG5hbWUgPSBcJycrZGljdFsncHJvamVjdCddKydcJycNCiAgICBteWN1cnNvci5leGVjdXRlKHEpDQogICAgbXlyZXN1bHQgPSBteWN1cnNvci5mZXRjaGFsbCgpDQogICAgY254LmNvbW1pdCgpDQogICAgbXljdXJzb3IuY2xvc2UoKQ0KICAgIGNueC5jbG9zZSgpDQogICAgcmV0dXJuIG15cmVzdWx0WzBdWzBdDQoNCnByb2plY3RJZCA9IHN0cihnZXRQcm9qZWN0SWQoKSkNCg0KY3R5cGVMaXN0ID0gWydIb3N0IEdyb3VwJywnSW5mcmFzdHJ1Y3R1cmUnLCdQcm9jZXNzIEdyb3VwJywnUHJvY2VzcyBHcm91cCBJbnN0YW5jZScsJ1NlcnZpY2UnLCdBcHBsaWNhdGlvbicsJ1RpY2tldCcsJ1Byb2JsZW0nXQ0KDQpmb3IgaSBpbiByYW5nZSgwLGxlbihjdHlwZUxpc3QpKToNCiAgICByb3cgPSB7fQ0KICAgIHJvd1snY3R5cGUnXSA9IGN0eXBlTGlzdFtpXQ0KICAgIHJvd1snb3JkZXJfdmFsdWUnXSA9IGkNCiAgICByb3dbJ3Byb2plY3RfaWQnXSA9IGludChwcm9qZWN0SWQpDQogICAgcm93WydiYWNrZ3JvdW5kX2NvbG91ciddID0gJ0RUJw0KICAgIGpzb25TdHJpbmdBcnJheS5hcHBlbmQocm93KQ0KDQpwcmludCgnZW50ZXIgc3BhcmsnKQ0KDQpzcGFyayA9IFNwYXJrU2Vzc2lvbi5idWlsZGVyLm1hc3RlcignbG9jYWwnKS5hcHBOYW1lKCdzbGEnKS5jb25maWcoJ3NwYXJrLnVpLnNob3dDb25zb2xlUHJvZ3Jlc3MnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmYWxzZScpLmdldE9yQ3JlYXRlKCkNCmRmID0gc3BhcmsucmVhZC5qc29uKHNwYXJrLnNwYXJrQ29udGV4dC5wYXJhbGxlbGl6ZShqc29uU3RyaW5nQXJyYXkpKQ0KDQpwcmludCgnaW4gc3BhcmsnKQ0KcGRmID0gcGQuRGF0YUZyYW1lKGpzb25TdHJpbmdBcnJheSkNCg0KRHluVG9JY21Db2x1bW5NYXBwaW5nID0geydjdHlwZSc6J2N0eXBlJywnb3JkZXJfdmFsdWUnOidvcmRlcl92YWx1ZScsJ3Byb2plY3RfaWQnOidwcm9qZWN0X2lkJywnYmFja2dyb3VuZF9jb2xvdXInOidiYWNrZ3JvdW5kX2NvbG91cid9DQoNCnByaW50KCdzcGFyayBlbmQnKQ0KDQojIG1hcENvbHVtbnMNCmZvdW5kQ29sdW1ucyA9IFtdDQoNCmZvciBrZXkgaW4gRHluVG9JY21Db2x1bW5NYXBwaW5nLmtleXMoKToNCiAgICB0cnk6DQogICAgICAgIE5ld0NvbHVtbiA9IER5blRvSWNtQ29sdW1uTWFwcGluZ1trZXldDQogICAgICAgIER5bkNvbHVtbiA9IGtleQ0KICAgICAgICBkZiA9IGRmLndpdGhDb2x1bW4oTmV3Q29sdW1uLCB3aGVuKGNvbChEeW5Db2x1bW4pID09ICcnLCBOb25lKS5vdGhlcndpc2UoY29sKER5bkNvbHVtbikpKQ0KICAgICAgICBmb3VuZENvbHVtbnMuYXBwZW5kKE5ld0NvbHVtbikNCiAgICBleGNlcHQ6DQogICAgICAgIGVycm9yID0gJ0NvbHVtbiBOb3QgZm91bmQnDQoNCmRmID0gZGYuc2VsZWN0KGZvdW5kQ29sdW1ucykNCmRmID0gc3BhcmsuY3JlYXRlRGF0YUZyYW1lKHBkZikNCg0KDQojIHNhdmUgdG8gZGINCmNvbHVtbkxpc3QgPSBkZi5jb2x1bW5zDQoNCmNpVHlwZVNldCA9IHNldCgpDQoNCmRlZiBpc0NpVHlwZUF2YWlsYWJsZSgpOg0KICAgIGNueCA9IG15c3FsLmNvbm5lY3Rvci5jb25uZWN0KHVzZXI9dXNlcm5hbWUsIHBhc3N3b3JkPXBhc3N3b3JkLCBob3N0PWhvc3QsIHBvcnQ9cG9ydCwgZGF0YWJhc2U9ZGF0YWJhc2UpDQogICAgbXljdXJzb3IgPSBjbnguY3Vyc29yKCkNCiAgICBxID0gJ3NlbGVjdCBjdHlwZSBmcm9tIGNmbV9jb25maWd1cmF0aW9uX2l0ZW1fdHlwZSB3aGVyZSBiYWNrZ3JvdW5kX2NvbG91cj1cJ0RUXCcgYW5kIHByb2plY3RfaWQ9Jytwcm9qZWN0SWQNCiAgICBteWN1cnNvci5leGVjdXRlKHEpDQogICAgbXlyZXN1bHQgPSBteWN1cnNvci5mZXRjaGFsbCgpDQogICAgZm9yIChhKSBpbiBteXJlc3VsdDoNCiAgICAgICAgY2lUeXBlU2V0LmFkZChhWzBdKQ0KICAgIGNueC5jb21taXQoKQ0KICAgIG15Y3Vyc29yLmNsb3NlKCkNCiAgICBjbnguY2xvc2UoKQ0KDQppc0NpVHlwZUF2YWlsYWJsZSgpDQoNCg0KZGVmIHByb2Nlc3NfcGFydGl0aW9uKGl0ZXJhdG9yKToNCiAgICBwcmludCgnZW50ZXJlZCBpdGVyYXRvcicpDQogICAgY254ID0gbXlzcWwuY29ubmVjdG9yLmNvbm5lY3QodXNlcj11c2VybmFtZSwgcGFzc3dvcmQ9cGFzc3dvcmQsIGhvc3Q9aG9zdCwgcG9ydD1wb3J0LCBkYXRhYmFzZT1kYXRhYmFzZSkNCiAgICBteWN1cnNvciA9IGNueC5jdXJzb3IoKQ0KICAgIGZvciByb3cgaW4gaXRlcmF0b3I6DQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHBhcmFtc0RpY3QgPSB7fQ0KICAgICAgICAgICAgdmFsdWVzID0gW10NCiAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKDAsIGxlbihjb2x1bW5MaXN0KSk6DQogICAgICAgICAgICAgICAgcGFyYW1zRGljdFtjb2x1bW5MaXN0W2ldXSA9IHJvd1tpXQ0KICAgICAgICAgICAgICAgIHZhbHVlcy5hcHBlbmQocm93W2ldKQ0KDQogICAgICAgICAgICBjb2x1bW5zID0gJywgJy5qb2luKCdgezB9YCcuZm9ybWF0KGspIGZvciBrIGluIHBhcmFtc0RpY3QpDQogICAgICAgICAgICBkdXBsaWNhdGVzID0gJywgJy5qb2luKCd7MH09VkFMVUVTKHswfSknLmZvcm1hdChrKSBmb3IgayBpbiBwYXJhbXNEaWN0KQ0KICAgICAgICAgICAgcGxhY2VfaG9sZGVycyA9ICcsICcuam9pbignJXMnLmZvcm1hdChrKSBmb3IgayBpbiBwYXJhbXNEaWN0KQ0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZiB2YWx1ZXNbMF0gbm90IGluIGNpVHlwZVNldDoNCiAgICAgICAgICAgICAgICBxID0gJ0lOU0VSVCBJTlRPICcrIHRhYmxlbmFtZSArJyAoezB9KSBWQUxVRVMgKHsxfSknLmZvcm1hdChjb2x1bW5zLCBwbGFjZV9ob2xkZXJzKQ0KICAgICAgICAgICAgICAgIHZhbCA9ICh2YWx1ZXNbMF0sdmFsdWVzWzFdLHZhbHVlc1syXSx2YWx1ZXNbM10pDQogICAgICAgICAgICAgICAgcHJpbnQocSx2YWwsJ2luc2VydCBxdWVyeScpDQogICAgICAgICAgICAgICAgbXljdXJzb3IuZXhlY3V0ZShxLCB2YWwpDQogICAgICAgICAgICBjbnguY29tbWl0KCkNCiAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgbG9nZ2VyLmluZm8oJ0Vycm9yIE51bWJlcjogJyArIHJvd1swXSkNCg0KICAgIG15Y3Vyc29yLmNsb3NlKCkNCiAgICBjbnguY2xvc2UoKQ0KDQpkZi5mb3JlYWNoUGFydGl0aW9uKHByb2Nlc3NfcGFydGl0aW9uKQ0KcHJpbnQoJ0NvbXBsZXRlZCcpDQpsb2dnZXIuaW5mbygnQ29tcGxldGVkJykNCg0K","leo1311"
