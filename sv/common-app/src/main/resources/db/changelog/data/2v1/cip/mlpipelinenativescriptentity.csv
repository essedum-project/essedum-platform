cname,filename,filescript,organization
"LEORSTRS62652","LEORSTRS62652_leo1311.py","","leo1311"
"LEORSTRS86577","LEORSTRS86577_leo1311.py","ZnJvbSBweXNwYXJrLnNxbCBpbXBvcnQgU3BhcmtTZXNzaW9uCmltcG9ydCByZXF1ZXN0cwppbXBvcnQgc3lzCmltcG9ydCBvcwppbXBvcnQgbXlzcWwuY29ubmVjdG9yCmZyb20gcHlzcGFyay5zcWwuZnVuY3Rpb25zIGltcG9ydCAqCmltcG9ydCBqc29uCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lCmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCB1cmxwYXJzZQpmcm9tIGxlYXAudXRpbHMuVXRpbGl0aWVzIGltcG9ydCBVdGlsaXRpZXMKaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyCgoKbG9nZ2VyLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dlci5JTkZPLGZvcm1hdD0nJShhc2N0aW1lKXMgSU5GTyAlKG1lc3NhZ2UpcycsIGRhdGVmbXQ9JyV5LyVtLyVkICVIOiVNOiVTJykKCiMgc2V0IGNvbmZpZyB0byBmZXRjaApjb25maWcgPSAnaW1wYWN0JwoKYXJndW1lbnRzID0gc3lzLmFyZ3YKZGljdD17fQpmb3IgYXJnIGluIGFyZ3VtZW50czoKICAgICB0cnk6CiAgICAgICAgIGRpY3RbYXJnLnNwbGl0KCc6JylbMF1dID0gKCc6Jykuam9pbihhcmcuc3BsaXQoJzonKVsxOl0pCiAgICAgZXhjZXB0OgogICAgICAgICBhPSdlcnJvcicKCnRhYmxlbmFtZSA9IGRpY3RbJ2RhdGFUYWJsZSddCmNvbmZpZ3MgPSBbJ2Fzc2lnbmVlJ10KZm9yIGNvbmZpZyBpbiBjb25maWdzOgogICAgbG9nZ2VyLmluZm8oJ2ZldGNoaW5nIHswfSBmcm9tIFNOT1cnLmZvcm1hdChjb25maWcpKQojY29uZmlndXJhdGlvbkl0ZW0KICAgIAogICAgaWYgY29uZmlnLmxvd2VyKCkgPT0gJ2Fzc2lnbmVlJzoKICAgICAgICAjQXNzaWduZWUKICAgICAgICBzbm93dGFibGU9J3N5c191c2VyJwogICAgICAgIGNvbmZpZ3R5cGUgPSAnYXNzaWduZWUnCiAgICAgICAgY3VzdG9tUGFyYW1zID0gJyZzeXNwYXJtX2ZpZWxkcz1zeXNfaWQlMkN1c2VyX25hbWUnCiAgICAgICAgc25vd1RvSWNtQ29sdW1uTWFwcGluZyA9eyduYW1lJzonZGlzcGxheVZhbHVlJywgJ3N5c19pZCc6J3N5c3RlbUlkJ30KICAgIAogICAgZWxzZToKICAgICAgICBsb2dnZXIuaW5mbygnQ29uZmlndXJhdGlvbiBUeXBlIG5vdCBmb3VuZCcpCiAgICAgICAgZXhpdCgpCiAgICAKICAgICNTTm93IERhdGFzb3VyY2UKICAgIHNub3dkcyA9IGRpY3RbJ1Nub3dEYXRhU291cmNlJ10KICAgIHNub3dEU2RpY3Q9anNvbi5sb2Fkcyhzbm93ZHMpCiAgICAKICAgICMgU2V0IHRoZSByZXF1ZXN0IHBhcmFtZXRlcnMKICAgIHVybCA9IHNub3dEU2RpY3RbJ1VybCddCiAgICB1c2VyID0gc25vd0RTZGljdFsnQXV0aERldGFpbHMnXVsndXNlcm5hbWUnXQogICAgcHdkID0gVXRpbGl0aWVzLmRlY3J5cHQoc25vd0RTZGljdFsnQXV0aERldGFpbHMnXVsncGFzc3dvcmQnXSwgc25vd0RTZGljdFsnc2FsdCddKQogICAgYXBpID0gZGljdFsnYXBpJ10KICAgIHBhcmFtcyA9ZGljdFsncGFyYW1zJ10KICAgCgogICAgCiAgICAjIFNldCBwcm9wZXIgaGVhZGVycwogICAgaGVhZGVycyA9IHsnQ29udGVudC1UeXBlJzonYXBwbGljYXRpb24vanNvbicsJ0FjY2VwdCc6J2FwcGxpY2F0aW9uL2pzb24nfQogICAgCiAgICAjc2V0cHJveHkKICAgIHByb3h5RGljdCA9e30KICAgIGlmIGRpY3RbJ3NldFByb3h5J10gPT0gJ1RydWUnOgogICAgICAgIHByb3h5RGljdCA9IHsKICAgICAgICAgICAgICAgICAgICAgICdodHRwJyAgOiBvcy5lbnZpcm9uWydIVFRQX1BST1hZJ10sCiAgICAgICAgICAgICAgICAgICAgICAnaHR0cHMnIDogb3MuZW52aXJvblsnSFRUUFNfUFJPWFknXSAgICAgIAogICAgICAgICAgICAgICAgICAgICAgfQogICAgCiAgICAKICAgICMgRG8gdGhlIEhUVFAgcmVxdWVzdAogICAgdXJsID0gdXJsK2FwaStzbm93dGFibGUrJz8nK3BhcmFtcyAgKyBjdXN0b21QYXJhbXMKICAgIAogICAgCiAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwsIGF1dGg9KHVzZXIsIHB3ZCksIGhlYWRlcnM9aGVhZGVycywgcHJveGllcz1wcm94eURpY3QgKQogICAgCiAgICAKICAgICMgQ2hlY2sgZm9yIEhUVFAgY29kZXMgb3RoZXIgdGhhbiAyMDAKICAgIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlICE9IDIwMDoKICAgICAgICBsb2dnZXIuaW5mbygnU3RhdHVzOicsIHJlc3BvbnNlLnN0YXR1c19jb2RlLCAnSGVhZGVyczonLCByZXNwb25zZS5oZWFkZXJzLCAnRXJyb3IgUmVzcG9uc2U6JyxyZXNwb25zZS5qc29uKCkpCiAgICAgICAgZXhpdCgpCiAgICAKICAgICMgRGVjb2RlIHRoZSBKU09OIHJlc3BvbnNlIGludG8gYSBkaWN0aW9uYXJ5IGFuZCB1c2UgdGhlIGRhdGEKICAgIGRhdGEgPSByZXNwb25zZS5qc29uKCkKICAgIAogICAgCiAgICBqc29uU3RyaW5nQXJyYXkgPSBbXQogICAgCiAgICBmb3Igcm93IGluIGRhdGFbJ3Jlc3VsdCddOgogICAgICAgIAogICAgICAgIGpzb25zdHIgPWpzb24uZHVtcHMocm93KQogICAgICAgIGpzb25TdHJpbmdBcnJheS5hcHBlbmQoanNvbnN0cikKICAgIAogICAgc3BhcmsgPSBTcGFya1Nlc3Npb24uYnVpbGRlci5tYXN0ZXIoJ2xvY2FsJykuYXBwTmFtZSgnc25vdycpLmNvbmZpZygnc3BhcmsudWkuc2hvd0NvbnNvbGVQcm9ncmVzcycsICdmYWxzZScpLmdldE9yQ3JlYXRlKCkKICAgIAogICAgI2NvbnZlcnQganNvbiB0byBzcGFyayBkYXRhZnJhbWUKICAgIGRmID0gc3BhcmsucmVhZC5qc29uKHNwYXJrLnNwYXJrQ29udGV4dC5wYXJhbGxlbGl6ZShqc29uU3RyaW5nQXJyYXkpKQogICAgZGY9ZGYuc2VsZWN0KGNvbCgndXNlcl9uYW1lJykuYWxpYXMoJ25hbWUnKSwnc3lzX2lkJykKICAgIAogICAgCiAgICAKICAgICNtYXBDb2x1bW5zCiAgICAnJydmb3VuZENvbHVtbnMgPSBbXQogICAgZm9yIGtleSBpbiBzbm93VG9JY21Db2x1bW5NYXBwaW5nLmtleXMoKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGljbUNvbHVtbiA9c25vd1RvSWNtQ29sdW1uTWFwcGluZ1trZXldCiAgICAgICAgICAgIHNub3dDb2x1bW49IGtleQogICAgICAgICAgICBkZj0gZGYud2l0aENvbHVtbihpY21Db2x1bW4sd2hlbihjb2woc25vd0NvbHVtbikgPT0gJycsIE5vbmUpLm90aGVyd2lzZShjb2woc25vd0NvbHVtbikpKQogICAgICAgICAgICBmb3VuZENvbHVtbnMuYXBwZW5kKGljbUNvbHVtbikKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIGVycm9yID0gJ0NvbHVtbiBOb3QgZm91bmQnCiAgICAgICAgICAgIAogICAgCiAgICBkZiA9IGRmLnNlbGVjdChmb3VuZENvbHVtbnMpJycnCiAgICAKICAgICMgQWRkIHN0YXRpYyBjb2x1bW5zIC0gSUNNIHNwZWNpZmljCiAgICAnJydkZj0gZGYud2l0aENvbHVtbigndHlwZScsbGl0KGNvbmZpZ3R5cGUpKQogICAgZGYgPSBkZi53aXRoQ29sdW1uKCdzb3VyY2UnLGxpdCgnU05PVycpKQogICAgZGYgPSBkZi53aXRoQ29sdW1uKCdsYXN0X3VwZGF0ZWQnLGxpdChkYXRldGltZS5ub3coKSkpJycnCiAgICAKICAgIAogICAgI0xFQVAgRGF0YXNvdXJjZQogICAgbGVhcGRzID0gZGljdFsnUm9zdGVyRGF0YVNvdXJjZSddCiAgICBsZWFwRFNkaWN0ID1qc29uLmxvYWRzKGxlYXBkcykKICAgIAogICAgCiAgICAKICAgICNzYXZlIHRvIGRiCiAgICBjb2x1bW5MaXN0ID0gZGYuY29sdW1ucwogICAgdXNlcm5hbWUgPSBsZWFwRFNkaWN0Wyd1c2VyTmFtZSddCiAgICBwYXNzd29yZCA9IFV0aWxpdGllcy5kZWNyeXB0KGxlYXBEU2RpY3RbJ3Bhc3N3b3JkJ10sbGVhcERTZGljdFsnc2FsdCddKQogICAgaG9zdCA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkuaG9zdG5hbWUKICAgIHBvcnQgPSB1cmxwYXJzZShsZWFwRFNkaWN0Wyd1cmwnXVs1Ol0pLnBvcnQKICAgIGRhdGFiYXNlID0gdXJscGFyc2UobGVhcERTZGljdFsndXJsJ11bNTpdKS5wYXRoLnJzcGxpdCgnLycsIDEpWzFdCiAgICAKICAgIAogICAgZGVmIHByb2Nlc3NfcGFydGl0aW9uKGl0ZXJhdG9yKToKICAgICAgY254ID0gbXlzcWwuY29ubmVjdG9yLmNvbm5lY3QodXNlcj11c2VybmFtZSwgcGFzc3dvcmQ9cGFzc3dvcmQsIGhvc3Q9aG9zdCxwb3J0PXBvcnQsIGRhdGFiYXNlPWRhdGFiYXNlKQogICAgICBteWN1cnNvciA9IGNueC5jdXJzb3IoKQogICAgCiAgICAgIGZvciByb3cgaW4gaXRlcmF0b3I6CiAgICAgICAgICAKICAgICAgICB0cnk6CiAgICAgICAgICAKICAgICAgICAgICAgcGFyYW1zRGljdCA9IHt9CiAgICAgICAgICAgIHZhbHVlcyA9IFtdCiAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKDAsIGxlbihjb2x1bW5MaXN0KSk6CiAgICAgICAgICAgICAgcGFyYW1zRGljdFtjb2x1bW5MaXN0W2ldXSA9IHJvd1tpXQogICAgICAgICAgICAgIHZhbHVlcy5hcHBlbmQocm93W2ldKQogICAgCiAgICAgICAgICAgIGNvbHVtbnMgPSAnLCAnLmpvaW4oJ2B7MH1gJy5mb3JtYXQoaykgZm9yIGsgaW4gcGFyYW1zRGljdCkKICAgICAgICAgICAgZHVwbGljYXRlcyA9ICcsICcuam9pbignezB9PVZBTFVFUyh7MH0pJy5mb3JtYXQoaykgZm9yIGsgaW4gcGFyYW1zRGljdCkKICAgICAgICAgICAgcGxhY2VfaG9sZGVycyA9ICcsICcuam9pbignJXMnLmZvcm1hdChrKSBmb3IgayBpbiBwYXJhbXNEaWN0KQogICAgCiAgICAgICAgICAgIHF1ZXJ5ID0gJ0lOU0VSVCBJTlRPIHswfSAoezF9KSBWQUxVRVMgKHsyfSknLmZvcm1hdCh0YWJsZW5hbWUsIGNvbHVtbnMsIHBsYWNlX2hvbGRlcnMpCiAgICAgICAgICAgIHF1ZXJ5ID0gJ3swfSBPTiBEVVBMSUNBVEUgS0VZIFVQREFURSB7MX0nLmZvcm1hdChxdWVyeSwgZHVwbGljYXRlcykKICAgICAgICAgICAgbXljdXJzb3IuZXhlY3V0ZW1hbnkocXVlcnksICh2YWx1ZXMsKSkKICAgICAgICAgICAgY254LmNvbW1pdCgpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBhOgogICAgICAgICAgICAKICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGEpCiAgICAKICAgICAgbXljdXJzb3IuY2xvc2UoKQogICAgICBjbnguY2xvc2UoKQogICAgCiAgICBkZi5mb3JlYWNoUGFydGl0aW9uKHByb2Nlc3NfcGFydGl0aW9uKQogICAgCiNsb2dnZXIuaW5mbygnQ29tcGxldGVkICYgQ2hlY2tlZCcpCnByaW50KCdDb21wbGV0ZWQnKQoKCgoKCgoKCgoKCgoKCgoKCgo=","leo1311"
"LEORSTRS30124","LEORSTRS30124_leo1311.py","","leo1311"
"SNOW_Update_API","SNOW_Update_API_leo1311.py","","leo1311"
"ACMKYPHR40814","ACMKYPHR40814_leo1311.py","aW1wb3J0IG15c3FsLmNvbm5lY3RvcgppbXBvcnQgbG9nZ2luZwppbXBvcnQgc3lzCmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCBxdW90ZV9wbHVzLCB1cmxwYXJzZQpmcm9tIGxlYXAudXRpbHMuVXRpbGl0aWVzIGltcG9ydCBVdGlsaXRpZXMKZnJvbSBza2xlYXJuLmZlYXR1cmVfZXh0cmFjdGlvbi50ZXh0IGltcG9ydCBUZmlkZlZlY3Rvcml6ZXIKaW1wb3J0IG51bXB5IGFzIG5wCmltcG9ydCB0aW1laXQKaW1wb3J0IGpzb24KCmxvZ2dpbmcuYmFzaWNDb25maWcobGV2ZWw9bG9nZ2luZy5JTkZPLCBmb3JtYXQ9JyUoYXNjdGltZSlzIElORk8gJShtZXNzYWdlKXMnLCBkYXRlZm10PScleS8lbS8lZCAlSDolTTolUycpCgphcmd1bWVudHMgPSBzeXMuYXJndgoKZGljdCA9IHt9CmZvciBhcmcgaW4gYXJndW1lbnRzOgogICAgdHJ5OgogICAgICAgIGRpY3RbYXJnLnNwbGl0KCc6JylbMF1dID0gKCc6Jykuam9pbihhcmcuc3BsaXQoJzonKVsxOl0pCiAgICBleGNlcHQ6CiAgICAgICAgYSA9ICdlcnJvcicKCgpkZWYgZ2V0U2ltaWxhcihzZW50ZW5jZXMsIGtleXdvcmRzKToKICAgIGNvcnB1cyA9IHNlbnRlbmNlcyArIGtleXdvcmRzCiAgICBrZXl3b3Jkc3RhcnRJbmRleCA9IGxlbihzZW50ZW5jZXMpCiAgICB0ZmlkZkNvcnB1cyA9IFRmaWRmVmVjdG9yaXplcihtaW5fZGY9MSwgc3RvcF93b3Jkcz0nZW5nbGlzaCcpLmZpdF90cmFuc2Zvcm0oY29ycHVzKQogICAgcGFpcndpc2Vfc2ltaWxhcml0eSA9IHRmaWRmQ29ycHVzICogdGZpZGZDb3JwdXMuVAogICAgYXJyID0gcGFpcndpc2Vfc2ltaWxhcml0eS50b2FycmF5KCkKICAgIG5wLmZpbGxfZGlhZ29uYWwoYXJyLCBucC5uYW4pCiAgICByZXN1bHRzID0ge30KICAgIGZvciBzIGluIHNlbnRlbmNlczoKICAgICAgICBpbnB1dF9pZHggPSBzZW50ZW5jZXMuaW5kZXgocykKICAgICAgICByZXN1bHRfaWR4ID0gbnAubmFuYXJnbWF4KGFycltpbnB1dF9pZHhdW2tleXdvcmRzdGFydEluZGV4Ol0pCiAgICAgICAgbWF0Y2ggPSBhcnJbaW5wdXRfaWR4XVtrZXl3b3Jkc3RhcnRJbmRleCArIHJlc3VsdF9pZHhdCiAgICAgICAgciA9IGtleXdvcmRzW3Jlc3VsdF9pZHhdCiAgICAgICAgaWYgbWF0Y2ggPiAwOgogICAgICAgICAgICByZXN1bHRzW3NdID0gciArICc6JyArIHN0cihtYXRjaCkKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXN1bHRzW3NdID0gJ05PIE1BVENIOjAnCiAgICByZXR1cm4gcmVzdWx0cwoKCmxlYXBkcyA9IGRpY3RbJ0xFQVBEUyddCmxlYXBEU2RpY3QgPSBqc29uLmxvYWRzKGxlYXBkcykKCnVzZXJuYW1lID0gbGVhcERTZGljdFsndXNlck5hbWUnXQpwYXNzd29yZCA9IFV0aWxpdGllcy5kZWNyeXB0KGxlYXBEU2RpY3RbJ3Bhc3N3b3JkJ10sIGxlYXBEU2RpY3RbJ3NhbHQnXSkKaG9zdCA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkuaG9zdG5hbWUKcG9ydCA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkucG9ydApkYXRhYmFzZSA9IHVybHBhcnNlKGxlYXBEU2RpY3RbJ3VybCddWzU6XSkucGF0aC5yc3BsaXQoJy8nLCAxKVsxXQpjbnggPSBteXNxbC5jb25uZWN0b3IuY29ubmVjdCh1c2VyPXVzZXJuYW1lLCBwYXNzd29yZD1wYXNzd29yZCwgaG9zdD1ob3N0LCBwb3J0PXBvcnQsIGRhdGFiYXNlPWRhdGFiYXNlKQpteWN1cnNvciA9IGNueC5jdXJzb3IoKQpUYWJsZU5hbWUgPSBkaWN0WydUYWJsZU5hbWUnXQplYXNlID0gZGljdFsnRUFTRU1hcHBpbmcnXQpzcWwgPSAnJydTRUxFQ1QgRElTVElOQ1QgVFJJTShleHRyYWN0ZWRfcGhyYXNlKSBmcm9tIHswfSB3aGVyZSBleHRyYWN0ZWRfcGhyYXNlIGlzIG5vdCBudWxsIGFuZCBleHRyYWN0ZWRfcGhyYXNlIDw+ICcnICAnJycuZm9ybWF0KFRhYmxlTmFtZSkKbXljdXJzb3IuZXhlY3V0ZShzcWwpCnJlc3VsdHMgPSBteWN1cnNvci5mZXRjaGFsbCgpCm15Y3Vyc29yLmNsb3NlKCkKcGhyYXNlcyA9IFtdCmZvciBpdGVtIGluIHJlc3VsdHM6CiAgICBwaHJhc2VzLmFwcGVuZChpdGVtWzBdKQoKbXljdXJzb3IyID0gY254LmN1cnNvcigpCnNxbCA9ICcnJ1NFTEVDVCBESVNUSU5DVCBLZXlfV29yZCBmcm9tIHswfSB3aGVyZSBLZXlfV29yZCBpcyBub3QgbnVsbCBhbmQgS2V5X1dvcmQgPD4gJycgJycnLmZvcm1hdChlYXNlKQpteWN1cnNvcjIuZXhlY3V0ZShzcWwpCnJlc3VsdHMgPSBteWN1cnNvcjIuZmV0Y2hhbGwoKQprZXl3b3JkcyA9IFtdCmZvciBpdGVtIGluIHJlc3VsdHM6CiAgICBrZXl3b3Jkcy5hcHBlbmQoaXRlbVswXSkKbXljdXJzb3IyLmNsb3NlKCkKCmNueC5jbG9zZSgpCgoKZGVmIGdldEVBU0UodHVwKToKICAgIHRyeToKICAgICAgICByZXN1bHRzID0gZ2V0U2ltaWxhcih0dXBbMF0sIHR1cFsxXSkKICAgICAgICBUYWJsZU5hbWUgPSBkaWN0WydUYWJsZU5hbWUnXQogICAgICAgIHF1ZXJ5ID0gJycnVXBkYXRlIHswfSBzZXQgbWFwcGVkX3BocmFzZSA9ICVzICwgbWFwcGVkX3BocmFzZV9jb25maWRlbm5jZSA9JXMgIHdoZXJlIFRSSU0oZXh0cmFjdGVkX3BocmFzZSkgPSAlcyAnJycuZm9ybWF0KFRhYmxlTmFtZSkKICAgICAgICBpbnB1dGRhdGEgPSBbXQogICAgICAgIGZvciBwYXR0ZXJuIGluIHJlc3VsdHMua2V5cygpOgogICAgICAgICAgICBrdyA9IHJlc3VsdHNbcGF0dGVybl0uc3BsaXQoJzonKVswXQogICAgICAgICAgICBzY29yZSA9IHJlc3VsdHNbcGF0dGVybl0uc3BsaXQoJzonKVstMV0KICAgICAgICAgICAgaWYga3cgIT0gJ05PIE1BVENIJzoKICAgICAgICAgICAgICAgIGlucHV0ZGF0YS5hcHBlbmQoKGt3LCBzY29yZSwgcGF0dGVybikpCiAgICAgICAgY254ID0gbXlzcWwuY29ubmVjdG9yLmNvbm5lY3QodXNlcj10dXBbMl0sIHBhc3N3b3JkPXR1cFszXSwgaG9zdD10dXBbNF0sIHBvcnQ9dHVwWzVdLCBkYXRhYmFzZT10dXBbNl0pCiAgICAgICAgbXljdXJzb3IgPSBjbnguY3Vyc29yKCkKICAgICAgICByZXMgPSBteWN1cnNvci5leGVjdXRlbWFueShxdWVyeSwgaW5wdXRkYXRhKQogICAgICAgIGNueC5jb21taXQoKQogICAgICAgIG15Y3Vyc29yLmNsb3NlKCkKICAgICAgICBjbnguY2xvc2UoKQogICAgICAgIHJldHVybiBUcnVlCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGV4OgogICAgICAgIGxvZ2dpbmcud2FybmluZyhleCkKICAgICAgICByZXR1cm4gRmFsc2UKCgpmcm9tIG11bHRpcHJvY2Vzc2luZy5kdW1teSBpbXBvcnQgUG9vbCBhcyBUaHJlYWRQb29sCgphdXhfdmFsID0gW10KdG90YWxsZW4gPSBsZW4ocGhyYXNlcykKbG9nZ2luZy5pbmZvKCdUb3RhbCBSZWNvcmRzOiB7MH0nLmZvcm1hdCh0b3RhbGxlbikpCnN0YXJ0ID0gMApzdGVwID0gMTAwMApmb3IgaSBpbiByYW5nZShzdGFydCwgdG90YWxsZW4sIHN0ZXApOgogICAgc3RvcCA9IGkgKyBzdGVwCiAgICBpZiAoc3RvcCA+IHRvdGFsbGVuKToKICAgICAgICBzdG9wID0gdG90YWxsZW4KICAgIHRyeToKICAgICAgICBhdXhfdmFsLmFwcGVuZCgocGhyYXNlc1tpOnN0b3BdLCBrZXl3b3JkcywgdXNlcm5hbWUsIHBhc3N3b3JkLCBob3N0LCBwb3J0LCBkYXRhYmFzZSkpCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgbG9nZ2luZy5pbmZvKGUpCgpwb29sID0gVGhyZWFkUG9vbCg0KQpsb2dnaW5nLmluZm8obGVuKGF1eF92YWwpKQpsb2dnaW5nLmluZm8oJ1N0YXJ0aW5nIFByb2Nlc3MnKQoKbWFwZGF0YSA9IHBvb2wubWFwKGdldEVBU0UsIGF1eF92YWwpCgpsb2dnaW5nLmluZm8oJ0NvbXBsZXRlZCcpCgoKCgoKCg==","leo1311"
"SNOW_Create_API","SNOW_Create_API_Acme.py","","leo1311"
