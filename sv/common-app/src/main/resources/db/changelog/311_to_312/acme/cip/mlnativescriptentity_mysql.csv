"cname","filename","filescript","organization"
"LEORCRT_44644","LEORCRT_44644_leo1311.py","","leo1311"
"LEOLNR-R86498","LEOLNRR86498_leo1311.py","aW1wb3J0IG9zDQppbXBvcnQganNvbg0KaW1wb3J0IHJlcXVlc3RzDQppbXBvcnQgc2h1dGlsDQppbXBvcnQgYm90bzMNCmltcG9ydCBzdGF0DQppbXBvcnQgc3lzDQppbXBvcnQgbG9nZ2luZyBhcyBsb2dnZXINCg0KbG9nZ2VyLmJhc2ljQ29uZmlnKGxldmVsPWxvZ2dlci5JTkZPLCBmb3JtYXQ9JyUoYXNjdGltZSlzIC0gJShsZXZlbG5hbWUpcyAtICUobWVzc2FnZSlzJywgZGF0ZWZtdD0nJXkvJW0vJWQgJUg6JU06JVMnKQ0KIA0KYXJndW1lbnRzID0gc3lzLmFyZ3YNCmFyZ3NEaWN0ID0ge30NCmZvciBhcmcgaW4gYXJndW1lbnRzOg0KICAgIHRyeToNCiAgICAgICAgYXJnc0RpY3RbYXJnLnNwbGl0KCc6JylbMF1dID0gKCc6Jykuam9pbihhcmcuc3BsaXQoJzonKVsxOl0pDQogICAgZXhjZXB0IEluZGV4RXJyb3IgYXMgZToNCiAgICAgICAgbG9nZ2VyLmVycm9yKGYiSW52YWxpZCBhcmd1bWVudCBmb3JtYXQ6IHthcmd9LiBFcnJvcjoge3N0cihlKX0iKQ0KICAgICAgICBjb250aW51ZQ0KDQpkYXRhc2V0X2RldGFpbHMgPSBqc29uLmxvYWRzKGFyZ3NEaWN0LmdldCgiZGF0YXNldCIpKQ0KDQpkZWYgcGFyc2VfbmVzdGVkX2pzb24ob2JqKToNCiAgICBpZiBpc2luc3RhbmNlKG9iaiwgc3RyKToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgcGFyc2VkID0ganNvbi5sb2FkcyhvYmopDQogICAgICAgICAgICByZXR1cm4gcGFyc2VfbmVzdGVkX2pzb24ocGFyc2VkKQ0KICAgICAgICBleGNlcHQgKGpzb24uSlNPTkRlY29kZUVycm9yLCBUeXBlRXJyb3IpOg0KICAgICAgICAgICAgcmV0dXJuIG9iag0KICAgIGVsaWYgaXNpbnN0YW5jZShvYmosIGRpY3QpOg0KICAgICAgICByZXR1cm4ge2s6IHBhcnNlX25lc3RlZF9qc29uKHYpIGZvciBrLCB2IGluIG9iai5pdGVtcygpfQ0KICAgIGVsaWYgaXNpbnN0YW5jZShvYmosIGxpc3QpOg0KICAgICAgICByZXR1cm4gW3BhcnNlX25lc3RlZF9qc29uKGVsZW0pIGZvciBlbGVtIGluIG9ial0NCiAgICBlbHNlOg0KICAgICAgICByZXR1cm4gb2JqDQogICAgICAgIA0KDQpwYXJzZWRfZGF0YV9kZXRhaWxzID0gcGFyc2VfbmVzdGVkX2pzb24oZGF0YXNldF9kZXRhaWxzKQ0KDQoNCg0KZGF0YXNldGlkX3BhcmFtID0gcGFyc2VkX2RhdGFfZGV0YWlscy5nZXQoIm5hbWUiKQ0Kb3JnX3BhcmFtID0gcGFyc2VkX2RhdGFfZGV0YWlscy5nZXQoIm9yZ2FuaXphdGlvbiIpDQoNCg0KZGVmIHMzX2Rvd25sb2FkX2RhdGEoZW5kX3BvaW50X3VybCxhY2Nlc3Nfa2V5LHNlY3JldF9rZXksYnVja2V0LCBvYmpfa2V5LCBsb2NhbF9wYXRoKToNCg0KICAgICIiIg0KDQogICAgRG93bmxvYWQgYSBmb2xkZXIgZnJvbSBTMyB0byBhIGxvY2FsIHBhdGguDQoNCiAgICAiIiINCg0KICAgIHNlc3Npb24gPSBib3RvMy5zZXNzaW9uLlNlc3Npb24oKQ0KDQogICAgczNjID0gc2Vzc2lvbi5jbGllbnQoDQoNCiAgICAgICAgYXdzX2FjY2Vzc19rZXlfaWQ9YWNjZXNzX2tleSwNCg0KICAgICAgICBhd3Nfc2VjcmV0X2FjY2Vzc19rZXk9c2VjcmV0X2tleSwNCg0KICAgICAgICBlbmRwb2ludF91cmw9ZW5kX3BvaW50X3VybCwNCg0KICAgICAgICBzZXJ2aWNlX25hbWU9InMzIiwNCg0KICAgICAgICB1c2Vfc3NsPUZhbHNlLA0KDQogICAgKSAgICANCg0KICAgIHJlc291cmNlID0gYm90bzMucmVzb3VyY2UoDQoNCiAgICAgICAgYXdzX2FjY2Vzc19rZXlfaWQ9YWNjZXNzX2tleSwNCg0KICAgICAgICBhd3Nfc2VjcmV0X2FjY2Vzc19rZXk9c2VjcmV0X2tleSwNCg0KICAgICAgICBlbmRwb2ludF91cmw9ZW5kX3BvaW50X3VybCwNCg0KICAgICAgICBzZXJ2aWNlX25hbWU9InMzIiwNCg0KICAgICAgICB1c2Vfc3NsPUZhbHNlLA0KICAgICAgICApDQogICAgIyBMaXN0IGFsbCBvYmplY3RzIGluIHRoZSBmb2xkZXINCg0KICAgIHJlc3BvbnNlID0gczNjLmxpc3Rfb2JqZWN0c192MihCdWNrZXQ9YnVja2V0LCBQcmVmaXg9b2JqX2tleSkNCg0KICAgIG9iamVjdHMgPSByZXNwb25zZS5nZXQoJ0NvbnRlbnRzJywgW10pDQoNCiAgICBmb3Igb2JqIGluIG9iamVjdHM6DQoNCiAgICAgICAga2V5ID0gb2JqWydLZXknXQ0KICAgICAgICAjIGlmIGtleSA9PSAiaWNldHMtc3YiOg0KICAgICAgICBwcmludCgiRG93bmxvYWRpbmcgZmlsZTogIiwga2V5KQ0KICAgICAgICBmaWxlX3BhdGggPSBvcy5wYXRoLmpvaW4obG9jYWxfcGF0aCwga2V5KQ0KICAgICAgICB0cnk6DQogICAgICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMob3MucGF0aC5kaXJuYW1lKGZpbGVfcGF0aCkpOg0KICAgICAgICAgICAgICAgIG9zLm1ha2VkaXJzKG9zLnBhdGguZGlybmFtZShmaWxlX3BhdGgpKQ0KICAgICAgICAgICAgaWYgbm90IG9iai5nZXQoJ0tleScpLmVuZHN3aXRoKCcvJyk6DQogICAgICAgICAgICAgICAgcmVzb3VyY2UubWV0YS5jbGllbnQuZG93bmxvYWRfZmlsZShidWNrZXQsIG9iai5nZXQoJ0tleScpLCBmaWxlX3BhdGgpDQogICAgICAgICAgICAgICAgcHJpbnQoZiJEb3dubG9hZGVkIHtrZXl9IHRvIHtmaWxlX3BhdGh9IikNCiAgICAgICAgZXhjZXB0IFBlcm1pc3Npb25FcnJvciBhcyBlOg0KICAgICAgICAgICAgcHJpbnQoZiJQZXJtaXNzaW9uRXJyb3I6IHtlfSAtIFNraXBwaW5nIHtrZXl9IikgICAgDQogICAgcmV0dXJuIGZpbGVfcGF0aCAgICANCiAgICAgICAgICAgIA0KZGVmIERhdGFzZXRFeHRyYWN0b3IoKTogICAgI3B5dGhvbi1zY3JpcHQgRGF0YQ0KDQogICAgI2dldCBkYXRhc2V0IGNvbmZpZ3VyYXRpb25zIA0KDQogICAgIyAgPSBnZXRkYXRhc2V0Y29uZmlnKGRhdGFzZXRfaWQ9ZGF0YXNldGlkX3BhcmFtLCBvcmdhbml6YXRpb249b3JnX3BhcmFtKSAgIA0KDQogICAgZGF0YXNldF90eXBlID0gcGFyc2VkX2RhdGFfZGV0YWlsc1snZGF0YXNvdXJjZSddWyd0eXBlJ10gIA0KDQogICAgcHJpbnQoImRhdGFzZXRfdHlwZSIsZGF0YXNldF90eXBlKQ0KDQogICAgaWYgZGF0YXNldF90eXBlID09ICdTMyc6DQoNCiAgICAgICAgY29ubmVjdGlvbl9kaWN0ID0gcGFyc2VkX2RhdGFfZGV0YWlsc1snZGF0YXNvdXJjZSddWydjb25uZWN0aW9uRGV0YWlscyddDQoNCiAgICAgICAgcHJpbnQoIkZldGNoZWQgQ29ubmVjdGlvbiBEZXRhaWxzIikNCg0KICAgICAgICBzM19hY2Nlc3Nfa2V5ID0gY29ubmVjdGlvbl9kaWN0WydhY2Nlc3NLZXknXQ0KDQogICAgICAgIHMzX3NlY3JldF9rZXkgPSBjb25uZWN0aW9uX2RpY3RbJ3NlY3JldEtleSddDQoNCiAgICAgICAgczNfZW5kX3BvaW50X3VybCA9IGNvbm5lY3Rpb25fZGljdFsndXJsJ10gDQoNCiAgICAgICAgYXR0cmlidXRlID0gcGFyc2VkX2RhdGFfZGV0YWlsc1snYXR0cmlidXRlcyddDQoNCiAgICAgICAgYnVja2V0ID0gYXR0cmlidXRlWydidWNrZXQnXSAgICAgICAgICAgICAgIA0KICAgICAgICBwYXRoID0gYXR0cmlidXRlWydwYXRoJ10gICANCg0KICAgICAgICBvYmpfa2V5ID0gYXR0cmlidXRlWydvYmplY3QnXSAgDQoNCiAgICAgICAga2V5ID0gZid7cGF0aH0ve29ial9rZXl9Jw0KDQogICAgICAgIGxvY2FsX3BhdGggPSAiL2hvbWUvdXNlcmFkbWluL3B5LWpvYi1leGVjdXRvci1sYXRlc3QvcHktam9iLWV4ZWN1dGVyL3RtcC9saW5lYXIiDQoNCiAgICAgICAgZGVmIG9uX3JtX2Vycm9yKGZ1bmMsIHBhdGgsIGV4Y19pbmZvKToNCg0KICAgICAgICAgICAgaWYgbm90IG9zLmFjY2VzcyhwYXRoLCBvcy5XX09LKToNCg0KICAgICAgICAgICAgICAgIG9zLmNobW9kKHBhdGgsIHN0YXQuU19JV1VTUikNCg0KICAgICAgICAgICAgICAgIGZ1bmMocGF0aCkNCg0KICAgICAgICAgICAgZWxzZToNCg0KICAgICAgICAgICAgICAgIHJhaXNlDQoNCiAgICAgICAgaWYgb3MucGF0aC5leGlzdHMobG9jYWxfcGF0aCk6DQoNCiAgICAgICAgICAgIHNodXRpbC5ybXRyZWUobG9jYWxfcGF0aCwgb25lcnJvcj1vbl9ybV9lcnJvcikNCg0KICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMobG9jYWxfcGF0aCk6DQoNCiAgICAgICAgICAgIG9zLm1ha2VkaXJzKGxvY2FsX3BhdGgpDQoNCiAgICAgICAgb3MubGlzdGRpcihsb2NhbF9wYXRoKQ0KICAgICAgICANCiAgICAgICAgZmlsZV9wYXRoID0gczNfZG93bmxvYWRfZGF0YShlbmRfcG9pbnRfdXJsID0gczNfZW5kX3BvaW50X3VybCwgYWNjZXNzX2tleSA9IHMzX2FjY2Vzc19rZXksIHNlY3JldF9rZXk9czNfc2VjcmV0X2tleSwgYnVja2V0ID0gYnVja2V0LCBvYmpfa2V5ID0ga2V5LCBsb2NhbF9wYXRoID0gbG9jYWxfcGF0aCkNCiAgICAgICAgcmV0dXJuIGZpbGVfcGF0aA0KICAgIGVsc2U6DQogICAgICAgIHByaW50KCJUeXBlIG5vdCBzdXBwb3J0ZWQuLi4iKQ0KICAgIHJldHVybiBsb2NhbF9wYXRoDQogICAgDQogICAgDQoNCnNhdmVkX3BhdGggPSBEYXRhc2V0RXh0cmFjdG9yKCkNCnByaW50KHNhdmVkX3BhdGgpDQoNCmltcG9ydCBudW1weSBhcyBucA0KaW1wb3J0IHBhbmRhcyBhcyBwZA0KZnJvbSBza2xlYXJuLm1vZGVsX3NlbGVjdGlvbiBpbXBvcnQgdHJhaW5fdGVzdF9zcGxpdA0KZnJvbSBza2xlYXJuLmxpbmVhcl9tb2RlbCBpbXBvcnQgTGluZWFyUmVncmVzc2lvbg0KaW1wb3J0IGpvYmxpYg0KZnJvbSBwYXRobGliIGltcG9ydCBQYXRoDQoNCg0KDQpmdWxsX3BhdGggPSBQYXRoKHNhdmVkX3BhdGgpDQpwYXJlbnRfcGF0aCA9IGZ1bGxfcGF0aC5wYXJlbnQNCg0KIyBSZWFkIGRhdGEgZnJvbSBDU1YgZmlsZQ0KZGF0YSA9IHBkLnJlYWRfY3N2KHNhdmVkX3BhdGgpDQpYID0gZGF0YVtbJ1llYXJzRXhwZXJpZW5jZSddXSAgIyBSZXBsYWNlIHdpdGggeW91ciBmZWF0dXJlIGNvbHVtbnMNCnkgPSBkYXRhWydTYWxhcnknXSAgIyBSZXBsYWNlIHdpdGggeW91ciB0YXJnZXQgY29sdW1uDQoNCiMgU3BsaXQgdGhlIGRhdGEgaW50byB0cmFpbmluZyBhbmQgdGVzdGluZyBzZXRzDQpYX3RyYWluLCBYX3Rlc3QsIHlfdHJhaW4sIHlfdGVzdCA9IHRyYWluX3Rlc3Rfc3BsaXQoWCwgeSwgdGVzdF9zaXplPTAuMiwgcmFuZG9tX3N0YXRlPTQyKQ0KDQojIENyZWF0ZSBhbmQgdHJhaW4gdGhlIG1vZGVsDQptb2RlbCA9IExpbmVhclJlZ3Jlc3Npb24oKQ0KbW9kZWwuZml0KFhfdHJhaW4sIHlfdHJhaW4pDQoNCiMgU2F2ZSB0aGUgbW9kZWwgdG8gYSBmaWxlDQpqb2JsaWIuZHVtcChtb2RlbCwgb3MucGF0aC5qb2luKHBhcmVudF9wYXRoLCAic2FsYXJ5X2xpbmVhcl9yZWdyZXNzaW9uX21vZGVsLnBrbCIpKQ0KDQpwcmludCgiTW9kZWwgc2F2ZWQgdG8gJ3NhbGFyeV9saW5lYXJfcmVncmVzc2lvbl9tb2RlbC5wa2wnIik=","leo1311"
"LEOSMPL-65915","LEOSMPL65915_leo1311.py","ZnJvbSBmbGFzayBpbXBvcnQgRmxhc2ssIGpzb25pZnksIHJlcXVlc3QNCmltcG9ydCBudW1weSBhcyBucA0KaW1wb3J0IGpvYmxpYg0KaW1wb3J0IHBhbmRhcyBhcyBwZA0KDQphcHAgPSBGbGFzayhfX25hbWVfXykNCg0KDQpAYXBwLnJvdXRlKCcvbGluZWFyX2luZmVyJywgbWV0aG9kcz1bJ1BPU1QnXSkNCmRlZiBsaW5lYXJfaW5mZXIoKToNCiAgICBwYXlsb2FkID0gcmVxdWVzdC5nZXRfanNvbigpDQogICAgbW9kZWwgPSBqb2JsaWIubG9hZCgiL2hvbWUvdXNlcmFkbWluL3B5LWpvYi1leGVjdXRvci1sYXRlc3QvcHktam9iLWV4ZWN1dGVyL3RtcC9saW5lYXIvc2FtcGxlX2xpbmVhci9zYWxhcnlfbGluZWFyX3JlZ3Jlc3Npb25fbW9kZWwucGtsIikNCiAgICBYX25ldyA9IG5wLmFycmF5KFtwYXlsb2FkLmdldCgieWVhcnNfb2ZfZXhwZXJpYW5jZSIpXSkucmVzaGFwZSgtMSwxKQ0KICAgIHByZWRpY3Rpb25zID0gbW9kZWwucHJlZGljdChYX25ldykNCiAgICBwcmVkX2xpc3QgPSBwcmVkaWN0aW9ucy50b2xpc3QoKQ0KICAgIHJldHVybiBqc29uaWZ5KHsiU2FsYXJ5IjogcHJlZF9saXN0fSkNCg0KDQpAYXBwLnJvdXRlKCcvY2xhc3NpZmlmY2F0aW9uX2luZmVyJywgbWV0aG9kcz1bJ1BPU1QnXSkNCmRlZiBjbGFzc2lmaWZjYXRpb25faW5mZXIoKToNCiAgICBpbnB1dF9kYXRhID0gcmVxdWVzdC5nZXRfanNvbigpDQogICAgY2xmID0gam9ibGliLmxvYWQoIi9ob21lL3VzZXJhZG1pbi9weS1qb2ItZXhlY3V0b3ItbGF0ZXN0L3B5LWpvYi1leGVjdXRlci90bXAvY2xhc3NpZmljYXRpb24vc2FtcGxlX2NsYXNzaWZpY2F0aW9uL3NwYW1fY2xhc3NpZmllci5wa2wiKQ0KICAgIGxlID0gam9ibGliLmxvYWQoIi9ob21lL3VzZXJhZG1pbi9weS1qb2ItZXhlY3V0b3ItbGF0ZXN0L3B5LWpvYi1leGVjdXRlci90bXAvY2xhc3NpZmljYXRpb24vc2FtcGxlX2NsYXNzaWZpY2F0aW9uL2xhYmVsX2VuY29kZXIucGtsIikNCiAgICBmZWF0dXJlcyA9IGpvYmxpYi5sb2FkKCIvaG9tZS91c2VyYWRtaW4vcHktam9iLWV4ZWN1dG9yLWxhdGVzdC9weS1qb2ItZXhlY3V0ZXIvdG1wL2NsYXNzaWZpY2F0aW9uL3NhbXBsZV9jbGFzc2lmaWNhdGlvbi9mZWF0dXJlX2xpc3QucGtsIikNCiAgICBpbnB1dF9kZiA9IHBkLkRhdGFGcmFtZShbaW5wdXRfZGF0YV0pW2ZlYXR1cmVzXQ0KICAgIHByZWRpY3Rpb24gPSBjbGYucHJlZGljdChpbnB1dF9kZikNCiAgICBwcmVkaXRlZF9zcGFtID0gbGUuaW52ZXJzZV90cmFuc2Zvcm0ocHJlZGljdGlvbilbMF0NCiAgICByZXR1cm4ganNvbmlmeSh7IklzIFNwYW0/IjogcHJlZGl0ZWRfc3BhbX0pDQoNCg0KQGFwcC5yb3V0ZSgnL3Rlc3QnLCBtZXRob2RzPVsnR0VUJ10pDQpkZWYgdGVzdCgpOg0KICAgIHJldHVybiB7InJlc3BvbnNlIjogIkluZmVyIHJ1bm5pbmcgc3VjY2Vzc2Z1bGx5In0NCg0KDQppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOg0KICAgIGFwcC5ydW4oZGVidWc9RmFsc2UsIGhvc3Q9JzAuMC4wLjAnLCBwb3J0ID0gODAwMCkNCg==","leo1311"
"LEOSMPL-56635","LEOSMPL56635_leo1311.py","aW1wb3J0IGdyYWRpbyBhcyBncg0KaW1wb3J0IHJlcXVlc3RzDQoNCiMgRGVmaW5lIHRoZSBBUEkgZW5kcG9pbnRzDQpQT1NUX0FQSV9VUkxfUkVHUkVTU0lPTiA9ICJodHRwOi8vMTAwLjc4LjQ5LjIwOjgwMDAvbGluZWFyX2luZmVyIg0KUE9TVF9BUElfVVJMX0NMQVNTSUZJQ0FUSU9OID0gImh0dHA6Ly8xMDAuNzguNDkuMjA6ODAwMC9jbGFzc2lmaWZjYXRpb25faW5mZXIiDQoNCiMgRnVuY3Rpb24gdG8gY2FsbCB0aGUgUE9TVCBBUEkgZm9yIHJlZ3Jlc3Npb24NCmRlZiBjYWxsX3Bvc3RfYXBpX3JlZ3Jlc3Npb24oZGF0YSk6DQogICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KFBPU1RfQVBJX1VSTF9SRUdSRVNTSU9OLCBqc29uPWRhdGEpDQogICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKQ0KDQojIEZ1bmN0aW9uIHRvIGNhbGwgdGhlIFBPU1QgQVBJIGZvciBjbGFzc2lmaWNhdGlvbg0KZGVmIGNhbGxfcG9zdF9hcGlfY2xhc3NpZmljYXRpb24oZGF0YSk6DQogICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KFBPU1RfQVBJX1VSTF9DTEFTU0lGSUNBVElPTiwganNvbj1kYXRhKQ0KICAgIHJldHVybiByZXNwb25zZS5qc29uKCkNCg0KZGVmIHByb2Nlc3NfaW5wdXQodGFzaywgZGF0YV9pbnB1dCk6DQogICAgaWYgdGFzayA9PSAiUmVncmVzc2lvbiI6DQogICAgICAgIGlmIGRhdGFfaW5wdXQ6DQogICAgICAgICAgICBkYXRhID0gZXZhbChkYXRhX2lucHV0KSAgIyBDb252ZXJ0IHN0cmluZyBpbnB1dCB0byBkaWN0aW9uYXJ5DQogICAgICAgICAgICByZXN1bHQgPSBjYWxsX3Bvc3RfYXBpX3JlZ3Jlc3Npb24oZGF0YSkNCiAgICAgICAgICAgIHJldHVybiBmIlJlZ3Jlc3Npb24gQVBJIFJlc3BvbnNlOiB7cmVzdWx0fSINCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiAiUGxlYXNlIGVudGVyIGRhdGEgZm9yIHRoZSBQT1NUIEFQSS4iDQogICAgZWxpZiB0YXNrID09ICJDbGFzc2lmaWNhdGlvbiI6DQogICAgICAgIGlmIGRhdGFfaW5wdXQ6DQogICAgICAgICAgICBkYXRhID0gZXZhbChkYXRhX2lucHV0KSAgIyBDb252ZXJ0IHN0cmluZyBpbnB1dCB0byBkaWN0aW9uYXJ5DQogICAgICAgICAgICByZXN1bHQgPSBjYWxsX3Bvc3RfYXBpX2NsYXNzaWZpY2F0aW9uKGRhdGEpDQogICAgICAgICAgICByZXR1cm4gZiJDbGFzc2lmaWNhdGlvbiBBUEkgUmVzcG9uc2U6IHtyZXN1bHR9Ig0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuICJQbGVhc2UgZW50ZXIgZGF0YSBmb3IgdGhlIFBPU1QgQVBJLiINCg0KdGFzayA9IGdyLkRyb3Bkb3duKFsiUmVncmVzc2lvbiIsICJDbGFzc2lmaWNhdGlvbiJdLCBsYWJlbD0iU2VsZWN0IE1vZGVsIikNCmRhdGFfaW5wdXQgPSBnci5UZXh0Ym94KGxpbmVzPTUsIHBsYWNlaG9sZGVyPSJFbnRlciBkYXRhIChpbiBKU09OIGZvcm1hdCkiKQ0KDQppZmFjZSA9IGdyLkludGVyZmFjZSgNCiAgICBmbj1wcm9jZXNzX2lucHV0LA0KICAgIGlucHV0cz1bdGFzaywgZGF0YV9pbnB1dF0sDQogICAgb3V0cHV0cz0idGV4dCIsDQogICAgdGl0bGU9IlJlZ3Jlc3Npb24gYW5kIENsYXNzaWZpY2F0aW9uIE1vZGVscyIsDQogICAgZGVzY3JpcHRpb249IlNlbGVjdCBhIG1vZGVsIGFuZCBlbnRlciBkYXRhIHRvIGNhbGwgdGhlIGNvcnJlc3BvbmRpbmcgUE9TVCBBUEkuIg0KKQ0KDQpwcmludCgiR3JhZGlvIHN0YXJ0ZWQgc3VjY2Vzc2Z1bGx5Li4uLiIpDQoNCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6DQogICAgaWZhY2UubGF1bmNoKHNlcnZlcl9uYW1lPSIwLjAuMC4wIiwgc2VydmVyX3BvcnQ9ODA4MCk=","leo1311"
"LEOSMPL-68488","LEOSMPL68488_leo1311.py","","leo1311"
"LEOSMPL-18776","LEOSMPL18776_leo1311.py","aW1wb3J0IHN0cmVhbWxpdCBhcyBzdA0KaW1wb3J0IHJlcXVlc3RzDQppbXBvcnQgb3MNCg0KIyBEZWZpbmUgdGhlIEFQSSBlbmRwb2ludHMNClBPU1RfQVBJX1VSTF9SRUdSRVNTSU9OID0gImh0dHA6Ly8xMDAuNzguNDkuMjA6ODAwMC9saW5lYXJfaW5mZXIiDQpQT1NUX0FQSV9VUkxfQ0xBU1NJRklDQVRJT04gPSAiaHR0cDovLzEwMC43OC40OS4yMDo4MDAwL2NsYXNzaWZpZmNhdGlvbl9pbmZlciINCg0KDQoNCiMgRnVuY3Rpb24gdG8gY2FsbCB0aGUgUE9TVCBBUEkgZm9yIHJlZ3Jlc3Npb24NCmRlZiBjYWxsX3Bvc3RfYXBpX3JlZ3Jlc3Npb24oZGF0YSk6DQogICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KFBPU1RfQVBJX1VSTF9SRUdSRVNTSU9OLCBqc29uPWRhdGEpDQogICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKQ0KDQoNCiMgRnVuY3Rpb24gdG8gY2FsbCB0aGUgUE9TVCBBUEkgZm9yIGNsYXNzaWZpY2F0aW9uDQpkZWYgY2FsbF9wb3N0X2FwaV9jbGFzc2lmaWNhdGlvbihkYXRhKToNCiAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoUE9TVF9BUElfVVJMX0NMQVNTSUZJQ0FUSU9OLCBqc29uPWRhdGEpDQogICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKQ0KDQoNCg0KDQojIFN0cmVhbWxpdCBhcHANCnN0LnRpdGxlKCJSZWdyZXNzaW9uIGFuZCBjbGFzc2lmaWNhc3Rpb24gbW9kZWxzLi4uIikNCg0KIyBTZWxlY3QgZmllbGQgZm9yIGNob29zaW5nIHRoZSB0YXNrDQp0YXNrID0gc3Quc2VsZWN0Ym94KCJTZWxlY3QgTW9kZWwiLCBbIlJlZ3Jlc3Npb24iLCAiQ2xhc3NpZmljYXRpb24iXSkNCg0KIyBJbnB1dCBmaWVsZHMgZm9yIFBPU1QgQVBJIGRhdGENCmRhdGFfaW5wdXQgPSBzdC50ZXh0X2FyZWEoIkVudGVyIGRhdGEgKGluIEpTT04gZm9ybWF0KSIpDQoNCiMgQnV0dG9uIHRvIGNhbGwgdGhlIEFQSXMNCmlmIHN0LmJ1dHRvbigiU3VibWl0Iik6DQogICAgaWYgdGFzayA9PSAiUmVncmVzc2lvbiI6ICAgIA0KICAgICAgICBpZiBkYXRhX2lucHV0Og0KICAgICAgICAgICAgZGF0YSA9IGV2YWwoZGF0YV9pbnB1dCkgICMgQ29udmVydCBzdHJpbmcgaW5wdXQgdG8gZGljdGlvbmFyeQ0KICAgICAgICAgICAgcmVzdWx0ID0gY2FsbF9wb3N0X2FwaV9yZWdyZXNzaW9uKGRhdGEpDQogICAgICAgICAgICBzdC53cml0ZSgiUmVncmVzc2lvbiBBUEkgUmVzcG9uc2U6IiwgcmVzdWx0KQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgc3Qud3JpdGUoIlBsZWFzZSBlbnRlciBkYXRhIGZvciB0aGUgUE9TVCBBUEkuIikNCiAgICBlbGlmIHRhc2sgPT0gIkNsYXNzaWZpY2F0aW9uIjoNCiAgICAgICAgaWYgZGF0YV9pbnB1dDoNCiAgICAgICAgICAgIGRhdGEgPSBldmFsKGRhdGFfaW5wdXQpICAjIENvbnZlcnQgc3RyaW5nIGlucHV0IHRvIGRpY3Rpb25hcnkNCiAgICAgICAgICAgIHJlc3VsdCA9IGNhbGxfcG9zdF9hcGlfY2xhc3NpZmljYXRpb24oZGF0YSkNCiAgICAgICAgICAgIHN0LndyaXRlKCJDbGFzc2lmaWNhdGlvbiBBUEkgUmVzcG9uc2U6IiwgcmVzdWx0KQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgc3Qud3JpdGUoIlBsZWFzZSBlbnRlciBkYXRhIGZvciB0aGUgUE9TVCBBUEkuIikNCg0KDQoNCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6DQogICAgb3Muc3lzdGVtKCdweXRob24gLW0gc3RyZWFtbGl0IHJ1biBMRU9TTVBMMTg3NzZfbGVvMTMxMS5weSAtLXNlcnZlci5oZWFkbGVzcyB0cnVlIC0tc2VydmVyLnBvcnQgODA4MScp","leo1311"
"LEORGSCS58369","LEORGSCS58369_leo1311.py","aW1wb3J0IHN5cw0KaW1wb3J0IHN1YnByb2Nlc3MNCmltcG9ydCBvcw0KcmVxdWlyZW1lbnRzID0gWw0KICAgICJsbGFtYS1pbmRleCIsDQogICAgImxsYW1hLWluZGV4LWxsbXMtYXp1cmUtb3BlbmFpIiwNCiAgICAibGxhbWEtaW5kZXgtZW1iZWRkaW5ncy1henVyZS1vcGVuYWkiLA0KICAgICJvcGVuYWkiLA0KICAgICJwcHJpbnRwcCIsDQogICAgImxsYW1hLWluZGV4LXZlY3Rvci1zdG9yZXMtcWRyYW50IiwNCiAgICAic3RyZWFtbGl0Ig0KDQpdDQogDQpmb3IgbW9kdWxlIGluIHJlcXVpcmVtZW50czoNCiAgICBzdWJwcm9jZXNzLnJ1bigncHl0aG9uIC1tIHBpcCBpbnN0YWxsIC0tdXBncmFkZSAnKyBtb2R1bGUgLHNoZWxsPVRydWUpDQoNCmltcG9ydCBzeXMNCmltcG9ydCBzdWJwcm9jZXNzDQppbXBvcnQgb3MNCmltcG9ydCBvcw0KaW1wb3J0IGpzb24NCmltcG9ydCByZXF1ZXN0cw0KaW1wb3J0IHNodXRpbA0KaW1wb3J0IGJvdG8zDQppbXBvcnQgc3RhdA0KaW1wb3J0IHN5cw0KaW1wb3J0IGxvZ2dpbmcgYXMgbG9nZ2VyDQppbXBvcnQgc3RyZWFtbGl0IGFzIHN0DQoNCmxvZ2dlci5iYXNpY0NvbmZpZyhsZXZlbD1sb2dnZXIuSU5GTywgZm9ybWF0PSclKGFzY3RpbWUpcyAtICUobGV2ZWxuYW1lKXMgLSAlKG1lc3NhZ2UpcycsIGRhdGVmbXQ9JyV5LyVtLyVkICVIOiVNOiVTJykNCiANCmFyZ3VtZW50cyA9IHN5cy5hcmd2DQphcmdzRGljdCA9IHt9DQpmb3IgYXJnIGluIGFyZ3VtZW50czoNCiAgICB0cnk6DQogICAgICAgIGFyZ3NEaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICgnOicpLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQ0KICAgIGV4Y2VwdCBJbmRleEVycm9yIGFzIGU6DQogICAgICAgIGxvZ2dlci5lcnJvcihmIkludmFsaWQgYXJndW1lbnQgZm9ybWF0OiB7YXJnfS4gRXJyb3I6IHtzdHIoZSl9IikNCiAgICAgICAgY29udGludWUNCnByaW50KCItLS0tLS0tLS0tLS0tLS0tLS0tZGF0YXNvdXJjZS0tLS0tLS0tLS0tLS0tLS0tIixhcmdzRGljdC5nZXQoImRhdGFzZXQiKSkNCmRhdGFzZXRfZGV0YWlscyA9IGpzb24ubG9hZHMoYXJnc0RpY3QuZ2V0KCJkYXRhc2V0IikpDQoNCmRlZiBwYXJzZV9uZXN0ZWRfanNvbihvYmopOg0KICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBzdHIpOg0KICAgICAgICB0cnk6DQogICAgICAgICAgICBwYXJzZWQgPSBqc29uLmxvYWRzKG9iaikNCiAgICAgICAgICAgIHJldHVybiBwYXJzZV9uZXN0ZWRfanNvbihwYXJzZWQpDQogICAgICAgIGV4Y2VwdCAoanNvbi5KU09ORGVjb2RlRXJyb3IsIFR5cGVFcnJvcik6DQogICAgICAgICAgICByZXR1cm4gb2JqDQogICAgZWxpZiBpc2luc3RhbmNlKG9iaiwgZGljdCk6DQogICAgICAgIHJldHVybiB7azogcGFyc2VfbmVzdGVkX2pzb24odikgZm9yIGssIHYgaW4gb2JqLml0ZW1zKCl9DQogICAgZWxpZiBpc2luc3RhbmNlKG9iaiwgbGlzdCk6DQogICAgICAgIHJldHVybiBbcGFyc2VfbmVzdGVkX2pzb24oZWxlbSkgZm9yIGVsZW0gaW4gb2JqXQ0KICAgIGVsc2U6DQogICAgICAgIHJldHVybiBvYmoNCiAgICAgICAgDQoNCnBhcnNlZF9kYXRhX2RldGFpbHMgPSBwYXJzZV9uZXN0ZWRfanNvbihkYXRhc2V0X2RldGFpbHMpDQoNCg0KDQpkYXRhc2V0aWRfcGFyYW0gPSBwYXJzZWRfZGF0YV9kZXRhaWxzLmdldCgibmFtZSIpDQpvcmdfcGFyYW0gPSBwYXJzZWRfZGF0YV9kZXRhaWxzLmdldCgib3JnYW5pemF0aW9uIikNCg0KDQpkZWYgczNfZG93bmxvYWRfZGF0YShlbmRfcG9pbnRfdXJsLGFjY2Vzc19rZXksc2VjcmV0X2tleSxidWNrZXQsIG9ial9rZXksIGxvY2FsX3BhdGgpOg0KDQogICAgIiIiDQoNCiAgICBEb3dubG9hZCBhIGZvbGRlciBmcm9tIFMzIHRvIGEgbG9jYWwgcGF0aC4NCg0KICAgICIiIg0KDQogICAgc2Vzc2lvbiA9IGJvdG8zLnNlc3Npb24uU2Vzc2lvbigpDQoNCiAgICBzM2MgPSBzZXNzaW9uLmNsaWVudCgNCg0KICAgICAgICBhd3NfYWNjZXNzX2tleV9pZD1hY2Nlc3Nfa2V5LA0KDQogICAgICAgIGF3c19zZWNyZXRfYWNjZXNzX2tleT1zZWNyZXRfa2V5LA0KDQogICAgICAgIGVuZHBvaW50X3VybD1lbmRfcG9pbnRfdXJsLA0KDQogICAgICAgIHNlcnZpY2VfbmFtZT0iczMiLA0KDQogICAgICAgIHVzZV9zc2w9RmFsc2UsDQoNCiAgICApICAgIA0KDQogICAgcmVzb3VyY2UgPSBib3RvMy5yZXNvdXJjZSgNCg0KICAgICAgICBhd3NfYWNjZXNzX2tleV9pZD1hY2Nlc3Nfa2V5LA0KDQogICAgICAgIGF3c19zZWNyZXRfYWNjZXNzX2tleT1zZWNyZXRfa2V5LA0KDQogICAgICAgIGVuZHBvaW50X3VybD1lbmRfcG9pbnRfdXJsLA0KDQogICAgICAgIHNlcnZpY2VfbmFtZT0iczMiLA0KDQogICAgICAgIHVzZV9zc2w9RmFsc2UsDQogICAgICAgICkNCiAgICAjIExpc3QgYWxsIG9iamVjdHMgaW4gdGhlIGZvbGRlcg0KDQogICAgcmVzcG9uc2UgPSBzM2MubGlzdF9vYmplY3RzX3YyKEJ1Y2tldD1idWNrZXQsIFByZWZpeD1vYmpfa2V5KQ0KDQogICAgb2JqZWN0cyA9IHJlc3BvbnNlLmdldCgnQ29udGVudHMnLCBbXSkNCg0KICAgIGZvciBvYmogaW4gb2JqZWN0czoNCg0KICAgICAgICBrZXkgPSBvYmpbJ0tleSddDQogICAgICAgICMgaWYga2V5ID09ICJpY2V0cy1zdiI6DQogICAgICAgIHByaW50KCJEb3dubG9hZGluZyBmaWxlOiAiLCBrZXkpDQogICAgICAgIGZpbGVfcGF0aCA9IG9zLnBhdGguam9pbihsb2NhbF9wYXRoLCBrZXkpDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhvcy5wYXRoLmRpcm5hbWUoZmlsZV9wYXRoKSk6DQogICAgICAgICAgICAgICAgb3MubWFrZWRpcnMob3MucGF0aC5kaXJuYW1lKGZpbGVfcGF0aCkpDQogICAgICAgICAgICBpZiBub3Qgb2JqLmdldCgnS2V5JykuZW5kc3dpdGgoJy8nKToNCiAgICAgICAgICAgICAgICByZXNvdXJjZS5tZXRhLmNsaWVudC5kb3dubG9hZF9maWxlKGJ1Y2tldCwgb2JqLmdldCgnS2V5JyksIGZpbGVfcGF0aCkNCiAgICAgICAgICAgICAgICBwcmludChmIkRvd25sb2FkZWQge2tleX0gdG8ge2ZpbGVfcGF0aH0iKQ0KICAgICAgICBleGNlcHQgUGVybWlzc2lvbkVycm9yIGFzIGU6DQogICAgICAgICAgICBwcmludChmIlBlcm1pc3Npb25FcnJvcjoge2V9IC0gU2tpcHBpbmcge2tleX0iKSAgICANCiAgICByZXR1cm4gZmlsZV9wYXRoICAgIA0KICAgICAgICAgICAgDQpkZWYgRGF0YXNldEV4dHJhY3RvcigpOiAgICAjcHl0aG9uLXNjcmlwdCBEYXRhDQoNCiAgICAjZ2V0IGRhdGFzZXQgY29uZmlndXJhdGlvbnMgDQoNCiAgICAjICA9IGdldGRhdGFzZXRjb25maWcoZGF0YXNldF9pZD1kYXRhc2V0aWRfcGFyYW0sIG9yZ2FuaXphdGlvbj1vcmdfcGFyYW0pICAgDQoNCiAgICBkYXRhc2V0X3R5cGUgPSBwYXJzZWRfZGF0YV9kZXRhaWxzWydkYXRhc291cmNlJ11bJ3R5cGUnXSAgDQoNCiAgICBwcmludCgiZGF0YXNldF90eXBlIixkYXRhc2V0X3R5cGUpDQoNCiAgICBpZiBkYXRhc2V0X3R5cGUgPT0gJ1MzJzoNCg0KICAgICAgICBjb25uZWN0aW9uX2RpY3QgPSBwYXJzZWRfZGF0YV9kZXRhaWxzWydkYXRhc291cmNlJ11bJ2Nvbm5lY3Rpb25EZXRhaWxzJ10NCg0KICAgICAgICBwcmludCgiRmV0Y2hlZCBDb25uZWN0aW9uIERldGFpbHMiKQ0KDQogICAgICAgIHMzX2FjY2Vzc19rZXkgPSBjb25uZWN0aW9uX2RpY3RbJ2FjY2Vzc0tleSddDQoNCiAgICAgICAgczNfc2VjcmV0X2tleSA9IGNvbm5lY3Rpb25fZGljdFsnc2VjcmV0S2V5J10NCg0KICAgICAgICBzM19lbmRfcG9pbnRfdXJsID0gY29ubmVjdGlvbl9kaWN0Wyd1cmwnXSANCg0KICAgICAgICBhdHRyaWJ1dGUgPSBwYXJzZWRfZGF0YV9kZXRhaWxzWydhdHRyaWJ1dGVzJ10NCg0KICAgICAgICBidWNrZXQgPSBhdHRyaWJ1dGVbJ2J1Y2tldCddICAgICAgICAgICAgICAgDQogICAgICAgIHBhdGggPSBhdHRyaWJ1dGVbJ3BhdGgnXSAgIA0KDQogICAgICAgIG9ial9rZXkgPSBhdHRyaWJ1dGVbJ29iamVjdCddICANCg0KICAgICAgICBrZXkgPSBmJ3twYXRofS97b2JqX2tleX0nDQoNCiAgICAgICAgbG9jYWxfcGF0aCA9ICIvaG9tZS91c2VyYWRtaW4vcHktam9iLWV4ZWN1dGVyL3RtcC9yYWdfdXNlY2FzZSINCg0KICAgICAgICBkZWYgb25fcm1fZXJyb3IoZnVuYywgcGF0aCwgZXhjX2luZm8pOg0KDQogICAgICAgICAgICBpZiBub3Qgb3MuYWNjZXNzKHBhdGgsIG9zLldfT0spOg0KDQogICAgICAgICAgICAgICAgb3MuY2htb2QocGF0aCwgc3RhdC5TX0lXVVNSKQ0KDQogICAgICAgICAgICAgICAgZnVuYyhwYXRoKQ0KDQogICAgICAgICAgICBlbHNlOg0KDQogICAgICAgICAgICAgICAgcmFpc2UNCg0KICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhsb2NhbF9wYXRoKToNCg0KICAgICAgICAgICAgc2h1dGlsLnJtdHJlZShsb2NhbF9wYXRoLCBvbmVycm9yPW9uX3JtX2Vycm9yKQ0KDQogICAgICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhsb2NhbF9wYXRoKToNCg0KICAgICAgICAgICAgb3MubWFrZWRpcnMobG9jYWxfcGF0aCkNCg0KICAgICAgICBvcy5saXN0ZGlyKGxvY2FsX3BhdGgpDQogICAgICAgIA0KICAgICAgICBmaWxlX3BhdGggPSBzM19kb3dubG9hZF9kYXRhKGVuZF9wb2ludF91cmwgPSBzM19lbmRfcG9pbnRfdXJsLCBhY2Nlc3Nfa2V5ID0gczNfYWNjZXNzX2tleSwgc2VjcmV0X2tleT1zM19zZWNyZXRfa2V5LCBidWNrZXQgPSBidWNrZXQsIG9ial9rZXkgPSBrZXksIGxvY2FsX3BhdGggPSBsb2NhbF9wYXRoKQ0KICAgICAgICByZXR1cm4gZmlsZV9wYXRoDQogICAgZWxzZToNCiAgICAgICAgcHJpbnQoIlR5cGUgbm90IHN1cHBvcnRlZC4uLiIpDQogICAgcmV0dXJuIGxvY2FsX3BhdGgNCiAgICANCiAgICANCg0Kc2F2ZWRfcGF0aCA9IERhdGFzZXRFeHRyYWN0b3IoKQ0KcHJpbnQoc2F2ZWRfcGF0aCkNCg0KDQppbXBvcnQgYXN5bmNpbw0KZnJvbSBwcHJpbnQgaW1wb3J0IHBwcmludA0KZnJvbSBsbGFtYV9pbmRleC5jb3JlLm5vZGVfcGFyc2VyIGltcG9ydCBTZW50ZW5jZVNwbGl0dGVyDQpmcm9tIGxsYW1hX2luZGV4LmNvcmUuc2NoZW1hIGltcG9ydCBUZXh0Tm9kZQ0KZnJvbSBsbGFtYV9pbmRleC5sbG1zLmF6dXJlX29wZW5haSBpbXBvcnQgQXp1cmVPcGVuQUkNCmZyb20gbGxhbWFfaW5kZXguZW1iZWRkaW5ncy5henVyZV9vcGVuYWkgaW1wb3J0IEF6dXJlT3BlbkFJRW1iZWRkaW5nDQpmcm9tIGxsYW1hX2luZGV4LmNvcmUgaW1wb3J0IFNldHRpbmdzDQpmcm9tIGxsYW1hX2luZGV4LmNvcmUuZXh0cmFjdG9ycyBpbXBvcnQgUXVlc3Rpb25zQW5zd2VyZWRFeHRyYWN0b3IsIFRpdGxlRXh0cmFjdG9yDQpmcm9tIGxsYW1hX2luZGV4LmNvcmUuaW5nZXN0aW9uIGltcG9ydCBJbmdlc3Rpb25QaXBlbGluZQ0KZnJvbSBsbGFtYV9pbmRleC5jb3JlIGltcG9ydCBWZWN0b3JTdG9yZUluZGV4DQpmcm9tIHRvcm5hZG8gaW1wb3J0IGdlbg0KZnJvbSBsbGFtYV9pbmRleC52ZWN0b3Jfc3RvcmVzLnFkcmFudCBpbXBvcnQgUWRyYW50VmVjdG9yU3RvcmUNCmZyb20gcWRyYW50X2NsaWVudCBpbXBvcnQgUWRyYW50Q2xpZW50DQpmcm9tIHFkcmFudF9jbGllbnQuaHR0cC5tb2RlbHMgaW1wb3J0IFZlY3RvclBhcmFtcywgRGlzdGFuY2UNCg0KDQojIFN0ZXAgMTogUmVhZCBhbmQgc3BsaXQgdGhlIHRleHQNCndpdGggb3BlbihzYXZlZF9wYXRoLCAiciIsIGVuY29kaW5nPSJ1dGYtOCIpIGFzIGZpbGU6DQogICAgY29udGVudCA9IGZpbGUucmVhZCgpDQoNCnRleHRfc3BsaXR0ZXIgPSBTZW50ZW5jZVNwbGl0dGVyKGNodW5rX3NpemU9NTEyKQ0KdGV4dF9jaHVua3MgPSB0ZXh0X3NwbGl0dGVyLnNwbGl0X3RleHQoY29udGVudCkNCmRvY19pZHhzID0gWzBdICogbGVuKHRleHRfY2h1bmtzKQ0KDQpub2RlcyA9IFtdDQoNCmZyb20gbGxhbWFfaW5kZXguY29yZS5zY2hlbWEgaW1wb3J0IERvY3VtZW50DQoNCmRvY3VtZW50cyA9IFtdDQpmb3IgaWR4LCB0ZXh0X2NodW5rIGluIGVudW1lcmF0ZSh0ZXh0X2NodW5rcyk6DQogICAgZG9jID0gRG9jdW1lbnQoDQogICAgICAgIHRleHQ9dGV4dF9jaHVuaywNCiAgICAgICAgbWV0YWRhdGE9eyJzb3VyY2VfZG9jIjogImhyX3BvbGljeS50eHQiLCAiZG9jX2luZGV4IjogZG9jX2lkeHNbaWR4XX0pDQogICAgZG9jdW1lbnRzLmFwcGVuZChkb2MpDQoNCg0KIyBTdGVwIDI6IFNldCB1cCBBenVyZSBPcGVuQUkgTExNIGFuZCBFbWJlZGRpbmdzDQpsbG0gPSBBenVyZU9wZW5BSSgNCiAgICBtb2RlbD0iZ3B0LTRvLW1pbmkiLA0KICAgIGRlcGxveW1lbnRfbmFtZT0iZ3B0LTRvLW1pbmkiLA0KICAgIGFwaV9rZXk9IiIsDQogICAgYXp1cmVfZW5kcG9pbnQ9Imh0dHBzOi8vYWlwbGF0Zm9ybS1vcGVuYWkub3BlbmFpLmF6dXJlLmNvbS8iLA0KICAgIGFwaV92ZXJzaW9uPSIyMDI1LTAxLTAxLXByZXZpZXciLA0KKQ0KDQplbWJlZF9tb2RlbCA9IEF6dXJlT3BlbkFJRW1iZWRkaW5nKA0KICAgIG1vZGVsPSJ0ZXh0LWVtYmVkZGluZy1hZGEtMDAyIiwNCiAgICBkZXBsb3ltZW50X25hbWU9InRleHQtZW1iZWRkaW5nLWFkYS0wMDIiLA0KICAgIGFwaV9rZXk9IiIsDQogICAgYXp1cmVfZW5kcG9pbnQ9Imh0dHBzOi8vYWlwbGF0Zm9ybS1vcGVuYWkub3BlbmFpLmF6dXJlLmNvbS8iLA0KICAgIGFwaV92ZXJzaW9uPSIyMDI1LTAxLTAxLXByZXZpZXciLA0KKQ0KDQpTZXR0aW5ncy5sbG0gPSBsbG0NClNldHRpbmdzLmVtYmVkX21vZGVsID0gZW1iZWRfbW9kZWwNCg0KIyBTdGVwIDM6IEVucmljaCBub2RlcyB3aXRoIG1ldGFkYXRhDQpleHRyYWN0b3JzID0gWw0KICAgIFRpdGxlRXh0cmFjdG9yKG5vZGVzPTUsIGxsbT1sbG0pLA0KICAgIFF1ZXN0aW9uc0Fuc3dlcmVkRXh0cmFjdG9yKHF1ZXN0aW9ucz0zLCBsbG09bGxtKSwNCl0NCnBpcGVsaW5lID0gSW5nZXN0aW9uUGlwZWxpbmUodHJhbnNmb3JtYXRpb25zPWV4dHJhY3RvcnMpDQoNCg0KVVJMID0gImh0dHA6Ly8xMDAuNzguNDkuMTM1Ig0KUE9SVCA9IDYzMzMNCkRJTUVOU0lPTiA9IDM4NA0KQ09MTEVDVElPTl9OQU1FID0gIlRlc3QyIg0KDQojIFN0ZXAgMTogSW5pdGlhbGl6ZSBRZHJhbnQgY2xpZW50IGFuZCBjb2xsZWN0aW9uDQpjbGllbnQgPSBRZHJhbnRDbGllbnQodXJsPVVSTCwgcG9ydD1QT1JULCB0aW1lb3V0PTYwLjApDQoNCiMgQ3JlYXRlIGNvbGxlY3Rpb24gaWYgaXQgZG9lc24ndCBleGlzdA0KY2xpZW50LnJlY3JlYXRlX2NvbGxlY3Rpb24oDQogICAgY29sbGVjdGlvbl9uYW1lPUNPTExFQ1RJT05fTkFNRSwNCiAgICB2ZWN0b3JzX2NvbmZpZz1WZWN0b3JQYXJhbXMoDQogICAgICAgIHNpemU9RElNRU5TSU9OLA0KICAgICAgICBkaXN0YW5jZT1EaXN0YW5jZS5DT1NJTkUpDQopDQoNCiMgU3RlcCAyOiBDcmVhdGUgUWRyYW50IHZlY3RvciBzdG9yZQ0KdmVjdG9yX3N0b3JlID0gUWRyYW50VmVjdG9yU3RvcmUoDQogICAgY2xpZW50PWNsaWVudCwNCiAgICBjb2xsZWN0aW9uX25hbWU9Q09MTEVDVElPTl9OQU1FDQopDQoNCiMgU3RlcCAzOiBBc3luYyBwaXBlbGluZSBmdW5jdGlvbg0KDQpkZWYgcnVuX3BpcGVsaW5lKHF1ZXJ5KToNCiAgICBlbnJpY2hlZF9ub2RlcyA9IHBpcGVsaW5lLnJ1bihkb2N1bWVudHM9ZG9jdW1lbnRzLCBpbl9wbGFjZT1GYWxzZSkNCiAgICAjIFN0ZXAgNDogQ3JlYXRlIGluZGV4IHVzaW5nIFFkcmFudA0KICAgIGluZGV4ID0gVmVjdG9yU3RvcmVJbmRleC5mcm9tX2RvY3VtZW50cygNCiAgICAgICAgZW5yaWNoZWRfbm9kZXMsDQogICAgICAgIHZlY3Rvcl9zdG9yZT12ZWN0b3Jfc3RvcmUNCiAgICAgICAgKQ0KICAgICMgU3RlcCA1OiBRdWVyeSB0aGUgaW5kZXgNCg0KICAgIHF1ZXJ5X2VuZ2luZSA9IGluZGV4LmFzX3F1ZXJ5X2VuZ2luZSgpDQogICAgcmVzcG9uc2UgPSBxdWVyeV9lbmdpbmUucXVlcnkocXVlcnkpDQogICAgcmV0dXJuIHJlc3BvbnNlICAgICAgICANCg0KDQppbXBvcnQgZ3JhZGlvIGFzIGdyDQoNCnF1ZXJ5ID0gZ3IuVGV4dGJveChsaW5lcz01LCBwbGFjZWhvbGRlcj0iRW50ZXIgdGhlIHF1ZXJ5IikNCg0KaWZhY2UgPSBnci5JbnRlcmZhY2UoDQogICAgZm49cnVuX3BpcGVsaW5lLA0KICAgIGlucHV0cz1bcXVlcnldLA0KICAgIG91dHB1dHM9InRleHQiLA0KICAgIHRpdGxlPSJHcmFkaW8gYXBwbGljYXRpb24uIiwNCiAgICBkZXNjcmlwdGlvbj0iIg0KKQ0KDQpwcmludCgiR3JhZGlvIHN0YXJ0ZWQgc3VjY2Vzc2Z1bGx5Li4uLiIpDQoNCg0KaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoNCiAgICBpZmFjZS5sYXVuY2goc2VydmVyX25hbWU9IjAuMC4wLjAiLCBzZXJ2ZXJfcG9ydD04MDgwKQ0KDQoNCg0KDQog","leo1311"
